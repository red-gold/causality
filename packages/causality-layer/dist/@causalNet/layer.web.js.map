{"version":3,"sources":["webpack://@causalNet/layer/webpack/universalModuleDefinition","webpack://@causalNet/layer/webpack/bootstrap","webpack://@causalNet/layer/external \"causal-net.core\"","webpack://@causalNet/layer/external \"causal-net.utils\"","webpack://@causalNet/layer/external \"causal-net.storage\"","webpack://@causalNet/layer/./src/CausalNetLayers/dense.mixins.js","webpack://@causalNet/layer/./src/CausalNetLayers/causalNetLayers.js","webpack://@causalNet/layer/./src/CausalNetParameters/parameter.mixins.js","webpack://@causalNet/layer/./src/CausalNetParameters/parameterFunctor.mixins.js","webpack://@causalNet/layer/./src/CausalNetParameters/parameterFunctor.js","webpack://@causalNet/layer/./src/CausalNetParameters/causalNetParameters.js","webpack://@causalNet/layer/./src/CausalNetRunner/runner.mixins.js","webpack://@causalNet/layer/./src/CausalNetRunner/causalNetRunner.js","webpack://@causalNet/layer/./src/layerRunner.mixins.js","webpack://@causalNet/layer/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DenseLayerMixins","PipelineClass","dense","inputSize","outputSize","activator","nameGenerator","Name","Type","Parameters","Weight","Bias","Net","params","result","dot","add","trace","causalNetLayers","platform","mixWith","BaseTensor","DenseMixins","constructor","super","layerNames","layerType","newName","length","push","ParameterMixins","BaseParameterClass","PredictParameters","parameters","Predict","Error","EncodeParameters","Encode","DecodeParameters","Decode","predictParameters","encodeParameters","decodeParameters","ParameterSizes","parameterSizes","SaveModelDir","exportParameters","extractParamFromTensorDict","async","Array","from","param","data","[object Object]","fn","R","Traveller","isTensor","kVals","toPairs","res","k","val","mean","initParamSizesByLayers","layers","F","T","GetParamSize","compose","fromPairs","map","PredictSize","getIn","EncodeSize","DecodeSize","importParameters","paramObject","predictParamObject","encodeParamObject","decodeParamObject","SetOrInit","initPredict","parameterMapWithKey","keys","paramSize","paramValue","variable","randomNormal","asType","tensor","InitParameters","setOrInitParams","Storage","SaveDir","getFileList","fileName","replace","writeFile","JSON","stringify","strParams","readFile","parse","ParameterFunctorMixins","FunctorClass","isParameter","ifElse","is","all","Number","always","parameterObject","Res","subObject","parameterFunctor","BaseFunctor","causalNetParameters","StorageMixins","storage","parameterfunctor","CoreFunctor","indexDBStorage","RunnerMixins","BaseRunnerClass","NetParameters","netParameters","NetLayers","netLayers","runOpFlow","flow","OpsRunner","addIndex","reduce","__","node","idx","Parameter","Op","Args","shape","runOpLayer","net","runLayer","layerConfigure","layerParameters","Flow","tracing","traces","run","samples","pipeValue","PipeInput","lastLayer","layer","layerOutput","logger","debug","Predictor","predictLayers","PredictParametersLenses","Encoder","encodeLayers","EncodeParametersLenses","Decoder","decodeLayers","DecodeParametersLenses","causalNetRunner","LayerRunnerMixins","BasePipelineClass","LayerRunner","saveParams","loadParams","getSavedParamList","ParameterInitializer","parameterInitializer","setByConfig","pipelineConfig","Logger","groupBegin","Layers","groupEnd","runner","layerRunner","__webpack_exports__","parameter_mixins","parameterFunctor_mixins","runner_mixins","layerRunner_mixins"],"mappings":"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","file":"@causalNet/layer.web.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"causal-net.core\"), require(\"causal-net.utils\"), require(\"causal-net.storage\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"causal-net.core\", \"causal-net.utils\", \"causal-net.storage\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@causalNet/layer\"] = factory(require(\"causal-net.core\"), require(\"causal-net.utils\"), require(\"causal-net.storage\"));\n\telse\n\t\troot[\"@causalNet/layer\"] = factory(root[\"causal-net.core\"], root[\"causal-net.utils\"], root[\"causal-net.storage\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","const DenseLayerMixins = (PipelineClass)=> class extends PipelineClass{\n    /**\n     * Simple dense layer\n     * @param {Number} inputSize - size of net input\n     * @param {Number} outputSize - size of net output\n     * @param {String|Function} activator - activator function can be customed or get from built-in by string name\n     * @param {String} name - layer name, default by null\n     * @returns { Object } layer\n     */\n    dense(inputSize, outputSize, activator='sigmoid',name=null){\n        if(!name){\n            name = this.nameGenerator('dense');\n        }\n        return { \n            Name: name, Type: 'Layer',\n            Parameters: { Weight: [inputSize, outputSize], Bias: [outputSize] },\n            Net: (value, params)=>{\n                    let trace = {};\n                    let {Weight, Bias} = params;\n                    let result = value.dot(Weight).add(Bias);\n                    \n                    if(typeof \"activator\" === \"string\"){\n                        result = result[activator]();\n                    }\n                    else{\n                        result = activator(result);\n                    }   \n                    return { result, trace };\n                }\n            };\n    }\n};\nexport default DenseLayerMixins;","import { Tensor as BaseTensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { default as DenseMixins } from './dense.mixins';\n/**\n * This class provides common used layers which can be accessed via **causalNetLayers** instance.\n * { mixWith: [ LayerMixins, DenseMixins ] }\n * @class CausalNetLayers\n * @extends BaseTensor\n * @example\n * [EXAMPLE ../examples/dense.layer.js]\n */\nclass CausalNetLayers extends platform.mixWith(BaseTensor, \n    [ DenseMixins ] ){\n    constructor(){\n        super();\n        this.layerNames = [];\n    }\n    nameGenerator(layerType){\n        const layerIdx = this.layerNames.length; \n        let newName = layerType + '/' + layerIdx;\n        this.layerNames.push(newName);\n        return newName;\n    }\n}\n\nexport default new CausalNetLayers();","const ParameterMixins = (BaseParameterClass)=> class extends BaseParameterClass{ \n    \n    get PredictParameters(){\n        if(!this.parameters || !this.parameters.Predict){\n            throw Error('parameters is not set');\n        }\n        return this.parameters.Predict;\n    }\n    \n    get EncodeParameters(){\n        if(!this.parameters || !this.parameters.Encode){\n            throw Error('parameters is not set');\n        }\n        return this.parameters.Encode;\n    }\n    \n    get DecodeParameters(){\n        if(!this.parameters || !this.parameters.Decode){\n            throw Error('parameters is not set');\n        }\n        return this.parameters.Decode;\n    }\n    \n    set PredictParameters(predictParameters){\n        this.parameters = (this.parameters)? this.parameters: {};\n        this.parameters.Predict = predictParameters;\n    }\n    \n    set EncodeParameters(encodeParameters){\n        this.parameters = (this.parameters)? this.parameters: {};\n        this.parameters.Encode = encodeParameters;\n    }\n    \n    set DecodeParameters(decodeParameters){\n        this.parameters = (this.parameters)? this.parameters: {};\n        this.parameters.Decode = decodeParameters;\n    }\n\n    set ParameterSizes(parameterSizes){\n        this.parameterSizes = parameterSizes;\n    }\n\n    get ParameterSizes(){\n        if(!this.parameterSizes){\n            throw Error('parameterSizes is not set');\n        }\n        return this.parameterSizes;\n    }\n    \n    get SaveModelDir(){\n        return 'saveModel/';\n    }\n    \n    exportParameters(){\n        if(!this.parameters){\n            throw Error('parameter is not set');\n        }\n        return (async ()=>{\n            const Fn = async (param)=>(Array.from(await param.data()));\n            let params = await this.extractParamFromTensorDict(this.parameters, Fn);\n            return params;\n        })();\n    }\n\n    \n    async extractParamFromTensorDict(params, fn){\n        const R = this.R;\n        const Traveller = async (params, fn)=>{\n            if(this.isTensor(params)){\n                return await fn(params);\n            }\n            else{\n                let kVals = R.toPairs(params);\n                let res = {};\n                for(let [k, val] of kVals){\n                    res[k] = await Traveller(val, fn); \n                }\n                return res;\n            }\n        };\n        return await Traveller(params, fn);\n    }\n    \n    async parametersSummary(){\n        if(!this.parameters){\n            throw Error('parameter must be set');\n        }\n        const Fn = async (param)=>Array.from(await param.mean().data());\n        return await this.extractParamFromTensorDict(this.parameters, Fn);\n    }\n    \n    initParamSizesByLayers(layers){\n        const R = this.R, T = this.T, F = this.F;\n        const GetParamSize = R.compose(R.fromPairs, R.map(p=>[p.Name, p.Parameters]));\n        const PredictSize = GetParamSize(F.getIn(['Predict'], layers, []));\n        const EncodeSize  = GetParamSize(F.getIn(['Encode'], layers, []));\n        const DecodeSize  = GetParamSize(F.getIn(['Decode'], layers, [])); \n        this.ParameterSizes = {PredictSize, EncodeSize, DecodeSize};\n    }\n\n    importParameters(paramObject){\n        const T = this.T, F = this.F;\n        let predictParamObject = F.getIn(['Predict'], paramObject, {});\n        let encodeParamObject  = F.getIn(['Encode'], paramObject, {});\n        let decodeParamObject  = F.getIn(['Decode'], paramObject, {});\n        const { PredictSize, EncodeSize, DecodeSize } = this.ParameterSizes;\n        const SetOrInit = ( initPredict, paramObject )=>{\n                    return F.parameterMapWithKey((keys, paramSize)=>{\n                        let paramValue = this.F.getIn(keys, paramObject, null);\n                        if(paramValue === null){\n                            return T.variable(T.randomNormal(paramSize).asType('float32'));\n                        }\n                        else{\n                            return T.variable(T.tensor(paramValue, paramSize, 'float32'));\n                        }                        \n                    }, initPredict);\n                };\n        this.PredictParameters = SetOrInit( PredictSize, predictParamObject );\n        this.EncodeParameters  = SetOrInit( EncodeSize, encodeParamObject );\n        this.DecodeParameters  = SetOrInit( DecodeSize, decodeParamObject ); \n    }\n\n    InitParameters(paramObject={}){\n        return (layers)=>{\n            return this.setOrInitParams(layers, paramObject);\n        };\n    }\n\n    setOrInitParams(layers, paramObject){\n        this.initParamSizesByLayers(layers);\n        this.importParameters(paramObject);\n        return this;\n    }\n\n    async getSavedParamList(){\n        const Storage = this.Storage, SaveDir = this.SaveModelDir;\n        let fileList = await Storage.getFileList(SaveDir);\n        return fileList.map(fileName=>fileName.replace(SaveDir,''));\n    }\n\n    async saveParams(fileName){\n        const SaveDir = this.SaveModelDir;\n        const Storage = this.Storage;\n        let params = await this.exportParameters();\n        await Storage.writeFile(SaveDir + fileName, JSON.stringify(params));\n        return params;\n    }\n    async loadParams(fileName){\n        const Storage = this.Storage, SaveDir = this.SaveModelDir;\n        let strParams = await Storage.readFile(SaveDir+fileName);\n        let params = JSON.parse(strParams);\n        this.importParameters(params);\n        return this;\n    }\n};\n\nexport default ParameterMixins;","const ParameterFunctorMixins = (FunctorClass)=> class extends FunctorClass{ \n    isParameter(val){\n        const R = this.R;\n        return R.ifElse(R.is(Array), R.all(R.is(Number)), R.always(false))(val);\n    }\n    parameterMapWithKey(fn, parameterObject){\n        const R = this.R;\n        \n        const Res = (keys, subObject) => R.compose(R.fromPairs, \n                        R.map(([key, subObject])=>{\n                            if(this.isParameter(subObject)){\n                                return [key, fn([...keys, key], subObject)];\n                            }\n                            else{\n                                if(R.is(Object, subObject)){\n                                    return [key, Res([...keys, key], subObject)];\n                                }\n                                else{\n                                    return [key, subObject];\n                                }\n                            }\n                        }), R.toPairs)(subObject);\n        return Res([], parameterObject);\n    }        \n};\n\nexport default ParameterFunctorMixins;","import {Functor as BaseFunctor} from 'causal-net.core';\nimport {platform} from 'causal-net.utils';\nimport {default as ParameterFunctorMixins } from './parameterFunctor.mixins';\n\nclass ParameterFunctor extends platform.mixWith(BaseFunctor, [ ParameterFunctorMixins ] ){\n    constructor(){\n        super();\n    }\n}\n\nexport default new ParameterFunctor();","import { Tensor as BaseTensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { StorageMixins, indexDBStorage } from 'causal-net.storage';\nimport { default as ParameterMixins } from './parameter.mixins';\nimport { default as parameterfunctor } from './parameterFunctor';\n/**\n * This class is a standard implementation for model parameters which can be accessed via **causalNetParameters** instance\n * { mixWith: [StorageMixins, ParameterMixins] }\n * @class CausalNetParameters\n * @extends BaseTensor\n * @example\n * [EXAMPLE ../example/parameters.babel.js]\n */\nclass CausalNetParameters extends platform.mixWith(BaseTensor, [StorageMixins, ParameterMixins] ){\n    constructor(storage, parameterfunctor){\n        super();\n        this.parameters = null;\n        this.Storage = storage;\n        this.F = parameterfunctor;\n        this.R = this.F.CoreFunctor;\n    }\n}   \n\nexport default new CausalNetParameters(indexDBStorage, parameterfunctor);","/**\n * This RunnerMixins class provide methods for runner class.\n * @class RunnerMixins\n * @extends BaseRunnerClass\n */\nconst RunnerMixins = ( BaseRunnerClass )=> class extends BaseRunnerClass{\n    set NetParameters(parameters){\n        this.netParameters = parameters;\n    }\n    set NetLayers(netLayers){\n        this.netLayers = netLayers;\n    }\n    get NetParameters(){\n        if(!this.netParameters){\n            throw Error('netParameters is not set');\n        }\n        return this.netParameters;\n    }\n    get NetLayers(){\n        if(!this.netLayers){\n            throw Error('netLayers is not set');\n        }\n        return this.netLayers;\n    }\n    runOpFlow(value, flow, parameters){\n        const R = this.R;\n        const OpsRunner = R.addIndex(R.reduce)(R.__,{result: value, trace: {}}, flow);\n        var {result, trace} = OpsRunner(({result, trace}, node, idx)=>{\n            if(node.Parameter){\n                let params = parameters[node.Parameter];\n                result = result[node.Op](params, ...node.Args);\n            }\n            else{\n                result = result[node.Op](...node.Args);    \n            };\n            trace[idx] = result.shape;\n            return {result, trace};\n        });\n        return {result, trace};\n    }\n\n    runOpLayer(value, net, parameters){\n        let { result, trace } = net(value, parameters);\n        return {result, trace};\n    }\n    runLayer(value, layerConfigure, layerParameters){\n        const {Name, Type, Flow, Net} = layerConfigure;\n        if(Type === 'Tensor'){\n            let {result, trace} = this.runOpFlow(value, Flow, layerParameters);\n            return {[Name]: result, trace};\n        }   \n        else if(Type === 'Layer'){\n            let {result, trace} = this.runOpLayer(value, Net, layerParameters);\n            return {[Name]: result, trace};\n        }   \n        else{\n            throw Error('type must be either Layer or Tensor');\n        }\n    }\n\n    tracing(traces, name, trace){\n        if(traces){\n            traces.push({[name]: trace});\n        }\n    }\n    run(layers, samples, parameters, traces=null){\n        let pipeValue = {PipeInput: samples}, lastLayer = 'PipeInput';\n        for(let layer of layers){\n            let layerOutput = this.runLayer(pipeValue[lastLayer], layer, parameters[layer.Name]);\n            pipeValue[layer.Name] = layerOutput[layer.Name];\n            lastLayer = layer.Name;\n            this.tracing(traces, layer.Name, layerOutput.trace);\n        }\n        if(traces){\n            this.logger.debug({traces});\n        }\n        return pipeValue[lastLayer];\n    }\n\n    get Predictor(){\n        let predictLayers = this.NetLayers.Predict;\n        const PredictParametersLenses = ()=>this.NetParameters.PredictParameters;\n        return (samples)=>{\n            let predictParameters = PredictParametersLenses();\n            return this.run(predictLayers, samples, predictParameters);\n        };\n    }\n    get Encoder(){\n        let encodeLayers = this.NetLayers.Encode;\n        const EncodeParametersLenses = ()=>this.NetParameters.EncodeParameters;\n        return (samples)=>{\n            let encodeParameters = EncodeParametersLenses();\n            return this.run(encodeLayers, samples, encodeParameters);\n        };\n    }\n    get Decoder(){\n        let decodeLayers = this.NetLayers.Decode;\n        const DecodeParametersLenses = ()=>this.NetParameters.EncodeParameters;\n        return (samples)=>{\n            let decodeParameters = DecodeParametersLenses();\n            return this.run(decodeLayers, samples, decodeParameters);\n        };\n    }\n};\n\nexport default RunnerMixins;\n","import { Tensor as BaseTensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { default as RunnerMixins } from './runner.mixins';\n/**\n * This CausalNetRunner class provide net excecutor which is provided pipeline instance at **LayerRunner** attribute.\n * { mixWith: [ RunnerMixins ] }\n * @class CausalNetRunner\n * @extends BaseTensor\n * @example\n * [EXAMPLE ../examples/runner.mixins.babel.js]\n */\nclass CausalNetRunner extends platform.mixWith(BaseTensor, [ RunnerMixins ] ){\n    constructor(){\n        super();\n    }\n}\n\nexport default new CausalNetRunner();","/**\n * This mixin class provide attributes: **ParameterInitializer**, **LayerRunner**, \n * and handle **Net** setting of pipelineConfig \n * @class LayerRunnerMixins\n * @extends BasePipelineClass\n * @example\n * [EXAMPLE ../examples/layerRunner.mixins.babel.js]\n */\nconst LayerRunnerMixins = (BasePipelineClass)=> class extends BasePipelineClass{\n    async saveParams(fileName){\n        await this.LayerRunner.NetParameters.saveParams(fileName);\n        return this;\n    }\n    async loadParams(fileName){\n        this.LayerRunner.NetParameters = await this.LayerRunner.NetParameters.loadParams(fileName);\n        return this;\n    }\n\n    async getSavedParamList(){\n        return await this.LayerRunner.NetParameters.getSavedParamList();\n    }\n\n    get ParameterInitializer(){\n        if(!this.parameterInitializer){\n            throw Error('ParameterInitializer is not set');\n        }\n        return this.parameterInitializer;\n    }\n\n    set ParameterInitializer(parameterInitializer){\n        this.parameterInitializer = parameterInitializer;\n    }\n\n\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set LayerRunner by config');\n        const { Net } = pipelineConfig;\n        const { Layers, Parameters } = Net; \n        this.LayerRunner.NetLayers = Layers;\n        this.ParameterInitializer = Parameters;       \n        this.LayerRunner.NetParameters = this.ParameterInitializer(Layers);\n        this.Logger.groupEnd();\n    }\n\n    set LayerRunner(runner){\n        this.layerRunner = runner;\n    }\n    get LayerRunner(){\n        if(!this.layerRunner){\n            throw Error('layerRunner is not set');\n        }\n        return this.layerRunner;\n    }\n};\n\nexport default LayerRunnerMixins;","export { causalNetLayers } from './CausalNetLayers/index';\nexport { causalNetParameters, ParameterMixins, ParameterFunctorMixins } from './CausalNetParameters/index';\nexport { causalNetRunner, RunnerMixins } from './CausalNetRunner/index';\nexport { default as LayerRunnerMixins } from './layerRunner.mixins';\n"],"sourceRoot":""}