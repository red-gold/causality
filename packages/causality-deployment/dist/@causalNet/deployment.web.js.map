{"version":3,"sources":["webpack://@causalNet/deployment/webpack/universalModuleDefinition","webpack://@causalNet/deployment/webpack/bootstrap","webpack://@causalNet/deployment/external \"causal-net.core\"","webpack://@causalNet/deployment/external \"causal-net.utils\"","webpack://@causalNet/deployment/./src/functor.js","webpack://@causalNet/deployment/./src/causalNetDeployment.js","webpack://@causalNet/deployment/./src/deployment.mixins.js","webpack://@causalNet/deployment/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","functor","Functor","causalNetDeployment","platform","mixWith","Event","constructor","super","F","R","CoreFunctor","Emitter","emitter","deployEmitter","Error","Listener","listener","deployListener","on","infer","Inferencer","inferencer","deployInferencer","async","inferValue","emitValue","emit","EnsembleInferencer","ensembleInferencer","deployEnsembleInferencer","[object Object]","Promise","resolve","reject","counter","DeploymentMixins","BasePipelineClass","Deployment","deployment","ModelLenses","Model","T","Predict","Encode","Decode","input","inputTensor","tensor","asType","reshape","predictTensor","data","encodeTensor","decodeTensor","setByConfig","pipelineConfig","Logger","groupBegin","groupEnd","deploy","__webpack_exports__","deployment_mixins"],"mappings":"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","file":"@causalNet/deployment.web.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"causal-net.core\"), require(\"causal-net.utils\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"causal-net.core\", \"causal-net.utils\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@causalNet/deployment\"] = factory(require(\"causal-net.core\"), require(\"causal-net.utils\"));\n\telse\n\t\troot[\"@causalNet/deployment\"] = factory(root[\"causal-net.core\"], root[\"causal-net.utils\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import { Functor } from 'causal-net.core';\nexport default new Functor();","import { Event } from 'causal-net.core';\nimport { default as functor } from './functor';\nimport { platform, assert } from 'causal-net.utils';\n\nclass CausalNetDeployment extends platform.mixWith( Event, [] ){\n    \n    constructor(functor){\n        super();\n        this.F = functor;\n        this.R = functor.CoreFunctor;\n    }\n\n    set Emitter(emitter){\n        this.deployEmitter = emitter;\n    }\n\n    get Emitter(){\n        if(!this.deployEmitter){\n            throw Error('Emitter is not set');\n        }\n        return this.deployEmitter;\n    }\n\n    set Listener(listener){\n        this.deployListener = listener;\n        this.on('inferencer', (infer)=>{\n            this.deployListener(infer);\n        });\n        this.on('ensembleInferencer', (infer)=>{\n            this.deployListener(infer);\n        });\n    }\n    \n    get Listener(){\n        if(!this.deployListener){\n            throw Error('Listener is not set');\n        }\n        return this.deployListener;\n    }\n\n    set Inferencer(inferencer){\n        this.deployInferencer = inferencer;\n        this.on('emitter', async (emitValue)=>{\n            let inferValue = await this.deployInferencer(emitValue);\n            if(inferValue && inferValue !== {}){\n                this.emit('inferencer', inferValue);\n            }\n        });\n    }\n\n    get Inferencer(){\n        if(!this.deployInferencer){\n            throw Error('Inferencer is not set');\n        }\n        return this.deployInferencer;\n    }\n\n    set EnsembleInferencer(ensembleInferencer){\n        \n        this.deployEnsembleInferencer = ensembleInferencer;\n        this.on('emitter', async (emitValue)=>{\n            let inferValue = await this.deployEnsembleInferencer(emitValue);\n            if(inferValue && inferValue !== {}){\n                this.emit('ensembleInferencer', inferValue);\n            }\n        });\n    }\n\n    get EnsembleInferencer(){\n        if(!this.deployEnsembleInferencer){\n            throw Error('EnsembleInferencer is not set');\n        }\n        return this.deployEnsembleInferencer;\n    }\n\n    async deploy(){\n        return new Promise(async (resolve, reject)=>{\n            let counter = 0;\n            let emitValue = await this.Emitter();\n            while(emitValue !== null){\n                this.emit('emitter', emitValue);\n                counter += 1;\n                emitValue = await this.Emitter();\n            }\n            resolve(counter);\n        });\n    }\n}\n\nexport default new CausalNetDeployment(functor);","const DeploymentMixins = (BasePipelineClass)=> class extends BasePipelineClass {\n   \n    set Deployment(deployment){\n        this.deployment = deployment;\n    }\n\n    get Deployment(){\n        if(!this.deployment){\n            throw Error('deployment is not set');\n        }\n        return this.deployment;\n    }\n\n    get Inferencer(){\n        const ModelLenses = ()=>{\n            return this.Model;\n        };\n        const T = this.T;\n        return async (input)=>{\n            let { Predict, Encode, Decode } = input;\n            let infer = {};\n            const Model = ModelLenses();\n            if(Predict){\n                let inputTensor = T.tensor(Predict).asType('float32').reshape([1, -1]);\n                let predictTensor = Model.Predict(inputTensor);\n                infer.Predict = await predictTensor.data();\n            }\n            if(Encode){\n                let inputTensor = T.tensor(Encode).asType('float32').reshape([1, -1]);\n                let encodeTensor = Model.Encode(inputTensor);\n                infer.Encode = await encodeTensor.data();\n            }\n            if(Decode){\n                let inputTensor = T.tensor(Decode).asType('float32').reshape([1, -1]);\n                let decodeTensor = Model.Encode(inputTensor);\n                infer.Decode = await decodeTensor.data();\n            }\n            return infer;\n        };\n    }\n\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set deployment by config');\n        const { Emitter, Listener } = pipelineConfig.Deployment;\n        this.Deployment.Emitter = Emitter;\n        this.Deployment.Listener = Listener;\n        this.Deployment.Inferencer = this.Inferencer;\n        this.Logger.groupEnd();\n        return pipelineConfig;\n    }\n\n    async deploy(){\n        return await this.Deployment.deploy();\n    }\n};\n\nexport default DeploymentMixins;","export { default as causalNetDeployment } from './causalNetDeployment';\nexport { default as DeploymentMixins } from './deployment.mixins';"],"sourceRoot":""}