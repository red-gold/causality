(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["@causalNet/memcache"] = factory();
	else
		root["@causalNet/memcache"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!*******************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "../../node_modules/abstract-leveldown/abstract-chained-batch.js":
/*!****************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/abstract-leveldown/abstract-chained-batch.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2017 Rod Vagg, MIT License */

function AbstractChainedBatch (db) {
  this._db = db
  this._operations = []
  this._written = false
}

AbstractChainedBatch.prototype._serializeKey = function (key) {
  return this._db._serializeKey(key)
}

AbstractChainedBatch.prototype._serializeValue = function (value) {
  return this._db._serializeValue(value)
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written) {
    throw new Error('write() already called on this batch')
  }
}

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten()

  var err = this._db._checkKey(key, 'key')
  if (err) { throw err }

  key = this._serializeKey(key)
  value = this._serializeValue(value)

  this._put(key, value)

  return this
}

AbstractChainedBatch.prototype._put = function (key, value) {
  this._operations.push({ type: 'put', key: key, value: value })
}

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten()

  var err = this._db._checkKey(key, 'key')
  if (err) { throw err }

  key = this._serializeKey(key)
  this._del(key)

  return this
}

AbstractChainedBatch.prototype._del = function (key) {
  this._operations.push({ type: 'del', key: key })
}

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten()
  this._operations = []
  this._clear()

  return this
}

AbstractChainedBatch.prototype._clear = function noop () {}

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten()

  if (typeof options === 'function') { callback = options }
  if (typeof callback !== 'function') {
    throw new Error('write() requires a callback argument')
  }
  if (typeof options !== 'object') { options = {} }

  this._written = true

  // @ts-ignore
  if (typeof this._write === 'function') { return this._write(callback) }

  if (typeof this._db._batch === 'function') {
    return this._db._batch(this._operations, options, callback)
  }

  process.nextTick(callback)
}

module.exports = AbstractChainedBatch

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/abstract-leveldown/abstract-iterator.js":
/*!***********************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/abstract-leveldown/abstract-iterator.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2017 Rod Vagg, MIT License */

function AbstractIterator (db) {
  this.db = db
  this._ended = false
  this._nexting = false
}

AbstractIterator.prototype.next = function (callback) {
  var self = this

  if (typeof callback !== 'function') {
    throw new Error('next() requires a callback argument')
  }

  if (self._ended) {
    process.nextTick(callback, new Error('cannot call next() after end()'))
    return self
  }

  if (self._nexting) {
    process.nextTick(callback, new Error('cannot call next() before previous next() has completed'))
    return self
  }

  self._nexting = true
  self._next(function () {
    self._nexting = false
    callback.apply(null, arguments)
  })

  return self
}

AbstractIterator.prototype._next = function (callback) {
  process.nextTick(callback)
}

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback !== 'function') {
    throw new Error('end() requires a callback argument')
  }

  if (this._ended) {
    return process.nextTick(callback, new Error('end() already called on iterator'))
  }

  this._ended = true
  this._end(callback)
}

AbstractIterator.prototype._end = function (callback) {
  process.nextTick(callback)
}

module.exports = AbstractIterator

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/abstract-leveldown/abstract-leveldown.js":
/*!************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/abstract-leveldown/abstract-leveldown.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer) {/* Copyright (c) 2017 Rod Vagg, MIT License */

var xtend = __webpack_require__(/*! xtend */ "../../node_modules/xtend/immutable.js")
var AbstractIterator = __webpack_require__(/*! ./abstract-iterator */ "../../node_modules/abstract-leveldown/abstract-iterator.js")
var AbstractChainedBatch = __webpack_require__(/*! ./abstract-chained-batch */ "../../node_modules/abstract-leveldown/abstract-chained-batch.js")
var hasOwnProperty = Object.prototype.hasOwnProperty
var rangeOptions = 'start end gt gte lt lte'.split(' ')

function AbstractLevelDOWN (location) {
  if (!arguments.length || location === undefined) {
    throw new Error('constructor requires at least a location argument')
  }

  if (typeof location !== 'string') {
    throw new Error('constructor requires a location string argument')
  }

  this.location = location
  this.status = 'new'
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  var self = this
  var oldStatus = this.status

  if (typeof options === 'function') { callback = options }

  if (typeof callback !== 'function') {
    throw new Error('open() requires a callback argument')
  }

  if (typeof options !== 'object') { options = {} }

  options.createIfMissing = options.createIfMissing !== false
  options.errorIfExists = !!options.errorIfExists

  this.status = 'opening'
  this._open(options, function (err) {
    if (err) {
      self.status = oldStatus
      return callback(err)
    }
    self.status = 'open'
    callback()
  })
}

AbstractLevelDOWN.prototype._open = function (options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.close = function (callback) {
  var self = this
  var oldStatus = this.status

  if (typeof callback !== 'function') {
    throw new Error('close() requires a callback argument')
  }

  this.status = 'closing'
  this._close(function (err) {
    if (err) {
      self.status = oldStatus
      return callback(err)
    }
    self.status = 'closed'
    callback()
  })
}

AbstractLevelDOWN.prototype._close = function (callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  if (typeof options === 'function') { callback = options }

  if (typeof callback !== 'function') {
    throw new Error('get() requires a callback argument')
  }

  var err = this._checkKey(key, 'key')
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)

  if (typeof options !== 'object') { options = {} }

  options.asBuffer = options.asBuffer !== false

  this._get(key, options, callback)
}

AbstractLevelDOWN.prototype._get = function (key, options, callback) {
  process.nextTick(function () { callback(new Error('NotFound')) })
}

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  if (typeof options === 'function') { callback = options }

  if (typeof callback !== 'function') {
    throw new Error('put() requires a callback argument')
  }

  var err = this._checkKey(key, 'key')
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)
  value = this._serializeValue(value)

  if (typeof options !== 'object') { options = {} }

  this._put(key, value, options, callback)
}

AbstractLevelDOWN.prototype._put = function (key, value, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  if (typeof options === 'function') { callback = options }

  if (typeof callback !== 'function') {
    throw new Error('del() requires a callback argument')
  }

  var err = this._checkKey(key, 'key')
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)

  if (typeof options !== 'object') { options = {} }

  this._del(key, options, callback)
}

AbstractLevelDOWN.prototype._del = function (key, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length) { return this._chainedBatch() }

  if (typeof options === 'function') { callback = options }

  if (typeof array === 'function') { callback = array }

  if (typeof callback !== 'function') {
    throw new Error('batch(array) requires a callback argument')
  }

  if (!Array.isArray(array)) {
    return process.nextTick(callback, new Error('batch(array) requires an array argument'))
  }

  if (!options || typeof options !== 'object') { options = {} }

  var serialized = new Array(array.length)

  for (var i = 0; i < array.length; i++) {
    if (typeof array[i] !== 'object' || array[i] === null) {
      return process.nextTick(callback, new Error('batch(array) element must be an object and not `null`'))
    }

    var e = xtend(array[i])

    if (e.type !== 'put' && e.type !== 'del') {
      return process.nextTick(callback, new Error("`type` must be 'put' or 'del'"))
    }

    var err = this._checkKey(e.key, 'key')
    if (err) return process.nextTick(callback, err)

    e.key = this._serializeKey(e.key)

    if (e.type === 'put') { e.value = this._serializeValue(e.value) }

    serialized[i] = e
  }

  this._batch(serialized, options, callback)
}

AbstractLevelDOWN.prototype._batch = function (array, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  options = cleanRangeOptions(options)

  options.reverse = !!options.reverse
  options.keys = options.keys !== false
  options.values = options.values !== false
  options.limit = 'limit' in options ? options.limit : -1
  options.keyAsBuffer = options.keyAsBuffer !== false
  options.valueAsBuffer = options.valueAsBuffer !== false

  return options
}

function cleanRangeOptions (options) {
  var result = {}

  for (var k in options) {
    if (!hasOwnProperty.call(options, k)) continue
    if (isRangeOption(k) && isEmptyRangeOption(options[k])) continue

    result[k] = options[k]
  }

  return result
}

function isRangeOption (k) {
  return rangeOptions.indexOf(k) !== -1
}

function isEmptyRangeOption (v) {
  return v === '' || v == null || isEmptyBuffer(v)
}

function isEmptyBuffer (v) {
  return Buffer.isBuffer(v) && v.length === 0
}

AbstractLevelDOWN.prototype.iterator = function (options) {
  if (typeof options !== 'object') { options = {} }
  options = this._setupIteratorOptions(options)
  return this._iterator(options)
}

AbstractLevelDOWN.prototype._iterator = function (options) {
  return new AbstractIterator(this)
}

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this)
}

AbstractLevelDOWN.prototype._serializeKey = function (key) {
  return Buffer.isBuffer(key) ? key : String(key)
}

AbstractLevelDOWN.prototype._serializeValue = function (value) {
  if (value == null) return ''
  return Buffer.isBuffer(value) || process.browser ? value : String(value)
}

AbstractLevelDOWN.prototype._checkKey = function (obj, type) {
  if (obj === null || obj === undefined) {
    return new Error(type + ' cannot be `null` or `undefined`')
  }

  if (Buffer.isBuffer(obj) && obj.length === 0) {
    return new Error(type + ' cannot be an empty Buffer')
  }

  if (String(obj) === '') {
    return new Error(type + ' cannot be an empty String')
  }
}

module.exports = AbstractLevelDOWN

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "../../node_modules/process/browser.js"), __webpack_require__(/*! ./../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/abstract-leveldown/index.js":
/*!***********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/abstract-leveldown/index.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.AbstractLevelDOWN = __webpack_require__(/*! ./abstract-leveldown */ "../../node_modules/abstract-leveldown/abstract-leveldown.js")
exports.AbstractIterator = __webpack_require__(/*! ./abstract-iterator */ "../../node_modules/abstract-leveldown/abstract-iterator.js")
exports.AbstractChainedBatch = __webpack_require__(/*! ./abstract-chained-batch */ "../../node_modules/abstract-leveldown/abstract-chained-batch.js")


/***/ }),

/***/ "../../node_modules/assert/assert.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/assert/assert.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(/*! util/ */ "../../node_modules/util/util.js");
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/base64-js/index.js":
/*!**************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/base64-js/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "../../node_modules/buffer/index.js":
/*!***********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/buffer/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "../../node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "../../node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "../../node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/deferred-leveldown/deferred-iterator.js":
/*!***********************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/deferred-iterator.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var AbstractIterator = __webpack_require__(/*! abstract-leveldown */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/index.js").AbstractIterator
var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")

function DeferredIterator (options) {
  AbstractIterator.call(this, options)

  this._options = options
  this._iterator = null
  this._operations = []
}

inherits(DeferredIterator, AbstractIterator)

DeferredIterator.prototype.setDb = function (db) {
  var it = this._iterator = db.iterator(this._options)
  this._operations.forEach(function (op) {
    it[op.method].apply(it, op.args)
  })
}

DeferredIterator.prototype._operation = function (method, args) {
  if (this._iterator) return this._iterator[method].apply(this._iterator, args)
  this._operations.push({ method: method, args: args })
}

'next end'.split(' ').forEach(function (m) {
  DeferredIterator.prototype['_' + m] = function () {
    this._operation(m, arguments)
  }
})

module.exports = DeferredIterator


/***/ }),

/***/ "../../node_modules/deferred-leveldown/deferred-leveldown.js":
/*!************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/deferred-leveldown.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var AbstractLevelDOWN = __webpack_require__(/*! abstract-leveldown */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/index.js").AbstractLevelDOWN
var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")
var DeferredIterator = __webpack_require__(/*! ./deferred-iterator */ "../../node_modules/deferred-leveldown/deferred-iterator.js")
var deferrables = 'put get del batch'.split(' ')

function DeferredLevelDOWN (db) {
  AbstractLevelDOWN.call(this, '')
  this._db = db
  this._operations = []
  this._iterators = []
  closed(this)
}

inherits(DeferredLevelDOWN, AbstractLevelDOWN)

DeferredLevelDOWN.prototype._open = function (options, callback) {
  var self = this

  this._db.open(options, function (err) {
    if (err) return callback(err)

    self._operations.forEach(function (op) {
      self._db[op.method].apply(self._db, op.args)
    })
    self._operations = []
    self._iterators.forEach(function (it) {
      it.setDb(self._db)
    })
    self._iterators = []
    open(self)
    callback()
  })
}

DeferredLevelDOWN.prototype._close = function (callback) {
  var self = this

  this._db.close(function (err) {
    if (err) return callback(err)
    closed(self)
    callback()
  })
}

function open (self) {
  deferrables.concat('iterator').forEach(function (m) {
    self['_' + m] = function () {
      return this._db[m].apply(this._db, arguments)
    }
  })
  if (self._db.approximateSize) {
    self.approximateSize = function () {
      return this._db.approximateSize.apply(this._db, arguments)
    }
  }
}

function closed (self) {
  deferrables.forEach(function (m) {
    self['_' + m] = function () {
      this._operations.push({ method: m, args: arguments })
    }
  })
  if (typeof self._db.approximateSize === 'function') {
    self.approximateSize = function () {
      this._operations.push({
        method: 'approximateSize',
        args: arguments
      })
    }
  }
  self._iterator = function (options) {
    var it = new DeferredIterator(options)
    this._iterators.push(it)
    return it
  }
}

DeferredLevelDOWN.prototype._serializeKey = function (key) {
  return key
}

DeferredLevelDOWN.prototype._serializeValue = function (value) {
  return value
}

module.exports = DeferredLevelDOWN
module.exports.DeferredIterator = DeferredIterator


/***/ }),

/***/ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-chained-batch.js":
/*!************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-chained-batch.js ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function AbstractChainedBatch (db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store')
  }

  this.db = db
  this._operations = []
  this._written = false
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written) {
    throw new Error('write() already called on this batch')
  }
}

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten()

  var err = this.db._checkKey(key) || this.db._checkValue(value)
  if (err) throw err

  key = this.db._serializeKey(key)
  value = this.db._serializeValue(value)

  this._put(key, value)

  return this
}

AbstractChainedBatch.prototype._put = function (key, value) {
  this._operations.push({ type: 'put', key: key, value: value })
}

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten()

  var err = this.db._checkKey(key)
  if (err) throw err

  key = this.db._serializeKey(key)
  this._del(key)

  return this
}

AbstractChainedBatch.prototype._del = function (key) {
  this._operations.push({ type: 'del', key: key })
}

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten()
  this._clear()

  return this
}

AbstractChainedBatch.prototype._clear = function () {
  this._operations = []
}

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten()

  if (typeof options === 'function') { callback = options }
  if (typeof callback !== 'function') {
    throw new Error('write() requires a callback argument')
  }
  if (typeof options !== 'object' || options === null) {
    options = {}
  }

  this._written = true
  this._write(options, callback)
}

AbstractChainedBatch.prototype._write = function (options, callback) {
  this.db._batch(this._operations, options, callback)
}

module.exports = AbstractChainedBatch


/***/ }),

/***/ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-iterator.js":
/*!*******************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-iterator.js ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {function AbstractIterator (db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store')
  }

  this.db = db
  this._ended = false
  this._nexting = false
}

AbstractIterator.prototype.next = function (callback) {
  var self = this

  if (typeof callback !== 'function') {
    throw new Error('next() requires a callback argument')
  }

  if (self._ended) {
    process.nextTick(callback, new Error('cannot call next() after end()'))
    return self
  }

  if (self._nexting) {
    process.nextTick(callback, new Error('cannot call next() before previous next() has completed'))
    return self
  }

  self._nexting = true
  self._next(function () {
    self._nexting = false
    callback.apply(null, arguments)
  })

  return self
}

AbstractIterator.prototype._next = function (callback) {
  process.nextTick(callback)
}

AbstractIterator.prototype.seek = function (target) {
  if (this._ended) {
    throw new Error('cannot call seek() after end()')
  }
  if (this._nexting) {
    throw new Error('cannot call seek() before next() has completed')
  }

  target = this.db._serializeKey(target)
  this._seek(target)
}

AbstractIterator.prototype._seek = function (target) {}

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback !== 'function') {
    throw new Error('end() requires a callback argument')
  }

  if (this._ended) {
    return process.nextTick(callback, new Error('end() already called on iterator'))
  }

  this._ended = true
  this._end(callback)
}

AbstractIterator.prototype._end = function (callback) {
  process.nextTick(callback)
}

module.exports = AbstractIterator

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-leveldown.js":
/*!********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-leveldown.js ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer) {var xtend = __webpack_require__(/*! xtend */ "../../node_modules/xtend/immutable.js")
var AbstractIterator = __webpack_require__(/*! ./abstract-iterator */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-iterator.js")
var AbstractChainedBatch = __webpack_require__(/*! ./abstract-chained-batch */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-chained-batch.js")
var hasOwnProperty = Object.prototype.hasOwnProperty
var rangeOptions = 'start end gt gte lt lte'.split(' ')

function AbstractLevelDOWN () {
  this.status = 'new'
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  var self = this
  var oldStatus = this.status

  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('open() requires a callback argument')
  }

  if (typeof options !== 'object' || options === null) options = {}

  options.createIfMissing = options.createIfMissing !== false
  options.errorIfExists = !!options.errorIfExists

  this.status = 'opening'
  this._open(options, function (err) {
    if (err) {
      self.status = oldStatus
      return callback(err)
    }
    self.status = 'open'
    callback()
  })
}

AbstractLevelDOWN.prototype._open = function (options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.close = function (callback) {
  var self = this
  var oldStatus = this.status

  if (typeof callback !== 'function') {
    throw new Error('close() requires a callback argument')
  }

  this.status = 'closing'
  this._close(function (err) {
    if (err) {
      self.status = oldStatus
      return callback(err)
    }
    self.status = 'closed'
    callback()
  })
}

AbstractLevelDOWN.prototype._close = function (callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('get() requires a callback argument')
  }

  var err = this._checkKey(key)
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)

  if (typeof options !== 'object' || options === null) options = {}

  options.asBuffer = options.asBuffer !== false

  this._get(key, options, callback)
}

AbstractLevelDOWN.prototype._get = function (key, options, callback) {
  process.nextTick(function () { callback(new Error('NotFound')) })
}

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('put() requires a callback argument')
  }

  var err = this._checkKey(key) || this._checkValue(value)
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)
  value = this._serializeValue(value)

  if (typeof options !== 'object' || options === null) options = {}

  this._put(key, value, options, callback)
}

AbstractLevelDOWN.prototype._put = function (key, value, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('del() requires a callback argument')
  }

  var err = this._checkKey(key)
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)

  if (typeof options !== 'object' || options === null) options = {}

  this._del(key, options, callback)
}

AbstractLevelDOWN.prototype._del = function (key, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length) return this._chainedBatch()

  if (typeof options === 'function') callback = options

  if (typeof array === 'function') callback = array

  if (typeof callback !== 'function') {
    throw new Error('batch(array) requires a callback argument')
  }

  if (!Array.isArray(array)) {
    return process.nextTick(callback, new Error('batch(array) requires an array argument'))
  }

  if (typeof options !== 'object' || options === null) options = {}

  var serialized = new Array(array.length)

  for (var i = 0; i < array.length; i++) {
    if (typeof array[i] !== 'object' || array[i] === null) {
      return process.nextTick(callback, new Error('batch(array) element must be an object and not `null`'))
    }

    var e = xtend(array[i])

    if (e.type !== 'put' && e.type !== 'del') {
      return process.nextTick(callback, new Error("`type` must be 'put' or 'del'"))
    }

    var err = this._checkKey(e.key)
    if (err) return process.nextTick(callback, err)

    e.key = this._serializeKey(e.key)

    if (e.type === 'put') {
      var valueErr = this._checkValue(e.value)
      if (valueErr) return process.nextTick(callback, valueErr)

      e.value = this._serializeValue(e.value)
    }

    serialized[i] = e
  }

  this._batch(serialized, options, callback)
}

AbstractLevelDOWN.prototype._batch = function (array, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  options = cleanRangeOptions(this, options)

  options.reverse = !!options.reverse
  options.keys = options.keys !== false
  options.values = options.values !== false
  options.limit = 'limit' in options ? options.limit : -1
  options.keyAsBuffer = options.keyAsBuffer !== false
  options.valueAsBuffer = options.valueAsBuffer !== false

  return options
}

function cleanRangeOptions (db, options) {
  var result = {}

  for (var k in options) {
    if (!hasOwnProperty.call(options, k)) continue

    var opt = options[k]

    if (isRangeOption(k)) {
      // Note that we don't reject nullish and empty options here. While
      // those types are invalid as keys, they are valid as range options.
      opt = db._serializeKey(opt)
    }

    result[k] = opt
  }

  return result
}

function isRangeOption (k) {
  return rangeOptions.indexOf(k) !== -1
}

AbstractLevelDOWN.prototype.iterator = function (options) {
  if (typeof options !== 'object' || options === null) options = {}
  options = this._setupIteratorOptions(options)
  return this._iterator(options)
}

AbstractLevelDOWN.prototype._iterator = function (options) {
  return new AbstractIterator(this)
}

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this)
}

AbstractLevelDOWN.prototype._serializeKey = function (key) {
  return key
}

AbstractLevelDOWN.prototype._serializeValue = function (value) {
  return value
}

AbstractLevelDOWN.prototype._checkKey = function (key) {
  if (key === null || key === undefined) {
    return new Error('key cannot be `null` or `undefined`')
  } else if (Buffer.isBuffer(key) && key.length === 0) {
    return new Error('key cannot be an empty Buffer')
  } else if (key === '') {
    return new Error('key cannot be an empty String')
  } else if (Array.isArray(key) && key.length === 0) {
    return new Error('key cannot be an empty Array')
  }
}

AbstractLevelDOWN.prototype._checkValue = function (value) {
  if (value === null || value === undefined) {
    return new Error('value cannot be `null` or `undefined`')
  }
}

module.exports = AbstractLevelDOWN

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "../../node_modules/process/browser.js"), __webpack_require__(/*! ./../../../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/index.js":
/*!*******************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/node_modules/abstract-leveldown/index.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.AbstractLevelDOWN = __webpack_require__(/*! ./abstract-leveldown */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-leveldown.js")
exports.AbstractIterator = __webpack_require__(/*! ./abstract-iterator */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-iterator.js")
exports.AbstractChainedBatch = __webpack_require__(/*! ./abstract-chained-batch */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-chained-batch.js")


/***/ }),

/***/ "../../node_modules/errno/custom.js":
/*!***********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/errno/custom.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var prr = __webpack_require__(/*! prr */ "../../node_modules/prr/prr.js")

function init (type, message, cause) {
  if (!!message && typeof message != 'string') {
    message = message.message || message.name
  }
  prr(this, {
      type    : type
    , name    : type
      // can be passed just a 'cause'
    , cause   : typeof message != 'string' ? message : cause
    , message : message
  }, 'ewr')
}

// generic prototype, not intended to be actually used - helpful for `instanceof`
function CustomError (message, cause) {
  Error.call(this)
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, this.constructor)
  init.call(this, 'CustomError', message, cause)
}

CustomError.prototype = new Error()

function createError (errno, type, proto) {
  var err = function (message, cause) {
    init.call(this, type, message, cause)
    //TODO: the specificity here is stupid, errno should be available everywhere
    if (type == 'FilesystemError') {
      this.code    = this.cause.code
      this.path    = this.cause.path
      this.errno   = this.cause.errno
      this.message =
        (errno.errno[this.cause.errno]
          ? errno.errno[this.cause.errno].description
          : this.cause.message)
        + (this.cause.path ? ' [' + this.cause.path + ']' : '')
    }
    Error.call(this)
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, err)
  }
  err.prototype = !!proto ? new proto() : new CustomError()
  return err
}

module.exports = function (errno) {
  var ce = function (type, proto) {
    return createError(errno, type, proto)
  }
  return {
      CustomError     : CustomError
    , FilesystemError : ce('FilesystemError')
    , createError     : ce
  }
}


/***/ }),

/***/ "../../node_modules/errno/errno.js":
/*!**********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/errno/errno.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var all = module.exports.all = [
  {
    errno: -2,
    code: 'ENOENT',
    description: 'no such file or directory'
  },
  {
    errno: -1,
    code: 'UNKNOWN',
    description: 'unknown error'
  },
  {
    errno: 0,
    code: 'OK',
    description: 'success'
  },
  {
    errno: 1,
    code: 'EOF',
    description: 'end of file'
  },
  {
    errno: 2,
    code: 'EADDRINFO',
    description: 'getaddrinfo error'
  },
  {
    errno: 3,
    code: 'EACCES',
    description: 'permission denied'
  },
  {
    errno: 4,
    code: 'EAGAIN',
    description: 'resource temporarily unavailable'
  },
  {
    errno: 5,
    code: 'EADDRINUSE',
    description: 'address already in use'
  },
  {
    errno: 6,
    code: 'EADDRNOTAVAIL',
    description: 'address not available'
  },
  {
    errno: 7,
    code: 'EAFNOSUPPORT',
    description: 'address family not supported'
  },
  {
    errno: 8,
    code: 'EALREADY',
    description: 'connection already in progress'
  },
  {
    errno: 9,
    code: 'EBADF',
    description: 'bad file descriptor'
  },
  {
    errno: 10,
    code: 'EBUSY',
    description: 'resource busy or locked'
  },
  {
    errno: 11,
    code: 'ECONNABORTED',
    description: 'software caused connection abort'
  },
  {
    errno: 12,
    code: 'ECONNREFUSED',
    description: 'connection refused'
  },
  {
    errno: 13,
    code: 'ECONNRESET',
    description: 'connection reset by peer'
  },
  {
    errno: 14,
    code: 'EDESTADDRREQ',
    description: 'destination address required'
  },
  {
    errno: 15,
    code: 'EFAULT',
    description: 'bad address in system call argument'
  },
  {
    errno: 16,
    code: 'EHOSTUNREACH',
    description: 'host is unreachable'
  },
  {
    errno: 17,
    code: 'EINTR',
    description: 'interrupted system call'
  },
  {
    errno: 18,
    code: 'EINVAL',
    description: 'invalid argument'
  },
  {
    errno: 19,
    code: 'EISCONN',
    description: 'socket is already connected'
  },
  {
    errno: 20,
    code: 'EMFILE',
    description: 'too many open files'
  },
  {
    errno: 21,
    code: 'EMSGSIZE',
    description: 'message too long'
  },
  {
    errno: 22,
    code: 'ENETDOWN',
    description: 'network is down'
  },
  {
    errno: 23,
    code: 'ENETUNREACH',
    description: 'network is unreachable'
  },
  {
    errno: 24,
    code: 'ENFILE',
    description: 'file table overflow'
  },
  {
    errno: 25,
    code: 'ENOBUFS',
    description: 'no buffer space available'
  },
  {
    errno: 26,
    code: 'ENOMEM',
    description: 'not enough memory'
  },
  {
    errno: 27,
    code: 'ENOTDIR',
    description: 'not a directory'
  },
  {
    errno: 28,
    code: 'EISDIR',
    description: 'illegal operation on a directory'
  },
  {
    errno: 29,
    code: 'ENONET',
    description: 'machine is not on the network'
  },
  {
    errno: 31,
    code: 'ENOTCONN',
    description: 'socket is not connected'
  },
  {
    errno: 32,
    code: 'ENOTSOCK',
    description: 'socket operation on non-socket'
  },
  {
    errno: 33,
    code: 'ENOTSUP',
    description: 'operation not supported on socket'
  },
  {
    errno: 34,
    code: 'ENOENT',
    description: 'no such file or directory'
  },
  {
    errno: 35,
    code: 'ENOSYS',
    description: 'function not implemented'
  },
  {
    errno: 36,
    code: 'EPIPE',
    description: 'broken pipe'
  },
  {
    errno: 37,
    code: 'EPROTO',
    description: 'protocol error'
  },
  {
    errno: 38,
    code: 'EPROTONOSUPPORT',
    description: 'protocol not supported'
  },
  {
    errno: 39,
    code: 'EPROTOTYPE',
    description: 'protocol wrong type for socket'
  },
  {
    errno: 40,
    code: 'ETIMEDOUT',
    description: 'connection timed out'
  },
  {
    errno: 41,
    code: 'ECHARSET',
    description: 'invalid Unicode character'
  },
  {
    errno: 42,
    code: 'EAIFAMNOSUPPORT',
    description: 'address family for hostname not supported'
  },
  {
    errno: 44,
    code: 'EAISERVICE',
    description: 'servname not supported for ai_socktype'
  },
  {
    errno: 45,
    code: 'EAISOCKTYPE',
    description: 'ai_socktype not supported'
  },
  {
    errno: 46,
    code: 'ESHUTDOWN',
    description: 'cannot send after transport endpoint shutdown'
  },
  {
    errno: 47,
    code: 'EEXIST',
    description: 'file already exists'
  },
  {
    errno: 48,
    code: 'ESRCH',
    description: 'no such process'
  },
  {
    errno: 49,
    code: 'ENAMETOOLONG',
    description: 'name too long'
  },
  {
    errno: 50,
    code: 'EPERM',
    description: 'operation not permitted'
  },
  {
    errno: 51,
    code: 'ELOOP',
    description: 'too many symbolic links encountered'
  },
  {
    errno: 52,
    code: 'EXDEV',
    description: 'cross-device link not permitted'
  },
  {
    errno: 53,
    code: 'ENOTEMPTY',
    description: 'directory not empty'
  },
  {
    errno: 54,
    code: 'ENOSPC',
    description: 'no space left on device'
  },
  {
    errno: 55,
    code: 'EIO',
    description: 'i/o error'
  },
  {
    errno: 56,
    code: 'EROFS',
    description: 'read-only file system'
  },
  {
    errno: 57,
    code: 'ENODEV',
    description: 'no such device'
  },
  {
    errno: 58,
    code: 'ESPIPE',
    description: 'invalid seek'
  },
  {
    errno: 59,
    code: 'ECANCELED',
    description: 'operation canceled'
  }
]

module.exports.errno = {}
module.exports.code = {}

all.forEach(function (error) {
  module.exports.errno[error.errno] = error
  module.exports.code[error.code] = error
})

module.exports.custom = __webpack_require__(/*! ./custom */ "../../node_modules/errno/custom.js")(module.exports)
module.exports.create = module.exports.custom.createError


/***/ }),

/***/ "../../node_modules/events/events.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/events/events.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),

/***/ "../../node_modules/functional-red-black-tree/rbtree.js":
/*!*******************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/functional-red-black-tree/rbtree.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = createRBTree

var RED   = 0
var BLACK = 1

function RBNode(color, key, value, left, right, count) {
  this._color = color
  this.key = key
  this.value = value
  this.left = left
  this.right = right
  this._count = count
}

function cloneNode(node) {
  return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count)
}

function repaint(color, node) {
  return new RBNode(color, node.key, node.value, node.left, node.right, node._count)
}

function recount(node) {
  node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0)
}

function RedBlackTree(compare, root) {
  this._compare = compare
  this.root = root
}

var proto = RedBlackTree.prototype

Object.defineProperty(proto, "keys", {
  get: function() {
    var result = []
    this.forEach(function(k,v) {
      result.push(k)
    })
    return result
  }
})

Object.defineProperty(proto, "values", {
  get: function() {
    var result = []
    this.forEach(function(k,v) {
      result.push(v)
    })
    return result
  }
})

//Returns the number of nodes in the tree
Object.defineProperty(proto, "length", {
  get: function() {
    if(this.root) {
      return this.root._count
    }
    return 0
  }
})

//Insert a new item into the tree
proto.insert = function(key, value) {
  var cmp = this._compare
  //Find point to insert new node at
  var n = this.root
  var n_stack = []
  var d_stack = []
  while(n) {
    var d = cmp(key, n.key)
    n_stack.push(n)
    d_stack.push(d)
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  //Rebuild path to leaf node
  n_stack.push(new RBNode(RED, key, value, null, null, 1))
  for(var s=n_stack.length-2; s>=0; --s) {
    var n = n_stack[s]
    if(d_stack[s] <= 0) {
      n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s+1], n.right, n._count+1)
    } else {
      n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s+1], n._count+1)
    }
  }
  //Rebalance tree using rotations
  //console.log("start insert", key, d_stack)
  for(var s=n_stack.length-1; s>1; --s) {
    var p = n_stack[s-1]
    var n = n_stack[s]
    if(p._color === BLACK || n._color === BLACK) {
      break
    }
    var pp = n_stack[s-2]
    if(pp.left === p) {
      if(p.left === n) {
        var y = pp.right
        if(y && y._color === RED) {
          //console.log("LLr")
          p._color = BLACK
          pp.right = repaint(BLACK, y)
          pp._color = RED
          s -= 1
        } else {
          //console.log("LLb")
          pp._color = RED
          pp.left = p.right
          p._color = BLACK
          p.right = pp
          n_stack[s-2] = p
          n_stack[s-1] = n
          recount(pp)
          recount(p)
          if(s >= 3) {
            var ppp = n_stack[s-3]
            if(ppp.left === pp) {
              ppp.left = p
            } else {
              ppp.right = p
            }
          }
          break
        }
      } else {
        var y = pp.right
        if(y && y._color === RED) {
          //console.log("LRr")
          p._color = BLACK
          pp.right = repaint(BLACK, y)
          pp._color = RED
          s -= 1
        } else {
          //console.log("LRb")
          p.right = n.left
          pp._color = RED
          pp.left = n.right
          n._color = BLACK
          n.left = p
          n.right = pp
          n_stack[s-2] = n
          n_stack[s-1] = p
          recount(pp)
          recount(p)
          recount(n)
          if(s >= 3) {
            var ppp = n_stack[s-3]
            if(ppp.left === pp) {
              ppp.left = n
            } else {
              ppp.right = n
            }
          }
          break
        }
      }
    } else {
      if(p.right === n) {
        var y = pp.left
        if(y && y._color === RED) {
          //console.log("RRr", y.key)
          p._color = BLACK
          pp.left = repaint(BLACK, y)
          pp._color = RED
          s -= 1
        } else {
          //console.log("RRb")
          pp._color = RED
          pp.right = p.left
          p._color = BLACK
          p.left = pp
          n_stack[s-2] = p
          n_stack[s-1] = n
          recount(pp)
          recount(p)
          if(s >= 3) {
            var ppp = n_stack[s-3]
            if(ppp.right === pp) {
              ppp.right = p
            } else {
              ppp.left = p
            }
          }
          break
        }
      } else {
        var y = pp.left
        if(y && y._color === RED) {
          //console.log("RLr")
          p._color = BLACK
          pp.left = repaint(BLACK, y)
          pp._color = RED
          s -= 1
        } else {
          //console.log("RLb")
          p.left = n.right
          pp._color = RED
          pp.right = n.left
          n._color = BLACK
          n.right = p
          n.left = pp
          n_stack[s-2] = n
          n_stack[s-1] = p
          recount(pp)
          recount(p)
          recount(n)
          if(s >= 3) {
            var ppp = n_stack[s-3]
            if(ppp.right === pp) {
              ppp.right = n
            } else {
              ppp.left = n
            }
          }
          break
        }
      }
    }
  }
  //Return new tree
  n_stack[0]._color = BLACK
  return new RedBlackTree(cmp, n_stack[0])
}


//Visit all nodes inorder
function doVisitFull(visit, node) {
  if(node.left) {
    var v = doVisitFull(visit, node.left)
    if(v) { return v }
  }
  var v = visit(node.key, node.value)
  if(v) { return v }
  if(node.right) {
    return doVisitFull(visit, node.right)
  }
}

//Visit half nodes in order
function doVisitHalf(lo, compare, visit, node) {
  var l = compare(lo, node.key)
  if(l <= 0) {
    if(node.left) {
      var v = doVisitHalf(lo, compare, visit, node.left)
      if(v) { return v }
    }
    var v = visit(node.key, node.value)
    if(v) { return v }
  }
  if(node.right) {
    return doVisitHalf(lo, compare, visit, node.right)
  }
}

//Visit all nodes within a range
function doVisit(lo, hi, compare, visit, node) {
  var l = compare(lo, node.key)
  var h = compare(hi, node.key)
  var v
  if(l <= 0) {
    if(node.left) {
      v = doVisit(lo, hi, compare, visit, node.left)
      if(v) { return v }
    }
    if(h > 0) {
      v = visit(node.key, node.value)
      if(v) { return v }
    }
  }
  if(h > 0 && node.right) {
    return doVisit(lo, hi, compare, visit, node.right)
  }
}


proto.forEach = function rbTreeForEach(visit, lo, hi) {
  if(!this.root) {
    return
  }
  switch(arguments.length) {
    case 1:
      return doVisitFull(visit, this.root)
    break

    case 2:
      return doVisitHalf(lo, this._compare, visit, this.root)
    break

    case 3:
      if(this._compare(lo, hi) >= 0) {
        return
      }
      return doVisit(lo, hi, this._compare, visit, this.root)
    break
  }
}

//First item in list
Object.defineProperty(proto, "begin", {
  get: function() {
    var stack = []
    var n = this.root
    while(n) {
      stack.push(n)
      n = n.left
    }
    return new RedBlackTreeIterator(this, stack)
  }
})

//Last item in list
Object.defineProperty(proto, "end", {
  get: function() {
    var stack = []
    var n = this.root
    while(n) {
      stack.push(n)
      n = n.right
    }
    return new RedBlackTreeIterator(this, stack)
  }
})

//Find the ith item in the tree
proto.at = function(idx) {
  if(idx < 0) {
    return new RedBlackTreeIterator(this, [])
  }
  var n = this.root
  var stack = []
  while(true) {
    stack.push(n)
    if(n.left) {
      if(idx < n.left._count) {
        n = n.left
        continue
      }
      idx -= n.left._count
    }
    if(!idx) {
      return new RedBlackTreeIterator(this, stack)
    }
    idx -= 1
    if(n.right) {
      if(idx >= n.right._count) {
        break
      }
      n = n.right
    } else {
      break
    }
  }
  return new RedBlackTreeIterator(this, [])
}

proto.ge = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  var last_ptr = 0
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d <= 0) {
      last_ptr = stack.length
    }
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  stack.length = last_ptr
  return new RedBlackTreeIterator(this, stack)
}

proto.gt = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  var last_ptr = 0
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d < 0) {
      last_ptr = stack.length
    }
    if(d < 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  stack.length = last_ptr
  return new RedBlackTreeIterator(this, stack)
}

proto.lt = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  var last_ptr = 0
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d > 0) {
      last_ptr = stack.length
    }
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  stack.length = last_ptr
  return new RedBlackTreeIterator(this, stack)
}

proto.le = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  var last_ptr = 0
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d >= 0) {
      last_ptr = stack.length
    }
    if(d < 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  stack.length = last_ptr
  return new RedBlackTreeIterator(this, stack)
}

//Finds the item with key if it exists
proto.find = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d === 0) {
      return new RedBlackTreeIterator(this, stack)
    }
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  return new RedBlackTreeIterator(this, [])
}

//Removes item with key from tree
proto.remove = function(key) {
  var iter = this.find(key)
  if(iter) {
    return iter.remove()
  }
  return this
}

//Returns the item at `key`
proto.get = function(key) {
  var cmp = this._compare
  var n = this.root
  while(n) {
    var d = cmp(key, n.key)
    if(d === 0) {
      return n.value
    }
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  return
}

//Iterator for red black tree
function RedBlackTreeIterator(tree, stack) {
  this.tree = tree
  this._stack = stack
}

var iproto = RedBlackTreeIterator.prototype

//Test if iterator is valid
Object.defineProperty(iproto, "valid", {
  get: function() {
    return this._stack.length > 0
  }
})

//Node of the iterator
Object.defineProperty(iproto, "node", {
  get: function() {
    if(this._stack.length > 0) {
      return this._stack[this._stack.length-1]
    }
    return null
  },
  enumerable: true
})

//Makes a copy of an iterator
iproto.clone = function() {
  return new RedBlackTreeIterator(this.tree, this._stack.slice())
}

//Swaps two nodes
function swapNode(n, v) {
  n.key = v.key
  n.value = v.value
  n.left = v.left
  n.right = v.right
  n._color = v._color
  n._count = v._count
}

//Fix up a double black node in a tree
function fixDoubleBlack(stack) {
  var n, p, s, z
  for(var i=stack.length-1; i>=0; --i) {
    n = stack[i]
    if(i === 0) {
      n._color = BLACK
      return
    }
    //console.log("visit node:", n.key, i, stack[i].key, stack[i-1].key)
    p = stack[i-1]
    if(p.left === n) {
      //console.log("left child")
      s = p.right
      if(s.right && s.right._color === RED) {
        //console.log("case 1: right sibling child red")
        s = p.right = cloneNode(s)
        z = s.right = cloneNode(s.right)
        p.right = s.left
        s.left = p
        s.right = z
        s._color = p._color
        n._color = BLACK
        p._color = BLACK
        z._color = BLACK
        recount(p)
        recount(s)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.left === p) {
            pp.left = s
          } else {
            pp.right = s
          }
        }
        stack[i-1] = s
        return
      } else if(s.left && s.left._color === RED) {
        //console.log("case 1: left sibling child red")
        s = p.right = cloneNode(s)
        z = s.left = cloneNode(s.left)
        p.right = z.left
        s.left = z.right
        z.left = p
        z.right = s
        z._color = p._color
        p._color = BLACK
        s._color = BLACK
        n._color = BLACK
        recount(p)
        recount(s)
        recount(z)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.left === p) {
            pp.left = z
          } else {
            pp.right = z
          }
        }
        stack[i-1] = z
        return
      }
      if(s._color === BLACK) {
        if(p._color === RED) {
          //console.log("case 2: black sibling, red parent", p.right.value)
          p._color = BLACK
          p.right = repaint(RED, s)
          return
        } else {
          //console.log("case 2: black sibling, black parent", p.right.value)
          p.right = repaint(RED, s)
          continue  
        }
      } else {
        //console.log("case 3: red sibling")
        s = cloneNode(s)
        p.right = s.left
        s.left = p
        s._color = p._color
        p._color = RED
        recount(p)
        recount(s)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.left === p) {
            pp.left = s
          } else {
            pp.right = s
          }
        }
        stack[i-1] = s
        stack[i] = p
        if(i+1 < stack.length) {
          stack[i+1] = n
        } else {
          stack.push(n)
        }
        i = i+2
      }
    } else {
      //console.log("right child")
      s = p.left
      if(s.left && s.left._color === RED) {
        //console.log("case 1: left sibling child red", p.value, p._color)
        s = p.left = cloneNode(s)
        z = s.left = cloneNode(s.left)
        p.left = s.right
        s.right = p
        s.left = z
        s._color = p._color
        n._color = BLACK
        p._color = BLACK
        z._color = BLACK
        recount(p)
        recount(s)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.right === p) {
            pp.right = s
          } else {
            pp.left = s
          }
        }
        stack[i-1] = s
        return
      } else if(s.right && s.right._color === RED) {
        //console.log("case 1: right sibling child red")
        s = p.left = cloneNode(s)
        z = s.right = cloneNode(s.right)
        p.left = z.right
        s.right = z.left
        z.right = p
        z.left = s
        z._color = p._color
        p._color = BLACK
        s._color = BLACK
        n._color = BLACK
        recount(p)
        recount(s)
        recount(z)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.right === p) {
            pp.right = z
          } else {
            pp.left = z
          }
        }
        stack[i-1] = z
        return
      }
      if(s._color === BLACK) {
        if(p._color === RED) {
          //console.log("case 2: black sibling, red parent")
          p._color = BLACK
          p.left = repaint(RED, s)
          return
        } else {
          //console.log("case 2: black sibling, black parent")
          p.left = repaint(RED, s)
          continue  
        }
      } else {
        //console.log("case 3: red sibling")
        s = cloneNode(s)
        p.left = s.right
        s.right = p
        s._color = p._color
        p._color = RED
        recount(p)
        recount(s)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.right === p) {
            pp.right = s
          } else {
            pp.left = s
          }
        }
        stack[i-1] = s
        stack[i] = p
        if(i+1 < stack.length) {
          stack[i+1] = n
        } else {
          stack.push(n)
        }
        i = i+2
      }
    }
  }
}

//Removes item at iterator from tree
iproto.remove = function() {
  var stack = this._stack
  if(stack.length === 0) {
    return this.tree
  }
  //First copy path to node
  var cstack = new Array(stack.length)
  var n = stack[stack.length-1]
  cstack[cstack.length-1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count)
  for(var i=stack.length-2; i>=0; --i) {
    var n = stack[i]
    if(n.left === stack[i+1]) {
      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)
    } else {
      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)
    }
  }

  //Get node
  n = cstack[cstack.length-1]
  //console.log("start remove: ", n.value)

  //If not leaf, then swap with previous node
  if(n.left && n.right) {
    //console.log("moving to leaf")

    //First walk to previous leaf
    var split = cstack.length
    n = n.left
    while(n.right) {
      cstack.push(n)
      n = n.right
    }
    //Copy path to leaf
    var v = cstack[split-1]
    cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count))
    cstack[split-1].key = n.key
    cstack[split-1].value = n.value

    //Fix up stack
    for(var i=cstack.length-2; i>=split; --i) {
      n = cstack[i]
      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)
    }
    cstack[split-1].left = cstack[split]
  }
  //console.log("stack=", cstack.map(function(v) { return v.value }))

  //Remove leaf node
  n = cstack[cstack.length-1]
  if(n._color === RED) {
    //Easy case: removing red leaf
    //console.log("RED leaf")
    var p = cstack[cstack.length-2]
    if(p.left === n) {
      p.left = null
    } else if(p.right === n) {
      p.right = null
    }
    cstack.pop()
    for(var i=0; i<cstack.length; ++i) {
      cstack[i]._count--
    }
    return new RedBlackTree(this.tree._compare, cstack[0])
  } else {
    if(n.left || n.right) {
      //Second easy case:  Single child black parent
      //console.log("BLACK single child")
      if(n.left) {
        swapNode(n, n.left)
      } else if(n.right) {
        swapNode(n, n.right)
      }
      //Child must be red, so repaint it black to balance color
      n._color = BLACK
      for(var i=0; i<cstack.length-1; ++i) {
        cstack[i]._count--
      }
      return new RedBlackTree(this.tree._compare, cstack[0])
    } else if(cstack.length === 1) {
      //Third easy case: root
      //console.log("ROOT")
      return new RedBlackTree(this.tree._compare, null)
    } else {
      //Hard case: Repaint n, and then do some nasty stuff
      //console.log("BLACK leaf no children")
      for(var i=0; i<cstack.length; ++i) {
        cstack[i]._count--
      }
      var parent = cstack[cstack.length-2]
      fixDoubleBlack(cstack)
      //Fix up links
      if(parent.left === n) {
        parent.left = null
      } else {
        parent.right = null
      }
    }
  }
  return new RedBlackTree(this.tree._compare, cstack[0])
}

//Returns key
Object.defineProperty(iproto, "key", {
  get: function() {
    if(this._stack.length > 0) {
      return this._stack[this._stack.length-1].key
    }
    return
  },
  enumerable: true
})

//Returns value
Object.defineProperty(iproto, "value", {
  get: function() {
    if(this._stack.length > 0) {
      return this._stack[this._stack.length-1].value
    }
    return
  },
  enumerable: true
})


//Returns the position of this iterator in the sorted list
Object.defineProperty(iproto, "index", {
  get: function() {
    var idx = 0
    var stack = this._stack
    if(stack.length === 0) {
      var r = this.tree.root
      if(r) {
        return r._count
      }
      return 0
    } else if(stack[stack.length-1].left) {
      idx = stack[stack.length-1].left._count
    }
    for(var s=stack.length-2; s>=0; --s) {
      if(stack[s+1] === stack[s].right) {
        ++idx
        if(stack[s].left) {
          idx += stack[s].left._count
        }
      }
    }
    return idx
  },
  enumerable: true
})

//Advances iterator to next element in list
iproto.next = function() {
  var stack = this._stack
  if(stack.length === 0) {
    return
  }
  var n = stack[stack.length-1]
  if(n.right) {
    n = n.right
    while(n) {
      stack.push(n)
      n = n.left
    }
  } else {
    stack.pop()
    while(stack.length > 0 && stack[stack.length-1].right === n) {
      n = stack[stack.length-1]
      stack.pop()
    }
  }
}

//Checks if iterator is at end of tree
Object.defineProperty(iproto, "hasNext", {
  get: function() {
    var stack = this._stack
    if(stack.length === 0) {
      return false
    }
    if(stack[stack.length-1].right) {
      return true
    }
    for(var s=stack.length-1; s>0; --s) {
      if(stack[s-1].left === stack[s]) {
        return true
      }
    }
    return false
  }
})

//Update value
iproto.update = function(value) {
  var stack = this._stack
  if(stack.length === 0) {
    throw new Error("Can't update empty node!")
  }
  var cstack = new Array(stack.length)
  var n = stack[stack.length-1]
  cstack[cstack.length-1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count)
  for(var i=stack.length-2; i>=0; --i) {
    n = stack[i]
    if(n.left === stack[i+1]) {
      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)
    } else {
      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)
    }
  }
  return new RedBlackTree(this.tree._compare, cstack[0])
}

//Moves iterator backward one element
iproto.prev = function() {
  var stack = this._stack
  if(stack.length === 0) {
    return
  }
  var n = stack[stack.length-1]
  if(n.left) {
    n = n.left
    while(n) {
      stack.push(n)
      n = n.right
    }
  } else {
    stack.pop()
    while(stack.length > 0 && stack[stack.length-1].left === n) {
      n = stack[stack.length-1]
      stack.pop()
    }
  }
}

//Checks if iterator is at start of tree
Object.defineProperty(iproto, "hasPrev", {
  get: function() {
    var stack = this._stack
    if(stack.length === 0) {
      return false
    }
    if(stack[stack.length-1].left) {
      return true
    }
    for(var s=stack.length-1; s>0; --s) {
      if(stack[s-1].right === stack[s]) {
        return true
      }
    }
    return false
  }
})

//Default comparison function
function defaultCompare(a, b) {
  if(a < b) {
    return -1
  }
  if(a > b) {
    return 1
  }
  return 0
}

//Build a tree
function createRBTree(compare) {
  return new RedBlackTree(compare || defaultCompare, null)
}

/***/ }),

/***/ "../../node_modules/ieee754/index.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/ieee754/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "../../node_modules/immediate/lib/index.js":
/*!******************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var types = [
  __webpack_require__(/*! ./nextTick */ "../../node_modules/immediate/lib/nextTick.js"),
  __webpack_require__(/*! ./mutation.js */ "../../node_modules/immediate/lib/mutation.js"),
  __webpack_require__(/*! ./messageChannel */ "../../node_modules/immediate/lib/messageChannel.js"),
  __webpack_require__(/*! ./stateChange */ "../../node_modules/immediate/lib/stateChange.js"),
  __webpack_require__(/*! ./timeout */ "../../node_modules/immediate/lib/timeout.js")
];
var draining;
var currentQueue;
var queueIndex = -1;
var queue = [];
var scheduled = false;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    nextTick();
  }
}

//named nextTick for less confusing stack traces
function nextTick() {
  if (draining) {
    return;
  }
  scheduled = false;
  draining = true;
  var len = queue.length;
  var timeout = setTimeout(cleanUpNextTick);
  while (len) {
    currentQueue = queue;
    queue = [];
    while (currentQueue && ++queueIndex < len) {
      currentQueue[queueIndex].run();
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  queueIndex = -1;
  draining = false;
  clearTimeout(timeout);
}
var scheduleDrain;
var i = -1;
var len = types.length;
while (++i < len) {
  if (types[i] && types[i].test && types[i].test()) {
    scheduleDrain = types[i].install(nextTick);
    break;
  }
}
// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  var fun = this.fun;
  var array = this.array;
  switch (array.length) {
  case 0:
    return fun();
  case 1:
    return fun(array[0]);
  case 2:
    return fun(array[0], array[1]);
  case 3:
    return fun(array[0], array[1], array[2]);
  default:
    return fun.apply(null, array);
  }

};
module.exports = immediate;
function immediate(task) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(task, args));
  if (!scheduled && !draining) {
    scheduled = true;
    scheduleDrain();
  }
}


/***/ }),

/***/ "../../node_modules/immediate/lib/messageChannel.js":
/*!***************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/messageChannel.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.test = function () {
  if (global.setImmediate) {
    // we can only get here in IE10
    // which doesn't handel postMessage well
    return false;
  }
  return typeof global.MessageChannel !== 'undefined';
};

exports.install = function (func) {
  var channel = new global.MessageChannel();
  channel.port1.onmessage = func;
  return function () {
    channel.port2.postMessage(0);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/immediate/lib/mutation.js":
/*!*********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/mutation.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
//based off rsvp https://github.com/tildeio/rsvp.js
//license https://github.com/tildeio/rsvp.js/blob/master/LICENSE
//https://github.com/tildeio/rsvp.js/blob/master/lib/rsvp/asap.js

var Mutation = global.MutationObserver || global.WebKitMutationObserver;

exports.test = function () {
  return Mutation;
};

exports.install = function (handle) {
  var called = 0;
  var observer = new Mutation(handle);
  var element = global.document.createTextNode('');
  observer.observe(element, {
    characterData: true
  });
  return function () {
    element.data = (called = ++called % 2);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/immediate/lib/nextTick.js":
/*!*********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/nextTick.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
exports.test = function () {
  // Don't get fooled by e.g. browserify environments.
  return (typeof process !== 'undefined') && !process.browser;
};

exports.install = function (func) {
  return function () {
    process.nextTick(func);
  };
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/immediate/lib/stateChange.js":
/*!************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/stateChange.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.test = function () {
  return 'document' in global && 'onreadystatechange' in global.document.createElement('script');
};

exports.install = function (handle) {
  return function () {

    // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
    // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
    var scriptEl = global.document.createElement('script');
    scriptEl.onreadystatechange = function () {
      handle();

      scriptEl.onreadystatechange = null;
      scriptEl.parentNode.removeChild(scriptEl);
      scriptEl = null;
    };
    global.document.documentElement.appendChild(scriptEl);

    return handle;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/immediate/lib/timeout.js":
/*!********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/timeout.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.test = function () {
  return true;
};

exports.install = function (t) {
  return function () {
    setTimeout(t, 0);
  };
};

/***/ }),

/***/ "../../node_modules/inherits/inherits_browser.js":
/*!************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/inherits/inherits_browser.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "../../node_modules/isarray/index.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/isarray/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "../../node_modules/level-errors/errors.js":
/*!******************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-errors/errors.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 LevelUP contributors
 * See list at <https://github.com/rvagg/node-levelup#contributing>
 * MIT License
 * <https://github.com/rvagg/node-levelup/blob/master/LICENSE.md>
 */

var createError = __webpack_require__(/*! errno */ "../../node_modules/errno/errno.js").create
var LevelUPError = createError('LevelUPError')
var NotFoundError = createError('NotFoundError', LevelUPError)

NotFoundError.prototype.notFound = true
NotFoundError.prototype.status = 404

module.exports = {
  LevelUPError: LevelUPError,
  InitializationError: createError('InitializationError', LevelUPError),
  OpenError: createError('OpenError', LevelUPError),
  ReadError: createError('ReadError', LevelUPError),
  WriteError: createError('WriteError', LevelUPError),
  NotFoundError: NotFoundError,
  EncodingError: createError('EncodingError', LevelUPError)
}


/***/ }),

/***/ "../../node_modules/level-iterator-stream/index.js":
/*!**************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/index.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")
var Readable = __webpack_require__(/*! readable-stream */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/readable-browser.js").Readable
var extend = __webpack_require__(/*! xtend */ "../../node_modules/xtend/immutable.js")

module.exports = ReadStream
inherits(ReadStream, Readable)

function ReadStream (iterator, options) {
  if (!(this instanceof ReadStream)) return new ReadStream(iterator, options)
  options = options || {}
  Readable.call(this, extend(options, {
    objectMode: true
  }))
  this._iterator = iterator
  this._options = options
  this.on('end', this.destroy.bind(this, null, null))
}

ReadStream.prototype._read = function () {
  var self = this
  var options = this._options
  if (this.destroyed) return

  this._iterator.next(function (err, key, value) {
    if (self.destroyed) return
    if (err) return self.destroy(err)

    if (key === undefined && value === undefined) {
      self.push(null)
    } else if (options.keys !== false && options.values === false) {
      self.push(key)
    } else if (options.keys === false && options.values !== false) {
      self.push(value)
    } else {
      self.push({ key: key, value: value })
    }
  })
}

ReadStream.prototype._destroy = function (err, callback) {
  this._iterator.end(function (err2) {
    callback(err || err2)
  })
}


/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js":
/*!****************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/experimentalWarning.js":
/*!*********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/experimentalWarning.js ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var experimentalWarnings = new Set();

function emitExperimentalWarning(feature) {
  if (experimentalWarnings.has(feature)) return;
  var msg = feature + ' is an experimental feature. This feature could ' +
       'change at any time';
  experimentalWarnings.add(feature);
  process.emitWarning(msg, 'ExperimentalWarning');
}

function noop() {}

module.exports.emitExperimentalWarning = process.emitWarning
  ? emitExperimentalWarning
  : noop;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js":
/*!********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(/*! ./_stream_readable */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_readable.js");

var Writable = __webpack_require__(/*! ./_stream_writable */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_writable.js");

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(/*! ./_stream_transform */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_transform.js");

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_readable.js":
/*!**********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_readable.js ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(/*! events */ "../../node_modules/events/events.js").EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/


var Buffer = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(/*! util */ 0);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(/*! ./internal/streams/buffer_list */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/buffer_list.js");

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/destroy.js");

var _require = __webpack_require__(/*! ./internal/streams/state */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/state.js"),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(/*! ../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

var _require2 = __webpack_require__(/*! ../experimentalWarning */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/experimentalWarning.js"),
    emitExperimentalWarning = _require2.emitExperimentalWarning; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "../../node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "../../node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc); // if setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding;
  return this;
}; // Don't raise the hwm > 8MB


var MAX_HWM = 0x800000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;

  while (!state.reading && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;else len = state.length;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  this.emit('error', new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  self._readableState.readableListening = self.listenerCount('readable') > 0; // crude way to check if we should resume

  if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    emitExperimentalWarning('Readable[Symbol.asyncIterator]');

    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(/*! ./internal/streams/async_iterator */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/async_iterator.js");
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_transform.js":
/*!***********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_transform.js ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__(/*! ../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_writable.js":
/*!**********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_writable.js ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(/*! util-deprecate */ "../../node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/


var Buffer = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/destroy.js");

var _require = __webpack_require__(/*! ./internal/streams/state */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/state.js"),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(/*! ../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js"); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  this.emit('error', new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    stream.emit('error', er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      stream.emit('error', err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/async_iterator.js":
/*!*************************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/async_iterator.js ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = __webpack_require__(/*! ./end-of-stream */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js");

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(null, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(null, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(null, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kLastPromise, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(null, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/buffer_list.js":
/*!**********************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/buffer_list.js ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js"),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(/*! util */ 1),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  var _proto = BufferList.prototype;

  _proto.push = function push(v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  _proto.unshift = function unshift(v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  _proto.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  _proto.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  _proto.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  _proto.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  } // Consumes a specified amount of bytes or characters from the buffered data.
  ;

  _proto.consume = function consume(n, hasStrings) {
    var ret;

    if (n < this.head.data.length) {
      // `slice` is the same for buffers and strings.
      ret = this.head.data.slice(0, n);
      this.head.data = this.head.data.slice(n);
    } else if (n === this.head.data.length) {
      // First chunk is a perfect match.
      ret = this.shift();
    } else {
      // Result spans more than one buffer.
      ret = hasStrings ? this._getString(n) : this._getBuffer(n);
    }

    return ret;
  };

  _proto.first = function first() {
    return this.head.data;
  } // Consumes a specified amount of characters from the buffered data.
  ;

  _proto._getString = function _getString(n) {
    var p = this.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;

    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;

      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = str.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Consumes a specified amount of bytes from the buffered data.
  ;

  _proto._getBuffer = function _getBuffer(n) {
    var ret = Buffer.allocUnsafe(n);
    var p = this.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;

    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;

      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = buf.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Make sure the linked list only shows the minimal necessary information.
  ;

  _proto[custom] = function (_, options) {
    return inspect(this, _objectSpread({}, options, {
      // Only inspect one level.
      depth: 0,
      // It should not recurse.
      customInspect: false
    }));
  };

  return BufferList;
}();

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!******************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) { // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      process.nextTick(emitErrorNT, this, err);
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      process.nextTick(emitErrorAndCloseNT, _this, err);

      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js":
/*!************************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(/*! ../../../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes.ERR_STREAM_PREMATURE_CLOSE;

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function once(callback) {
  var called = false;
  return function (err) {
    if (called) return;
    called = true;
    callback.call(this, err);
  };
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var ws = stream._writableState;
  var rs = stream._readableState;
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var onfinish = function onfinish() {
    writable = false;
    if (!readable) callback.call(stream);
  };

  var onend = function onend() {
    readable = false;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    if (readable && !(rs && rs.ended)) {
      return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
    }

    if (writable && !(ws && ws.ended)) {
      return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !ws) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/state.js":
/*!****************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/state.js ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(/*! ../../../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*************************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! events */ "../../node_modules/events/events.js").EventEmitter;


/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/readable-browser.js":
/*!******************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/readable-browser.js ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_passthrough.js");


/***/ }),

/***/ "../../node_modules/levelup/lib/batch.js":
/*!****************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/levelup/lib/batch.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var WriteError = __webpack_require__(/*! level-errors */ "../../node_modules/level-errors/errors.js").WriteError
var promisify = __webpack_require__(/*! ./promisify */ "../../node_modules/levelup/lib/promisify.js")
var getCallback = __webpack_require__(/*! ./common */ "../../node_modules/levelup/lib/common.js").getCallback
var getOptions = __webpack_require__(/*! ./common */ "../../node_modules/levelup/lib/common.js").getOptions

function Batch (levelup) {
  this._levelup = levelup
  this.batch = levelup.db.batch()
  this.ops = []
  this.length = 0
}

Batch.prototype.put = function (key, value) {
  try {
    this.batch.put(key, value)
  } catch (e) {
    throw new WriteError(e)
  }

  this.ops.push({ type: 'put', key: key, value: value })
  this.length++

  return this
}

Batch.prototype.del = function (key) {
  try {
    this.batch.del(key)
  } catch (err) {
    throw new WriteError(err)
  }

  this.ops.push({ type: 'del', key: key })
  this.length++

  return this
}

Batch.prototype.clear = function () {
  try {
    this.batch.clear()
  } catch (err) {
    throw new WriteError(err)
  }

  this.ops = []
  this.length = 0

  return this
}

Batch.prototype.write = function (options, callback) {
  var levelup = this._levelup
  var ops = this.ops
  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  options = getOptions(options)

  try {
    this.batch.write(options, function (err) {
      if (err) { return callback(new WriteError(err)) }
      levelup.emit('batch', ops)
      callback()
    })
  } catch (err) {
    throw new WriteError(err)
  }

  return promise
}

module.exports = Batch


/***/ }),

/***/ "../../node_modules/levelup/lib/common.js":
/*!*****************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/levelup/lib/common.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.getCallback = function (options, callback) {
  return typeof options === 'function' ? options : callback
}

exports.getOptions = function (options) {
  return typeof options === 'object' && options !== null ? options : {}
}


/***/ }),

/***/ "../../node_modules/levelup/lib/levelup.js":
/*!******************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/levelup/lib/levelup.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter = __webpack_require__(/*! events */ "../../node_modules/events/events.js").EventEmitter
var inherits = __webpack_require__(/*! util */ "../../node_modules/util/util.js").inherits
var extend = __webpack_require__(/*! xtend */ "../../node_modules/xtend/immutable.js")
var DeferredLevelDOWN = __webpack_require__(/*! deferred-leveldown */ "../../node_modules/deferred-leveldown/deferred-leveldown.js")
var IteratorStream = __webpack_require__(/*! level-iterator-stream */ "../../node_modules/level-iterator-stream/index.js")
var Batch = __webpack_require__(/*! ./batch */ "../../node_modules/levelup/lib/batch.js")
var errors = __webpack_require__(/*! level-errors */ "../../node_modules/level-errors/errors.js")
var assert = __webpack_require__(/*! assert */ "../../node_modules/assert/assert.js")
var promisify = __webpack_require__(/*! ./promisify */ "../../node_modules/levelup/lib/promisify.js")
var getCallback = __webpack_require__(/*! ./common */ "../../node_modules/levelup/lib/common.js").getCallback
var getOptions = __webpack_require__(/*! ./common */ "../../node_modules/levelup/lib/common.js").getOptions

var WriteError = errors.WriteError
var ReadError = errors.ReadError
var NotFoundError = errors.NotFoundError
var OpenError = errors.OpenError
var InitializationError = errors.InitializationError

// Possible AbstractLevelDOWN#status values:
//  - 'new'     - newly created, not opened or closed
//  - 'opening' - waiting for the database to be opened, post open()
//  - 'open'    - successfully opened the database, available for use
//  - 'closing' - waiting for the database to be closed, post close()
//  - 'closed'  - database has been successfully closed, should not be
//                 used except for another open() operation

function LevelUP (db, options, callback) {
  if (!(this instanceof LevelUP)) {
    return new LevelUP(db, options, callback)
  }

  var error

  EventEmitter.call(this)
  this.setMaxListeners(Infinity)

  if (typeof options === 'function') {
    callback = options
    options = {}
  }

  options = options || {}

  if (!db || typeof db !== 'object') {
    error = new InitializationError('First argument must be an abstract-leveldown compliant store')
    if (typeof callback === 'function') {
      return process.nextTick(callback, error)
    }
    throw error
  }

  assert.strictEqual(typeof db.status, 'string', '.status required, old abstract-leveldown')

  this.options = getOptions(options)
  this._db = db
  this.db = new DeferredLevelDOWN(db)
  this.open(callback)
}

LevelUP.prototype.emit = EventEmitter.prototype.emit
LevelUP.prototype.once = EventEmitter.prototype.once
inherits(LevelUP, EventEmitter)

LevelUP.prototype.open = function (callback) {
  var self = this
  var promise

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (this.isOpen()) {
    process.nextTick(callback, null, self)
    return promise
  }

  if (this._isOpening()) {
    this.once('open', function () { callback(null, self) })
    return promise
  }

  this.emit('opening')

  this.db.open(this.options, function (err) {
    if (err) {
      return callback(new OpenError(err))
    }
    self.db = self._db
    callback(null, self)
    self.emit('open')
    self.emit('ready')
  })

  return promise
}

LevelUP.prototype.close = function (callback) {
  var self = this
  var promise

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (this.isOpen()) {
    this.db.close(function () {
      self.emit('closed')
      callback.apply(null, arguments)
    })
    this.emit('closing')
    this.db = new DeferredLevelDOWN(this._db)
  } else if (this.isClosed()) {
    process.nextTick(callback)
  } else if (this.db.status === 'closing') {
    this.once('closed', callback)
  } else if (this._isOpening()) {
    this.once('open', function () {
      self.close(callback)
    })
  }

  return promise
}

LevelUP.prototype.isOpen = function () {
  return this.db.status === 'open'
}

LevelUP.prototype._isOpening = function () {
  return this.db.status === 'opening'
}

LevelUP.prototype.isClosed = function () {
  return (/^clos|new/).test(this.db.status)
}

LevelUP.prototype.get = function (key, options, callback) {
  if (key === null || key === undefined) {
    throw new ReadError('get() requires a key argument')
  }

  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (maybeError(this, callback)) { return promise }

  options = getOptions(options)

  this.db.get(key, options, function (err, value) {
    if (err) {
      if ((/notfound/i).test(err) || err.notFound) {
        err = new NotFoundError('Key not found in database [' + key + ']', err)
      } else {
        err = new ReadError(err)
      }
      return callback(err)
    }
    callback(null, value)
  })

  return promise
}

LevelUP.prototype.put = function (key, value, options, callback) {
  if (key === null || key === undefined) {
    throw new WriteError('put() requires a key argument')
  }

  var self = this
  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (maybeError(this, callback)) { return promise }

  options = getOptions(options)

  this.db.put(key, value, options, function (err) {
    if (err) {
      return callback(new WriteError(err))
    }
    self.emit('put', key, value)
    callback()
  })

  return promise
}

LevelUP.prototype.del = function (key, options, callback) {
  if (key === null || key === undefined) {
    throw new WriteError('del() requires a key argument')
  }

  var self = this
  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (maybeError(this, callback)) { return promise }

  options = getOptions(options)

  this.db.del(key, options, function (err) {
    if (err) {
      return callback(new WriteError(err))
    }
    self.emit('del', key)
    callback()
  })

  return promise
}

LevelUP.prototype.batch = function (arr, options, callback) {
  if (!arguments.length) {
    return new Batch(this)
  }

  if (!Array.isArray(arr)) {
    throw new WriteError('batch() requires an array argument')
  }

  var self = this
  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (maybeError(this, callback)) { return promise }

  options = getOptions(options)

  this.db.batch(arr, options, function (err) {
    if (err) {
      return callback(new WriteError(err))
    }
    self.emit('batch', arr)
    callback()
  })

  return promise
}

LevelUP.prototype.iterator = function (options) {
  return this.db.iterator(options)
}

LevelUP.prototype.readStream =
LevelUP.prototype.createReadStream = function (options) {
  options = extend({ keys: true, values: true }, options)
  if (typeof options.limit !== 'number') { options.limit = -1 }
  return new IteratorStream(this.db.iterator(options), options)
}

LevelUP.prototype.keyStream =
LevelUP.prototype.createKeyStream = function (options) {
  return this.createReadStream(extend(options, { keys: true, values: false }))
}

LevelUP.prototype.valueStream =
LevelUP.prototype.createValueStream = function (options) {
  return this.createReadStream(extend(options, { keys: false, values: true }))
}

LevelUP.prototype.toString = function () {
  return 'LevelUP'
}

function maybeError (db, callback) {
  if (!db._isOpening() && !db.isOpen()) {
    process.nextTick(callback, new ReadError('Database is not open'))
    return true
  }
}

LevelUP.errors = errors
module.exports = LevelUP.default = LevelUP

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/levelup/lib/promisify.js":
/*!********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/levelup/lib/promisify.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function promisify () {
  var callback
  var promise = new Promise(function (resolve, reject) {
    callback = function callback (err, value) {
      if (err) reject(err)
      else resolve(value)
    }
  })
  callback.promise = promise
  return callback
}

module.exports = promisify


/***/ }),

/***/ "../../node_modules/ltgt/index.js":
/*!*********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/ltgt/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {
exports.compare = function (a, b) {

  if(Buffer.isBuffer(a)) {
    var l = Math.min(a.length, b.length)
    for(var i = 0; i < l; i++) {
      var cmp = a[i] - b[i]
      if(cmp) return cmp
    }
    return a.length - b.length
  }

  return a < b ? -1 : a > b ? 1 : 0
}

// to be compatible with the current abstract-leveldown tests
// nullish or empty strings.
// I could use !!val but I want to permit numbers and booleans,
// if possible.

function isDef (val) {
  return val !== undefined && val !== ''
}

function has (range, name) {
  return Object.hasOwnProperty.call(range, name)
}

function hasKey(range, name) {
  return Object.hasOwnProperty.call(range, name) && name
}

var lowerBoundKey = exports.lowerBoundKey = function (range) {
    return (
       hasKey(range, 'gt')
    || hasKey(range, 'gte')
    || hasKey(range, 'min')
    || (range.reverse ? hasKey(range, 'end') : hasKey(range, 'start'))
    || undefined
    )
}

var lowerBound = exports.lowerBound = function (range, def) {
  var k = lowerBoundKey(range)
  return k ? range[k] : def
}

var lowerBoundInclusive = exports.lowerBoundInclusive = function (range) {
  return has(range, 'gt') ? false : true
}

var upperBoundInclusive = exports.upperBoundInclusive =
  function (range) {
    return (has(range, 'lt') /*&& !range.maxEx*/) ? false : true
  }

var lowerBoundExclusive = exports.lowerBoundExclusive =
  function (range) {
    return !lowerBoundInclusive(range)
  }

var upperBoundExclusive = exports.upperBoundExclusive =
  function (range) {
    return !upperBoundInclusive(range)
  }

var upperBoundKey = exports.upperBoundKey = function (range) {
    return (
       hasKey(range, 'lt')
    || hasKey(range, 'lte')
    || hasKey(range, 'max')
    || (range.reverse ? hasKey(range, 'start') : hasKey(range, 'end'))
    || undefined
    )
}

var upperBound = exports.upperBound = function (range, def) {
  var k = upperBoundKey(range)
  return k ? range[k] : def
}

exports.start = function (range, def) {
  return range.reverse ? upperBound(range, def) : lowerBound(range, def)
}
exports.end = function (range, def) {
  return range.reverse ? lowerBound(range, def) : upperBound(range, def)
}
exports.startInclusive = function (range) {
  return (
    range.reverse
  ? upperBoundInclusive(range)
  : lowerBoundInclusive(range)
  )
}
exports.endInclusive = function (range) {
  return (
    range.reverse
  ? lowerBoundInclusive(range)
  : upperBoundInclusive(range)
  )
}

function id (e) { return e }

exports.toLtgt = function (range, _range, map, lower, upper) {
  _range = _range || {}
  map = map || id
  var defaults = arguments.length > 3
  var lb = exports.lowerBoundKey(range)
  var ub = exports.upperBoundKey(range)
  if(lb) {
    if(lb === 'gt') _range.gt = map(range.gt, false)
    else            _range.gte = map(range[lb], false)
  }
  else if(defaults)
    _range.gte = map(lower, false)

  if(ub) {
    if(ub === 'lt') _range.lt = map(range.lt, true)
    else            _range.lte = map(range[ub], true)
  }
  else if(defaults)
    _range.lte = map(upper, true)

  if(range.reverse != null)
    _range.reverse = !!range.reverse

  //if range was used mutably
  //(in level-sublevel it's part of an options object
  //that has more properties on it.)
  if(has(_range, 'max'))   delete _range.max
  if(has(_range, 'min'))   delete _range.min
  if(has(_range, 'start')) delete _range.start
  if(has(_range, 'end'))   delete _range.end

  return _range
}

exports.contains = function (range, key, compare) {
  compare = compare || exports.compare

  var lb = lowerBound(range)
  if(isDef(lb)) {
    var cmp = compare(key, lb)
    if(cmp < 0 || (cmp === 0 && lowerBoundExclusive(range)))
      return false
  }

  var ub = upperBound(range)
  if(isDef(ub)) {
    var cmp = compare(key, ub)
    if(cmp > 0 || (cmp === 0) && upperBoundExclusive(range))
      return false
  }

  return true
}

exports.filter = function (range, compare) {
  return function (key) {
    return exports.contains(range, key, compare)
  }
}



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/memdown/immediate-browser.js":
/*!************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/memdown/immediate-browser.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! immediate */ "../../node_modules/immediate/lib/index.js")


/***/ }),

/***/ "../../node_modules/memdown/memdown.js":
/*!**************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/memdown/memdown.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")
var AbstractLevelDOWN = __webpack_require__(/*! abstract-leveldown */ "../../node_modules/abstract-leveldown/index.js").AbstractLevelDOWN
var AbstractIterator = __webpack_require__(/*! abstract-leveldown */ "../../node_modules/abstract-leveldown/index.js").AbstractIterator
var ltgt = __webpack_require__(/*! ltgt */ "../../node_modules/ltgt/index.js")
var createRBT = __webpack_require__(/*! functional-red-black-tree */ "../../node_modules/functional-red-black-tree/rbtree.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "../../node_modules/safe-buffer/index.js").Buffer

// In Node, use global.setImmediate. In the browser, use a consistent
// microtask library to give consistent microtask experience to all browsers
var setImmediate = __webpack_require__(/*! ./immediate */ "../../node_modules/memdown/immediate-browser.js")

function gt (value) {
  return ltgt.compare(value, this._upperBound) > 0
}

function gte (value) {
  return ltgt.compare(value, this._upperBound) >= 0
}

function lt (value) {
  return ltgt.compare(value, this._upperBound) < 0
}

function lte (value) {
  return ltgt.compare(value, this._upperBound) <= 0
}

function MemIterator (db, options) {
  AbstractIterator.call(this, db)
  this._limit = options.limit

  if (this._limit === -1) this._limit = Infinity

  var tree = db._store

  this.keyAsBuffer = options.keyAsBuffer !== false
  this.valueAsBuffer = options.valueAsBuffer !== false
  this._reverse = options.reverse
  this._options = options
  this._done = 0

  if (!this._reverse) {
    this._incr = 'next'
    this._lowerBound = ltgt.lowerBound(options)
    this._upperBound = ltgt.upperBound(options)

    if (typeof this._lowerBound === 'undefined') {
      this._tree = tree.begin
    } else if (ltgt.lowerBoundInclusive(options)) {
      this._tree = tree.ge(this._lowerBound)
    } else {
      this._tree = tree.gt(this._lowerBound)
    }

    if (this._upperBound) {
      if (ltgt.upperBoundInclusive(options)) {
        this._test = lte
      } else {
        this._test = lt
      }
    }
  } else {
    this._incr = 'prev'
    this._lowerBound = ltgt.upperBound(options)
    this._upperBound = ltgt.lowerBound(options)

    if (typeof this._lowerBound === 'undefined') {
      this._tree = tree.end
    } else if (ltgt.upperBoundInclusive(options)) {
      this._tree = tree.le(this._lowerBound)
    } else {
      this._tree = tree.lt(this._lowerBound)
    }

    if (this._upperBound) {
      if (ltgt.lowerBoundInclusive(options)) {
        this._test = gte
      } else {
        this._test = gt
      }
    }
  }
}

inherits(MemIterator, AbstractIterator)

MemIterator.prototype._next = function (callback) {
  var key
  var value

  if (this._done++ >= this._limit) return setImmediate(callback)
  if (!this._tree.valid) return setImmediate(callback)

  key = this._tree.key
  value = this._tree.value

  if (!this._test(key)) return setImmediate(callback)

  if (this.keyAsBuffer && !Buffer.isBuffer(key)) {
    key = Buffer.from(String(key))
  }

  if (this.valueAsBuffer && !Buffer.isBuffer(value)) {
    value = Buffer.from(String(value))
  }

  this._tree[this._incr]()

  setImmediate(function callNext () {
    callback(null, key, value)
  })
}

MemIterator.prototype._test = function () {
  return true
}

function MemDOWN () {
  if (!(this instanceof MemDOWN)) return new MemDOWN()

  AbstractLevelDOWN.call(this, '')

  this._store = createRBT(ltgt.compare)
}

inherits(MemDOWN, AbstractLevelDOWN)

MemDOWN.prototype._open = function (options, callback) {
  var self = this
  setImmediate(function callNext () {
    callback(null, self)
  })
}

MemDOWN.prototype._serializeKey = function (key) {
  return key
}

MemDOWN.prototype._serializeValue = function (value) {
  return value == null ? '' : value
}

MemDOWN.prototype._put = function (key, value, options, callback) {
  var iter = this._store.find(key)

  if (iter.valid) {
    this._store = iter.update(value)
  } else {
    this._store = this._store.insert(key, value)
  }

  setImmediate(callback)
}

MemDOWN.prototype._get = function (key, options, callback) {
  var value = this._store.get(key)

  if (typeof value === 'undefined') {
    // 'NotFound' error, consistent with LevelDOWN API
    return setImmediate(function callNext () {
      callback(new Error('NotFound'))
    })
  }

  if (options.asBuffer !== false && !Buffer.isBuffer(value)) {
    value = Buffer.from(String(value))
  }

  setImmediate(function callNext () {
    callback(null, value)
  })
}

MemDOWN.prototype._del = function (key, options, callback) {
  this._store = this._store.remove(key)
  setImmediate(callback)
}

MemDOWN.prototype._batch = function (array, options, callback) {
  var i = -1
  var key
  var value
  var iter
  var len = array.length
  var tree = this._store

  while (++i < len) {
    key = array[i].key
    iter = tree.find(key)

    if (array[i].type === 'put') {
      value = array[i].value
      tree = iter.valid ? iter.update(value) : tree.insert(key, value)
    } else {
      tree = iter.remove()
    }
  }

  this._store = tree

  setImmediate(callback)
}

MemDOWN.prototype._iterator = function (options) {
  return new MemIterator(this, options)
}

module.exports = MemDOWN.default = MemDOWN


/***/ }),

/***/ "../../node_modules/process/browser.js":
/*!**************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/process/browser.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../../node_modules/prr/prr.js":
/*!******************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/prr/prr.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
  * prr
  * (c) 2013 Rod Vagg <rod@vagg.org>
  * https://github.com/rvagg/prr
  * License: MIT
  */

(function (name, context, definition) {
  if ( true && module.exports)
    module.exports = definition()
  else
    context[name] = definition()
})('prr', this, function() {

  var setProperty = typeof Object.defineProperty == 'function'
      ? function (obj, key, options) {
          Object.defineProperty(obj, key, options)
          return obj
        }
      : function (obj, key, options) { // < es5
          obj[key] = options.value
          return obj
        }

    , makeOptions = function (value, options) {
        var oo = typeof options == 'object'
          , os = !oo && typeof options == 'string'
          , op = function (p) {
              return oo
                ? !!options[p]
                : os
                  ? options.indexOf(p[0]) > -1
                  : false
            }

        return {
            enumerable   : op('enumerable')
          , configurable : op('configurable')
          , writable     : op('writable')
          , value        : value
        }
      }

    , prr = function (obj, key, value, options) {
        var k

        options = makeOptions(value, options)

        if (typeof key == 'object') {
          for (k in key) {
            if (Object.hasOwnProperty.call(key, k)) {
              options.value = key[k]
              setProperty(obj, k, options)
            }
          }
          return obj
        }

        return setProperty(obj, key, options)
      }

  return prr
})

/***/ }),

/***/ "../../node_modules/safe-buffer/index.js":
/*!****************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/safe-buffer/index.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "../../node_modules/string_decoder/lib/string_decoder.js":
/*!********************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/string_decoder/lib/string_decoder.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "../../node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "../../node_modules/util-deprecate/browser.js":
/*!*********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/util-deprecate/browser.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/util/support/isBufferBrowser.js":
/*!***************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/util/support/isBufferBrowser.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "../../node_modules/util/util.js":
/*!********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/util/util.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "../../node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "../../node_modules/xtend/immutable.js":
/*!**************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/xtend/immutable.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}


/***/ }),

/***/ "../causality-core/dist/@causalNet/core.web.js":
/*!*****************************************************!*\
  !*** ../causality-core/dist/@causalNet/core.web.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e():undefined}(this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=283)}([function(t,e,n){"use strict";(function(t,r,i,a){n.d(e,"ud",function(){return Vl}),n.d(e,"Fb",function(){return Wl}),n.d(e,"kb",function(){return ql}),n.d(e,"rc",function(){return $l}),n.d(e,"ve",function(){return Cl}),n.d(e,"Ec",function(){return Sc}),n.d(e,"qb",function(){return zt}),n.d(e,"Pb",function(){return bl}),n.d(e,"lc",function(){return _l}),n.d(e,"td",function(){return Nl}),n.d(e,"fe",function(){return Al}),n.d(e,"qe",function(){return Z}),n.d(e,"we",function(){return Pl}),n.d(e,"pb",function(){return Bt}),n.d(e,"a",function(){return Rl}),n.d(e,"b",function(){return Dl}),n.d(e,"c",function(){return Ml}),n.d(e,"d",function(){return jl}),n.d(e,"i",function(){return Ll}),n.d(e,"j",function(){return Tl}),n.d(e,"k",function(){return zl}),n.d(e,"n",function(){return Bl}),n.d(e,"o",function(){return ft}),n.d(e,"p",function(){return st}),n.d(e,"te",function(){return bt}),n.d(e,"q",function(){return ht}),n.d(e,"l",function(){return pt}),n.d(e,"m",function(){return Zu}),n.d(e,"f",function(){return Lt}),n.d(e,"g",function(){return jt}),n.d(e,"h",function(){return Je}),n.d(e,"e",function(){return Ye}),n.d(e,"Ob",function(){return wc}),n.d(e,"Xb",function(){return pc}),n.d(e,"jc",function(){return cc}),n.d(e,"Jd",function(){return Yu}),n.d(e,"Lc",function(){return Ae}),n.d(e,"J",function(){return qo}),n.d(e,"K",function(){return $o}),n.d(e,"L",function(){return Ho}),n.d(e,"I",function(){return Ko}),n.d(e,"S",function(){return Te}),n.d(e,"dd",function(){return Re}),n.d(e,"Nb",function(){return De}),n.d(e,"T",function(){return ga}),n.d(e,"U",function(){return ya}),n.d(e,"V",function(){return va}),n.d(e,"W",function(){return ba}),n.d(e,"X",function(){return wa}),n.d(e,"Kd",function(){return _a}),n.d(e,"Y",function(){return cs}),n.d(e,"Z",function(){return ls}),n.d(e,"cb",function(){return fs}),n.d(e,"ab",function(){return hs}),n.d(e,"ib",function(){return ps}),n.d(e,"sd",function(){return ds}),n.d(e,"bb",function(){return ms}),n.d(e,"kc",function(){return rs}),n.d(e,"nb",function(){return is}),n.d(e,"Mc",function(){return as}),n.d(e,"hd",function(){return gs}),n.d(e,"id",function(){return ys}),n.d(e,"jd",function(){return vs}),n.d(e,"kd",function(){return bs}),n.d(e,"ld",function(){return ws}),n.d(e,"nc",function(){return Es}),n.d(e,"G",function(){return Ss}),n.d(e,"Sc",function(){return Ns}),n.d(e,"Ad",function(){return Is}),n.d(e,"Bd",function(){return Os}),n.d(e,"Cd",function(){return ks}),n.d(e,"Dd",function(){return As}),n.d(e,"Ed",function(){return Cs}),n.d(e,"r",function(){return lo}),n.d(e,"s",function(){return fo}),n.d(e,"t",function(){return ho}),n.d(e,"B",function(){return po}),n.d(e,"C",function(){return mo}),n.d(e,"D",function(){return go}),n.d(e,"F",function(){return yo}),n.d(e,"P",function(){return vo}),n.d(e,"Q",function(){return bo}),n.d(e,"db",function(){return wo}),n.d(e,"eb",function(){return _o}),n.d(e,"tb",function(){return xo}),n.d(e,"ub",function(){return Eo}),n.d(e,"wb",function(){return So}),n.d(e,"Ab",function(){return No}),n.d(e,"ac",function(){return Io}),n.d(e,"bc",function(){return Oo}),n.d(e,"cc",function(){return ko}),n.d(e,"Dc",function(){return Ao}),n.d(e,"ed",function(){return Co}),n.d(e,"nd",function(){return Po}),n.d(e,"od",function(){return To}),n.d(e,"wd",function(){return Ro}),n.d(e,"xd",function(){return Do}),n.d(e,"yd",function(){return Mo}),n.d(e,"zd",function(){return jo}),n.d(e,"Gd",function(){return Bo}),n.d(e,"Ld",function(){return Lo}),n.d(e,"Md",function(){return zo}),n.d(e,"Rd",function(){return Fo}),n.d(e,"Wd",function(){return Uo}),n.d(e,"Xd",function(){return Vo}),n.d(e,"x",function(){return Ts}),n.d(e,"y",function(){return Rs}),n.d(e,"z",function(){return Ds}),n.d(e,"A",function(){return Ms}),n.d(e,"ec",function(){return js}),n.d(e,"mc",function(){return Bs}),n.d(e,"qc",function(){return Ls}),n.d(e,"sc",function(){return zs}),n.d(e,"xc",function(){return Fs}),n.d(e,"Vd",function(){return Us}),n.d(e,"Xc",function(){return Vs}),n.d(e,"rb",function(){return Ws}),n.d(e,"sb",function(){return qs}),n.d(e,"Ib",function(){return $s}),n.d(e,"Jb",function(){return Hs}),n.d(e,"Kb",function(){return Ks}),n.d(e,"Lb",function(){return Gs}),n.d(e,"Tb",function(){return Xs}),n.d(e,"Ub",function(){return Ys}),n.d(e,"Vb",function(){return Js}),n.d(e,"Wb",function(){return Zs}),n.d(e,"Gc",function(){return Qs}),n.d(e,"Hc",function(){return tu}),n.d(e,"u",function(){return eu}),n.d(e,"v",function(){return nu}),n.d(e,"w",function(){return ru}),n.d(e,"E",function(){return iu}),n.d(e,"lb",function(){return au}),n.d(e,"mb",function(){return ou}),n.d(e,"Bb",function(){return su}),n.d(e,"oc",function(){return uu}),n.d(e,"pc",function(){return cu}),n.d(e,"tc",function(){return lu}),n.d(e,"uc",function(){return fu}),n.d(e,"vc",function(){return hu}),n.d(e,"wc",function(){return pu}),n.d(e,"zc",function(){return du}),n.d(e,"Ac",function(){return mu}),n.d(e,"Tc",function(){return gu}),n.d(e,"Uc",function(){return yu}),n.d(e,"Nd",function(){return vu}),n.d(e,"Od",function(){return bu}),n.d(e,"Td",function(){return wu}),n.d(e,"Ud",function(){return _u}),n.d(e,"ob",function(){return ku}),n.d(e,"Sb",function(){return Au}),n.d(e,"Vc",function(){return Cu}),n.d(e,"fd",function(){return Pu}),n.d(e,"rd",function(){return Tu}),n.d(e,"fc",function(){return xu}),n.d(e,"gc",function(){return Eu}),n.d(e,"hc",function(){return Su}),n.d(e,"ic",function(){return Nu}),n.d(e,"xe",function(){return Iu}),n.d(e,"ye",function(){return Ou}),n.d(e,"N",function(){return Ra}),n.d(e,"je",function(){return Ta}),n.d(e,"Wc",function(){return Da}),n.d(e,"M",function(){return Ma}),n.d(e,"O",function(){return ja}),n.d(e,"R",function(){return Ba}),n.d(e,"fb",function(){return La}),n.d(e,"hb",function(){return za}),n.d(e,"vb",function(){return Fa}),n.d(e,"xb",function(){return Ua}),n.d(e,"Cb",function(){return Va}),n.d(e,"Cc",function(){return Wa}),n.d(e,"Ic",function(){return qa}),n.d(e,"Nc",function(){return $a}),n.d(e,"Oc",function(){return Ha}),n.d(e,"Pc",function(){return Ka}),n.d(e,"Qc",function(){return Ga}),n.d(e,"Rc",function(){return Xa}),n.d(e,"Zc",function(){return Ya}),n.d(e,"ad",function(){return Ja}),n.d(e,"bd",function(){return Za}),n.d(e,"gd",function(){return Qa}),n.d(e,"Hd",function(){return to}),n.d(e,"Pd",function(){return eo}),n.d(e,"Qd",function(){return no}),n.d(e,"he",function(){return ro}),n.d(e,"ne",function(){return io}),n.d(e,"pe",function(){return ao}),n.d(e,"vd",function(){return oo}),n.d(e,"zb",function(){return $e}),n.d(e,"Yb",function(){return He}),n.d(e,"Jc",function(){return We}),n.d(e,"cd",function(){return Ke}),n.d(e,"pd",function(){return je}),n.d(e,"Yd",function(){return Me}),n.d(e,"Zd",function(){return Be}),n.d(e,"ae",function(){return Le}),n.d(e,"be",function(){return ze}),n.d(e,"ce",function(){return Fe}),n.d(e,"de",function(){return Ue}),n.d(e,"ee",function(){return Ve}),n.d(e,"ze",function(){return qe}),n.d(e,"Kc",function(){return Ge}),n.d(e,"Ae",function(){return Xe}),n.d(e,"me",function(){return Ru}),n.d(e,"Fd",function(){return Ce}),n.d(e,"dc",function(){return Pe}),n.d(e,"Zb",function(){return Du}),n.d(e,"Fc",function(){return Mu}),n.d(e,"Db",function(){return Lu}),n.d(e,"oe",function(){return zu}),n.d(e,"H",function(){return Fu}),n.d(e,"Bc",function(){return Uu}),n.d(e,"yc",function(){return Vu}),n.d(e,"Sd",function(){return Wu}),n.d(e,"ke",function(){return qu}),n.d(e,"qd",function(){return $u}),n.d(e,"yb",function(){return Hu}),n.d(e,"Mb",function(){return Ku}),n.d(e,"md",function(){return Gu}),n.d(e,"Qb",function(){return Xu}),n.d(e,"Id",function(){return Ju}),n.d(e,"Eb",function(){return Qu}),n.d(e,"le",function(){return Ul}),n.d(e,"ge",function(){return Kt}),n.d(e,"Rb",function(){return Gt}),n.d(e,"jb",function(){return Xt}),n.d(e,"ie",function(){return Yt}),n.d(e,"Yc",function(){return Jt}),n.d(e,"gb",function(){return $t}),n.d(e,"Gb",function(){return Ft}),n.d(e,"Hb",function(){return Ut}),n.d(e,"re",function(){return Vt}),n.d(e,"se",function(){return Wt}),n.d(e,"ue",function(){return qt});
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};function s(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var u=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t};function c(t,e,n,r){return new(n||(n=Promise))(function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})}function l(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}var f={},h={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function p(t){t in f||(document.createElement("canvas").addEventListener("webglcontextlost",function(e){e.preventDefault(),delete f[t]},!1),f[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var e=document.createElement("canvas");return 1===t?e.getContext("webgl",h)||e.getContext("experimental-webgl",h):e.getContext("webgl2",h)}(t));var e=f[t];return e.isContextLost()?(delete f[t],p(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),f[t])}function d(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function m(t,e,n){return Math.max(t,Math.min(e,n))}function g(t){return t%2==0?t:t+1}function y(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function v(t,e){var n=Math.random();return e*n+(1-n)*t}function b(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function w(t,e,n){void 0===n&&(n=""),b(S(t,e),n+" Shapes "+t+" and "+e+" must match")}function _(t){b(null!=t,"The input to the tensor constructor must be a non-null value.")}function x(t,e){if(void 0===e&&(e=[]),Array.isArray(t)||L(t))for(var n=0;n<t.length;++n)x(t[n],e);else e.push(t);return e}function E(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function S(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function N(t){return t%1==0}function I(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function O(t){for(var e=Math.floor(Math.sqrt(t));e>1;--e)if(t%e==0)return[e,t/e];return[1,t]}function k(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function A(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise(function(r,i){var a=0,o=function(){if(t())r();else{var s=e(++a);null!=n&&a>=n?i():setTimeout(o,s)}};o()})}function C(t,e){for(var n=1,r=-1,i=0;i<t.length;++i)if(t[i]>=0)n*=t[i];else if(-1===t[i]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+i);r=i}else if(t[i]<0)throw Error("Shapes can not be < 0. Found "+t[i]+" at dim "+i);if(-1===r){if(e>0&&e!==n)throw Error("Size("+e+") must match the product of shape "+t);return t}if(0===n)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(e%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+e+" / "+n);var a=t.slice();return a[r]=e/n,a}function P(t,e){var n=e.length;return b((t=null==t?e.map(function(t,e){return e}):[].concat(t)).every(function(t){return t>=-n&&t<n}),"All values in axis param must be in range [-"+n+", "+n+") but got axis "+t),b(t.every(function(t){return N(t)}),"All values in axis param must be integers but got axis "+t),t.map(function(t){return t<0?n+t:t})}function T(t,e){for(var n=[],r=[],i=null==e?null:P(e,t).sort(),a=0,o=0;o<t.length;++o){if(null!=i){if(i[a]===o&&1!==t[o])throw new Error("Can't squeeze axis "+o+" since its dim '"+t[o]+"' is not 1");(null==i[a]||i[a]>o)&&1===t[o]&&(n.push(t[o]),r.push(o)),i[a]<=o&&a++}1!==t[o]&&(n.push(t[o]),r.push(o))}return{newShape:n,keptDims:r}}function R(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function D(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function M(t,e,n){if("float32"===e)for(var r=0;r<t.length;r++){var i=t[r];if(isNaN(i)||!isFinite(i))throw Error("The result of the '"+n+"' is "+i+".")}}function j(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+e+" being uploaded contains "+r+".")}}function B(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)}function L(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function z(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function F(t){if(null==t)return 0;var e=0;return t.forEach(function(t){return e+=2*t.length}),e}function U(t){return"string"==typeof t||t instanceof String}function V(t){return"boolean"==typeof t}function W(t){return"number"==typeof t}function q(t){return t instanceof Array?q(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":W(t)?"float32":U(t)?"string":V(t)?"bool":"float32"}function $(t){return!!(t&&t.constructor&&t.call&&t.apply)}function H(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function K(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function G(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=x(t)),n&&j(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){for(var r=new Uint8Array(t.length),i=0;i<r.length;++i)0!==Math.round(t[i])&&(r[i]=1);return r}throw new Error("Unknown data type "+e)}function X(t,e){for(var n=Y(t,e),r=0;r<n.length;r++)n[r]=1;return n}function Y(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function J(){if("undefined"!=typeof performance)return performance.now();if(void 0!==t){var e=t.hrtime();return 1e3*e[0]+e[1]/1e6}throw new Error("Cannot measure time in this environment. You should run tf.js in the browser or in Node.js")}var Z=Object.freeze({shuffle:d,clamp:m,nearestLargerEven:g,sum:y,randUniform:v,distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var i=Number(t[r])-Number(e[r]);n+=i*i}return n},assert:b,assertShapesMatch:w,assertNonNull:_,flatten:x,sizeFromShape:E,isScalarShape:function(t){return 0===t.length},arraysEqual:S,isInt:N,tanh:I,sizeToSquarishShape:O,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return d(e),e},rightPad:k,repeatedTry:A,inferFromImplicitShape:C,parseAxisParam:P,squeezeShape:T,getTypedArrayFromDType:R,getArrayFromDType:D,checkComputationForErrors:M,checkConversionForErrors:j,hasEncodingLoss:B,isTypedArray:L,bytesPerElement:z,bytesFromStringArray:F,isString:U,isBoolean:V,isNumber:W,inferDtype:q,isFunction:$,nearestDivisor:H,computeStrides:K,toTypedArray:G,makeOnesTypedArray:X,makeZerosTypedArray:Y,now:J}),Q=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new tt)}return t.prototype.profileKernel=function(t,e){var n,r=this,i=this.backendTimer.time(function(){n=e()});return(Array.isArray(n)?n:[n]).forEach(function(e){var n=e.dataSync();M(n,e.dtype,t),i.then(function(i){var a="";null!=i.getExtraProfileInfo&&(a=i.getExtraProfileInfo()),r.logger.logKernelProfile(t,e,n,i.kernelMs,a)})}),n},t}(),tt=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,i){var a=k(r+"ms",9),o=k(t,25),s=e.rank,u=e.size,c=k(e.shape.toString(),14);console.log("%c"+o+"\t%c"+a+"\t%c"+s+"D "+c+"\t%c"+u+"\t%c"+i,"font-weight:bold","color:red","color:blue","color: orange","color: green")},t}(),et=20,nt=3,rt=7;function it(t,e,n,r){var i=K(e),a=function(t,e,n,r){var i=E(e),a=r[r.length-1],o=new Array(a).fill(0),s=e.length,u="complex64"===n?ot(t):t;if(s>1)for(var c=0;c<i/a;c++)for(var l=c*a,f=0;f<a;f++)o[f]=Math.max(o[f],at(u[l+f],0).length);return o}(t,e,n,i),o=e.length,s=function t(e,n,r,i,a,o){void 0===o&&(o=!0);var s="complex64"===r?2:1,u=n[0],c=n.length;if(0===c)return"complex64"===r?[at(ot(e)[0],0)]:[e[0].toString()];if(1===c){if(u>et){var l=nt*s,f=Array.from(e.slice(0,l)),h=Array.from(e.slice(u-nt*s,u));return"complex64"===r&&(f=ot(f),h=ot(h)),["["+f.map(function(t,e){return at(t,a[e])}).join(", ")+", ..., "+h.map(function(t,e){return at(t,a[u-nt+e])}).join(", ")+"]"]}return["["+("complex64"===r?ot(e):Array.from(e)).map(function(t,e){return at(t,a[e])}).join(", ")+"]"]}var p=n.slice(1),d=i.slice(1),m=i[0]*s,g=[];if(u>et){for(var y=0;y<nt;y++){var v=(b=y*m)+m;g.push.apply(g,t(e.slice(b,v),p,r,d,a,!1))}for(g.push("..."),y=u-nt;y<u;y++)v=(b=y*m)+m,g.push.apply(g,t(e.slice(b,v),p,r,d,a,y===u-1))}else for(y=0;y<u;y++){var b;v=(b=y*m)+m,g.push.apply(g,t(e.slice(b,v),p,r,d,a,y===u-1))}var w=2===c?",":"";g[0]="["+g[0]+w;for(y=1;y<g.length-1;y++)g[y]=" "+g[y]+w;var _=",\n";for(y=2;y<c;y++)_+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(o?"":_),g}(t,e,n,i,a),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+o),u.push("  shape: ["+e+"]"),u.push("  values:")),u.push(s.map(function(t){return"    "+t}).join("\n")),u.join("\n")}function at(t,e){return k(Array.isArray(t)?parseFloat(t[0].toFixed(rt))+" + "+parseFloat(t[1].toFixed(rt))+"j":U(t)?"'"+t+"'":parseFloat(t.toFixed(rt)).toString(),e)}function ot(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var st=function(){function t(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=E(t),null!=n){var r=n.length;b(r===this.size,"Length of values '"+r+"' does not match the size inferred by the shape '"+this.size+"'.")}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||D(e,E(this.shape)),this.strides=K(t)}return t.prototype.set=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];0===e.length&&(e=[0]),b(e.length===this.rank,"The number of provided coordinates ("+e.length+") must match the rank ("+this.rank+")");var r=this.locToIndex(e);this.values[r]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=t[t.length-1],r=0;r<t.length-1;++r)n+=this.strides[r]*t[r];return this.values[n]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return ft.make(this.shape,{values:this.values},this.dtype)},t}(),ut=null,ct=null;function lt(t){ut=t}var ft=function(){function t(t,e,n,r){this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=E(t),this.strides=K(t),this.dataId=null!=r?r:{},this.id=ut().nextTensorId(),this.rankType=this.rank<5?this.rank.toString():"higher",ut().registerTensor(this),null!=n&&ut().write(this.dataId,n)}return t.make=function(e,n,r){return new t(e,r,n.values,n.dataId)},t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),b(1===this.size,"The array must have only 1 element."),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,i){return this.throwIfDisposed(),this.reshape([t,e,n,r,i])},t.prototype.asType=function(t){return this.throwIfDisposed(),ct.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];b(t.length===this.rank,"Number of coordinates in get() must match the rank of the tensor"),b("complex64"!==this.dtype,"Tensor.get() is not supported for complex64 tensors yet."),this.throwIfDisposed(),0===t.length&&(t=[0]);for(var n=t[t.length-1],r=0;r<t.length-1;++r)n+=this.strides[r]*t[r];return this.dataSync()[n]},t.prototype.buffer=function(){return ct.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.data=function(){return c(this,void 0,void 0,function(){return l(this,function(t){return this.throwIfDisposed(),[2,ut().read(this.dataId)]})})},t.prototype.dataSync=function(){return this.throwIfDisposed(),ut().readSync(this.dataId)},t.prototype.dispose=function(){this.isDisposed||(ut().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),ct.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),ct.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),ct.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),ct.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),ct.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),ct.clone(this)},t.prototype.toString=function(t){return void 0===t&&(t=!1),it(this.dataSync(),this.shape,this.dtype,t)},t.prototype.tile=function(t){return this.throwIfDisposed(),ct.tile(this,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),ct.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),ct.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),ct.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t="euclidean"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),ct.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),ct.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),ct.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),ct.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),ct.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),ct.stack([this,t],e)},t.prototype.unstack=function(t,e){return void 0===e&&(e=0),ct.unstack(this,e)},t.prototype.pad=function(t,e){return void 0===e&&(e=0),ct.pad(this,t,e)},t.prototype.batchNormalization=function(t,e,n,r,i){return void 0===n&&(n=.001),this.throwIfDisposed(),ct.batchNormalization(this,t,e,n,r,i)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),ct.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),ct.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),ct.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),ct.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),ct.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),ct.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),ct.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),ct.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),ct.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),ct.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),ct.cast(this,t)},t.prototype.add=function(t){return this.throwIfDisposed(),ct.add(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),ct.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),ct.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),ct.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),ct.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),ct.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),ct.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),ct.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),ct.mulStrict(this,t)},t.prototype.div=function(t){return this.throwIfDisposed(),ct.div(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),ct.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),ct.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),ct.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),ct.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),ct.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),ct.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),ct.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),ct.modStrict(this,t)},t.prototype.squaredDifference=function(t){return this.throwIfDisposed(),ct.squaredDifference(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),ct.squaredDifferenceStrict(this,t)},t.prototype.transpose=function(t){return this.throwIfDisposed(),ct.transpose(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),ct.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),ct.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),ct.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),ct.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),ct.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),ct.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),ct.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),ct.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),ct.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),ct.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),ct.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),ct.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),ct.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),ct.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),ct.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),ct.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),ct.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),ct.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),ct.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),ct.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),ct.sign(this)},t.prototype.exp=function(){return this.throwIfDisposed(),ct.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),ct.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),ct.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),ct.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),ct.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),ct.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),ct.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),ct.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),ct.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),ct.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),ct.relu(this)},t.prototype.elu=function(){return this.throwIfDisposed(),ct.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),ct.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),ct.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),ct.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),ct.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),ct.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),ct.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),ct.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),ct.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),ct.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),ct.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),ct.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),ct.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),ct.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),ct.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),ct.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),ct.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),ct.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),ct.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),ct.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),ct.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),ct.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),ct.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),ct.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),ct.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),ct.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),ct.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),ct.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,i,a){return void 0===r&&(r="NWC"),void 0===i&&(i=1),this.throwIfDisposed(),ct.conv1d(this,t,e,n,r,i,a)},t.prototype.conv2d=function(t,e,n,r,i,a){return void 0===r&&(r="NHWC"),void 0===i&&(i=[1,1]),this.throwIfDisposed(),ct.conv2d(this,t,e,n,r,i,a)},t.prototype.conv2dTranspose=function(t,e,n,r,i){return this.throwIfDisposed(),ct.conv2dTranspose(this,t,e,n,r,i)},t.prototype.depthwiseConv2D=function(t,e,n,r,i,a){return void 0===r&&(r="NHWC"),void 0===i&&(i=[1,1]),this.throwIfDisposed(),ct.depthwiseConv2d(this,t,e,n,r,i,a)},t.prototype.separableConv2d=function(t,e,n,r,i,a){return void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC"),this.throwIfDisposed(),ct.separableConv2d(this,t,e,n,r,i,a)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),ct.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),ct.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),ct.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,i){return this.throwIfDisposed(),ct.pool(this,t,e,n,r,i)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),ht.variable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),ct.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),ct.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),ct.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),ct.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,i,a,o,s){return void 0===r&&(r=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===o&&(o=0),void 0===s&&(s=0),this.throwIfDisposed(),ct.stridedSlice(this,t,e,n,r,i,a,o,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),ct.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),ct.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),ct.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),ct.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),ct.spectral.irfft(this)},t}();Object.defineProperty(ft,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var ht=function(t){function e(e,n,r){void 0===n&&(n=!0);var i=t.call(this,e.shape,e.dtype,null,e.dataId)||this;i.trainable=n,i.name=r,null==i.name&&(i.name=ut().nextVariableId().toString());try{ut().registerVariable(i)}catch(t){throw ut().disposeTensor(i),t}return i}return s(e,t),e.variable=function(t,n,r,i){return void 0===n&&(n=!0),null!=i&&i!==t.dtype&&(t=t.asType(i)),new e(t,n,r)},e.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!S(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");ut().disposeTensor(this),this.dataId=t.dataId,ut().registerTensor(this)},e}(ft);Object.defineProperty(ht,Symbol.hasInstance,{value:function(t){return t instanceof ft&&null!=t.assign&&t.assign instanceof Function}});var pt,dt,mt,gt,yt,vt,bt=ht.variable;(vt=pt||(pt={})).R0="R0",vt.R1="R1",vt.R2="R2",vt.R3="R3",vt.R4="R4",vt.R5="R5",vt.R6="R6",function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(dt||(dt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(mt||(mt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(gt||(gt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(yt||(yt={}));var wt={float32:gt,int32:dt,bool:mt,complex64:yt};function _t(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error("Can not upcast "+t+" with "+e)}return wt[t][e]}function xt(t){return _t(t,"int32")}function Et(t,e){if(t.dtype===e.dtype)return[t,e];var n=_t(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function St(t){var e=[];return function t(e,n,r){if(null!=e)if(e instanceof ft)n.push(e);else if(function(t){return Array.isArray(t)||"object"==typeof t}(e)){var i=e;for(var a in i){var o=i[a];r.has(o)||(r.add(o),t(o,n,r))}}}(t,e,new Set),e}var Nt,It=function(){function t(t,e,n){this.backend=t,this.safeMode=e,this.debugMode=n,this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.profiling=!1,this.gradientScopeCount=0,this.customGradientDepth=0,this.scopeStack=[],this.keepTensors=new Set,this.tensorInfo=new WeakMap,this.profiler=new Q(t),this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.moveData=function(t){this.write(t,this.readSync(t))},t.prototype.tidy=function(t,e,n){var r=this;void 0===n&&(n=!1);var i,a=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");a=t}return this.scopedRun(function(){return r.startScope(a,n)},function(){return r.endScope(i,n)},function(){return(i=e())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),i})},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.runKernel=function(t,e,n){var r,i=this,a=[],o=function(t){return a.push(t),t},s=this.activeScope.name,u=this.numBytes,c=this.numTensors;if(this.scopedRun(function(){return i.customGradientDepth++},function(){return i.customGradientDepth--},function(){r=i.debugMode()?i.profiler.profileKernel(s,function(){return t(i.backend,o)}):t(i.backend,o)}),this.shouldRecord()){var l={id:this.nextTapeNodeId++,name:s,inputs:e,outputs:Array.isArray(r)?r:[r]};null!=n&&(l.gradient=function(t){return n(t,a)}),this.activeTape.push(l)}return this.profiling&&this.activeProfile.kernels.push({name:s,bytesAdded:this.numBytes-u,totalBytesSnapshot:this.numBytes,tensorsAdded:this.numTensors-c,totalTensorsSnapshot:this.numTensors,inputShapes:Object.keys(e).map(function(t){return e[t].shape}),outputShape:Array.isArray(r)?r.map(function(t){return t.shape}):r.shape}),r},t.prototype.registerTensor=function(t){var e=this.tensorInfo.has(t.dataId)?this.tensorInfo.get(t.dataId).refCount:0;if(this.numTensors++,"string"===t.dtype&&this.numStringTensors++,0===e){this.numDataBuffers++;var n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=E(t.shape)*z(t.dtype)),this.tensorInfo.set(t.dataId,{backend:this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.numBytes+=n,this.backend.register(t.dataId,t.shape,t.dtype)}this.tensorInfo.get(t.dataId).refCount++,t instanceof ht||this.track(t)},t.prototype.registerVariable=function(t){if(null!=this.registeredVariables[t.name])throw new Error("Variable with name "+t.name+" was already registered");this.registeredVariables[t.name]=t},t.prototype.disposeTensor=function(t){if(this.tensorInfo.has(t.dataId)){this.keepTensors.has(t.id)&&this.keepTensors.delete(t.id),this.numTensors--,"string"===t.dtype&&this.numStringTensors--;var e=this.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.numBytes-=e.bytes),this.numDataBuffers--,e.backend.disposeData(t.dataId),this.tensorInfo.delete(t.dataId)):this.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.registeredVariables){var e=this.registeredVariables[t];this.disposeTensor(e),delete this.registeredVariables[t]}},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.numTensors,t.numDataBuffers=this.numDataBuffers,t.numBytes=this.numBytes,this.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return c(this,void 0,void 0,function(){var e,n;return l(this,function(r){return this.profiling=!0,e=this.numBytes,n=this.numTensors,this.activeProfile.kernels=[],this.activeProfile.result=t(),this.profiling=!1,this.activeProfile.peakBytes=Math.max.apply(Math,this.activeProfile.kernels.map(function(t){return t.totalBytesSnapshot})),this.activeProfile.newBytes=this.numBytes-e,this.activeProfile.newTensors=this.numTensors-n,[2,this.activeProfile]})})},t.prototype.shouldRecord=function(){return null!=this.activeTape&&0===this.customGradientDepth},t.prototype.addTapeNode=function(t,e,n){var r={};t.forEach(function(t,e){r[e]=t});var i={id:this.nextTapeNodeId++,name:this.activeScope.name,inputs:r,outputs:[e],gradient:function(t){var e={};return n(t).forEach(function(t,n){e[n]=function(){return t}}),e}};this.activeTape.push(i)},t.prototype.keep=function(t){if(1===this.scopeStack.length&&this.safeMode)throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {...}) to avoid memory leaks.");return this.keepTensors.add(t.id),t},t.prototype.startScope=function(t,e){void 0===e&&(e=!1),e&&0===this.gradientScopeCount&&(this.activeTape=[]),e&&this.gradientScopeCount++;var n={track:[],name:"unnamed scope"};t&&(n.name=t),this.scopeStack.push(n),this.activeScope=n},t.prototype.endScope=function(t,e){var n=this;void 0===e&&(e=!1),e&&(this.gradientScopeCount--,0===this.gradientScopeCount&&(this.activeTape=null));var r=new Set(this.keepTensors),i=St(t);i.forEach(function(t){return r.add(t.id)});for(var a=0;a<this.activeScope.track.length;a++){var o=this.activeScope.track[a];r.has(o.id)||(null!=this.activeTape?i.push(o):o.dispose())}var s=this.scopeStack.pop();this.activeScope=0===this.scopeStack.length?null:this.scopeStack[this.scopeStack.length-1],i.forEach(function(t){!n.keepTensors.has(t.id)&&function(t,e){for(var n=0;n<e.length;n++)if(e[n].id===t.id)return!0;return!1}(t,s.track)&&n.track(t)})},t.prototype.gradients=function(t,e,n,r){var i=this;if(void 0===r&&(r=!1),b(e.length>0,"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '"+n.dtype+"'");return this.tidy("gradients",function(){var a=t();b(a instanceof ft,"The result y returned by f() must be a tensor.");var o=function(t,e,n){for(var r={},i={},a=0;a<e.length;a++)r[e[a].id]=!0;for(a=0;a<t.length;a++){var o=(d=t[a]).inputs;for(var s in o){for(var u=o[s],c=!1,l=0;l<e.length;l++)if(r[u.id]){d.outputs.forEach(function(t){return r[t.id]=!0}),c=!0,i[d.id]=!0;break}if(c)break}}var f={};f[n.id]=!0;var h={};for(a=t.length-1;a>=0;a--)for(o=(d=t[a]).inputs,l=0;l<d.outputs.length;l++)if(f[d.outputs[l].id]){for(var s in o)f[o[s].id]=!0,h[d.id]=!0;break}var p=[];for(a=0;a<t.length;a++){var d;if(i[(d=t[a]).id]&&h[d.id]){var m={};for(var s in d.inputs){var g=d.inputs[s];r[g.id]&&(m[s]=g)}var y=Object.assign({},d);y.inputs=m,y.outputs=d.outputs,p.push(y)}}return p}(i.activeTape,e,a);if(!r&&0===o.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");var s={};return s[a.id]=null==n?function(t){var e=X(E(t),"float32");return ft.make(t,{values:e})}(a.shape):n,function(t,e){for(var n=function(n){var r=e[n],i=[];if(r.outputs.forEach(function(e){var n=t[e.id];if(null!=n)i.push(n);else{var r=ft.make(e.shape,{values:Y(e.size,e.dtype)},e.dtype);i.push(r)}}),null==r.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+r.name+".");var a=r.gradient(1===r.outputs.length?i[0]:i);for(var o in r.inputs){if(!(o in a))throw new Error("Cannot backprop through input "+o+". Available gradients found: "+Object.keys(a)+".");var s=a[o]();if("float32"!==s.dtype)throw new Error("Error in gradient for op "+r.name+". The gradient of input "+o+" must have 'float32' dtype, but has '"+s.dtype+"'");var u=r.inputs[o];if(!S(s.shape,u.shape))throw new Error("Error in gradient for op "+r.name+". The gradient of input '"+o+"' has shape '"+s.shape+"', which does not match the shape of the input '"+u.shape+"'");if(null==t[u.id])t[u.id]=s;else{var c=t[u.id];t[u.id]=c.add(s),c.dispose()}}},r=e.length-1;r>=0;r--)n(r)}(s,o),{value:a,grads:e.map(function(t){return s[t.id]})}},!0)},t.prototype.customGrad=function(t){var e=this;return b($(t),"The f passed in customGrad(f) must be a function."),function(){for(var n,r,i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];return b(i.every(function(t){return t instanceof ft}),"The args passed in customGrad(f)(x1, x2,...) must all be tensors"),e.scopedRun(function(){return e.customGradientDepth++},function(){return e.customGradientDepth--},function(){r=e.tidy(t.name,function(){var e=t.apply(void 0,i),r=e.value,a=e.gradFunc;return b(r instanceof ft,"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),b($(a),"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n=a,r},!0)}),e.shouldRecord()&&e.addTapeNode(i,r,function(t){var e=n(t),r=Array.isArray(e)?e:[e];return b(r.length===i.length,"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),b(r.every(function(t){return t instanceof ft}),"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."),r}),r}},t.prototype.write=function(t,e){var n=this.tensorInfo.get(t);if("string"===n.dtype){var r=F(e);this.numBytes+=r-n.bytes,n.bytes=r}this.backend!==n.backend&&(n.backend.disposeData(t),n.backend=this.backend,this.backend.register(t,n.shape,n.dtype)),this.backend.write(t,e)},t.prototype.readSync=function(t){return this.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.tensorInfo.get(t).backend.read(t)},t.prototype.fromPixels=function(t,e){return this.backend.fromPixels(t,e)},t.prototype.time=function(t){return c(this,void 0,void 0,function(){var e,n;return l(this,function(r){switch(r.label){case 0:return e=J(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=J()-e,[2,n]}})})},t.prototype.track=function(t){if(1===this.scopeStack.length&&this.safeMode)throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {op();...}); to avoid memory leaks.");return null!=this.activeScope&&this.activeScope.track.push(t),t},t.nextTensorId=0,t.nextVariableId=0,t}();!function(t){t[t.NUMBER=0]="NUMBER",t[t.BOOLEAN=1]="BOOLEAN",t[t.STRING=2]="STRING"}(Nt||(Nt={}));var Ot,kt,At=[{name:"DEBUG",type:Nt.BOOLEAN},{name:"IS_BROWSER",type:Nt.BOOLEAN},{name:"WEBGL_LAZILY_UNPACK",type:Nt.BOOLEAN},{name:"WEBGL_CPU_FORWARD",type:Nt.BOOLEAN},{name:"WEBGL_PACK",type:Nt.BOOLEAN},{name:"WEBGL_PACK_BATCHNORMALIZATION",type:Nt.BOOLEAN},{name:"WEBGL_PACK_CLIP",type:Nt.BOOLEAN},{name:"WEBGL_PACK_DEPTHWISECONV",type:Nt.BOOLEAN},{name:"WEBGL_PACK_BINARY_OPERATIONS",type:Nt.BOOLEAN},{name:"WEBGL_CONV_IM2COL",type:Nt.BOOLEAN},{name:"WEBGL_MAX_TEXTURE_SIZE",type:Nt.NUMBER},{name:"WEBGL_NUM_MB_BEFORE_PAGING",type:Nt.NUMBER},{name:"WEBGL_MAX_TEXTURES_IN_SHADER",type:Nt.NUMBER},{name:"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",type:Nt.NUMBER},{name:"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",type:Nt.BOOLEAN},{name:"WEBGL_VERSION",type:Nt.NUMBER},{name:"WEBGL_RENDER_FLOAT32_ENABLED",type:Nt.BOOLEAN},{name:"WEBGL_DOWNLOAD_FLOAT_ENABLED",type:Nt.BOOLEAN},{name:"WEBGL_FENCE_API_ENABLED",type:Nt.BOOLEAN},{name:"WEBGL_SIZE_UPLOAD_UNIFORM",type:Nt.NUMBER},{name:"BACKEND",type:Nt.STRING},{name:"EPSILON",type:Nt.NUMBER},{name:"PROD",type:Nt.BOOLEAN},{name:"TENSORLIKE_CHECK_SHAPE_CONSISTENCY",type:Nt.BOOLEAN}];function Ct(t){try{if(null!=p(t))return!0}catch(t){return!1}return!1}var Pt="tfjsflags";function Tt(){var t={};if("undefined"==typeof window||void 0===window.location||void 0===window.location.search)return t;var e=function(t){var e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")}),e}(window.location.search);if(Pt in e){var n={};e[Pt].split(",").forEach(function(t){var e=t.split(":"),r=e[0],i=e[1];n[r]=i}),At.forEach(function(e){e.name in n&&(console.log("Setting feature override from URL "+e.name+": "+n[e.name]),e.type===Nt.NUMBER?t[e.name]=+n[e.name]:e.type===Nt.BOOLEAN?t[e.name]="true"===n[e.name]:e.type===Nt.STRING?t[e.name]=n[e.name]:console.warn("Unknown URL param: "+e.name+"."))})}return t}function Rt(t,e){return null!=t.getExtension(e)}function Dt(t,e){var n=t.createFramebuffer(),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);var i=2===e?t.RGBA32F:t.RGBA;t.texImage2D(t.TEXTURE_2D,0,i,1,1,0,t.RGBA,t.FLOAT,null),t.bindFramebuffer(t.FRAMEBUFFER,n),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(n),a}var Mt=600;var jt=function(){function e(t){this.features={},this.registry={},null!=t&&(this.features=t),this.get("DEBUG")&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}return e.setBackend=function(t,e){if(void 0===e&&(e=!1),!(t in Lt.registry))throw new Error("Backend name '"+t+"' not found in registry");Lt.engine.backend=Lt.findBackend(t),Lt.backendName=t},e.getBackend=function(){return Lt.initEngine(),Lt.backendName},e.disposeVariables=function(){Lt.engine.disposeVariables()},e.memory=function(){return Lt.engine.memory()},e.profile=function(t){return Lt.engine.profile(t)},e.tidy=function(t,e){return Lt.engine.tidy(t,e)},e.dispose=function(t){St(t).forEach(function(t){return t.dispose()})},e.keep=function(t){return Lt.engine.keep(t)},e.time=function(t){return Lt.engine.time(t)},e.prototype.get=function(t){return t in this.features?this.features[t]:(this.features[t]=this.evaluateFeature(t),this.features[t])},e.prototype.getFeatures=function(){return this.features},e.prototype.set=function(t,e){this.features[t]=e},e.prototype.getBestBackendName=function(){var t=this;if(0===Object.keys(this.registry).length)throw new Error("No backend found in registry.");return Object.keys(this.registry).map(function(e){return{name:e,entry:t.registry[e]}}).sort(function(t,e){return e.entry.priority-t.entry.priority})[0].name},e.prototype.evaluateFeature=function(e){if("DEBUG"===e)return!1;if("IS_BROWSER"===e)return"undefined"!=typeof window;if("IS_NODE"===e)return void 0!==t&&void 0!==t.versions&&void 0!==t.versions.node;if("IS_CHROME"===e)return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor);if("WEBGL_CPU_FORWARD"===e)return!0;if("WEBGL_PACK"===e)return!1;if("WEBGL_PACK_BATCHNORMALIZATION"===e)return this.get("WEBGL_PACK");if("WEBGL_PACK_CLIP"===e)return this.get("WEBGL_PACK");if("WEBGL_PACK_DEPTHWISECONV"===e)return this.get("WEBGL_PACK");if("WEBGL_PACK_BINARY_OPERATIONS"===e)return this.get("WEBGL_PACK");if("WEBGL_LAZILY_UNPACK"===e)return this.get("WEBGL_PACK");if("WEBGL_CONV_IM2COL"===e)return this.get("WEBGL_PACK");if("WEBGL_NUM_MB_BEFORE_PAGING"===e)return this.get("PROD")||!this.get("IS_BROWSER")?Number.POSITIVE_INFINITY:window.screen.height*window.screen.width*window.devicePixelRatio*Mt/1024;if("WEBGL_MAX_TEXTURE_SIZE"===e)return function(t){if(null==Ot){var e=p(t);Ot=e.getParameter(e.MAX_TEXTURE_SIZE)}return Ot}(this.get("WEBGL_VERSION"));if("WEBGL_MAX_TEXTURES_IN_SHADER"===e)return function(t){if(null==kt){var e=p(t);kt=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,kt)}(this.get("WEBGL_VERSION"));if("IS_TEST"===e)return!1;if("BACKEND"===e)return this.getBestBackendName();if("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"===e){var n=this.get("WEBGL_VERSION");return 0===n?0:function(t){if(0===t)return 0;var e=p(t);return Rt(e,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Rt(e,"EXT_disjoint_timer_query")?1:0}(n)}if("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"===e)return this.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!function(){var t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}();if("HAS_WEBGL"===e)return this.get("WEBGL_VERSION")>0;if("WEBGL_VERSION"===e)return Ct(2)?2:Ct(1)?1:0;if("WEBGL_RENDER_FLOAT32_ENABLED"===e)return function(t){if(0===t)return!1;var e=p(t);if(1===t){if(!Rt(e,"OES_texture_float"))return!1}else if(!Rt(e,"EXT_color_buffer_float"))return!1;return Dt(e,t)}(this.get("WEBGL_VERSION"));if("WEBGL_DOWNLOAD_FLOAT_ENABLED"===e)return function(t){if(0===t)return!1;var e=p(t);if(1===t){if(!Rt(e,"OES_texture_float"))return!1;if(!Rt(e,"WEBGL_color_buffer_float"))return!1}else if(!Rt(e,"EXT_color_buffer_float"))return!1;return Dt(e,t)}(this.get("WEBGL_VERSION"));if("WEBGL_FENCE_API_ENABLED"===e)return function(t){return 2===t&&null!=p(t).fenceSync}(this.get("WEBGL_VERSION"));if("WEBGL_SIZE_UPLOAD_UNIFORM"===e)return this.get("WEBGL_RENDER_FLOAT32_ENABLED")?4:0;if("TEST_EPSILON"===e)return 32===this.backend.floatPrecision()?.001:.1;if("EPSILON"===e)return 32===this.backend.floatPrecision()?1e-7:1e-4;if("PROD"===e)return!1;if("TENSORLIKE_CHECK_SHAPE_CONSISTENCY"===e)return!this.get("PROD");throw new Error("Unknown feature "+e+".")},e.prototype.setFeatures=function(t){this.features=Object.assign({},t)},e.prototype.reset=function(){this.features=Tt(),null!=this.globalEngine&&(this.globalEngine=null)},Object.defineProperty(e.prototype,"backend",{get:function(){return this.engine.backend},enumerable:!0,configurable:!0}),e.prototype.findBackend=function(t){return t in this.registry?this.registry[t].backend:null},e.prototype.registerBackend=function(t,e,n,r){var i=this;if(void 0===n&&(n=1),t in this.registry)return console.warn(t+" backend was already registered. Reusing existing backend"),null!=r&&r(function(){return i.engine}),!1;try{var a=e();return a.setDataMover({moveData:function(t){return i.engine.moveData(t)}}),this.registry[t]={backend:a,priority:n},!0}catch(e){return console.warn("Registration of backend "+t+" failed"),console.warn(e.stack||e.message),!1}},e.prototype.removeBackend=function(t){if(!(t in this.registry))throw new Error(t+" backend not found in registry");this.registry[t].backend.dispose(),delete this.registry[t]},Object.defineProperty(e.prototype,"engine",{get:function(){return this.initEngine(),this.globalEngine},enumerable:!0,configurable:!0}),e.prototype.initEngine=function(){var t=this;if(null==this.globalEngine){this.backendName=this.get("BACKEND");var e=this.findBackend(this.backendName);this.globalEngine=new It(e,!1,function(){return t.get("DEBUG")})}},e}();function Bt(){Lt.set("PROD",!0)}var Lt=function(){var e=function(){var e;if("undefined"!=typeof window)e=window;else{if(void 0===t)throw new Error("Could not find a global object");e=t}return e}();return null==e.ENV&&(e.ENV=new jt(Tt()),lt(function(){return e.ENV.engine})),e.ENV}(),zt=Object.freeze({EPSILON_FLOAT16:1e-4,EPSILON_FLOAT32:1e-7,Environment:jt,enableProdMode:Bt,ENV:Lt});function Ft(t){return b($(t),"The f passed in grad(f) must be a function"),function(e,n){return b(e instanceof ft,"The x passed in grad(f)(x) must be a tensor"),b(null==n||n instanceof ft,"The dy passed in grad(f)(x, dy) must be a tensor"),Lt.engine.tidy(function(){var r=Lt.engine.gradients(function(){return t(e)},[e],n),i=r.value,a=r.grads;return null!=n&&w(i.shape,n.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Ht(a),a[0]})}}function Ut(t){return b($(t),"The f passed in grads(f) must be a function"),function(e,n){return b(Array.isArray(e)&&e.every(function(t){return t instanceof ft}),"The args passed in grads(f)(args) must be an array of tensors"),b(null==n||n instanceof ft,"The dy passed in grads(f)(args, dy) must be a tensor"),Lt.engine.tidy(function(){var r=Lt.engine.gradients(function(){return t.apply(void 0,e)},e,n),i=r.value,a=r.grads;return null!=n&&w(i.shape,n.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Ht(a),a})}}function Vt(t){return b($(t),"The f passed in valueAndGrad(f) must be a function"),function(e,n){b(e instanceof ft,"The x passed in valueAndGrad(f)(x) must be a tensor"),b(null==n||n instanceof ft,"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");var r=Lt.engine.gradients(function(){return t(e)},[e],n),i=r.grads,a=r.value;return Ht(i),{grad:i[0],value:a}}}function Wt(t){return b($(t),"The f passed in valueAndGrads(f) must be a function"),function(e,n){b(Array.isArray(e)&&e.every(function(t){return t instanceof ft}),"The args passed in valueAndGrads(f)(args) must be array of tensors"),b(null==n||n instanceof ft,"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");var r=Lt.engine.gradients(function(){return t.apply(void 0,e)},e,n);return null!=n&&w(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Ht(r.grads),r}}function qt(t,e){if(b($(t),"The f passed in variableGrads(f) must be a function"),b(null==e||Array.isArray(e)&&e.every(function(t){return t instanceof ht}),"The varList passed in variableGrads(f, varList) must be an array of variables"),null==e)for(var n in e=[],Lt.engine.registeredVariables)e.push(Lt.engine.registeredVariables[n]);var r=e.length;b((e=e.filter(function(t){return t.trainable})).length>0,"variableGrads() expects at least one of the input variables to be trainable, but none of the "+r+" variables is trainable.");var i=Lt.engine.gradients(t,e,null,!0),a=i.value,o=i.grads;b(o.some(function(t){return null!=t}),"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),b(0===a.rank,"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+a.rank+" tensor");var s={};return e.forEach(function(t,e){null!=o[e]&&(s[t.name]=o[e])}),{value:a,grads:s}}function $t(t){return Lt.engine.customGrad(t)}function Ht(t){if(t.filter(function(t){return null==t}).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var Kt=jt.tidy,Gt=jt.keep,Xt=jt.dispose,Yt=jt.time,Jt=jt.profile;function Zt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Lt.get("IS_TEST")||console.warn.apply(console,t)}function Qt(t,e,n,r){void 0===r&&(r=!0);var i=[];if(r)(i=i.concat(e.slice(0))).push(t[0]/n),i=i.concat(t.slice(1));else{i=i.concat(t[0]);for(var a=e.length,o=0;o<a;++o)i=i.concat([t[o+1]/e[o],e[o]]);i=i.concat(t.slice(a+1))}return i}function te(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var i=e+1;i<t;++i)i<=2*e?(r.push(i),r.push(i-(e+1))):r.push(i)}else{var a=[],o=[];for(i=1;i<t;++i)i>=2*e+1||i%2==1?o.push(i):a.push(i);r.push.apply(r,a),r.push(0),r.push.apply(r,o)}return r}function ee(t,e,n,r){void 0===r&&(r=!0);var i=[];r?i.push(t[0]/n):i.push(t[0]*n);for(var a=1;a<t.length;++a)a<=e.length?r?i.push(e[a-1]*t[a]):i.push(t[a]/e[a-1]):i.push(t[a]);return i}function ne(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function re(t,e,n){for(var r=t.slice(0,1),i=0;i<n;++i)r.push(t[i+1]-e[i][0]-e[i][1]);return r}function ie(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function ae(t,e){for(var n=[],r=t.length,i=0;i<r;i++)-1===e.indexOf(i)&&n.push(t[i]);return[n,e.map(function(e){return t[e]})]}function oe(t,e){return function(t,e,n){for(var r=t.length+e.length,i=[],a=0,o=0,s=0;s<r;s++)-1===n.indexOf(s)?i.push(t[a++]):i.push(e[o++]);return i}(t,e.map(function(t){return 1}),e)}function se(t,e,n){b(ie(e,n),t+" supports only inner-most axes for now. Got axes "+e+" and rank-"+n+" input.")}function ue(t,e){if(ie(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(function(t){return n.push(t)}),n}function ce(t){return t.map(function(t,e){return[e,t]}).sort(function(t,e){return t[1]-e[1]}).map(function(t){return t[0]})}function le(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function fe(t,e){for(var n=t.length,r=[],i=0;i<n;i++){var a=n-1-i,o=t[a]||1;(e[e.length-1-i]||1)>1&&1===o&&r.unshift(a)}return r}function he(t,e){for(var n=[],r=0;r<e.length;r++){var i=t[t.length-r-1],a=e.length-r-1,o=e[a];(null==i||1===i&&o>1)&&n.unshift(a)}return n}function pe(t,e){for(var n=[],r=Math.max(t.length,e.length),i=0;i<r;i++){var a=t[t.length-i-1];null==a&&(a=1);var o=e[e.length-i-1];if(null==o&&(o=1),1===a)n.unshift(o);else if(1===o)n.unshift(a);else{if(a!==o)throw Error("Operands could not be broadcast together with shapes "+t+" and "+e+".");n.unshift(a)}}return n}function de(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function me(t,e){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(e.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if("int32"!==e.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+e.dtype+".");if(e.shape[e.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+e.shape[e.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var n=e.shape,r=n[n.length-1],i=1,a=0;a<n.length-1;++a)i*=n[a];var o=t.shape,s=n.slice();s.pop();var u=1;for(a=r;a<t.rank;++a)u*=o[a],s.push(o[a]);var c=K(t.shape).map(function(t){return t/u}).concat([1]).slice(0,r);return[s,i,u,c]}var ge=30;function ye(t){return t<=ge?t:H(t,Math.floor(Math.sqrt(t)))}function ve(t,e,n){if(e.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}!function(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,i=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+", indices.shape: "+e.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+i+".";if(n.rank<i)throw new Error(a+" update.rank < "+i+". ");if(t.length<r+(n.rank-i))throw new Error(a+" Output shape length < "+(r+(n.rank-i)));if(n.rank!==i+t.length-r)throw new Error(a+" update.rank != "+(i+t.length-r));for(var o=0;o<i;++o)if(n.shape[o]!==e.shape[o])throw new Error(a+" updates.shape["+o+"] ("+n.shape[o]+") != indices.shape["+o+"] ("+e.shape[o]+").");for(o=0;o<n.rank-i;++o)if(n.shape[o+i]!==t[o+r])throw new Error(a+" updates.shape["+(o+i)+"] ("+n.shape[o+i]+") != shape["+(o+i)+"] ("+t[o+i]+")")}(n,e,t)}function be(t,e,n){for(var r=e.rank>1?e.shape[e.rank-1]:1,i=n.length,a=1,o=r;o<i;++o)a*=n[o];var s=r<1?1:r;return{sliceRank:r,numUpdates:e.size/s,sliceSize:a,strides:K(n.slice(0,r)).concat([1]),outputSize:E(n)}}function we(t,e,n,r,i,a,o,s,u){if(void 0===i&&(i=0),void 0===a&&(a=0),void 0===o&&(o=0),void 0===s&&(s=0),void 0===u&&(u=0),0!==o)throw new Error("ellipsis mask is not yet supported");if(0!==s)throw new Error("new axis mask is not yet supported");for(var c=[],l=[],f=[],h=0;h<t.length;h++)c[h]=_e(i,e,r,t,h),l[h]=xe(a,n,r,t,h),u&1<<h&&(l[h]=c[h]+1,f.push(h));var p=new Array(t.length).fill(0);return p=p.map(function(t,e){for(var n=0,i=c[e];!(r[e]>0?i>=l[e]:i<=l[e]);i+=r[e])n+=1;return n}),[c,p,f]}function _e(t,e,n,r,i){var a=e[i];t&1<<i&&(a=n[i]>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var o=r[i];return a<0&&(a+=o),m(0,a,o-1)}function xe(t,e,n,r,i){var a=e[i];t&1<<i&&(a=n[i]>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var o=r[i];return a<0&&(a+=o),n[i]>0?m(0,a,o):m(-1,a,o-1)}function Ee(t,e,n){for(var r=n.length,i=0;i<n.length;i++)if(n[i]>1){r=i;break}for(i=r+1;i<n.length;i++)if(e[i]>0||n[i]!==t[i])return!1;return!0}function Se(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function Ne(t){var e=t;if(L(t))return[t.length];if(!Array.isArray(t))return[];for(var n=[];e instanceof Array||L(e);)n.push(e.length),e=e[0];return t instanceof Array&&Lt.get("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],e instanceof Array||L(e)){b(n.length>0,function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+e.length+" elements"}),b(e.length===n[0],function(){return"Element arr["+r.join("][")+"] should have "+n[0]+" elements, but has "+e.length+" elements"});for(var i=n.slice(1),a=0;a<e.length;++a)t(e[a],i,r.concat(a))}else b(0===n.length,function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+n[0]+" elements"})}(t,n,[]),n}function Ie(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error("Argument '"+n+"' passed to '"+r+"' must be "+t+" tensor, but got "+e+" tensor")}function Oe(t,e,n,r){if(void 0===r&&(r="numeric"),t instanceof ft)return Ie(r,t.dtype,e,n),t;var i=q(t);if("string"!==i&&["bool","int32","float32"].indexOf(r)>=0&&(i=r),Ie(r,i,e,n),!L(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("Argument '"+e+"' passed to '"+n+"' must be a Tensor or TensorLike, but got '"+t.constructor.name+"'");var a=Ne(t);L(t)||Array.isArray(t)||(t=[t]);var o="string"!==i?G(t,i,Lt.get("DEBUG")):x(t);return ft.make(a,{values:o},i)}function ke(t,e,n){if(!Array.isArray(t))throw new Error("Argument "+e+" passed to "+n+" must be a `Tensor[]` or `TensorLike[]`");return t.map(function(t,r){return Oe(t,e+"["+r+"]",n)})}function Ae(t){var e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");var n=e[0],r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));var i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Lt.engine.startScope(n);try{var i=r.apply(void 0,t);return i instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Lt.engine.endScope(i),i}catch(t){throw Lt.engine.endScope(null),t}};return Object.defineProperty(i,"name",{value:n,configurable:!0}),i}var Ce=Ae({softmax_:function(t,e){void 0===e&&(e=-1);var n=Oe(t,"logits","softmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and dim was "+e);return $t(function(t){var n=t.logSumExp([e],!0),r=t.toFloat().sub(n).exp();return{value:r,gradFunc:function(t){var n=t.mul(r);return n.sub(n.sum([e],!0).mul(r))}}})(n)}}),Pe=Ae({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=Oe(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and axis was "+e);return $t(function(t){var n=t.max(e,!0),r=t.sub(n),i=r.toFloat().sub(r.exp().sum(e,!0).log());return{value:i,gradFunc:function(t){var n=i.exp();return t.sub(t.sum(e,!0).mul(n))}}})(n)}});var Te=Ae({complex_:function(t,e){var n=Oe(t,"real","complex"),r=Oe(e,"imag","complex");return w(n.shape,r.shape,"real and imag shapes, "+n.shape+" and "+r.shape+", must match in call to tf.complex()."),Lt.engine.runKernel(function(t){return t.complex(n,r)},{$real:n,$imag:r})}}),Re=Ae({real_:function(t){var e=Oe(t,"input","real");return Lt.engine.runKernel(function(t){return t.real(e)},{$input:e})}}),De=Ae({imag_:function(t){var e=Oe(t,"input","imag");return Lt.engine.runKernel(function(t){return t.imag(e)},{$input:e})}});function Me(t,e,n){if(null==n&&(n=q(t)),"complex64"===n)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!L(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");var r=Ne(t);if(null!=e){var i=E(e),a=E(r);b(i===a,function(){return"Based on the provided shape, ["+e+"], the tensor should have "+i+" values but has "+a});for(var o=0;o<r.length;++o){var s=r[o],u=o!==r.length-1||s!==E(e.slice(o));b(r[o]===e[o]||!u,function(){return"Error creating a new Tensor. Inferred shape ("+r+") does not match the provided shape ("+e+"). "})}}return L(t)||Array.isArray(t)||(t=[t]),e=e||r,t="string"!==n?G(t,n,Lt.get("DEBUG")):x(t),ft.make(e,{values:t},n)}function je(t,e){if((L(t)||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");return Me(t,[],e)}function Be(t,e){_(t);var n=Ne(t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Me(t,n,e)}function Le(t,e,n){if(_(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");var r=Ne(t);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Me(t,e=e||r,n)}function ze(t,e,n){if(_(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");var r=Ne(t);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Me(t,e=e||r,n)}function Fe(t,e,n){if(_(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");var r=Ne(t);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Me(t,e=e||r,n)}function Ue(t,e,n){if(_(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");var r=Ne(t);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Me(t,e=e||r,n)}function Ve(t,e,n){if(_(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");var r=Ne(t);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Me(t,e=e||r,n)}function We(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=We(t,"float32"),r=We(t,"float32");return Te(n,r)}var i=X(E(t),e);return ft.make(t,{values:i},e)}function qe(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=qe(t,"float32"),r=qe(t,"float32");return Te(n,r)}var i=Y(E(t),e);return ft.make(t,{values:i},e)}function $e(t,e,n){var r=D(n=n||q(e),E(t));return r.fill(e),ft.make(t,{values:r},n)}function He(t,e,n){if(0===n)throw new Error("Cannot request zero samples");var r=(e-t)/(n-1),i=Y(n,"float32");i[0]=t;for(var a=1;a<i.length;a++)i[a]=i[a-1]+r;return Be(i,"float32")}function Ke(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r="float32"),0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return qe([0],r);var i=Y(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),i[0]=t;for(var a=1;a<i.length;a++)i[a]=i[a-1]+n;return Be(i,r)}var Ge=Ae({onesLike_:function(t){var e=Oe(t,"x","onesLike");return We(e.shape,e.dtype)}}),Xe=Ae({zerosLike_:function(t){var e=Oe(t,"x","zerosLike");return qe(e.shape,e.dtype)}}),Ye=function(){function t(t){this.dataMover=t,this.data=new WeakMap}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(t),this.data.get(t)},t.prototype.set=function(t,e){this.data.set(t,e)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.data.delete(t)},t}(),Je=function(){function t(){}return t.prototype.time=function(t){throw new Error("Not yet implemented.")},t.prototype.read=function(t){throw new Error("Not yet implemented.")},t.prototype.readSync=function(t){throw new Error("Not yet implemented.")},t.prototype.disposeData=function(t){throw new Error("Not yet implemented.")},t.prototype.write=function(t,e){throw new Error("Not yet implemented.")},t.prototype.fromPixels=function(t,e){throw new Error("Not yet implemented.")},t.prototype.register=function(t,e,n){throw new Error("Not yet implemented.")},t.prototype.memory=function(){throw new Error("Not yet implemented.")},t.prototype.floatPrecision=function(){throw new Error("Not yet implemented")},t.prototype.batchMatMul=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.slice=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.stridedSlice=function(t,e,n,r,i,a,o,s,u){throw new Error("Not yet implemented")},t.prototype.unstack=function(t,e){throw new Error("Not yet implemented")},t.prototype.reverse=function(t,e){throw new Error("Not yet implemented")},t.prototype.concat=function(t,e){throw new Error("Not yet implemented")},t.prototype.neg=function(t){throw new Error("Not yet implemented")},t.prototype.add=function(t,e){throw new Error("Not yet implemented")},t.prototype.addN=function(t){throw new Error("Not yet implemented")},t.prototype.subtract=function(t,e){throw new Error("Not yet implemented")},t.prototype.multiply=function(t,e){throw new Error("Not yet implemented")},t.prototype.realDivide=function(t,e){throw new Error("Not yet implemented")},t.prototype.floorDiv=function(t,e){throw new Error("Not yet implemented")},t.prototype.sum=function(t,e){throw new Error("Not yet implemented")},t.prototype.prod=function(t,e){throw new Error("Not yet implemented")},t.prototype.unsortedSegmentSum=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.argMin=function(t,e){throw new Error("Not yet implemented")},t.prototype.argMax=function(t,e){throw new Error("Not yet implemented")},t.prototype.equal=function(t,e){throw new Error("Not yet implemented")},t.prototype.notEqual=function(t,e){throw new Error("Not yet implemented")},t.prototype.less=function(t,e){throw new Error("Not yet implemented")},t.prototype.lessEqual=function(t,e){throw new Error("Not yet implemented")},t.prototype.greater=function(t,e){throw new Error("Not yet implemented")},t.prototype.greaterEqual=function(t,e){throw new Error("Not yet implemented")},t.prototype.logicalNot=function(t){throw new Error("Not yet implemented")},t.prototype.logicalAnd=function(t,e){throw new Error("Not yet implemented")},t.prototype.logicalOr=function(t,e){throw new Error("Not yet implemented")},t.prototype.where=function(t){throw new Error("Not yet implemented")},t.prototype.select=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.topk=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.min=function(t,e){throw new Error("Not yet implemented")},t.prototype.minimum=function(t,e){throw new Error("Not yet implemented")},t.prototype.mod=function(t,e){throw new Error("Not yet implemented")},t.prototype.max=function(t,e){throw new Error("Not yet implemented")},t.prototype.maximum=function(t,e){throw new Error("Not yet implemented")},t.prototype.all=function(t,e){throw new Error("Not yet implemented")},t.prototype.any=function(t,e){throw new Error("Not yet implemented")},t.prototype.squaredDifference=function(t,e){throw new Error("Not yet implemented")},t.prototype.ceil=function(t){throw new Error("Not yet implemented")},t.prototype.floor=function(t){throw new Error("Not yet implemented")},t.prototype.round=function(t){throw new Error("Not yet implemented")},t.prototype.sign=function(t){throw new Error("Not yet implemented")},t.prototype.pow=function(t,e){throw new Error("Not yet implemented")},t.prototype.exp=function(t){throw new Error("Not yet implemented")},t.prototype.expm1=function(t){throw new Error("Not yet implemented")},t.prototype.log=function(t){throw new Error("Not yet implemented")},t.prototype.log1p=function(t){throw new Error("Not yet implemented")},t.prototype.sqrt=function(t){throw new Error("Not yet implemented")},t.prototype.rsqrt=function(t){throw new Error("Not yet implemented")},t.prototype.square=function(t){throw new Error("Not yet implemented")},t.prototype.reciprocal=function(t){throw new Error("Not yet implemented")},t.prototype.relu=function(t){throw new Error("Not yet implemented")},t.prototype.prelu=function(t,e){throw new Error("Not yet implemented")},t.prototype.elu=function(t){throw new Error("Not yet implemented")},t.prototype.eluDer=function(t,e){throw new Error("Not yet implemented")},t.prototype.selu=function(t){throw new Error("Not yet implemented")},t.prototype.int=function(t){throw new Error("Not yet implemented")},t.prototype.clip=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.abs=function(t){throw new Error("Not yet implemented")},t.prototype.complexAbs=function(t){throw new Error("Not yet implemented")},t.prototype.sigmoid=function(t){throw new Error("Not yet implemented")},t.prototype.softplus=function(t){throw new Error("Not yet implemented")},t.prototype.sin=function(t){throw new Error("Not yet implemented")},t.prototype.cos=function(t){throw new Error("Not yet implemented")},t.prototype.tan=function(t){throw new Error("Not yet implemented")},t.prototype.asin=function(t){throw new Error("Not yet implemented")},t.prototype.acos=function(t){throw new Error("Not yet implemented")},t.prototype.atan=function(t){throw new Error("Not yet implemented")},t.prototype.atan2=function(t,e){throw new Error("Not yet implemented")},t.prototype.sinh=function(t){throw new Error("Not yet implemented")},t.prototype.cosh=function(t){throw new Error("Not yet implemented")},t.prototype.tanh=function(t){throw new Error("Not yet implemented")},t.prototype.asinh=function(t){throw new Error("Not yet implemented")},t.prototype.acosh=function(t){throw new Error("Not yet implemented")},t.prototype.atanh=function(t){throw new Error("Not yet implemented")},t.prototype.erf=function(t){throw new Error("Not yet implemented")},t.prototype.step=function(t,e){throw new Error("Not yet implemented")},t.prototype.conv2d=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv2dDerInput=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv2dDerFilter=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.depthwiseConv2D=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.depthwiseConv2DDerInput=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv3d=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv3dDerInput=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv3dDerFilter=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.maxPool=function(t,e){throw new Error("Not yet implemented")},t.prototype.maxPoolBackprop=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.avgPool=function(t,e){throw new Error("Not yet implemented")},t.prototype.avgPoolBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.reshape=function(t,e){throw new Error("Not yet implemented")},t.prototype.cast=function(t,e){throw new Error("Not yet implemented")},t.prototype.tile=function(t,e){throw new Error("Not yet implemented")},t.prototype.pad=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.transpose=function(t,e){throw new Error("Not yet implemented")},t.prototype.gather=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.gatherND=function(t,e){throw new Error("Not yet implemented")},t.prototype.scatterND=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.batchToSpaceND=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.spaceToBatchND=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.resizeBilinear=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.resizeBilinearBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.resizeNearestNeighbor=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.batchNormalization=function(t,e,n,r,i,a){throw new Error("Not yet implemented")},t.prototype.localResponseNormalization4D=function(t,e,n,r,i){throw new Error("Not yet implemented")},t.prototype.LRNGrad=function(t,e,n,r,i,a,o){throw new Error("Not yet implemented")},t.prototype.multinomial=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.oneHot=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.cumsum=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.nonMaxSuppression=function(t,e,n,r,i){throw new Error("Not yet implemented")},t.prototype.fft=function(t){throw new Error("Not yet implemented")},t.prototype.ifft=function(t){throw new Error("Not yet implemented")},t.prototype.complex=function(t,e){throw new Error("Not yet implemented")},t.prototype.real=function(t){throw new Error("Not yet implemented")},t.prototype.imag=function(t){throw new Error("Not yet implemented")},t.prototype.cropAndResize=function(t,e,n,r,i,a){throw new Error("Not yet implemented")},t.prototype.depthToSpace=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.split=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.sparseToDense=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.setDataMover=function(t){throw new Error("Not yet implemented")},t.prototype.dispose=function(){throw new Error("Not yet implemented")},t}();function Ze(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();var r=qe(t.shape),i=t.toFloat(),a=n.complex(i,r);return r.dispose(),i.dispose(),a}if(!B(t.dtype,e))return ft.make(t.shape,{dataId:t.dataId},e);if("complex64"===t.dtype){var o=n.real(t);return a=o.cast(e),o.dispose(),a}if("int32"===e)return n.int(t);if("bool"===e){var s=je(0,t.dtype);return a=n.notEqual(t,s),s.dispose(),a}throw new Error("Error in Cast: unknown dtype argument ("+e+")")}function Qe(t,e){return ft.make(e,{dataId:t.dataId},t.dtype)}function tn(t,e){if(t.length!==e.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+e.length+".");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function en(t,e){return{real:t[2*e],imag:t[2*e+1]}}function nn(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function rn(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function an(t,e,n,r,i){for(var a=Array.from(e).map(function(t,e){return{score:t,boxIndex:e}}).filter(function(t){return t.score>i}).sort(function(t,e){return e.score-t.score}),o=[],s=0;s<a.length;s++){var u=a[s],c=u.score,l=u.boxIndex;if(c<i)break;for(var f=!1,h=o.length-1;h>=0;--h)if(on(t,l,o[h])>=r){f=!0;break}if(!f&&(o.push(l),o.length>=n))break}return Be(o,"int32")}function on(t,e,n){var r=t.subarray(4*e,4*e+4),i=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(i[0],i[2]),l=Math.min(i[1],i[3]),f=Math.max(i[0],i[2]),h=Math.max(i[1],i[3]),p=(s-a)*(u-o),d=(f-c)*(h-l);if(p<=0||d<=0)return 0;var m=Math.max(a,c),g=Math.max(o,l),y=Math.min(s,f),v=Math.min(u,h),b=Math.max(y-m,0)*Math.max(v-g,0);return b/(p+d-b)}function sn(t,e,n){var r=new Array(t.rank).fill(0),i=t.shape.slice();return e.map(function(e){i[n]=e;var a=t.slice(r,i);return r[n]+=e,a})}function un(t,e,n,r,i){for(var a=e[e.length-1],o=[t.length/a,a],s=o[0],u=o[1],c=R(n,s*r),l=R("int32",s*r),f=0;f<s;f++){for(var h=f*u,p=t.subarray(h,h+u),d=[],m=0;m<p.length;m++)d.push({value:p[m],index:m});d.sort(function(t,e){return e.value-t.value});var g=f*r,y=c.subarray(g,g+r),v=l.subarray(g,g+r);for(m=0;m<r;m++)y[m]=d[m].value,v[m]=d[m].index}var b=e.slice();return b[b.length-1]=r,[Me(c,b,n),Me(l,b,"int32")]}var cn=function(t,e,n){this.variableNames=["A"];var r=t.windowSize,i=t.batchSize,a=t.inSize,o=Math.ceil(a/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[i,o];var s="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+u+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+s+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "},ln=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,i=t.strideWidth,a=t.dilationHeight,o=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=s-1-t.padInfo.top,l=u-1-t.padInfo.left,f=1/(e*n);this.userCode="\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float avgMultiplier = float("+f+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+";\n            wR += "+a+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+u+";\n            wC+= "+o+") {\n            float dyC = float(dyCCorner + wC) / "+i+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},fn=function(t,e,n,r,i,a){this.outputShape=[],this.variableNames=["x","mean","variance"],pe(t,e),pe(t,n);var o="0.0";null!=r&&(pe(t,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");var s="1.0";null!=i&&(pe(t,i),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+o+";\n        float scale = "+s+";\n        float inv = scale * inversesqrt(variance + float("+a+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    "},hn=function(t,e,n,r,i,a){this.usesPackedTextures=!0,this.variableNames=["x","mean","variance"],pe(t,e),pe(t,n);var o="vec4(0.0)";null!=r&&(pe(t,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");var s="vec4(1.0)";null!=i&&(pe(t,i),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = "+o+";\n        vec4 scale = "+s+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+a+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    "},pn="return areal * breal - aimag * bimag;",dn="return areal * bimag + aimag * breal;",mn=function(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=pe(e,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+t+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    "},gn="return a + b;",yn="return a - b;",vn="return a * b;",bn=function(){function t(t,e,n){this.variableNames=["A","B"],this.outputShape=pe(e,n),this.userCode="\n      uniform float NAN;\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(){var t=this;return function(e,n){null==t.startLoc&&(t.startLoc=e.getUniformLocationNoThrow(n,"NAN"),null==t.startLoc)||e.gl.uniform1f(t.startLoc,NaN)}},t}(),wn=function(){function t(t,e,n){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.usesPackedTextures=!0,this.outputShape=pe(e,n),this.userCode="\n      uniform float NAN;\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(){var t=this;return function(e,n){null==t.startLoc&&(t.startLoc=e.getUniformLocationNoThrow(n,"NAN"),null==t.startLoc)||e.gl.uniform1f(t.startLoc,NaN)}},t}(),_n=function(){function t(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float min;\n      uniform float max;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, min, max));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,i){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(i,"min"),n.maxLoc=r.getUniformLocationNoThrow(i,"max")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),xn=function(){function t(t){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t,this.userCode="\n      uniform float min;\n      uniform float max;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (hasNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(min), vec4(max)));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,i){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(i,"min"),n.maxLoc=r.getUniformLocationNoThrow(i,"max")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),En=function(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},Sn=function(t){this.outputShape=[],this.outputShape=de(t,1),this.variableNames=t.map(function(t,e){return"T"+e});var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=["if (yC < "+e[0]+") setOutput(getT0(yR, yC));"];for(n=1;n<e.length;n++){var i=e[n-1];r.push("else if (yC < "+e[n]+") setOutput(getT"+n+"(yR, yC-"+i+"));")}var a=e.length,o=e[e.length-1];r.push("else setOutput(getT"+a+"(yR, yC-"+o+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    "},Nn=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,i=t.padInfo.left;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+i+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},In=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,i=t.strideWidth,a=e-1-t.padInfo.top,o=n-1-t.padInfo.left;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+o+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+i+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},On=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,i=t.padInfo.front,a=t.padInfo.top,o=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yF = 0; yF < "+t.outDepth+"; yF++) {\n            int xF = wF + yF * "+e+" - "+i+";\n\n            if (xF < 0 || xF >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n              int xR = wR + yR * "+n+" - "+a+";\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+o+";\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},kn=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,i=t.strideDepth,a=t.strideHeight,o=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+s+", "+u+", "+c+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+e+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+i+".0;\n\n          if (dyF < 0.0 || dyF >= "+t.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+e+" - 1 - wF;\n\n          for (int wR = 0; wR < "+n+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+a+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+n+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+o+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},An=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,i=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+a+" + dm;\n\n        float dotProd = 0.0;\n\n        // TODO: Vec4 over the batch size\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+i+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Cn=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,i=t.strideWidth,a=e-1-t.padInfo.top,o=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+o+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+i+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            // TODO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+s+"; dm++) {\n              int d2 = d1 * "+s+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Pn=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.padInfo.top,n=t.padInfo.left,r=t.strideHeight,i=t.strideWidth,a=t.dilationHeight,o=t.dilationWidth,s=t.filterHeight,u=t.filterWidth,c=4*Math.floor(t.inChannels/4),l=t.inChannels%4;this.userCode="\n      const ivec2 strides = ivec2("+r+", "+i+");\n      const ivec2 pads = ivec2("+e+", "+n+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+"; wR++) {\n          int xR = xRCorner + wR * "+a+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+u+"; wC++) {\n            int xC = xCCorner + wC * "+o+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+c+"; d1 += 4) {\n              vec4 xValues = vec4(\n                getX(batch, xR, xC, d1),\n                getX(batch, xR, xC, d1 + 1),\n                getX(batch, xR, xC, d1 + 2),\n                getX(batch, xR, xC, d1 + 3)\n              );\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              dotProd += dot(xValues, wValues);\n            }\n\n            if ("+(1===l)+") {\n              dotProd +=\n                getX(batch, xR, xC, "+c+") *\n                getW(wR, wC, "+c+", d2);\n            } else if ("+(2===l)+") {\n              vec2 xValues = vec2(\n                getX(batch, xR, xC, "+c+"),\n                getX(batch, xR, xC, "+c+" + 1)\n              );\n              vec2 wValues = vec2(\n                getW(wR, wC, "+c+", d2),\n                getW(wR, wC, "+c+" + 1, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            } else if ("+(3===l)+") {\n              vec3 xValues = vec3(\n                getX(batch, xR, xC, "+c+"),\n                getX(batch, xR, xC, "+c+" + 1),\n                getX(batch, xR, xC, "+c+" + 2)\n              );\n              vec3 wValues = vec3(\n                getW(wR, wC, "+c+", d2),\n                getW(wR, wC, "+c+" + 1, d2),\n                getW(wR, wC, "+c+" + 2, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Tn=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,i=t.strideDepth,a=t.strideHeight,o=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,f=t.filterHeight,h=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+i+", "+a+", "+o+");\n      const ivec3 pads = ivec3("+e+", "+n+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+l+"; wF++) {\n          int xF = xFCorner + wF * "+s+";\n\n          if (xF < 0 || xF >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+f+"; wR++) {\n            int xR = xRCorner + wR * "+u+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+h+"; wC++) {\n              int xC = xCCorner + wC * "+c+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+p+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===d)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+p+") *\n                  getW(wF, wR, wC, "+p+", d2);\n              } else if ("+(2===d)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+p+"),\n                  getX(batch, xF, xR, xC, "+p+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+p+", d2),\n                  getW(wF, wR, wC, "+p+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===d)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+p+"),\n                  getX(batch, xF, xR, xC, "+p+" + 1),\n                  getX(batch, xF, xR, xC, "+p+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+p+", d2),\n                  getW(wF, wR, wC, "+p+" + 1, d2),\n                  getW(wF, wR, wC, "+p+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Rn=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.inHeight,n=t.inWidth,r=t.padInfo.top,i=t.padInfo.left,a=t.strideHeight,o=t.strideWidth,s=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,l=t.filterWidth,f=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 strides = ivec2("+a+", "+o+");\n      const ivec2 pads = ivec2("+r+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+f+";\n        int q = d2 - d1 * "+f+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+c+"; wR++) {\n          int xR = xRCorner + wR * "+s+";\n\n          if (xR < 0 || xR >= "+e+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+l+"; wC++) {\n            int xC = xCCorner + wC * "+u+";\n\n            if (xC < 0 || xC >= "+n+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Dn=function(t){this.variableNames=["x","W"],this.usesPackedTextures=!0,this.outputShape=t.outShape;for(var e=t.inHeight,n=t.inWidth,r=t.padInfo.top,i=t.padInfo.left,a=t.strideHeight,o=t.strideWidth,s=t.filterHeight,u=t.filterWidth,c=Math.ceil((u+1)/2),l="int xR; int xC;",f=0;f<s;f++){for(var h=-i;h<2*c;h++)l+="vec4 "+Mn(f,h)+" = vec4(0.);";for(h=0;h<u;h++)l+="\n          vec4 wR"+f+"C"+h+" = vec4(0.);\n          vec4 xR"+f+"C"+h+" = vec4(0.);"}for(f=0;f<s;f++)for(h=0;h<c;h++){var p=2*h,d=2*h+i;l+="\n          xR = xRCorner + "+f+";\n          xC = xCCorner + "+d+";\n\n          if(xR >= 0 && xR < "+e+" && xC >= 0 && xC < "+n+") {\n            "+Mn(f,d)+" = getX(batch, xR, xC, d1);\n          }",0===i?p<u&&h===c-1&&(o>1&&(l+="\n                vec4 "+Mn(f,d+2)+" = vec4(0.);\n\n                if(xR >= 0 && xR < "+e+" && xC + 2 < "+n+") {\n                  "+Mn(f,d+2)+" = getX(batch, xR, xC + 2, d1);\n                }"),l+="\n              xR"+f+"C"+d+" = "+jn(f,d,o,i)+";\n            "):0===h&&(l+="\n            if(xR >= 0 && xR < "+e+" && xC - 2 >= 0) {\n              "+Mn(f,d-2)+" = getX(batch, xR, xC - 2, d1);\n            }"),p>0&&(l+="xR"+f+"C"+(d-2)+" =\n            "+jn(f,d-2,o,i)+";"),d-1>=0&&d-1<u&&(l+="xR"+f+"C"+(d-1)+" =\n              "+jn(f,d-1,o,i)+";"),p<u&&(l+="\n            vec4 wTexel"+f+"C"+p+" = getW("+f+", "+p+", d1, q);\n            wR"+f+"C"+p+" = vec4(wTexel"+f+"C"+p+".xz, wTexel"+f+"C"+p+".xz);\n          ",p+1<u&&(l+="\n              vec4 wTexelR"+f+"C"+(p+1)+" = getW("+f+", "+(p+1)+", d1, q);\n              wR"+f+"C"+(p+1)+" =\n                vec4(wTexelR"+f+"C"+(p+1)+".xz, wTexelR"+f+"C"+(p+1)+".xz);"))}for(f=0;f<s;f++)for(h=0;h<u;h++)l+="result += xR"+f+"C"+h+" * wR"+f+"C"+h+";";this.userCode="\n      const ivec2 strides = ivec2("+a+", "+o+");\n      const ivec2 pads = ivec2("+r+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 result = vec4(0.);\n\n        "+l+"\n\n        setOutput(result);\n      }\n    "};function Mn(t,e){return"xTexelR"+t+"C"+(e<0?"minus"+Math.abs(e).toString():e)}function jn(t,e,n,r){return 1===n?r%2==e%2?Mn(t,e):"vec4("+Mn(t,e-1)+".zw, "+Mn(t,e+1)+".xy)":r%2==e%2?"vec4("+Mn(t,e)+".xy, "+Mn(t,e+2)+".xy)":"vec4("+Mn(t,e-1)+".zw, "+Mn(t,e+1)+".zw)"}var Bn,Ln,zn=function(t,e,n,r,i){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var a=t[0],o=t[1],s=t[2],u=t[3],c=e[0],l=n[0],f=n[1];this.outputShape=[c,l,f,u];var h="bilinear"===r?1:0,p=[o-1+".0",s-1+".0"],d=p[0],m=p[1],g=l>1?[""+(o-1)/(l-1),"(y2-y1) * height_ratio","y1*"+d+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+d],y=g[0],v=g[1],b=g[2],w=f>1?[""+(s-1)/(f-1),"(x2-x1) * width_ratio","x1*"+m+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+m],_=w[0],x=w[1],E=w[2];this.userCode="\n      const float height_ratio = float("+y+");\n      const float width_ratio = float("+_+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+a+") {\n          return;\n        }\n\n        float height_scale = "+v+";\n        float width_scale = "+x+";\n\n        float in_y = "+b+";\n        if( in_y < 0.0 || in_y > "+d+" ) {\n          setOutput(float("+i+"));\n          return;\n        }\n        float in_x = "+E+";\n        if( in_x < 0.0 || in_x > "+m+" ) {\n          setOutput(float("+i+"));\n          return;\n        }\n\n        vec2 sourceFracIndexRC = vec2(in_y,in_x);\n        if("+h+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n          ivec2 sourceCeilRC = ivec2(ceil(sourceFracIndexRC));\n\n          float topLeft = getImage(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          float bottomLeft = getImage(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          float topRight = getImage(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          float bottomRight = getImage(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n          float top = topLeft + (topRight - topLeft) * fracRC.y;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          float newValue = top + (bottom - top) * fracRC.x;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestRC = ivec2(floor(\n            sourceFracIndexRC + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestRC.x, sourceNearestRC.y, d);\n          setOutput(newValue);\n        }\n      }\n    "};function Fn(){var t,e,n,r,i,a,o,s;return 2===Lt.get("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",i="texture",a="outputColor",o="out vec4 outputColor;",s="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",i="texture2D",a="gl_FragColor",o="",s="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:i,output:a,defineOutput:o,defineRound:s}}function Un(t,e,n){void 0===n&&(n="index");var r=K(e);return r.map(function(e,i){return"int "+t[i]+" = "+n+" / "+e+"; "+(i===r.length-1?"int "+t[i+1]+" = "+n+" - "+t[i]+" * "+e:"index -= "+t[i]+" * "+e)+";"}).join("")}function Vn(t){return 1===t.length?""+t[0]:"vec"+t.length+"("+t.join(",")+")"}function Wn(t,e){return[e,t]}function qn(t,e){return t*e}function $n(t,e,n){var r=function(t,e){if(t%e!=0)throw new Error("unpackedSize ("+t+") must be a multiple of "+e);return t/e}(t.length,n);if(e.length<r)throw new Error("matrix length ("+e.length+") must be >= "+r);for(var i=0,a=0;a<t.length;a+=n)e[i++]=t[a]}function Hn(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Kn(t,e){var n=Hn(t,e);return n[0]*n[1]*4}function Gn(t,e,n,r,i){var a=n*r;if(i.length<a)throw new Error("matrix length ("+i.length+") must be >= "+a);for(var o=r%2==1,s=n%2==1,u=Math.floor(r/2),c=Math.floor(n/2),l=Math.ceil(r/2),f=l*Math.ceil(n/2),h=g(n)*g(r),p=0;p<e;p++){for(var d=p*n*r,m=p*h,y=o?4:0,v=r+(o?1:0),b=m,w=d,_=d+r,x=0;x<c;++x){for(var E=0;E<u;++E)i[w++]=t[b++],i[w++]=t[b++],i[_++]=t[b++],i[_++]=t[b++];b+=y,w+=v,_+=v}if(o){b=m+4*(l-1);var S=d+r-1;for(y=4*l,v=2*r,x=0;x<c;++x)i[S]=t[b],i[S+r]=t[b+2],b+=y,S+=v}if(s){for(b=m+4*(f-l),S=d+(n-1)*r,E=0;E<u;++E)i[S++]=t[b++],i[S++]=t[b++],b+=2;o&&(i[d+n*r-1]=t[b])}}return i}function Xn(t,e,n,r){var i=[];t.forEach(function(t){var e=E(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?i.push("uniform float "+t.name+(e>1?"["+e+"]":"")+";"):(i.push("uniform sampler2D "+t.name+";"),i.push("uniform int offset"+t.name+";"))});var a,o,s=i.join("\n"),u=t.map(function(t){return function(t,e,n){void 0===n&&(n=!1);var r="";r+=n?Jn(t):Yn(t);var i=t.shapeInfo.logicalShape,a=e.logicalShape;return i.length<=a.length&&(n?0===fe(i,a).length&&(r+=function(t,e){var n=t.name,r="get"+(n.charAt(0).toUpperCase()+n.slice(1))+"AtOutCoords",i=e.texShape,a=Hn(i[1],i[0]).slice(),o=t.shapeInfo.logicalShape,s=e.logicalShape,u=fe(o,s),c=o.length,l=s.length;if(u.length)throw Error("Packed broadcast sampling is not implemented yet.");var f=t.shapeInfo.texShape,h=Hn(f[1],f[0]).slice(),p=Fn();if(S(f,i)&&E(o)===E(s))return"\n      vec4 "+r+"() {\n        return "+p.texture2D+"("+n+", resultUV);\n      }\n    ";var d="return "+p.texture2D+"("+n+", uv)";return 1===c&&l>1?d="\n      vec4 values = "+p.texture2D+"("+n+", uv);\n      return vec4(values.xy, values.xy);\n    ":0===c&&l>0&&(d=1===l?"\n        vec4 values = "+p.texture2D+"("+n+", uv);\n        return vec4(values.x, values.x, 0., 0.);\n      ":"\n        vec4 values = "+p.texture2D+"("+n+", uv);\n        return vec4(values.x);\n      "),"\n  vec4 "+r+"() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2("+a[0]+", "+a[1]+"));\n    int index = resTexRC.x * "+a[1]+" + resTexRC.y;\n\n    int texR = index / "+h[1]+";\n    int texC = index - texR * "+h[1]+";\n    vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+h[1]+", "+h[0]+");\n\n    "+d+";\n  }\n"}(t,e)):r+=function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),i="get"+r+"AtOutCoords",a=e.texShape,o=t.shapeInfo.texShape;if(!t.shapeInfo.isUniform&&null==t.shapeInfo.flatOffset&&S(o,a))return"\n      float "+i+"() {\n        return sampleTexture("+n+", resultUV);\n      }\n    ";var s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length,c=sr(u),l=fe(t.shapeInfo.logicalShape,e.logicalShape),f=u-s,h=["x","y","z","w","u","v"];return"\n    float "+i+"() {\n      "+c+" coords = getOutputCoords();\n      "+(0===s?"":u<2&&l.length>=1?"coords = 0;":l.map(function(t){return"coords."+h[t+f]+" = 0;"}).join("\n"))+"\n      return get"+r+"("+(u<2&&s>0?"coords":t.shapeInfo.logicalShape.map(function(t,e){return"coords."+h[e+f]}).join(", "))+");\n    }\n  "}(t,e)),r}(t,e,r)}).join("\n"),c=e.texShape,l=Fn(),f=function(t){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+t.texture2D+"(textureSampler, uv).r;\n    }\n  "}(l),h=function(t){var e="";return e=Lt.get("PROD")?"\n      bool isNaN(float val) {\n        return false;\n      }\n\n      bool hasNaN(vec4 values) {\n        return false;\n      }\n    ":"\n      bool isNaN(float val) {\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n      }\n\n      bool hasNaN(vec4 values) {\n        return any(bvec4(\n          isNaN(values.x),\n          isNaN(values.y),\n          isNaN(values.z),\n          isNaN(values.w)\n        ));\n      }\n    ",t.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+t.varyingFs+" vec2 resultUV;\n    "+t.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    "+e+"\n\n    float getNaN(vec4 values) {\n      return dot(vec4(1), values);\n    }\n\n    "+t.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+Zn+"\n    "+Qn+"\n    "+tr+"\n    "+er+"\n    "+nr+"\n    "+rr+"\n  "}(l);return e.isPacked?(a=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===n[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+n[1]+".0);\n      }\n    ":1===n[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+n[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return resTexRC.x * "+n[1]+" + resTexRC.y;\n    }\n  "}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(S(t,e))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ";var r=Math.ceil(t[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),i=r*Math.ceil(t[1]/2);return"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      int b = index / "+i+";\n      index -= b * "+i+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  "}(t,e);case 4:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[3]/2),i=r*Math.ceil(t[2]/2),a=i*t[1];return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      int b2 = index / "+a+";\n      index -= b2 * "+a+";\n\n      int b = index / "+i+";\n      index -= b * "+i+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  "}(t,e);default:throw new Error(t.length+"-D packed output coordinate fetching is not yet supported")}}(e.logicalShape,c),o=function(t){return"\n    void setOutput(vec4 val) {\n      "+t.output+" = val;\n    }\n  "}(l)):(a=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){return 1===e[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * "+e[1]+".0);\n      }\n    ":1===e[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * "+e[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return resTexRC.x * "+e[1]+" + resTexRC.y;\n    }\n  "}(0,e);case 2:return function(t,e){return S(t,e)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ":1===t[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":1===t[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return function(t,e){var n=Un(["r","c","d"],t);return"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+n+"\n      return ivec3(r, c, d);\n    }\n  "}(t,e);case 4:return function(t,e){var n=Un(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+n+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,e);case 5:return function(t,e){var n=Un(["r","c","d","d2","d3"],t);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+e[0]+",\n                             "+e[1]+"));\n\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(t,e);case 6:return function(t,e){var n=Un(["r","c","d","d2","d3","d4"],t);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,c),o=function(t){return"\n    void setOutput(float val) {\n      "+t.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(l)),r&&(h+=ir),[h,f,o,s,a,u,n].join("\n")}function Yn(t){var e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"float "+n+"() {return "+e+";}";var r=t.shapeInfo.texShape,i=r[0],a=r[1];if(1===i&&1===a)return"\n      float "+n+"() {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var o=t.shapeInfo.texShape;return"\n    float "+n+"() {\n      vec2 uv = uvFromFlat("+o[0]+", "+o[1]+", "+ar(e)+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(t);case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"\n      float "+n+"(int index) {\n        "+or(t)+"\n      }\n    ";var r=t.shapeInfo.texShape,i=r[0],a=r[1];if(1===a&&1===i)return"\n      float "+n+"(int index) {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var o=ar(e);return 1===a?"\n      float "+n+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+o+") + 0.5) / "+i+".0);\n        return sampleTexture("+e+", uv);\n      }\n    ":1===i?"\n      float "+n+"(int index) {\n        vec2 uv = vec2((float(index + "+o+") + 0.5) / "+a+".0, 0.5);\n        return sampleTexture("+e+", uv);\n      }\n    ":"\n    float "+n+"(int index) {\n      vec2 uv = uvFromFlat("+i+", "+a+", index + "+o+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=t.shapeInfo.texShape;if(null!=i&&S(e,i)){var a=i[0];return"\n    float "+r+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+i[1]+".0, "+a+".0);\n      return sampleTexture("+n+", uv);\n    }\n  "}var o=T(e),s=o.newShape,u=o.keptDims,c=s;if(c.length<e.length)return"\n      "+Yn(ur(t,c))+"\n      float "+r+"(int row, int col) {\n        return "+r+"("+cr(["row","col"],u)+");\n      }\n    ";if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+e[1]+", 1)));\n        "+or(t)+"\n      }\n    ";var l=i[0],f=i[1],h=ar(n);return 1===f?"\n    float "+r+"(int row, int col) {\n      float index = dot(vec3(row, col, "+h+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+l+".0);\n      return sampleTexture("+n+", uv);\n    }\n  ":1===l?"\n    float "+r+"(int row, int col) {\n      float index = dot(vec3(row, col, "+h+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+f+".0, 0.5);\n      return sampleTexture("+n+", uv);\n    }\n  ":"\n  float "+r+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+e[1]+" + col + "+h+";\n    vec2 uv = uvFromFlat("+l+", "+f+", index);\n    return sampleTexture("+n+", uv);\n  }\n"}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=e[1]*e[2],a=e[2],o=T(e),s=o.newShape,u=o.keptDims,c=s;if(c.length<e.length)return"\n        "+Yn(ur(t,c))+"\n        float "+r+"(int row, int col, int depth) {\n          return "+r+"("+cr(["row","col","depth"],u)+");\n        }\n      ";if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+i+", "+a+", 1)));\n        "+or(t)+"\n      }\n    ";var l=t.shapeInfo.texShape,f=l[0],h=l[1],p=t.shapeInfo.flatOffset;return h===i&&null==p?"\n        float "+r+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+a+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+h+".0, "+f+".0);\n          return sampleTexture("+n+", uv);\n        }\n      ":h===a&&null==p?"\n    float "+r+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+e[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+h+".0, "+f+".0);\n      return sampleTexture("+n+", uv);\n    }\n  ":"\n      float "+r+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+i+" + col * "+a+" + depth + "+ar(n)+";\n        vec2 uv = uvFromFlat("+f+", "+h+", index);\n        return sampleTexture("+n+", uv);\n      }\n  "}(t);case 4:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=e[3],a=e[2]*i,o=e[1]*a,s=T(e),u=s.newShape,c=s.keptDims;if(u.length<e.length)return"\n      "+Yn(ur(t,u))+"\n      float "+r+"(int row, int col, int depth, int depth2) {\n        return "+r+"("+cr(["row","col","depth","depth2"],c)+");\n      }\n    ";if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+o+", "+a+", "+i+", 1)));\n        "+or(t)+"\n      }\n    ";var l=t.shapeInfo.flatOffset,f=t.shapeInfo.texShape,h=f[0],p=f[1];return p===o&&null==l?"\n      float "+r+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+p+".0, "+h+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":p===i&&null==l?"\n      float "+r+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+e[1]*e[2]+", "+e[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+p+".0, "+h+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":"\n    float "+r+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+o+" + col * "+a+" +\n          depth * "+i+" + depth2;\n      vec2 uv = uvFromFlat("+h+", "+p+", index + "+ar(n)+");\n      return sampleTexture("+n+", uv);\n    }\n  "}(t);case 5:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=e[4],a=e[3]*i,o=e[2]*a,s=e[1]*o,u=T(e),c=u.newShape,l=u.keptDims;if(c.length<e.length)return"\n      "+Yn(ur(t,c))+"\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+r+"("+cr(["row","col","depth","depth2","depth3"],l)+");\n      }\n    ";if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+s+", "+o+", "+a+", "+i+")) +\n          depth3;\n        "+or(t)+"\n      }\n    ";var f=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],d=h[1];return d===s&&null==f?"\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+o+", "+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+d+".0, "+p+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":d===i&&null==f?"\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]+",\n               "+e[2]*e[3]+", "+e[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+d+".0, "+p+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":"\n    float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+o+" + depth * "+a+" +\n          depth2 * "+i+" + depth3 + "+ar(n)+";\n      vec2 uv = uvFromFlat("+p+", "+d+", index);\n      return sampleTexture("+n+", uv);\n    }\n  "}(t);case 6:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=T(e),a=i.newShape,o=i.keptDims;if(a.length<e.length)return"\n      "+Yn(ur(t,a))+"\n      float "+r+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+r+"("+cr(["row","col","depth","depth2","depth3","depth4"],o)+");\n      }\n    ";var s=e[5],u=e[4]*s,c=e[3]*u,l=e[2]*c,f=e[1]*l;if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+f+", "+l+", "+c+", "+u+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+s+", 1)));\n        "+or(t)+"\n      }\n    ";var h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],m=p[1];return m===f&&null==h?"\n      float "+r+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+l+", "+c+", "+u+", "+s+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+m+".0, "+d+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":m===s&&null==h?"\n      float "+r+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]*e[4]+",\n               "+e[2]*e[3]*e[4]+",\n               "+e[3]*e[4]+",\n               "+e[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+m+".0, "+d+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":"\n    float "+r+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+f+" + col * "+l+" + depth * "+c+" +\n          depth2 * "+u+" + depth3 * "+s+" + depth4 + "+ar(n)+";\n      vec2 uv = uvFromFlat("+d+", "+m+", index);\n      return sampleTexture("+n+", uv);\n    }\n  "}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function Jn(t){var e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){var e=t.name;return"\n    vec4 get"+e.charAt(0).toUpperCase()+e.slice(1)+"() {\n      return "+Fn().texture2D+"("+e+", halfCR);\n    }\n  "}(t);case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Fn();return"\n    vec4 "+n+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+i[0]+", "+i[1]+", index);\n      return "+a.texture2D+"("+e+", uv);\n    }\n  "}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=t.shapeInfo.texShape,a=i[0],o=i[1],s=Fn();if(null!=i&&S(e,i))return"\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+o+".0, "+a+".0);\n\n        return "+s.texture2D+"("+n+", uv);\n      }\n    ";var u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];return"\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+Math.ceil(e[1]/2)+", "+u[0]+", "+u[1]+", row, col);\n      return "+s.texture2D+"("+n+", uv);\n    }\n  "}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===e[0])return"\n        "+Jn(ur(t,e.slice(1)))+"\n        vec4 "+r+"(int b, int row, int col) {\n          return "+r+"("+cr(["b","row","col"],[1,2])+");\n        }\n      ";var o=a[0],s=a[1],u=Math.ceil(e[2]/2);return"\n    vec4 "+r+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+o+", "+s+", "+u*Math.ceil(e[1]/2)+", "+u+", b, row, col);\n      return "+Fn().texture2D+"("+n+", uv);\n    }\n  "}(t);case 4:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],o=a[0],s=a[1],u=Math.ceil(e[3]/2),c=u*Math.ceil(e[2]/2);return"\n    vec4 "+r+"(int b2, int b, int row, int col) {\n      vec2 uv = packedUVfrom4D(\n        "+o+", "+s+", "+c*e[1]+",\n        "+c+", "+u+", b2, b, row, col);\n      return "+Fn().texture2D+"("+n+", uv);\n    }\n  "}(t);default:throw new Error("Packed "+e.length+"-D input sampling is not yet supported")}}!function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Bn||(Bn={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Ln||(Ln={}));var Zn="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Qn="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",tr="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",er="\nvec2 packedUVfrom4D(int texNumR, int texNumC, int texelsInBatch2,\n    int texelsInBatch, int texelsInLogicalRow, int b2, int b,\n    int row, int col) {\n  int index = b2 * texelsInBatch2 + b * texelsInBatch +\n    (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",nr="\nvec2 UVfrom5D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int stride3, int row, int col, int depth,\n    int depth2, int depth3) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 +\n              depth * stride2 + depth2 * stride3 + depth3;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",rr="\nvec2 UVfrom6D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int stride3, int stride4,\n    int row, int col, int depth, int depth2, int depth3, int depth4) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2 *\n    stride3 + depth3 * stride4 + depth4;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ir="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function ar(t){return"offset"+t}function or(t){var e=t.name,n=E(t.shapeInfo.logicalShape);return 1===n?"return "+e+";":"\n    for (int i = 0; i < "+n+"; i++) {\n      if (i == index) {\n        return "+e+"[i];\n      }\n    }\n  "}function sr(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error("GPU for rank "+t+" is not yet supported")}function ur(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function cr(t,e){return e.map(function(e){return t[e]}).join(", ")}var lr=function(t,e,n){this.variableNames=["x"],this.outputShape=t;var r=t.length,i=t[t.length-1],a=n?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(n?"return "+i+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+sr(r)+" coords = getOutputCoords();\n        int end = "+fr(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+i+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+a+" end) {\n            continue;\n          }\n          if (idx == end && "+e+") {\n            continue;\n          }\n          "+fr(r,"coords")+" = idx;\n          val += getX("+function(t,e){if(1===t)return""+e;if(2===t)return e+".x, "+e+".y";if(3===t)return e+".x, "+e+".y, "+e+".z";if(4===t)return e+".x, "+e+".y, "+e+".z, "+e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    "};function fr(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var hr=function(){function t(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+e+";\n      int offset_h = imod(h, "+e+");\n      int in_w = w / "+e+";\n      int offset_w = imod(w, "+e+");\n      int offset_d = (offset_h * "+e+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  "}return t.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},t.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},t.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},t.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},t}(),pr=function(t){this.variableNames=["A"];var e=Fn();this.outputShape=t,this.userCode="\n      const float FLOAT_MAX = 1.70141184e38;\n      const float FLOAT_MIN = 1.17549435e-38;\n\n      lowp vec4 encode_float(highp float v) {\n        if (isNaN(v)) {\n          return vec4(255, 255, 255, 255);\n        }\n\n        highp float av = abs(v);\n\n        if(av < FLOAT_MIN) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(v > FLOAT_MAX) {\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n        } else if(v < -FLOAT_MAX) {\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n        }\n\n        highp vec4 c = vec4(0,0,0,0);\n\n        highp float e = floor(log2(av));\n        highp float m = exp2(fract(log2(av))) - 1.0;\n\n        c[2] = floor(128.0 * m);\n        m -= c[2] / 128.0;\n        c[1] = floor(32768.0 * m);\n        m -= c[1] / 32768.0;\n        c[0] = floor(8388608.0 * m);\n\n        highp float ebias = e + 127.0;\n        c[3] = floor(ebias / 2.0);\n        ebias -= c[3] * 2.0;\n        c[2] += floor(ebias) * 128.0;\n\n        c[3] += 128.0 * step(0.0, -v);\n\n        return c / 255.0;\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+e.output+" = encode_float(x);\n      }\n    "},dr="return real * expR - imag * expI;",mr="return real * expI + imag * expR;",gr=function(t,e,n){this.variableNames=["real","imag"];var r=e[1];this.outputShape=e;var i=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+i+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+t+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+a+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    "},yr=function(t){this.variableNames=["A"];var e=Fn(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n\n        vec4 values = "+e.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "},vr=function(t,e,n){this.variableNames=["A","indices"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var i=sr(this.rank),a=function(t,e){var n=t.length;if(n>4)throw Error("Gather for rank "+n+" is not yet supported");if(1===n)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],a=0;a<t.length;a++)a===e?i.push("int(getIndices("+r[a]+"))"):i.push(""+r[a]);return i.join()}(t,n);this.userCode="\n      void main() {\n        "+i+" resRC = getOutputCoords();\n        setOutput(getA("+a+"));\n      }\n    "};var br=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;var r=sr(e.length),i=sr(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+i+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+a+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      "};function wr(t,e){var n=e();return Er(t),n}var _r=!1;function xr(t){_r=t}function Er(t){if(_r){var e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+Or(t,e))}}var Sr=5.96e-8,Nr=65504;function Ir(t){return!!(Lt.get("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||Sr<Math.abs(t)&&Math.abs(t)<Nr)}function Or(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}function kr(t,e){return Yr(t,function(){return t.getExtension(e)},'Extension "'+e+'" not supported on this browser.')}function Ar(t,e){var n=Yr(t,function(){return t.createShader(t.VERTEX_SHADER)},"Unable to create vertex WebGLShader.");if(wr(t,function(){return t.shaderSource(n,e)}),wr(t,function(){return t.compileShader(n)}),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function Cr(t,e){var n=Yr(t,function(){return t.createShader(t.FRAGMENT_SHADER)},"Unable to create fragment WebGLShader.");if(wr(t,function(){return t.shaderSource(n,e)}),wr(t,function(){return t.compileShader(n)}),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){var n=Pr.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);for(var r=+n[1],i=t.split("\n"),a=i.length.toString().length+2,o=i.map(function(t,e){return k((e+1).toString(),a)+t}),s=0,u=0;u<o.length;u++)s=Math.max(o[u].length,s);var c=o.slice(0,r-1),l=o.slice(r-1,r),f=o.slice(r);console.log(c.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+k(l[0],s),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(f.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}var Pr=/ERROR: [0-9]+:([0-9]+):/g;function Tr(t){return Yr(t,function(){return t.createProgram()},"Unable to create WebGLProgram.")}function Rr(t,e){if(wr(t,function(){return t.linkProgram(e)}),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function Dr(t,e){if(wr(t,function(){return t.validateProgram(e)}),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function Mr(t,e){var n=Yr(t,function(){return t.createBuffer()},"Unable to create WebGLBuffer");return wr(t,function(){return t.bindBuffer(t.ARRAY_BUFFER,n)}),wr(t,function(){return t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)}),n}function jr(t,e){var n=Yr(t,function(){return t.createBuffer()},"Unable to create WebGLBuffer");return wr(t,function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)}),wr(t,function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)}),n}function Br(){return 2===Lt.get("WEBGL_VERSION")?1:4}function Lr(t){return Yr(t,function(){return t.createTexture()},"Unable to create WebGLTexture.")}function zr(t,e){var n=Lt.get("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){var r="["+t+"x"+e+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(t>n||e>n)throw r="["+t+"x"+e+"]",new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU ["+n+"x"+n+"].")}function Fr(t){return Yr(t,function(){return t.createFramebuffer()},"Unable to create WebGLFramebuffer.")}function Ur(t,e,n,r,i,a,o){var s=t.getAttribLocation(e,n);return-1!==s&&(wr(t,function(){return t.bindBuffer(t.ARRAY_BUFFER,r)}),wr(t,function(){return t.vertexAttribPointer(s,i,t.FLOAT,!1,a,o)}),wr(t,function(){return t.enableVertexAttribArray(s)}),!0)}function Vr(t,e,n){Jr(t,n),wr(t,function(){return t.activeTexture(t.TEXTURE0+n)}),wr(t,function(){return t.bindTexture(t.TEXTURE_2D,e)})}function Wr(t,e,n){return Yr(t,function(){return t.getUniformLocation(e,n)},'uniform "'+n+'" not present in program.')}function qr(t,e,n){return t.getUniformLocation(e,n)}function $r(t,e,n,r,i){wr(t,function(){return Vr(t,n,i)}),wr(t,function(){return t.uniform1i(r,i)})}function Hr(t,e,n){wr(t,function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)}),wr(t,function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)})}function Kr(t,e){wr(t,function(){return t.bindFramebuffer(t.FRAMEBUFFER,e)}),wr(t,function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)})}function Gr(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+Xr(t,e))}function Xr(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}function Yr(t,e,n){var r=wr(t,function(){return e()});if(null==r)throw new Error(n);return r}function Jr(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE"+n+"].")}function Zr(t,e){return void 0===e&&(e=2),E(t.slice(0,t.length-e))}function Qr(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function ti(t,e){var n;void 0===e&&(e=!1);var r=Lt.get("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map(function(e,n){return n>=t.length-2?g(t[n]):t[n]})).length&&(t=[2,t[0]])),2!==t.length){var i=T(t);t=i.newShape}var a=E(t);if(t.length<=1&&a<=r)return[1,a];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){var o=Zr(t),s=2,u=2;return t.length&&(s=(n=Qr(t))[0],u=n[1]),O(a=o*(s/2)*(u/2)).map(function(t){return 2*t})}return O(a)}function ei(t){return t%2==0}function ni(t,e){if(S(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(ei(n)&&ei(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&ei(t[0])&&ei(e[0])}var ri=Object.freeze({callAndCheck:wr,enableDebugWebGLErrorChecking:xr,checkWebGLError:Er,canBeRepresented:Ir,getWebGLErrorMessage:Or,getExtensionOrThrow:kr,createVertexShader:Ar,createFragmentShader:Cr,createProgram:Tr,linkProgram:Rr,validateProgram:Dr,createStaticVertexBuffer:Mr,createStaticIndexBuffer:jr,getNumChannels:Br,createTexture:Lr,validateTextureSize:zr,createFramebuffer:Fr,bindVertexBufferToProgramAttribute:Ur,bindTextureUnit:Vr,unbindTextureUnit:function(t,e){Jr(t,e),wr(t,function(){return t.activeTexture(t.TEXTURE0+e)}),wr(t,function(){return t.bindTexture(t.TEXTURE_2D,null)})},getProgramUniformLocationOrThrow:Wr,getProgramUniformLocation:qr,bindTextureToProgramUniformSampler:$r,bindCanvasToFramebuffer:function(t){wr(t,function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)}),wr(t,function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)}),wr(t,function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)})},bindColorTextureToFramebuffer:Hr,unbindColorTextureFromFramebuffer:Kr,validateFramebuffer:Gr,getFramebufferErrorMessage:Xr,getBatchDim:Zr,getRowsCols:Qr,getTextureShapeFromLogicalShape:ti,isReshapeFree:ni});function ii(t){var e=Fn();return Ar(t,e.version+"\n    precision highp float;\n    "+e.attribute+" vec3 clipSpacePos;\n    "+e.attribute+" vec2 uv;\n    "+e.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function ai(t){return Mr(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function oi(t){return jr(t,new Uint16Array([0,1,2,2,1,3]))}function si(t,e){var n,r,i,a,o,s,u,c=t;return 2===Lt.get("WEBGL_VERSION")?(n=c.R32F,r=c.R16F,i=c.RGBA32F,a=c.RED,o=4,s=1,u=c.HALF_FLOAT):(n=t.RGBA,r=t.RGBA,i=c.RGBA,a=t.RGBA,o=4,s=4,u=null!=e?e.HALF_FLOAT_OES:null),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:o,defaultNumChannels:s,textureTypeHalfFloat:u}}function ui(t,e,n,r,i,a){zr(e,n);var o=Lr(t),s=t.TEXTURE_2D;return wr(t,function(){return t.bindTexture(s,o)}),wr(t,function(){return t.texParameteri(s,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)}),wr(t,function(){return t.texParameteri(s,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)}),wr(t,function(){return t.texParameteri(s,t.TEXTURE_MIN_FILTER,t.NEAREST)}),wr(t,function(){return t.texParameteri(s,t.TEXTURE_MAG_FILTER,t.NEAREST)}),wr(t,function(){return t.texImage2D(s,0,r,e,n,0,i,a,null)}),wr(t,function(){return t.bindTexture(t.TEXTURE_2D,null)}),o}function ci(t,e,n,r){var i=Wn(e,n);return ui(t,i[0],i[1],r.internalFormatFloat,r.textureFormatFloat,t.FLOAT)}function li(t,e,n,r){var i=Wn(e,n);return ui(t,i[0],i[1],r.internalFormatFloat,r.textureFormatFloat,r.textureTypeHalfFloat)}function fi(t,e,n,r){var i=Wn(e,n);return ui(t,i[0],i[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function hi(t,e,n,r){var i=Hn(e,n);return ui(t,i[0],i[1],r.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function pi(t,e,n,r){var i=Hn(e,n);return ui(t,i[0],i[1],r.internalFormatHalfFloat,t.RGBA,r.textureTypeHalfFloat)}function di(t,e,n){return wr(t,function(){return t.bindBuffer(t.ARRAY_BUFFER,n)}),Ur(t,e,"clipSpacePos",n,3,20,0)&&Ur(t,e,"uv",n,2,20,12)}function mi(t,e,n){wr(t,function(){return t.bindTexture(t.TEXTURE_2D,e)}),wr(t,function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)}),wr(t,function(){return t.bindTexture(t.TEXTURE_2D,null)})}function gi(t,e,n,r,i,a){zr(n,r),wr(t,function(){return t.bindTexture(t.TEXTURE_2D,e)}),wr(t,function(){return t.texSubImage2D(t.TEXTURE_2D,0,0,0,n,r,a,t.FLOAT,i)}),wr(t,function(){return t.bindTexture(t.TEXTURE_2D,null)})}function yi(t,e,n,r,i,a,o){var s,u=Wn(n,r),c=u[0],l=u[1];1===o.defaultNumChannels?s=i:function(t,e,n){var r=qn(t.length,n);if(e.length<r)throw new Error("unpackedArray length ("+e.length+") must be >= "+r);for(var i=0,a=0;a<t.length;++a)e[i]=t[a],i+=n}(i,s=new Float32Array(qn(i.length,a)),a),gi(t,e,c,l,s,o.textureFormatFloat)}function vi(t,e,n,r,i,a,o,s,u){var c=Hn(a,o),l=c[0],f=c[1],h=new Float32Array(Kn(a,o));(function(t,e,n,r,i){for(var a=r%2==1,o=n%2==1,s=Math.floor(r/2),u=Math.floor(n/2),c=Math.ceil(r/2),l=c*Math.ceil(n/2),f=g(n)*g(r),h=0;h<e;h++){for(var p=h*n*r,d=h*f,m=a?4:0,y=r,v=d,b=0;b<u;++b){for(var w=2*b*r,_=0;_<s;++_){var x=p+w+2*_;i[v]=t[x],i[v+1]=t[x+1],i[v+2]=t[x+y],i[v+3]=t[x+y+1],v+=4}v+=m}if(a){x=p+r-1,v=d+4*(c-1);var E=2*r;for(m=4*c,b=0;b<u;++b)i[v]=t[x],i[v+2]=t[x+r],x+=E,v+=m}if(o){for(x=p+(n-1)*r,v=d+4*(l-c),_=0;_<s;++_)i[v++]=t[x++],i[v++]=t[x++],v+=2;a&&o&&(i[d+f-4]=t[x])}}})(s,n,r,i,h),gi(t,e,l,f,h,t.RGBA)}function bi(t,e,n,r,i){var a=e;if(2===Lt.get("WEBGL_VERSION")){var o=t,s=o.createBuffer();wr(t,function(){return t.bindBuffer(o.PIXEL_PACK_BUFFER,s)});var u=4*qn(n*r,i.downloadUnpackNumChannels);wr(t,function(){return t.bufferData(o.PIXEL_PACK_BUFFER,u,o.STREAM_READ)}),wr(t,function(){return o.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)}),wr(t,function(){return t.bindBuffer(o.PIXEL_PACK_BUFFER,null)}),a=s}return a}function wi(t,e,n,r,i){var a=t,o=new Float32Array(qn(n*r,i.downloadUnpackNumChannels));a.bindBuffer(a.PIXEL_PACK_BUFFER,e),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,o),a.bindBuffer(a.PIXEL_PACK_BUFFER,null);var s=new Float32Array(n*r);return $n(o,s,i.downloadUnpackNumChannels),s}function _i(t,e,n,r){var i=Wn(e,n),a=i[0],o=i[1],s=new Float32Array(qn(e*n,r.downloadUnpackNumChannels));wr(t,function(){return t.readPixels(0,0,a,o,r.downloadTextureFormat,t.FLOAT,s)});var u=new Float32Array(e*n);return $n(s,u,r.downloadUnpackNumChannels),u}function xi(t,e,n,r){var i=Wn(e,n),a=i[0],o=i[1],s=new Uint8Array(qn(e*n,4));return wr(t,function(){return t.readPixels(0,0,a,o,r.downloadTextureFormat,t.UNSIGNED_BYTE,s)}),new Float32Array(s.buffer)}function Ei(t,e,n,r,i,a,o,s){var u=t,c=new Float32Array(Kn(a,o));u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null);var l=new Float32Array(E([n,r,i]));return Gn(c,n,r,i,l),l}function Si(t,e,n,r,i,a,o){var s=Hn(i,a),u=s[0],c=s[1],l=new Float32Array(Kn(i,a));wr(t,function(){return t.readPixels(0,0,u,c,t.RGBA,t.FLOAT,l)});var f=new Float32Array(E([e,n,r]));return Gn(l,e,n,r,f)}var Ni=Object.freeze({createVertexShader:ii,createVertexBuffer:ai,createIndexBuffer:oi,getTextureConfig:si,createFloat32MatrixTexture:ci,createFloat16MatrixTexture:li,createUnsignedBytesMatrixTexture:fi,createPackedMatrixTexture:hi,createFloat16PackedMatrixTexture:pi,bindVertexProgramAttributeStreams:di,uploadPixelDataToTexture:mi,uploadMatrixToTexture:yi,uploadMatrixToPackedTexture:vi,maybeCreateBufferFromOutputTexture:bi,downloadFloat32MatrixFromBuffer:wi,downloadFloat32MatrixFromOutputTexture:_i,downloadByteEncodedFloatMatrixFromOutputTexture:xi,downloadPackedMatrixFromBuffer:Ei,downloadMatrixFromPackedOutputTexture:Si}),Ii=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.autoDebugValidate=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[],this.gl=null!=t?t:p(Lt.get("WEBGL_VERSION")),1===Lt.get("WEBGL_VERSION")?(this.textureFloatExtension=kr(this.gl,"OES_texture_float"),this.colorBufferFloatExtension=this.gl.getExtension("WEBGL_color_buffer_float"),Lt.get("WEBGL_RENDER_FLOAT32_ENABLED")||(this.textureHalfFloatExtension=kr(this.gl,"OES_texture_half_float"),this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float"))):this.colorBufferFloatExtension=kr(this.gl,"EXT_color_buffer_float"),this.vertexBuffer=ai(this.gl),this.indexBuffer=oi(this.gl),this.framebuffer=Fr(this.gl),this.textureConfig=si(this.gl,this.textureHalfFloatExtension)}return t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var e=this.gl;wr(e,function(){return e.finish()}),wr(e,function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)}),wr(e,function(){return e.deleteFramebuffer(t.framebuffer)}),wr(e,function(){return e.bindBuffer(e.ARRAY_BUFFER,null)}),wr(e,function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)}),wr(e,function(){return e.deleteBuffer(t.indexBuffer)}),this.disposed=!0}},t.prototype.enableAutomaticDebugValidation=function(t){this.autoDebugValidate=t,xr(t)},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),ci(this.gl,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),li(this.gl,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),fi(this.gl,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),mi(this.gl,t,e)},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),pi(this.gl,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),hi(this.gl,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(Kr(this.gl,this.framebuffer),this.outputTexture=null),wr(this.gl,function(){return e.gl.deleteTexture(t)})},t.prototype.uploadMatrixToTexture=function(t,e,n,r){this.throwIfDisposed();var i=Br();return yi(this.gl,t,e,n,r,i,this.textureConfig)},t.prototype.uploadMatrixToPackedTexture=function(t,e,n,r,i,a,o){return this.throwIfDisposed(),vi(this.gl,t,e,n,r,i,a,o,this.textureConfig)},t.prototype.downloadFloat32MatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,function(){return _i(r.gl,e,n,r.textureConfig)})},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,function(){return xi(r.gl,e,n,r.textureConfig)})},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,i,a){return Ei(this.gl,t,e,n,r,i,a,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e,n){return wi(this.gl,t,e,n,this.textureConfig)},t.prototype.maybeCreateBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=bi(this.gl,t,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(Lt.get("WEBGL_FENCE_API_ENABLED")){var i=t,a=i.fenceSync(i.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=i.clientWaitSync(a,0,0);return t===i.ALREADY_SIGNALED||t===i.CONDITION_SATISFIED},e=a}else Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):n=function(){return!0};return{query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n,r,i,a){var o=this;return this.downloadMatrixDriver(t,function(){return Si(o.gl,e,n,r,i,a,o.textureConfig)})},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=Cr(e,t),r=ii(e),i=Tr(e);return wr(e,function(){return e.attachShader(i,r)}),wr(e,function(){return e.attachShader(i,n)}),Rr(e,i),this.autoDebugValidate&&Dr(e,i),this.vertexAttrsAreBound||(this.setProgram(i),this.vertexAttrsAreBound=di(e,this.program,this.vertexBuffer)),i},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&wr(this.gl,function(){return e.gl.deleteProgram(t)})},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.autoDebugValidate&&Dr(this.gl,this.program),wr(this.gl,function(){return e.gl.useProgram(t)})},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?Wr(this.gl,t,e):qr(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),wr(this.gl,function(){return n.gl.getAttribLocation(t,e)})},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),$r(this.gl,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=Hn(e,n),i=r[0],a=r[1];this.setOutputMatrixTextureDriver(t,i,a)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&Dr(this.gl,this.program),Gr(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.autoDebugValidate&&this.debugValidate(),wr(t,function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)})},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),wr(this.gl,function(){return t.gl.finish()})},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=kr(this.gl,2===Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),i=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,i),i},t.prototype.endQuery=function(){if(2!==Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return c(this,void 0,void 0,function(){var e=this;return l(this,function(n){switch(n.label){case 0:return[4,A(function(){return e.disposed||e.isQueryAvailable(t,Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})];case 1:return n.sent(),[2,this.getQueryTime(t,Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}})})},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),i=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),i&&!this.disjoint}return i=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT),null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),i&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise(function(n){e.addItemToPoll(function(){return t.isFencePassed()},function(){return n()})})},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0,n=t.length-1,r=-1;e<=n;){var i=e+n>>1;t[i]()?(r=i,e=i+1):n=i-1}return r}(this.itemsToPoll.map(function(t){return t.isDoneFn})),e=0;e<=t;++e)(0,this.itemsToPoll[e].resolveFn)();this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||A(function(){return n.pollItems(),0===n.itemsToPoll.length})},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),Hr(this.gl,t,this.framebuffer),this.autoDebugValidate&&Gr(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(Hr(this.gl,this.outputTexture,this.framebuffer),this.autoDebugValidate&&Gr(this.gl)):Kr(this.gl,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;Hr(r,t,this.framebuffer),this.autoDebugValidate&&Gr(r),this.outputTexture=t,wr(r,function(){return r.viewport(0,0,e,n)}),wr(r,function(){return r.scissor(0,0,e,n)})},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var i=this;this.throwIfDisposed(),wr(this.gl,function(){return i.gl.scissor(t,e,n,r)})},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}();function Oi(t,e){if(t.length!==e.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+e.length+" inputs");t.forEach(function(t,n){var r=t.logicalShape,i=e[n],a=i.shape;if(!S(r,a))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+a+" must match");if(!t.isUniform||!i.isUniform){var o=t.texShape,s=i.isUniform?null:i.texData.texShape;if(!S(o,s))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+o+" and "+s+" must match")}})}var ki=function(t,e,n){this.variableNames=["A"],this.outputShape=t;var r=n.filterWidth,i=n.inChannels,a=n.strideWidth,o=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,f=s.left,h=s.top,p=i*r,d=Fn();this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            int blockIndex = rc.y + col;\n            int pos = rc.x + row;\n\n            if(blockIndex >= "+t[1]+" || pos >= "+t[0]+") continue;\n\n            int offsetY = int(blockIndex / ("+u+")) * "+o+" - "+h+";\n            int d0 = offsetY + "+l+" * (pos / "+p+");\n\n            if(d0 >= "+e[0]+" || d0 < 0) continue;\n\n            int offsetX = int(mod(float(blockIndex), "+u+".) * "+a+". - "+f+".);\n            int d1 = offsetX + "+c+" * (int(mod(float(pos), "+p+".) / "+i+".));\n\n            if(d1 >= "+e[1]+" || d1 < 0) continue;\n\n            result[row * 2 + col] = getA(d0, d1, int(mod(float(pos), "+i+".)));\n          }\n        }\n\n        "+d.output+" = result;\n      }\n    "},Ai=function(t,e,n,r,i){this.variableNames=["x"],this.outputShape=[];var a,o=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";a=.5===i?"inversesqrt("+u+")":1===i?"1.0/("+u+")":"exp(log("+u+") * float(-"+i+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+o+"; j <= "+o+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+s+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+a+";\n        setOutput(val);\n      }\n    "},Ci=function(t,e,n,r,i){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=i,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+e+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+e+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+n+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+i+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+i+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    "},Pi=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,i=t.effectiveFilterHeight,a=t.effectiveFilterWidth,o=i-1-t.padInfo.top,s=a-1-t.padInfo.left,u=i*a-1;this.userCode="\n      const ivec2 pads = ivec2("+o+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+i+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+e+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+a+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+n+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+u+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+a+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ti=function(t,e,n,r){void 0===n&&(n=!1),void 0===r&&(r=!1),this.variableNames=["matrixA","matrixB"];var i=t[0],a=n?t[2]:t[1],o=r?e[1]:e[2],s=n?t[1]:t[2];this.outputShape=[i,a,o];var u=function(t,e){return n?"batch, "+e+" + "+t+", aRow":"batch, aRow, "+e+" + "+t},c=function(t,e){return r?"batch, bCol, "+e+" + "+t:"batch, "+e+" + "+t+", bCol"},l=4*Math.floor(s/4),f=s%4;this.userCode=" float dotARowBCol(int batch, int aRow, int bCol) {\n      float result = 0.0;\n      for (int i = 0; i < "+l+"; i += 4) {\n        vec4 a = vec4(\n          getMatrixA("+u(0,"i")+"),\n          getMatrixA("+u(1,"i")+"),\n          getMatrixA("+u(2,"i")+"),\n          getMatrixA("+u(3,"i")+")\n        );\n        vec4 b = vec4(\n          getMatrixB("+c(0,"i")+"),\n          getMatrixB("+c(1,"i")+"),\n          getMatrixB("+c(2,"i")+"),\n          getMatrixB("+c(3,"i")+")\n        );\n\n        result += dot(a, b);\n      }\n\n      if ("+(1===f)+") {\n        result += getMatrixA("+u(0,l)+") *\n          getMatrixB("+c(0,l)+");\n      } else if ("+(2===f)+") {\n        vec2 a = vec2(\n          getMatrixA("+u(0,l)+"),\n          getMatrixA("+u(1,l)+")\n        );\n        vec2 b = vec2(\n          getMatrixB("+c(0,l)+"),\n          getMatrixB("+c(1,l)+")\n        );\n        result += dot(a, b);\n      } else if ("+(3===f)+") {\n        vec3 a = vec3(\n          getMatrixA("+u(0,l)+"),\n          getMatrixA("+u(1,l)+"),\n          getMatrixA("+u(2,l)+")\n        );\n        vec3 b = vec3(\n          getMatrixB("+c(0,l)+"),\n          getMatrixB("+c(1,l)+"),\n          getMatrixB("+c(2,l)+")\n        );\n        result += dot(a, b);\n      }\n\n      return result;\n    }\n\n    void main() {\n      ivec3 resBRC = getOutputCoords();\n      setOutput(dotARowBCol(resBRC.x, resBRC.y, resBRC.z));\n    }\n    "},Ri=function(t,e,n,r,i){void 0===r&&(r=!1),void 0===i&&(i=!1),this.variableNames=["matrixA","matrixB"],this.usesPackedTextures=!0,this.outputShape=n;var a=r?t[0]:t[1],o=Math.ceil(a/2),s=r?"i * 2, rc.x":"rc.x, i * 2",u=i?"rc.y, i * 2":"i * 2, rc.y",c=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],l=i?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];this.userCode="\n      const float sharedDimension = "+o+".0;\n\n      vec4 dot2x2ARowBCol(ivec2 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+o+"; i++) {\n          vec4 a = getMatrixA("+s+");\n          vec4 b = getMatrixB("+u+");\n\n          result += ("+c[0]+" * "+l[0]+") + ("+c[1]+" * "+l[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n        setOutput(dot2x2ARowBCol(rc));\n      }\n    "},Di=function(){function t(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(e-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(e-1)+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,"seed")),n.gl.uniform1f(e.seedLoc,t)}},t}(),Mi=function(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+n+"),\n                      float(index == coords.y)));\n      }\n    "};function ji(t,e){return 1===e?[t]:function(t,e){return["x","y","z","w","u","v"].slice(0,e).map(function(e){return t+"."+e})}(t,e)}var Bi=function(t){this.variableNames=["A"],this.isPackShader=!0,this.outputShape=t;var e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var n=ji("rc",e),r=sr(e),i=function(t,e,n){if(1===t)return"rc > "+e[0];for(var r="",i=t-2;i<t;i++)r+=n[i]+" >= "+e[i],i<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";var i=r.slice(-2);return"\n    int r = "+i[0]+";\n    int c = "+i[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+e+";\n    bool rEdge = rp1 >= "+n+";\n  "}(e,t[t.length-1],t[t.length-2],n),o=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var i=0;i<=1;i++){for(var a=(0===r?"r":"rp1")+", "+(0===i?"c":"cp1"),o=2;o<t;o++)a=e[e.length-1-o]+","+a;n.push(a)}return n}(n,e);return 1===n?"getA(rc),\n            rc + 1 >= "+t[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(t,n);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+i+") {\n            setOutput(vec4(0));\n          } else {\n            "+a+"\n\n            setOutput(vec4("+o+"));\n          }\n        }\n      "}};var Li=function(t,e,n){this.variableNames=["x"],this.outputShape=e.map(function(e,n){return e[0]+t[n]+e[1]});var r=t.length,i=sr(r),a=e.map(function(t){return t[0]}).join(","),o=e.map(function(e,n){return e[0]+t[n]}).join(","),s=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+i+" start = "+i+"("+a+");\n      "+i+" end = "+i+"("+o+");\n\n      void main() {\n        "+i+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+n+"));\n        } else {\n          "+i+" coords = outC - start;\n          setOutput(getX("+s+"));\n        }\n      }\n    ":"\n        int start = "+a+";\n        int end = "+o+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+n+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "},zi=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,i=t.strideHeight,a=t.strideWidth,o=t.dilationHeight,s=t.dilationWidth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;var h="avg"===e,p="0.0";if(h||(p="-1.0 / 1e-20"),n)this.userCode="\n        const ivec2 strides = ivec2("+i+", "+a+");\n        const ivec2 pads = ivec2("+l+", "+f+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+o+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+s+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * "+c+" + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var d=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(d="avgValue / count");var m=4*Math.floor(r/4),g=r%4,y="\n      if ("+h+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+i+", "+a+");\n      const ivec2 pads = ivec2("+l+", "+f+");\n      const float initializationValue = "+p+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+p+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+u+";\n            wR += "+o+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+m+"; wC += 4) {\n            int xC = xCCorner + wC * "+s+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              getValue(batch, xR, xC + 3 * "+s+", d)\n            );\n\n            "+y+"\n          }\n\n          int xC = xCCorner + "+m+";\n          if ("+(1===g)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+y+"\n          } else if ("+(2===g)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+y+"\n          } else if ("+(3===g)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              initializationValue\n            );\n\n            "+y+"\n          }\n        }\n        setOutput("+d+");\n      }\n    "}},Fi=function(t,e){this.variableNames=["x"];var n=t.windowSize,r=t.batchSize,i=t.inSize,a=Math.ceil(i/n);this.outputShape=[r,a];var o="0.0",s="";"prod"===e?o="1.0":"min"===e?(o="1.0 / 1e-20",s="min"):"max"===e&&(o="-1.0 / 1e-20",s="max");var u=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");var c=4*Math.floor(n/4),l=n%4,f="\n      if ("+("sum"===e)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===e)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+s+"(values, minMaxValue);\n      }\n    ",h="vec4";"all"===e?(o="1.0",f="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===e&&(o="0.0",f="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");var p="";i%n>0&&(p="\n        if (inIdx < 0 || inIdx >= "+i+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+o+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+p+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+n+";\n\n        vec4 minMaxValue = vec4("+o+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+f+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+f+"\n        } else if ("+(2===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+f+"\n        } else if ("+(3===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+f+"\n        }\n        setOutput("+u+");\n      }\n    "},Ui=function(t,e){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t;for(var n="",r=0;r<4;r++){var i="thisRC = rc;";r%2==1&&(i+="thisRC.z += 1;"),r>1&&(i+="thisRC.y += 1;"),n+="\n        "+i+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      "}this.userCode="\n      "+function(t){return"\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+Un(["r","c","d"],t)+"\n      return ivec3(r, c, d);\n    }\n  "}(e)+"\n      "+function(t){return"\n    int getFlatIndex(ivec3 coords) {\n      return round("+function(t,e){if(t.length!==e.length)throw new Error("Vectors to be dotted must be of the same length -got "+t.length+" and "+e.length);for(var n=[],r=Math.floor(t.length/4),i=t.length%4,a=0;a<r;a++){var o=t.slice(4*a,4*a+4),s=e.slice(4*a,4*a+4);n.push(Vn(o)+", "+Vn(s))}return 0!==i&&(o=t.slice(4*r),s=e.slice(4*r),1===o.length&&(o=o.map(function(t){return"float("+t+")"}),s=s.map(function(t){return"float("+t+")"})),n.push(Vn(o)+", "+Vn(s))),n.map(function(t,e){return"dot("+t+")"}).join("+")}(["coords.x","coords.y","coords.z"],K(t).map(function(t){return t.toString()}).concat(["1."]))+");\n    }\n  "}(t)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+t[1]+";\n        int cols = "+t[2]+";\n\n        "+n+"\n\n        setOutput(result);\n      }\n    "};var Vi=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,i=r[1],a=r[2],o=t.shape,s=o[1],u=o[2],c=[n&&s>1?i-1:i,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],f=c[0]/l[0],h=c[1]/l[1],p=1/f,d=1/h,m=2*Math.ceil(p)+2,g=2*Math.ceil(d)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+f+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+p+");\n        const float invWidthScale = float("+d+");\n\n        const int winHeight = int("+m+");\n        const int winWidth = int("+g+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(i-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(a-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Wi=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var i=t[0],a=t[1],o=t[2],s=t[3];this.outputShape=[i,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?o-1:o],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+a+".0, "+o+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "},qi=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,i=r[1],a=r[2],o=t.shape,s=o[1],u=o[2],c=[n&&s>1?i-1:i,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],f=c[0]/l[0],h=c[1]/l[1],p=1/f,d=1/h,m=2*Math.ceil(p)+2,g=2*Math.ceil(d)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+f+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+p+");\n        const float invWidthScale = float("+d+");\n\n        const int winHeight = int("+m+");\n        const int winWidth = int("+g+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+c[0]+") *\n                (float(dyR) / float("+l[0]+"));\n\n            float sourceFracCol =\n                float("+c[1]+") *\n                  (float(dyC) / float("+l[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+i+") - 1),\n                "+n+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+a+") - 1),\n                "+n+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},$i=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var i=t[0],a=t[1],o=t[2],s=t[3];this.outputShape=[i,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?o-1:o],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+a+".0, "+o+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+l+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "},Hi=function(t,e){this.variableNames=["x"];var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");if(this.outputShape=t,1!==n){var r=t.map(function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - coords["+n+"] - 1":"coords["+n+"]"}(r)}).join(","),i=sr(n);this.userCode="\n      void main() {\n        "+i+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      "},Ki=function(t,e,n,r,i,a,o){void 0===o&&(o=!0),this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;var s=sr(i.length),u=sr(a.length),c="";1===n?c="i":2===n&&(c="i, j");var l="getIndices("+c+")",f="";1===r?f="i":2===r&&(f="i, coords[1]");var h="getUpdates("+f+")",p=e>1?"strides[j]":"strides";this.userCode="\n        "+s+" strides = "+s+"("+i+");\n\n        void main() {\n          "+u+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+t+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+e+"; j++) {\n              int index = round("+l+");\n              flattenedIndex += index * "+p+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+h+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      "},Gi=function(t,e){this.variableNames=["x","segmentIds"];var n=t.windowSize,r=t.batchSize,i=t.inSize,a=t.numSegments,o=a*Math.ceil(i/n);this.outputShape=[r,o];var s=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ",l="";i%n>0&&(l="\n        if (inIdx < 0 || inIdx >= "+i+") {\n          return initializationValue;\n        }\n      ");var f="";i%n>0&&(f="\n        if (inIdx < 0 || inIdx >= "+i+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+l+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+f+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+a+")) * float("+n+"));\n        int currentSeg = int(mod(float(outIdx), float("+a+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+s+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+c+"\n        }\n\n        int inIdx = inOffset + "+s+";\n        if ("+(1===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+c+"\n        } else if ("+(2===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+c+"\n        } else if ("+(3===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+c+"\n        }\n        setOutput(sumValue);\n      }\n    "},Xi=function(t,e,n){var r,i;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error("Where for rank "+n+" is not yet supported");if(1===n)i="resRC",r="resRC";else{for(var a=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],s=[],u=0;u<e.length;u++)s.push(""+a[u]),u<t&&o.push(""+a[u]);r=o.join(),i=s.join()}var c=sr(n);this.userCode="\n      void main() {\n        "+c+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+i+"));\n        } else {\n          setOutput(getB("+i+"));\n        }\n      }\n    "},Yi=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var e,n=sr(this.rank),r="uniform int start["+this.rank+"];",i=function(t){if(1===t)return"sourceLoc";if(t<=6)return Ji.slice(0,t).map(function(t){return"sourceLoc."+t}).join(",");throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);e="\n        "+n+" sourceLoc;\n        "+n+" coords = getOutputCoords();\n        "+t.map(function(t,e){return"sourceLoc."+Ji[e]+" = start["+e+"] + coords."+Ji[e]+";"}).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+e+"\n        setOutput(getSource("+i+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),Ji=["x","y","z","w","u","v"];var Zi=function(t,e,n,r){this.variableNames=["x"];var i=n.filter(function(t,e){return-1===r.indexOf(e)});this.outputShape=i;var a=n.length,o=sr(n.length),s=sr(i.length),u="";if(1===a)u="coords * strides + begin";else{var c=0;u=n.map(function(t,e){return-1===r.indexOf(e)?(c++,1===i.length?"coords * strides["+e+"] + begin["+e+"]":"coords["+(c-1)+"] * strides["+e+"] + begin["+e+"]"):"begin["+e+"]"}).join(",")}this.userCode="\n      "+o+" begin = "+o+"("+t+");\n      "+o+" strides = "+o+"("+e+");\n\n      void main() {\n        "+s+" coords = getOutputCoords();\n        setOutput(getX("+u+"));\n      }\n    "},Qi=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,e,n){var r,i=ta(e,n),a=ea(t,i,n);if(a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]),this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var o=this.freeTextures[a].shift();return this.usedTextures[a].push(o),o}return this.numUsedTextures++,this.log(),i===Ln.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):i===Ln.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):i===Ln.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):i===Ln.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):i===Ln.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[a].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var i=ea(e,ta(n,r),r);i in this.freeTextures||(this.freeTextures[i]=[]),this.freeTextures[i].push(t),this.numFreeTextures++,this.numUsedTextures--;var a=this.usedTextures[i],o=a.indexOf(t);if(o<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(o,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach(function(e){t.gpgpu.deleteMatrixTexture(e)});for(var e in this.usedTextures)this.usedTextures[e].forEach(function(e){t.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function ta(t,e){if(t===Bn.UPLOAD)return e?Ln.PACKED_2X2_FLOAT32:Ln.UNPACKED_FLOAT32;if(t===Bn.RENDER||null==t)return e?Lt.get("WEBGL_RENDER_FLOAT32_ENABLED")?Ln.PACKED_2X2_FLOAT32:Ln.PACKED_2X2_FLOAT16:Lt.get("WEBGL_RENDER_FLOAT32_ENABLED")?Ln.UNPACKED_FLOAT32:Ln.UNPACKED_FLOAT16;if(t===Bn.DOWNLOAD||t===Bn.PIXELS)return Ln.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function ea(t,e,n){return t[0]+"_"+t[1]+"_"+e+"_"+n}var na=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var i=sr(this.rank),a=function(t){var e=t.length;if(e>5)throw Error("Tile for rank "+e+" is not yet supported");if(1===e)return"imod(resRC, "+t[0]+")";for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],i=0;i<t.length;i++)r.push("imod("+n[i]+", "+t[i]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+i+" resRC = getOutputCoords();\n        setOutput(getA("+a+"));\n      }\n    "};var ra=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var i=sr(this.rank),a=function(t){var e=t.length;if(e>6)throw Error("Transpose for rank "+e+" is not yet supported");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e),i=0;i<t.length;i++)r[t[i]]=n[i];return r.join()}(e);this.userCode="\n    void main() {\n      "+i+" resRC = getOutputCoords();\n      setOutput(getA("+a+"));\n    }\n    "};var ia=1.7580993408473768,aa=1.0507009873554805,oa=function(){function t(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float NAN;\n      float unaryOperation(float x) {\n        "+e+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(){var t=this;return function(e,n){null==t.startLoc&&(t.startLoc=e.getUniformLocationNoThrow(n,"NAN"),null==t.startLoc)||e.gl.uniform1f(t.startLoc,NaN)}},t}(),sa="if (isNaN(x)) return x;",ua=sa+"\n  return (x < 0.0) ? 0.0 : x;\n",ca="\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = "+ia+";\n  float scale = "+aa+";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";var la=sa+"\n  return sin(x);\n",fa=sa+"\n  return cos(x);\n",ha=sa+"\n  return atan(x);\n",pa=sa+"\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));",da=sa+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;",ma=function(t){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t;var e=t.length,n=ji("rc",e),r=sr(e),i=function(t,e){if(1===t)return"rc";for(var n="",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),o=e<=1?"rc":"vec2("+a.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+i+");\n\n        setOutput(getChannel(packedInput, "+o+"));\n      }\n    "};var ga=Ae({concat_:function(t,e){void 0===e&&(e=0),b(t.length>=1,"Pass at least one tensor to concat");var n=ke(t,"tensors","concat");e=P(e,n[0].shape)[0];var r=de(n.map(function(t){return t.shape}),e);if(0===E(r))return Me([],r);if(1===(n=n.filter(function(t){return t.size>0})).length)return n[0];var i=n.map(function(t){return t.shape});!function(t,e){var n=t[0].length;t.forEach(function(t,e){b(t.length===n,"Error in concat"+n+"D: rank of tensors["+e+"] must be the same as the rank of the rest ("+n+")")}),b(e>=0&&e<n,"Error in concat"+n+"D: axis must be between 0 and "+(n-1)+".");var r=t[0];t.forEach(function(t,i){for(var a=0;a<n;a++)b(a===e||t[a]===r[a],"Error in concat"+n+"D: Shape of tensors["+i+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+i+".")})}(i,e);var a=n;return Lt.engine.runKernel(function(t){return t.concat(n,e)},a,function(t){var n=i.map(function(t){return t[e]});return _a(t,n,e).map(function(t){return function(){return t}})})}}),ya=Ae({concat1d_:function(t){return ga(t,0)}}),va=Ae({concat2d_:function(t,e){return ga(t,e)}}),ba=Ae({concat3d_:function(t,e){return ga(t,e)}}),wa=Ae({concat4d_:function(t,e){return ga(t,e)}}),_a=Ae({split_:function(t,e,n){void 0===n&&(n=0);var r,i=Oe(t,"x","split");return n=P(n,i.shape)[0],"number"==typeof e?(b(i.shape[n]%e==0,"Number of splits must evenly divide the axis."),r=new Array(e).fill(i.shape[n]/e)):(b(i.shape[n]===e.reduce(function(t,e){return t+e}),"The sum of sizes must match the size of the axis dimension."),r=e),Lt.engine.runKernel(function(t){return t.split(i,r,n)},{$x:i},function(t){return{$x:function(){return ga(t,n)}}})}});"undefined"!=typeof window?window:void 0!==r||"undefined"!=typeof self&&self;function xa(t,e){return t(e={exports:{}},e.exports),e.exports}var Ea=xa(function(t){!function(t,e,n){function r(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function i(t,e){var n=new function(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}(t),i=e&&e.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+1.1102230246251565e-16*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.alea=i}(0,t)}),Sa=xa(function(t){!function(t,e,n){function r(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function i(t,e){var n=new function(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xor128=i}(0,t)}),Na=xa(function(t){!function(t,e,n){function r(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function i(t,e){var n=new function(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xorwow=i}(0,t)}),Ia=xa(function(t){!function(t,e,n){function r(t,e){return e.x=t.x.slice(),e.i=t.i,e}function i(t,e){null==t&&(t=+new Date);var n=new function(t){var e=this;e.next=function(){var t,n,r=e.x,i=e.i;return t=r[i],n=(t^=t>>>7)^t<<24,n^=(t=r[i+1&7])^t>>>10,n^=(t=r[i+3&7])^t>>>3,n^=(t=r[i+4&7])^t<<7,t=r[i+7&7],n^=(t^=t<<13)^t<<9,r[i]=n,e.i=i+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.x&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xorshift7=i}(0,t)}),Oa=xa(function(t){!function(t,e,n){function r(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function i(t,e){null==t&&(t=+new Date);var n=new function(t){var e=this;e.next=function(){var t,n,r=e.w,i=e.X,a=e.i;return e.w=r=r+1640531527|0,n=i[a+34&127],t=i[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=i[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,i,a,o,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),i=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,i=0==(n=s[127&a]^=r+o)?i+1:0);for(i>=128&&(s[127&(e&&e.length||0)]=-1),i=127,a=512;a>0;--a)r=s[i+34&127],n=s[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[i]=r^n;t.w=o,t.X=s,t.i=i}(e,t)}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.X&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xor4096=i}(0,t)}),ka=xa(function(t){!function(t,e,n){function r(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function i(t,e){var n=new function(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,i=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^i,e.a=i-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.tychei=i}(0,t)}),Aa=xa(function(t){!function(e,r){var i,a=this,o=256,s=6,u="random",c=r.pow(o,s),l=r.pow(2,52),f=2*l,h=o-1;function p(t,n,p){var y=[],v=m(function t(e,n){var r,i=[],a=typeof e;if(n&&"object"==a)for(r in e)try{i.push(t(e[r],n-1))}catch(t){}return i.length?i:"string"==a?e:e+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[t,g(e)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(o):(t=new Uint8Array(o),(a.crypto||a.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=a.navigator,r=n&&n.plugins;return[+new Date,a,r,a.screen,g(e)]}}():t,3),y),b=new function(t){var e,n=t.length,r=this,i=0,a=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);i<o;)s[i]=i++;for(i=0;i<o;i++)s[i]=s[a=h&a+t[i%n]+(e=s[i])],s[a]=e;(r.g=function(t){for(var e,n=0,i=r.i,a=r.j,s=r.S;t--;)e=s[i=h&i+1],n=n*o+s[h&(s[i]=s[a=h&a+e])+(s[a]=e)];return r.i=i,r.j=a,n})(o)}(y),w=function(){for(var t=b.g(s),e=c,n=0;t<l;)t=(t+n)*o,e*=o,n=b.g(1);for(;t>=f;)t/=2,e/=2,n>>>=1;return(t+n)/e};return w.int32=function(){return 0|b.g(4)},w.quick=function(){return b.g(4)/4294967296},w.double=w,m(g(b.S),e),(n.pass||p||function(t,e,n,i){return i&&(i.S&&d(i,b),t.state=function(){return d(b,{})}),n?(r[u]=t,e):t})(w,v,"global"in n?n.global:this==r,n.state)}function d(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){for(var n,r=t+"",i=0;i<r.length;)e[h&i]=h&(n^=19*e[h&i])+r.charCodeAt(i++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(r["seed"+u]=p,m(r.random(),e),t.exports){t.exports=p;try{i=n(85)}catch(t){}}}([],Math)});Aa.alea=Ea,Aa.xor128=Sa,Aa.xorwow=Na,Aa.xorshift7=Ia,Aa.xor4096=Oa,Aa.tychei=ka;var Ca=Aa.alea,Pa=function(){function t(t,e,n,r,i){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var a=i||Math.random();this.random=Ca(a.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var i=void 0,a=void 0,o=void 0;do{o=(i=2*this.random()-1)*i+(a=2*this.random()-1)*a}while(o>=1||0===o);var s=Math.sqrt(-2*Math.log(o)/o);e=this.mean+this.stdDev*i*s,n=this.mean+this.stdDev*a*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}();function Ta(t,e){return c(this,void 0,void 0,function(){var n,r,i,a,o,s,u,c,f,h,p,d,m,g,y,v,b,w,_,x;return l(this,function(l){switch(l.label){case 0:if(n=Oe(t,"img","toPixels"),t instanceof ft||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+n.rank+".");if(r=n.shape.slice(0,2),i=r[0],a=r[1],(o=2===n.rank?1:n.shape[2])>4||2===o)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+o);return s=n.min(),u=n.max(),[4,s.data()];case 1:return c=l.sent()[0],[4,u.data()];case 2:if(f=l.sent()[0],s.dispose(),u.dispose(),"float32"===n.dtype){if(c<0||f>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+c+" - "+f+"].")}else{if("int32"!==n.dtype)throw new Error("Unsupported type for toPixels: "+n.dtype+". Please use float32 or int32 tensors.");if(c<0||f>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+c+" - "+f+"].")}return[4,n.data()];case 3:for(h=l.sent(),p="float32"===n.dtype?255:1,d=new Uint8ClampedArray(a*i*4),m=0;m<i*a;++m)g=void 0,y=void 0,v=void 0,b=void 0,1===o?(g=h[m]*p,y=h[m]*p,v=h[m]*p,b=255):3===o?(g=h[3*m]*p,y=h[3*m+1]*p,v=h[3*m+2]*p,b=255):4===o&&(g=h[4*m]*p,y=h[4*m+1]*p,v=h[4*m+2]*p,b=h[4*m+3]*p),d[0+(w=4*m)]=Math.round(g),d[w+1]=Math.round(y),d[w+2]=Math.round(v),d[w+3]=Math.round(b);return null!=e&&(e.width=a,e.height=i,_=e.getContext("2d"),x=new ImageData(d,a,i),_.putImageData(x,0,0)),n!==t&&n.dispose(),[2,d]}})})}function Ra(t,e,n){return void 0===e&&(e="float32"),new st(t,e=e||"float32",n)}function Da(t,e){void 0===e&&(e=!1),console.log(t.toString(e))}var Ma=Ae({batchToSpaceND_:function(t,e,n){var r=Oe(t,"x","batchToSpaceND"),i=e.reduce(function(t,e){return t*e});return b(r.rank>=1+e.length,"input rank is "+r.rank+" but should be > than blockShape.length "+e.length),b(n.length===e.length,"crops.length is "+n.length+" but should be equal to blockShape.length  "+e.length),b(r.shape[0]%i==0,"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+e.join(" * ")+" === "+i),Lt.engine.runKernel(function(t){return t.batchToSpaceND(r,e,n)},{$x:r},function(t){return{$x:function(){return t.spaceToBatchND(e,n)}}})}}),ja=Ae({cast_:function(t,e){var n=Oe(t,"x","cast");return Lt.engine.runKernel(function(t){return t.cast(n,e)},{$x:n},function(t){return{$x:function(){return t.clone()}}})}}),Ba=Ae({clone_:function(t){var e=Oe(t,"x","clone",null);return Lt.engine.runKernel(function(t){return ft.make(e.shape,{dataId:e.dataId},e.dtype)},{$x:e},function(t){return{$x:function(){return t.toFloat()}}})}}),La=Ae({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var i=Oe(t,"x","cumsum"),a=ue([e|=0],i.rank),o=i;null!=a&&(o=i.transpose(a));var s=le(1,i.rank)[0],u=Lt.engine.runKernel(function(t){return t.cumsum(o,s,n,r)},{permutedX:o},function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}});return null!=a&&(u=u.transpose(a)),u}}),za=Ae({depthToSpace_:function(t,e,n){void 0===n&&(n="NHWC");var r=Oe(t,"x","depthToSpace"),i="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];return b(i*e>=0,"Negative dimension size caused by overflow when multiplying\n      "+i+" and "+e+"  for depthToSpace with input shape\n      "+r.shape),b(a*e>=0,"Negative dimension size caused by overflow when multiplying\n      "+a+" and "+e+" for depthToSpace with input shape\n          "+r.shape),b(o%(e*e)==0,"Dimension size must be evenly divisible by "+e*e+" but is "+o+" for depthToSpace with input shape "+r.shape),Lt.engine.runKernel(function(t){return t.depthToSpace(r,e,n)},{$x:r})}}),Fa=Ae({expandDims_:function(t,e){void 0===e&&(e=0);var n=Oe(t,"x","expandDims");b(e<=n.rank,"Axis must be <= rank of the tensor");var r=n.shape.slice();return e<0&&(b(-(n.rank+1)<=e,"Axis must be in the interval ["+-(n.rank+1)+", "+n.rank+"]"),e=n.rank+e+1),r.splice(e,0,1),Qa(n,r)}}),Ua=Ae({eye_:function(t,e,n,r){void 0===r&&(r="float32"),null==e&&(e=t);for(var i=Ra([t,e],r),a=t<=e?t:e,o=0;o<a;++o)i.set(1,o,o);var s=i.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return ro(Fa(s,0),[n[0],1,1]);if(2===n.length)return ro(Fa(Fa(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return ro(Fa(Fa(Fa(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+n.length+"D.")}}),Va=Ae({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");return Lt.engine.fromPixels(t,e)}}),Wa=Ae({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var i=Oe(t,"logits","multinomial"),a=i.size,o=i.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(o>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+o);n=n||Math.random();var s=1===o?i.as2D(1,-1):i,u=Lt.engine.runKernel(function(t){return t.multinomial(s,r,e,n)},{logits2D:s});return 1===o?u.as1D():u}}),qa=Ae({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);var i=Oe(t,"indices","oneHot","int32"),a=i.shape.concat([e]);return i=i.flatten(),Lt.engine.runKernel(function(t){return t.oneHot(i,e,n,r)},{$indices:i},function(t){return{$indices:function(){return qe(i.shape,"float32")}}}).reshape(a)}}),$a=Ae({pad_:function(t,e,n){void 0===n&&(n=0);var r=Oe(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var i=e.map(function(t){return t[0]});return Lt.engine.runKernel(function(t){return t.pad(r,e,n)},{$x:r},function(t){return{$x:function(){return t.slice(i,r.shape)}}})}}),Ha=Ae({pad1d_:function(t,e,n){return void 0===n&&(n=0),b(2===e.length,"Invalid number of paddings. Must be length of 2."),$a(t,[e],n)}}),Ka=Ae({pad2d_:function(t,e,n){return void 0===n&&(n=0),b(2===e.length&&2===e[0].length&&2===e[1].length,"Invalid number of paddings. Must be length of 2 each."),$a(t,e,n)}}),Ga=Ae({pad3d_:function(t,e,n){return void 0===n&&(n=0),b(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,"Invalid number of paddings. Must be length of 2 each."),$a(t,e,n)}}),Xa=Ae({pad4d_:function(t,e,n){return void 0===n&&(n=0),b(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,"Invalid number of paddings. Must be length of 2 each."),$a(t,e,n)}}),Ya=Ae({rand_:function(t,e,n){var r=E(t),i=null;if(null==n||"float32"===n)i=new Float32Array(r);else if("int32"===n)i=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);i=new Uint8Array(r)}for(var a=0;a<r;a++)i[a]=e();return ft.make(t,{values:i},n)}}),Ja=Ae({randomNormal_:function(t,e,n,r,i){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var a=new Pa(e,n,r,!1,i),o=Ra(t,r),s=0;s<o.values.length;s++)o.values[s]=a.nextValue();return o.toTensor()}}),Za=Ae({randomUniform_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r="float32");for(var i=Ra(t,r),a=0;a<i.values.length;a++)i.values[a]=v(e,n);return i.toTensor()}}),Qa=Ae({reshape_:function(t,e){var n=Oe(t,"x","reshape",null);return e=C(e,n.size),b(n.size===E(e),"new shape and old shape must have the same number of elements."),Lt.engine.runKernel(function(t){return t.reshape(n,e)},{$x:n},function(t){return{$x:function(){return t.reshape(n.shape)}}})}}),to=Ae({spaceToBatchND_:function(t,e,n){var r=Oe(t,"x","spaceToBatchND");return b(r.rank>=1+e.length,"input rank "+r.rank+" should be > than [blockShape] "+e.length),b(n.length===e.length,"paddings.shape[0] "+n.length+" must be equal to [blockShape] "+e.length),b(r.shape.reduce(function(t,r,i){return i>0&&i<=e.length?t&&(r+n[i-1][0]+n[i-1][1])%e[i-1]==0:t},!0),"input spatial dimensions "+r.shape.slice(1)+" with paddings "+n.toString()+" must be divisible by blockShapes "+e.toString()),Lt.engine.runKernel(function(t){return t.spaceToBatchND(r,e,n)},{$x:r},function(t){return{$x:function(){return t.batchToSpaceND(e,n)}}})}}),eo=Ae({squeeze_:function(t,e){var n=Oe(t,"x","squeeze");return Qa(n,T(n.shape,e).newShape)}}),no=Ae({stack_:function(t,e){void 0===e&&(e=0);var n=ke(t,"tensors","stack");if(b(n.length>=1,"Pass at least one tensor to tf.stack"),1===n.length)return n[0].expandDims(e);var r=n[0].rank,i=n[0].shape,a=n[0].dtype;b(e<=r,"Axis must be <= rank of the tensor"),n.forEach(function(t){w(i,t.shape,"All tensors passed to stack must have matching shapes")}),n.forEach(function(t){b(a===t.dtype,"All tensors passed to stack must have matching dtypes")});var o=n.map(function(t){return t.expandDims(e)});return ga(o,e)}}),ro=Ae({tile_:function(t,e){var n=Oe(t,"x","tile");return b(n.rank===e.length,"Error in transpose: rank of input "+n.rank+" must match length of reps "+e+"."),Lt.engine.runKernel(function(t){return t.tile(n,e)},{$x:n},function(t){return{$x:function(){var r=Xe(n);if(1===n.rank)for(var i=0;i<e[0];++i)r=r.add(t.slice([i*n.shape[0]],[n.shape[0]]));else if(2===n.rank)for(i=0;i<e[0];++i)for(var a=0;a<e[1];++a)r=r.add(t.slice([i*n.shape[0],a*n.shape[1]],[n.shape[0],n.shape[1]]));else if(3===n.rank)for(i=0;i<e[0];++i)for(a=0;a<e[1];++a)for(var o=0;o<e[2];++o)r=r.add(t.slice([i*n.shape[0],a*n.shape[1],o*n.shape[2]],[n.shape[0],n.shape[1],n.shape[2]]));else{if(4!==n.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+n.rank+" tensors yet.");for(i=0;i<e[0];++i)for(a=0;a<e[1];++a)for(o=0;o<e[2];++o)for(var s=0;s<e[3];++s)r=r.add(t.slice([i*n.shape[0],a*n.shape[1],o*n.shape[2],s*n.shape[3]],[n.shape[0],n.shape[1],n.shape[2],n.shape[3]]))}return r}}})}}),io=Ae({truncatedNormal_:function(t,e,n,r,i){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var a=new Pa(e,n,r,!0,i),o=Ra(t,r),s=0;s<o.values.length;s++)o.values[s]=a.nextValue();return o.toTensor()}}),ao=Ae({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=Oe(t,"x","unstack");return Lt.engine.runKernel(function(t){return t.unstack(n,e)},{$x:n},function(t){return{$x:function(){return no(t,e)}}})}}),oo=function(t,e){return c(this,void 0,void 0,function(){var n,r,i,a,o,s,u,c,f,h;return l(this,function(l){switch(l.label){case 0:return n=Oe(t,"x","setdiff1d"),r=Oe(e,"y","setdiff1d"),b(n.dtype===r.dtype,"x and y should have the same dtype, but got x ("+n.dtype+") and y ("+r.dtype+")."),b(1===n.rank,"x should be 1D tensor, but got x ("+n.shape+")."),b(1===r.rank,"y should be 1D tensor, but got y ("+r.shape+")."),[4,n.data()];case 1:return i=l.sent(),[4,r.data()];case 2:for(a=l.sent(),o=new Set(a),s=0,f=0;f<i.length;f++)o.has(i[f])||s++;for(u=new st([s],n.dtype),c=new st([s],"int32"),f=0,h=0;f<i.length;f++)o.has(i[f])||(u.values[h]=i[f],c.values[h]=f,h++);return[2,[u.toTensor(),c.toTensor()]]}})})};function so(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var i=Ra(t,"int32"),a=Ra([n.length,t.length],"int32");for(r=0;r<n.length;r++){var o=i.indexToLoc(n[r]),s=r*t.length;a.values.set(o,s)}return a.toTensor()}var uo=function(){function t(t,e){if(void 0===e&&(e=!0),this.gpgpu=t,this.delayedStorage=e,this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.lruDataGPU=[],this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.binaryCache={},this.disposed=!1,Lt.get("WEBGL_VERSION")<1)throw new Error("WebGL is not supported on this device");if(null==t){var n=p(Lt.get("WEBGL_VERSION"));this.gpgpu=new Ii(n),this.canvas=n.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;this.textureManager=new Qi(this.gpgpu)}return t.prototype.register=function(t,e,n){if(this.texData.has(t))throw new Error("Data buffer is already registered");this.texData.set(t,{shape:e,dtype:n})},t.prototype.setDataMover=function(t){this.texData=new Ye(t)},t.prototype.fromPixels=function(t,e){if(null==t)throw new Error("pixels passed to tf.fromPixels() can not be null");var n=[t.height,t.width],r=[t.height,t.width,e];if(!(t instanceof HTMLVideoElement||t instanceof HTMLImageElement||t instanceof HTMLCanvasElement||t instanceof ImageData))throw new Error("pixels passed to tf.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement or ImageData, but was "+t.constructor.name);if(t instanceof HTMLVideoElement){if(null==this.fromPixels2DContext){if(!Lt.get("IS_BROWSER"))throw new Error("Can't read pixels from HTMLImageElement outside the browser.");if("complete"!==document.readyState)throw new Error("The DOM is not ready yet. Please call tf.fromPixels() once the DOM is ready. One way to do that is to add an event listener for `DOMContentLoaded` on the document object");this.fromPixels2DContext=document.createElement("canvas").getContext("2d")}this.fromPixels2DContext.canvas.width=t.width,this.fromPixels2DContext.canvas.height=t.height,this.fromPixels2DContext.drawImage(t,0,0,t.width,t.height),t=this.fromPixels2DContext.canvas}var i=this.makeTensorHandle(n,"int32");this.texData.get(i.dataId).usage=Bn.PIXELS,this.gpgpu.uploadPixelDataToTexture(this.getTexture(i.dataId),t);var a=new yr(r),o=this.compileAndRun(a,[i]);return this.disposeData(i.dataId),o},t.prototype.makeTensorHandle=function(t,e){var n={};return this.register(n,t,e),{dataId:n,shape:t,dtype:e}},t.prototype.write=function(t,e){if(null==e)throw new Error("MathBackendWebGL.write(): values can not be null");if(Lt.get("DEBUG"))for(var n=0;n<e.length;n++){var r=e[n];if(!Ir(r))throw Error("The value "+r+" cannot be represented on this device.")}var i=this.texData.get(t),a=i.texture,o=i.texShape,s=i.usage,u=i.dtype,c=i.isPacked;if("complex64"===u)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");null!=a&&(this.releaseTexture(t,a,o,s,c),i.texture=null,i.texShape=null),i.usage=Bn.UPLOAD,i.values=e,this.delayedStorage||this.uploadToGPU(t)},t.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,i=e.complexTensors,a=e.slice,o=e.shape;if(null!=a){var s=new oa(o,"return x;"),u=this.compileAndRun(s,[{dataId:t,shape:o,dtype:r}]);return this.readSync(u.dataId)}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;var c,l,f=null!=this.activeTimers;return f&&(c=performance.now()),l="complex64"===r?tn(i.real.dataSync(),i.imag.dataSync()):this.getValuesFromTexture(t),f&&(this.downloadWaitMs+=performance.now()-c),this.convertAndCacheOnCPU(t,l)},t.prototype.read=function(t){return c(this,void 0,void 0,function(){var e,n,r,i,a,o,s,u,c,f,h,p,d,m,g,y,v,b,w,_,x,E;return l(this,function(l){switch(l.label){case 0:if(this.pendingRead.has(t))return r=this.pendingRead.get(t),[2,new Promise(function(t){return r.push(t)})];if(i=this.texData.get(t),a=i.texture,o=i.values,s=i.texShape,u=i.isPacked,c=i.shape,f=i.slice,h=i.dtype,null!=f)return p=new oa(c,"return x;"),d=this.compileAndRun(p,[{dataId:t,shape:c,dtype:h}]),[2,this.read(d.dataId)];if(null!=o)return[2,this.convertAndCacheOnCPU(t)];if(this.pendingRead.set(t,[]),!Lt.get("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Lt.get("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return m=s[1],g=s[0],u&&(e=Hn(s[0],s[1]),m=e[0],g=e[1]),y=this.gpgpu.maybeCreateBufferFromTexture(a,g,m),[4,this.gpgpu.createAndWaitForFence()];case 1:return l.sent(),y instanceof WebGLTexture?v=this.getValuesFromTexture(t):u?(b=Zr(c),w=1,_=1,c.length&&(n=Qr(c),w=n[0],_=n[1]),v=this.gpgpu.downloadPackedMatrixFromBuffer(y,b,w,_,s[0],s[1])):v=this.gpgpu.downloadFloat32MatrixFromBuffer(y,s[0],s[1]),x=this.convertAndCacheOnCPU(t,v),E=this.pendingRead.get(t),this.pendingRead.delete(t),E.forEach(function(t){return t(x)}),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)),[2,x]}})})},t.prototype.getValuesFromTexture=function(t){var e,n=this.texData.get(t),r=n.shape,i=n.dtype,a=n.texture,o=n.texShape;if(Lt.get("WEBGL_DOWNLOAD_FLOAT_ENABLED")){if(this.texData.get(t).isPacked){var s=Zr(r),u=1,c=1;return r.length&&(u=(e=Qr(r))[0],c=e[1]),this.gpgpu.downloadMatrixFromPackedTexture(a,s,u,c,o[0],o[1])}return this.gpgpu.downloadFloat32MatrixFromOutputTexture(a,o[0],o[1])}var l=this.makeTensorHandle(r,"float32");l.size=E(r),this.texData.get(l.dataId).usage=Bn.DOWNLOAD;var f=new pr(r);this.compileAndRun(f,[{shape:r,dtype:i,dataId:t}],l,null,!1);var h=this.texData.get(l.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture,h.texShape[0],h.texShape[1]);return this.disposeData(l.dataId),p},t.prototype.time=function(t){return c(this,void 0,void 0,function(){var e,n,r,i,a,o,s;return l(this,function(u){switch(u.label){case 0:return e=this.activeTimers,n=[],r=!1,null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t(),i=x(this.activeTimers.map(function(t){return t.query})).filter(function(t){return null!=t}),a=x(this.activeTimers.map(function(t){return t.name})).filter(function(t){return null!=t}),this.activeTimers=e,r&&(this.programTimersStack=null),[4,Promise.all(i)];case 1:return o=u.sent(),s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:y(o),getExtraProfileInfo:function(){return o.map(function(t,e){return{name:a[e],ms:t}}).map(function(t){return t.name+": "+t.ms}).join(", ")},wallMs:null},this.uploadWaitMs=0,this.downloadWaitMs=0,[2,s]}})})},t.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},t.prototype.startTimer=function(){return Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?this.gpgpu.beginQuery():{startMs:performance.now(),endMs:null}},t.prototype.endTimer=function(t){return Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(this.gpgpu.endQuery(),t):(t.endMs=performance.now(),t)},t.prototype.getQueryTime=function(t){return c(this,void 0,void 0,function(){var e;return l(this,function(n){return Lt.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]})})},t.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t))if(this.pendingRead.has(t))this.pendingDisposal.add(t);else if(this.texData.has(t)){var e=this.texData.get(t),n=e.texture,r=e.texShape,i=e.usage,a=e.complexTensors,o=e.isPacked,s=e.slice;if(null!=n){var u=s&&s.origDataId||t,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),this.releaseTexture(t,n,r,i,o),this.texData.delete(t))}null!=a&&(a.real.dispose(),a.imag.dispose())}},t.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},t.prototype.getCPUBackend=function(){return Lt.get("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Lt.findBackend("cpu")),this.cpuBackend):null},t.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=10),null!=this.getCPUBackend()&&t.every(function(t){return null==n.texData.get(t.dataId).texture&&t.size<e})},t.prototype.getGPGPUContext=function(){return this.gpgpu},t.prototype.getCanvas=function(){return this.canvas},t.prototype.complex=function(t,e){var n=this.makeOutputArray(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Lt.engine.keep(t.clone()),imag:Lt.engine.keep(e.clone())},n},t.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},t.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},t.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);var r=this.texData.get(t.dataId).isPacked,i=Ee(t.shape,e,n);if(r||!i){var a=new Yi(n),o=a.getCustomSetupFunc(e);return this.compileAndRun(a,[t],null,o)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},t.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),i=ft.make(n,{},r.dtype),a=this.texData.get(i.dataId);Object.assign(a,r),a.shape=n;var o=Se(e,t.strides);r.slice&&(o+=r.slice.flatOffset),a.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,s+1),i},t.prototype.stridedSlice=function(t,e,n,r,i,a,o,s,u){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r,i,a,o,s,u);var c=we(t.shape,e,n,r,i,a,o,s,u),l=c[0],f=c[1],h=c[2],p=f.filter(function(t,e){return-1===h.indexOf(e)});if(p.some(function(t){return 0===t}))return Me([],p);var d=new Zi(l,r,f,h);return this.compileAndRun(d,[t])},t.prototype.reverse=function(t,e){var n=new Hi(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.concat=function(t,e){if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>Lt.get("WEBGL_MAX_TEXTURES_IN_SHADER")){var n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),i=this.concat(t.slice(n),e);return this.concat([r,i],e)}var a=de(t.map(function(t){return t.shape}),e),o=t.map(function(t){return t.as2D(-1,E(t.shape.slice(e)))}),s=new Sn(o.map(function(t){return t.shape}));return this.compileAndRun(s,o).reshape(a)},t.prototype.neg=function(t){var e=new oa(t.shape,"return -x;");return this.compileAndRun(e,[t])},t.prototype.batchMatMul=function(t,e,n,r){var i=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],o=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===i||1===a)&&o>1e3){n&&(t=t.transpose([0,2,1])),r&&(e=e.transpose([0,2,1]));var u=1===a?t:t.as3D(s,o,1),c=1===a?2:1,l=1===a?e.as3D(s,1,o):e;return this.multiply(u,l).sum(c,!0)}var f=_t(t.dtype,e.dtype);if(1===s){var h=t.as2D(t.shape[1],t.shape[2]),p=e.as2D(e.shape[1],e.shape[2]),d=new Ri(h.shape,p.shape,[i,a],n,r),m=this.makePackedTensor(d.outputShape,f),g=this.compileAndRun(d,[h,p],m);return g.reshape([1,g.shape[0],g.shape[1]])}return d=new Ti(t.shape,e.shape,n,r),m=this.makeOutputArray(d.outputShape,f),this.compileAndRun(d,[t,e],m)},t.prototype.multiply=function(t,e){if("complex64"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),i=new mn(pn,t.shape,e.shape),a=new mn(dn,t.shape,e.shape),o=[this.makeComplexComponentTensorHandle(t,n.complexTensors.real),this.makeComplexComponentTensorHandle(t,n.complexTensors.imag),this.makeComplexComponentTensorHandle(e,r.complexTensors.real),this.makeComplexComponentTensorHandle(e,r.complexTensors.imag)],s=this.compileAndRun(i,o),u=this.compileAndRun(a,o),c=this.complex(s,u);return s.dispose(),u.dispose(),c}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(this.usePackedBinaryOp(t,e))return this.packedBinaryOp(t,e,vn,t.dtype);var l=new bn(vn,t.shape,e.shape),f=this.makeOutputArray(l.outputShape,t.dtype);return this.compileAndRun(l,[t,e],f)},t.prototype.batchNormalization=function(t,e,n,r,i,a){var o=[t,e,n],s=null;null!=a&&(s=a.shape,o.push(a));var u=null;if(null!=i&&(u=i.shape,o.push(i)),Lt.get("WEBGL_PACK_BATCHNORMALIZATION")){var c=new hn(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(c,o)}var l=new fn(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(l,o)},t.prototype.localResponseNormalization4D=function(t,e,n,r,i){var a=new Ai(t.shape,e,n,r,i);return this.compileAndRun(a,[t])},t.prototype.LRNGrad=function(t,e,n,r,i,a,o){var s=new Ci(e.shape,r,i,a,o);return this.compileAndRun(s,[e,n,t])},t.prototype.tile=function(t,e){var n=new na(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.pad=function(t,e,n){var r=new Li(t.shape,e,n);return this.compileAndRun(r,[t])},t.prototype.transpose=function(t,e){var n=new ra(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.gather=function(t,e,n){var r=new vr(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},t.prototype.batchToSpaceND=function(t,e,n){b(t.rank<=4,"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");var r=e.reduce(function(t,e){return t*e}),i=Qt(t.shape,e,r),a=te(i.length,e.length),o=ee(t.shape,e,r),s=ne(n,e.length),u=re(o,n,e.length);return t.reshape(i).transpose(a).reshape(o).slice(s,u)},t.prototype.spaceToBatchND=function(t,e,n){b(t.rank<=4,"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");var r=e.reduce(function(t,e){return t*e}),i=[[0,0]];i.push.apply(i,n);for(var a=1+e.length;a<t.shape.length;++a)i.push([0,0]);var o=t.pad(i),s=Qt(o.shape,e,r,!1),u=te(s.length,e.length,!1),c=ee(o.shape,e,r,!1);return o.reshape(s).transpose(u).reshape(c)},t.prototype.reduce=function(t,e,n){var r=t.shape[0],i=t.shape[1],a=ye(i),o=new Fi({windowSize:a,inSize:i,batchSize:r},e),s=o.outputShape,u=s[0],c=s[1],l=this.makeOutputArray([u,c],n);return this.compileAndRun(o,[t],l),1===l.shape[1]?l:this.reduce(l,e,n)},t.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],i=t.shape[1];null!=n&&(r=n.shape[0],i=n.shape[1]);var a=ye(i),o=new cn({windowSize:a,inSize:i,batchSize:r},e,null==n),s=o.outputShape,u=s[0],c=s[1],l=this.makeOutputArray([u,c],"int32"),f=[t];return null!=n&&f.push(n),this.compileAndRun(o,f,l),1===l.shape[1]?l:this.argReduce(t,e,l)},t.prototype.sum=function(t,e){se("sum",e,t.rank);var n=ae(t.shape,e),r=n[0],i=E(n[1]),a=t.as2D(-1,i),o=xt(t.dtype);return this.reduce(a,"sum",o).reshape(r)},t.prototype.prod=function(t,e){var n=ae(t.shape,e),r=n[0],i=E(n[1]),a=t.as2D(-1,i),o=xt(t.dtype);return this.reduce(a,"prod",o).reshape(r)},t.prototype.unsortedSegmentSum=function(t,e,n){var r=0,i=ue([r],t.rank),a=t;null!=i&&(a=t.transpose(i),r=le(1,t.rank)[0]);var o=function(t,e,n){for(var r=[],i=t.length,a=0;a<i;a++)a!==e?r.push(t[a]):r.push(n);return r}(a.shape,r,n),s=E([a.shape[r]]),u=a.as2D(-1,s),c=xt(t.dtype),l=this.segOpCompute(u,"unsortedSegmentSum",e,c,n).reshape(o);return null!=i&&(l=l.transpose(ce(i))),l},t.prototype.segOpCompute=function(t,e,n,r,i){var a=t.shape[0],o=t.shape[1],s=function(t,e){var n,r=!1;for(t<=ge?(n=t,r=!0):n=H(t,Math.floor(Math.sqrt(t)));!r;){if(n>e||n===t){r=!0;break}n=H(t,n+1)}return n}(o,i),u=new Gi({windowSize:s,inSize:o,batchSize:a,numSegments:i},e),c=u.outputShape,l=c[0],f=c[1],h=this.makeOutputArray([l,f],r);return this.compileAndRun(u,[t,n],h),h.shape[1]===i?h:(n=Ke(0,i).tile([o/s]),this.segOpCompute(h,e,n,r,i))},t.prototype.argMin=function(t,e){var n=[e];se("argMin",n,t.rank);var r=ae(t.shape,n),i=r[0],a=E(r[1]),o=t.as2D(-1,a);return this.argReduce(o,"min").reshape(i)},t.prototype.argMax=function(t,e){var n=[e];se("argMax",n,t.rank);var r=ae(t.shape,n),i=r[0],a=E(r[1]),o=t.as2D(-1,a);return this.argReduce(o,"max").reshape(i)},t.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(t.rank-1)+" but got axis="+e);var i=new lr(t.shape,n,r);return this.compileAndRun(i,[t])},t.prototype.equal=function(t,e){var n=new bn("return float(a == b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.notEqual=function(t,e){var n=new bn("return float(a != b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);var n=new bn("return float(a < b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.lessEqual=function(t,e){var n=new bn("return float(a <= b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);var n=new bn("return float(a > b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.greaterEqual=function(t,e){var n=new bn("return float(a >= b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.logicalNot=function(t){var e=new oa(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])},t.prototype.logicalAnd=function(t,e){var n=new bn("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.logicalOr=function(t,e){var n=new bn("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.select=function(t,e,n){var r=new Xi(t.rank,e.shape,e.rank),i=this.makeOutputArray(r.outputShape,_t(e.dtype,n.dtype));return this.compileAndRun(r,[t,e,n],i)},t.prototype.where=function(t){Zt("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var e=t.dataSync();return so(t.shape,e)},t.prototype.topk=function(t,e,n){return un(t.dataSync(),t.shape,t.dtype,e)},t.prototype.min=function(t,e){se("min",e,t.rank);var n=ae(t.shape,e),r=n[0],i=E(n[1]),a=t.as2D(-1,i);return this.reduce(a,"min",a.dtype).reshape(r)},t.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=new bn("\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.mod=function(t,e){var n=new bn("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape),r=n.getCustomSetupFunc();return this.compileAndRun(n,[t,e],null,r)},t.prototype.max=function(t,e){se("max",e,t.rank);var n=ae(t.shape,e),r=n[0],i=E(n[1]),a=t.as2D(-1,i);return this.reduce(a,"max",a.dtype).reshape(r)},t.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=new bn("\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.all=function(t,e){se("all",e,t.rank);var n=ae(t.shape,e),r=n[0],i=E(n[1]),a=t.as2D(-1,i);return this.reduce(a,"all",a.dtype).reshape(r)},t.prototype.any=function(t,e){se("any",e,t.rank);var n=ae(t.shape,e),r=n[0],i=E(n[1]),a=t.as2D(-1,i);return this.reduce(a,"any",a.dtype).reshape(r)},t.prototype.squaredDifference=function(t,e){var n=new bn("return (a - b) * (a - b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.realDivide=function(t,e){if(this.usePackedBinaryOp(t,e))return this.packedBinaryOp(t,e,"\n  vec4 one = vec4(equal(a, b));\n  return one + (vec4(1.0) - one) * a / b;\n","float32");var n=new bn("if (a == b) return 1.0;\n  return a / b;",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t,e],r)},t.prototype.floorDiv=function(t,e){if(this.usePackedBinaryOp(t,e))return this.packedBinaryOp(t,e,"\n  vec4 resultSign = sign(a) * sign(b);\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  ivec4 result = ia / ib;\n  ivec4 amodb = ia - ib * result;\n  \n  // Vectorize INT_DIV\n  // if (resultSign < 0.0 && amodb != 0) result -= 1;\n  // return float(result);\n  return vec4(result -\n     ivec4(lessThan(resultSign, vec4(0.0))) * ivec4(notEqual(amodb, ivec4(0))));\n","int32");var n=new bn("\n  float resultSign = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  int result = ia / ib;\n  int amodb = ia - ib * result;\n\n  if (resultSign < 0.0 && amodb != 0) {\n    result -= 1;\n  }\n  return float(result);\n",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"int32");return this.compileAndRun(n,[t,e],r)},t.prototype.add=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,gn);var n=_t(t.dtype,e.dtype);if(this.usePackedBinaryOp(t,e))return this.packedBinaryOp(t,e,gn,n);var r=new bn(gn,t.shape,e.shape),i=this.makeOutputArray(r.outputShape,n);return this.compileAndRun(r,[t,e],i)},t.prototype.usePackedBinaryOp=function(t,e){if(!Lt.get("WEBGL_PACK_BINARY_OPERATIONS"))return!1;var n=pe(t.shape,e.shape);return!(n.length>4||fe(t.shape,n).length||fe(e.shape,n).length)},t.prototype.packedBinaryOp=function(t,e,n,r){var i=new wn(n,t.shape,e.shape),a=this.makePackedTensor(i.outputShape,r);return this.compileAndRun(i,[t,e],a)},t.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,i=this.texData.get(t.dataId),a=this.texData.get(e.dataId),o=[[i.complexTensors.real,a.complexTensors.real],[i.complexTensors.imag,a.complexTensors.imag]].map(function(i){var a=i[0],o=i[1],s=new bn(n,t.shape,e.shape),u=r.makeOutputArray(s.outputShape,_t(a.dtype,o.dtype)),c=r.makeComplexComponentTensorHandle(t,a),l=r.makeComplexComponentTensorHandle(e,o);return r.compileAndRun(s,[c,l],u)}),s=o[0],u=o[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},t.prototype.makeComplexComponentTensorHandle=function(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}},t.prototype.addN=function(t){for(var e=t[0],n=1;n<t.length;n++)e=this.add(e,t[n]);return e},t.prototype.subtract=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,yn);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=_t(t.dtype,e.dtype);if(this.usePackedBinaryOp(t,e))return this.packedBinaryOp(t,e,yn,t.dtype);var r=new bn(yn,t.shape,e.shape),i=this.makeOutputArray(r.outputShape,n);return this.compileAndRun(r,[t,e],i)},t.prototype.pow=function(t,e){var n=this.usePackedBinaryOp(t,e),r=n?new wn("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n  \n  return result;\n",t.shape,e.shape):new bn("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),i=_t(t.dtype,e.dtype),a=n?this.makePackedTensor(r.outputShape,i):this.makeOutputArray(r.outputShape,i),o=r.getCustomSetupFunc();return this.compileAndRun(r,[t,e],a,o)},t.prototype.ceil=function(t){var e=new oa(t.shape,"return ceil(x);");return this.compileAndRun(e,[t])},t.prototype.floor=function(t){var e=new oa(t.shape,"return floor(x);");return this.compileAndRun(e,[t])},t.prototype.sign=function(t){var e=new oa(t.shape,"\n  if (isNaN(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])},t.prototype.round=function(t){var e=new oa(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])},t.prototype.exp=function(t){var e=new oa(t.shape,"return exp(x);");return this.compileAndRun(e,[t])},t.prototype.expm1=function(t){var e=new oa(t.shape,"return exp(x) - 1.0;");return this.compileAndRun(e,[t])},t.prototype.log=function(t){var e=new oa(t.shape,"if (x < 0.0) return NAN;\n  return log(x);"),n=e.getCustomSetupFunc();return this.compileAndRun(e,[t],null,n)},t.prototype.log1p=function(t){var e=new oa(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])},t.prototype.sqrt=function(t){var e=new oa(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])},t.prototype.rsqrt=function(t){var e=new oa(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])},t.prototype.square=function(t){var e=new oa(t.shape,"return x * x;");return this.compileAndRun(e,[t])},t.prototype.reciprocal=function(t){var e=new oa(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])},t.prototype.relu=function(t){var e=new oa(t.shape,ua);return this.compileAndRun(e,[t])},t.prototype.prelu=function(t,e){var n=new bn("return (a < 0.) ? b * a : a;",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.elu=function(t){var e=new oa(t.shape,"return (x >= 0.0) ? x : (exp(x) - 1.0);");return this.compileAndRun(e,[t])},t.prototype.eluDer=function(t,e){var n=new bn("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.selu=function(t){var e=new oa(t.shape,ca);return this.compileAndRun(e,[t])},t.prototype.int=function(t){var e=new oa(t.shape,"return float(int(x));"),n=this.makeOutputArray(e.outputShape,"int32");return this.compileAndRun(e,[t],n)},t.prototype.clip=function(t,e,n){var r,i=(r=Lt.get("WEBGL_PACK_CLIP")?new xn(t.shape):new _n(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,i)},t.prototype.abs=function(t){var e=new oa(t.shape,"return abs(x);");return this.compileAndRun(e,[t])},t.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new En(t.shape),r=[this.makeComplexComponentTensorHandle(t,e.complexTensors.real),this.makeComplexComponentTensorHandle(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},t.prototype.sigmoid=function(t){var e=new oa(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])},t.prototype.softplus=function(t){var e=new oa(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])},t.prototype.sin=function(t){var e=new oa(t.shape,la);return this.compileAndRun(e,[t])},t.prototype.cos=function(t){var e=new oa(t.shape,fa);return this.compileAndRun(e,[t])},t.prototype.tan=function(t){var e=new oa(t.shape,"return tan(x);");return this.compileAndRun(e,[t])},t.prototype.asin=function(t){var e=new oa(t.shape,"return asin(x);");return this.compileAndRun(e,[t])},t.prototype.acos=function(t){var e=new oa(t.shape,"return acos(x);");return this.compileAndRun(e,[t])},t.prototype.atan=function(t){var e=new oa(t.shape,ha);return this.compileAndRun(e,[t])},t.prototype.atan2=function(t,e){var n=new bn("\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.sinh=function(t){var e=new oa(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},t.prototype.cosh=function(t){var e=new oa(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},t.prototype.tanh=function(t){var e=new oa(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])},t.prototype.asinh=function(t){var e=new oa(t.shape,"return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])},t.prototype.acosh=function(t){var e=new oa(t.shape,pa),n=e.getCustomSetupFunc();return this.compileAndRun(e,[t],null,n)},t.prototype.atanh=function(t){var e=new oa(t.shape,da),n=e.getCustomSetupFunc();return this.compileAndRun(e,[t],null,n)},t.prototype.erf=function(t){var e=new oa(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n');return this.compileAndRun(e,[t])},t.prototype.step=function(t,e){var n=new oa(t.shape,function(t){return void 0===t&&(t=0),sa+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(e));return this.compileAndRun(n,[t])},t.prototype.conv2dWithIm2Row=function(t,e,n){var r=n.filterWidth,i=n.filterHeight,a=n.inChannels,o=n.outWidth,s=n.outHeight,u=r*i*a,c=s*o,l=[u,c],f=t.squeeze([0]),h=e.reshape([u,-1]),p=new ki(l,f.shape,n),d=this.compileAndRun(p,[f]),m=new Ri(d.shape,h.shape,[c,n.outChannels],!0,!1);return this.compileAndRun(m,[d,h]).reshape([1,s,o,n.outChannels])},t.prototype.conv2d=function(t,e,n){if(Lt.get("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new Pn(n);return this.compileAndRun(r,[t,e])},t.prototype.conv2dDerInput=function(t,e,n){var r=new In(n);return this.compileAndRun(r,[t,e])},t.prototype.conv2dDerFilter=function(t,e,n){var r=new Nn(n);return this.compileAndRun(r,[t,e])},t.prototype.depthwiseConv2D=function(t,e,n){var r;return Lt.get("WEBGL_PACK_DEPTHWISECONV")&&1===n.dilationWidth&&1===n.dilationHeight&&n.padInfo.left<=1&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Dn(n),this.compileAndRun(r,[t,e],this.makePackedTensor(n.outShape,t.dtype))):(r=new Rn(n),this.compileAndRun(r,[t,e]))},t.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new Cn(n);return this.compileAndRun(r,[t,e])},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new An(n);return this.compileAndRun(r,[t,e])},t.prototype.conv3d=function(t,e,n){var r=new Tn(n);return this.compileAndRun(r,[t,e])},t.prototype.conv3dDerInput=function(t,e,n){var r=new kn(n);return this.compileAndRun(r,[t,e])},t.prototype.conv3dDerFilter=function(t,e,n){var r=new On(n);return this.compileAndRun(r,[t,e])},t.prototype.maxPool=function(t,e){var n=new zi(e,"max",!1),r=this.makeOutputArray(n.outputShape,t.dtype);return this.compileAndRun(n,[t],r)},t.prototype.avgPool=function(t,e){var n=new zi(e,"avg",!1),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t],r)},t.prototype.maxPoolBackprop=function(t,e,n,r){var i=new zi(r,"max",!0),a=this.compileAndRun(i,[e]),o=new Pi(r),s=this.makeOutputArray(o.outputShape,e.dtype),u=this.compileAndRun(o,[t,a],s);return a.dispose(),u},t.prototype.avgPoolBackprop=function(t,e,n){var r=new ln(n),i=this.makeOutputArray(r.outputShape,e.dtype);return this.compileAndRun(r,[t],i)},t.prototype.cast=function(t,e){return Ze(t,e,this)},t.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),i=0,a=0;a<t.rank;a++)a!==e&&(r[i++]=t.shape[a]);var o=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)o[e]=a,u[a]=this.slice(t,o,s).reshape(r);return u},t.prototype.reshape=function(t,e){return this.texData.get(t.dataId).isPacked&&!ni(t.shape,e)?this.packedReshape(t,e):Qe(t,e)},t.prototype.resizeBilinear=function(t,e,n,r){var i=new Wi(t.shape,e,n,r);return this.compileAndRun(i,[t])},t.prototype.resizeBilinearBackprop=function(t,e,n){var r=new Vi(t,e,n);return this.compileAndRun(r,[t])},t.prototype.resizeNearestNeighbor=function(t,e,n,r){var i=new $i(t.shape,e,n,r);return this.compileAndRun(i,[t])},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new qi(t,e,n);return this.compileAndRun(r,[t])},t.prototype.multinomial=function(t,e,n,r){var i=e?t:Ce(t),a=i.shape[0],o=i.shape[1],s=new Di(a,o,n),u=this.makeOutputArray(s.outputShape,"int32"),c=s.getCustomSetupFunc(r);return this.compileAndRun(s,[i],u,c)},t.prototype.oneHot=function(t,e,n,r){var i=new Mi(t.size,e,n,r);return this.compileAndRun(i,[t])},t.prototype.nonMaxSuppression=function(t,e,n,r,i){return Zt("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),an(t.dataSync(),e.dataSync(),n,r,i)},t.prototype.cropAndResize=function(t,e,n,r,i,a){var o=new zn(t.shape,e.shape,r,i,a);return this.compileAndRun(o,[t,e,n])},t.prototype.depthToSpace=function(t,e,n){b(e>1,"blockSize should be > 1 for depthToSpace, but was: "+e);var r=t.shape[0],i=("NHWC"===n?t.shape[1]:t.shape[2])*e,a=("NHWC"===n?t.shape[2]:t.shape[3])*e,o=("NHWC"===n?t.shape[3]:t.shape[1])/(e*e),s=new hr("NHWC"===n?[r,i,a,o]:[r,o,i,a],e,n);return this.compileAndRun(s,[t])},t.prototype.split=function(t,e,n){return sn(t,e,n)},t.prototype.scatterND=function(t,e,n){var r=be(0,t,n),i=r.sliceRank,a=r.numUpdates,o=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/o,o],l=t.reshape([a,i]),f=e.reshape([a,o]);if(0===u)return Qe(Me([]),n);var h=je(0),p=new Ki(a,i,l.rank,f.rank,s,c);return this.compileAndRun(p,[f,l,h]).reshape(n)},t.prototype.sparseToDense=function(t,e,n,r){var i=be(0,t,n),a=i.sliceRank,o=i.numUpdates,s=i.strides,u=i.outputSize,c=new Ki(o,a,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(c,[e,t,r]).reshape(n)},t.prototype.fft=function(t){return this.fftImpl(t,!1)},t.prototype.ifft=function(t){return this.fftImpl(t,!0)},t.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new gr(dr,t.shape,e),i=new gr(mr,t.shape,e),a=[this.makeComplexComponentTensorHandle(t,n.complexTensors.real),this.makeComplexComponentTensorHandle(t,n.complexTensors.imag)],o=this.compileAndRun(r,a),s=this.compileAndRun(i,a),u=this.complex(o,s).as2D(t.shape[0],t.shape[1]);return o.dispose(),s.dispose(),u},t.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],i=me(t,e),a=i[0],o=i[1],s=i[2],u=i[3],c=e.reshape([o,r]),l=t.reshape([t.size/s,s]),f=new br(r,u,[o,s]);return this.compileAndRun(f,[l,c]).reshape(a)},t.prototype.makeOutputArray=function(t,e){return ft.make(t,{},e)},t.prototype.makePackedTensor=function(t,e){var n=ft.make(t,{},e);return this.texData.get(n.dataId).isPacked=!0,n},t.prototype.unpackTensor=function(t){var e=new ma(t.shape);return this.compileAndRun(e,[t],ft.make(e.outputShape,{},t.dtype))},t.prototype.packedReshape=function(t,e){var n=t.reshape([Zr(t.shape)].concat(Qr(t.shape))),r=[Zr(e)].concat(Qr(e)),i=new Ui(r,n.shape);return this.compileAndRun(i,[n]).reshape(e)},t.prototype.compileAndRun=function(t,e,n,r,i){var a=this;if(void 0===i&&(i=!0),null==n&&(n=t.usesPackedTextures?this.makePackedTensor(t.outputShape,e[0].dtype):this.makeOutputArray(t.outputShape,e[0].dtype)),0===n.size)return this.texData.get(n.dataId).values=R(n.dtype,0),n;var o=e.map(function(e){if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var n=a.texData.get(e.dataId);if(null==n.texture){if(!t.usesPackedTextures&&E(e.shape)<=Lt.get("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:a.readSync(e.dataId)};t.usesPackedTextures&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.usesPackedTextures){var r=void 0,i=void 0;n.isPacked?(r=new ma(e.shape),i=a.compileAndRun(r,[e],ft.make(r.outputShape,{},e.dtype))):(r=new Bi(e.shape),i=a.compileAndRun(r,[e],a.makePackedTensor(e.shape,e.dtype))),n=a.texData.get(i.dataId),e=i}else if(n.isPacked&&!ni(n.shape,e.shape)){a.delayedStorage=!1;var o=e.dataSync();a.delayedStorage=!0,e=ft.make(e.shape,{values:o},e.dtype),(n=a.texData.get(e.dataId)).isPacked=!0}return a.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}});this.uploadToGPU(n.dataId);var s,u={shape:n.shape,texData:this.texData.get(n.dataId),isUniform:!1},c=function(t,e,n){var r="";e.concat(n).forEach(function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=t.shape+"_"+n+"_"+e});var i=t.userCode;return t.constructor.name+"_"+r+"_"+i}(t,o,u),l=this.getAndSaveBinary(c,function(){return function(t,e,n,r){for(var i=e.userCode,a=n.map(function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}}),o=a.map(function(t){return t.shapeInfo}),s={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=Xn(a,s,i,e.usesPackedTextures),c=t.createProgram(u),l={},f=0;f<e.variableNames.length;f++){var h=e.variableNames[f];l[h]=t.getUniformLocation(c,h,!1),l["offset"+h]=t.getUniformLocation(c,"offset"+h,!1)}return{program:e,source:u,webGLProgram:c,uniformLocations:l,gpgpu:t,inShapeInfos:o,outShapeInfo:s}}(a.gpgpu,t,o,u)}),f=null!=this.activeTimers;f&&(s=this.startTimer()),function(t,e,n,r){Oi(t.inShapeInfos,e),Oi([t.outShapeInfo],[n]);var i=n.texData.texture,a=n.texData.texShape,o=t.gpgpu;n.texData.isPacked?o.setOutputPackedMatrixTexture(i,a[0],a[1]):o.setOutputMatrixTexture(i,a[0],a[1]),o.setProgram(t.webGLProgram),e.forEach(function(e,n){var r=t.program.variableNames[n],i=t.uniformLocations[r],a=t.uniformLocations["offset"+r];if(null!=i)if(e.isUniform)if(1===E(e.shape))o.gl.uniform1f(i,e.uniformValues[0]);else{var s=e.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),o.gl.uniform1fv(i,s)}else null!=e.texData.slice&&null!=a&&o.gl.uniform1i(a,e.texData.slice.flatOffset),o.setInputMatrixTexture(e.texData.texture,i,n)}),null!=r&&r(o,t.webGLProgram),o.executeProgram()}(l,o,u,r);var h=1024*Lt.get("WEBGL_NUM_MB_BEFORE_PAGING");if(i&&this.numBytesInGPU>h)for(var p=this.numBytesInGPU-h;p>0&&this.lruDataGPU.length>0;){var d=this.lruDataGPU.shift(),m=this.texData.get(d),g=m.shape,y=m.dtype;p-=this.computeBytes(g,y),this.read(d)}return f&&(s=this.endTimer(s),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(s)})),Lt.get("WEBGL_LAZILY_UNPACK")||!this.texData.get(n.dataId).isPacked||t.isPackShader?n:this.unpackTensor(n)},t.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},t.prototype.getTextureManager=function(){return this.textureManager},t.prototype.dispose=function(){if(!this.disposed){for(var t in this.binaryCache)this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram);this.textureManager.dispose(),this.canvas.remove(),null!=this.fromPixels2DContext&&this.fromPixels2DContext.canvas.remove(),this.gpgpuCreatedLocally&&this.gpgpu.dispose(),this.disposed=!0}},t.prototype.floatPrecision=function(){var t=this;return Kt(function(){var e=Lt.get("DEBUG");Lt.set("DEBUG",!1);var n=t.abs(je(1e-8)).get();return Lt.set("DEBUG",e),n>0?32:16})},t.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,i=n.values,a=n.texture,o=n.usage,s=n.isPacked;if(null==a){var u,c=null!=this.activeTimers;c&&(u=performance.now());var l=ti(r,s);n.texShape=l;var f=this.acquireTexture(t,l,o,s);if(n.texture=f,null!=i){if(s){var h=Zr(r),p=1,d=1;r.length&&(p=(e=Qr(r))[0],d=e[1]),this.gpgpu.uploadMatrixToPackedTexture(f,h,p,d,l[0],l[1],co(i))}else this.gpgpu.uploadMatrixToTexture(f,l[0],l[1],co(i));n.values=null,c&&(this.uploadWaitMs+=performance.now()-u)}}else Lt.get("WEBGL_NUM_MB_BEFORE_PAGING")<Number.POSITIVE_INFINITY&&this.lruDataGPU.indexOf(t)>=0&&(this.lruDataGPU.splice(this.lruDataGPU.indexOf(t),1),this.lruDataGPU.push(t))},t.prototype.convertAndCacheOnCPU=function(t,e){var n=this.delayedStorage,r=this.texData.get(t),i=r.texture,a=r.texShape,o=r.dtype,s=r.usage,u=r.isPacked;return n&&null!=i&&(this.releaseTexture(t,i,a,s,u),r.texture=null,r.texShape=null,r.isPacked=!1),r.usage=Bn.UPLOAD,null!=e&&(r.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){for(var n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error("Unknown dtype "+e)}(e,o)),r.values},t.prototype.releaseTexture=function(t,e,n,r,i){var a=this.texData.get(t),o=a.shape,s=a.dtype;if(Lt.get("WEBGL_NUM_MB_BEFORE_PAGING")<Number.POSITIVE_INFINITY){var u=this.lruDataGPU.indexOf(t);u>=0&&this.lruDataGPU.splice(u,1)}this.numBytesInGPU-=this.computeBytes(o,s),this.textureManager.releaseTexture(e,n,r,i)},t.prototype.acquireTexture=function(t,e,n,r){var i=this.texData.get(t),a=i.shape,o=i.dtype;return Lt.get("WEBGL_NUM_MB_BEFORE_PAGING")<Number.POSITIVE_INFINITY&&this.lruDataGPU.push(t),this.numBytesInGPU+=this.computeBytes(a,o),this.textureManager.acquireTexture(e,n,r)},t.prototype.computeBytes=function(t,e){return E(t)*z(e)},t}();function co(t){return t instanceof Float32Array?t:new Float32Array(t)}Lt.get("IS_BROWSER")&&Lt.registerBackend("webgl",function(){return new uo},2,lt);var lo=Ae({abs_:function(t){var e=Oe(t,"x","abs");return"complex64"===e.dtype?Lt.engine.runKernel(function(t){return t.complexAbs(e)},{$x:e}):Lt.engine.runKernel(function(t){return t.abs(e)},{$x:e},function(t){return{$x:function(){return t.mulStrict(e.toFloat().step(-1))}}})}}),fo=Ae({acos_:function(t){var e=Oe(t,"x","acos");return Lt.engine.runKernel(function(t){return t.acos(e)},{$x:e},function(t){return{$x:function(){return t.divStrict(je(1).sub(e.toFloat().square()).sqrt()).neg()}}})}}),ho=Ae({acosh_:function(t){var e=Oe(t,"x","acosh");return Lt.engine.runKernel(function(t){return t.acosh(e)},{$x:e},function(t){return{$x:function(){return t.divStrict(e.toFloat().square().sub(1).sqrt())}}})}}),po=Ae({asin_:function(t){var e=Oe(t,"x","asin");return Lt.engine.runKernel(function(t){return t.asin(e)},{$x:e},function(t){return{$x:function(){return t.divStrict(je(1).sub(e.toFloat().square()).sqrt())}}})}}),mo=Ae({asinh_:function(t){var e=Oe(t,"x","asinh");return Lt.engine.runKernel(function(t){return t.asinh(e)},{$x:e},function(t){return{$x:function(){return t.divStrict(je(1).add(e.toFloat().square()).sqrt())}}})}}),go=Ae({atan_:function(t){var e=Oe(t,"x","atan");return Lt.engine.runKernel(function(t){return t.atan(e)},{$x:e},function(t){return{$x:function(){return t.div(e.toFloat().square().add(1))}}})}}),yo=Ae({atanh_:function(t){var e=Oe(t,"x","atanh");return Lt.engine.runKernel(function(t){return t.atanh(e)},{$x:e},function(t){return{$x:function(){return t.div(je(1).sub(e.toFloat().square()))}}})}}),vo=Ae({ceil_:function(t){var e=Oe(t,"x","ceil");return Lt.engine.runKernel(function(t){return t.ceil(e)},{$x:e},function(t){return{$x:function(){return Xe(t)}}})}}),bo=Ae({clipByValue_:function(t,e,n){var r=Oe(t,"x","clipByValue");return b(e<=n,"Error in clip: min ("+e+") must be less than or equal to max ("+n+")."),Lt.engine.runKernel(function(t){return t.clip(r,e,n)},{$x:r},function(t){return{$x:function(){return t.where(r.greaterEqual(e).logicalAnd(r.lessEqual(n)),Xe(t))}}})}}),wo=Ae({cos_:function(t){var e=Oe(t,"x","cos");return Lt.engine.runKernel(function(t){return t.cos(e)},{$x:e},function(t){return{$x:function(){return e.toFloat().sin().neg().mulStrict(t)}}})}}),_o=Ae({cosh_:function(t){var e=Oe(t,"x","cosh");return Lt.engine.runKernel(function(t){return t.cosh(e)},{$x:e},function(t){return{$x:function(){return e.toFloat().sinh().mulStrict(t)}}})}}),xo=Ae({erf_:function(t){var e=Oe(t,"x","erf");return b("int32"===e.dtype||"float32"===e.dtype,"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=e.toFloat()),Lt.engine.runKernel(function(t){return t.erf(e)},{$x:e},function(t){return{$x:function(){return t.mul(e.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}})}}),Eo=Ae({exp_:function(t){var e=Oe(t,"x","exp");return Lt.engine.runKernel(function(t,n){return n(t.exp(e))},{$x:e},function(t,e){var n=e[0];return{$x:function(){return t.mulStrict(n)}}})}}),So=Ae({expm1_:function(t){var e=Oe(t,"x","expm1");return Lt.engine.runKernel(function(t){return t.expm1(e)},{$x:e},function(t){return{$x:function(){return t.mulStrict(e.exp())}}})}}),No=Ae({floor_:function(t){var e=Oe(t,"x","floor");return Lt.engine.runKernel(function(t){return t.floor(e)},{$x:e},function(t){return{$x:function(){return Xe(t)}}})}}),Io=Ae({log_:function(t){var e=Oe(t,"x","log");return Lt.engine.runKernel(function(t){return t.log(e)},{$x:e},function(t){return{$x:function(){return t.divStrict(e.toFloat())}}})}}),Oo=Ae({log1p_:function(t){var e=Oe(t,"x","log1p");return Lt.engine.runKernel(function(t){return t.log1p(e)},{$x:e},function(t){return{$x:function(){return t.div(e.add(1))}}})}}),ko=Ae({logSigmoid_:function(t){var e=Oe(t,"x","logSigmoid");return Lt.engine.runKernel(function(t){return t.softplus(e.neg()).neg()},{$x:e},function(t){return{$x:function(){return t.mulStrict(e.neg().sigmoid())}}})}}),Ao=Ae({neg_:function(t){var e=Oe(t,"x","neg");return Lt.engine.runKernel(function(t){return t.neg(e)},{$x:e},function(t){return{$x:function(){return t.neg()}}})}}),Co=Ae({reciprocal_:function(t){var e=Oe(t,"x","reciprocal");return Lt.engine.runKernel(function(t){return t.reciprocal(e)},{$x:e},function(t){return{$x:function(){return t.divStrict(e.square().neg())}}})}}),Po=Ae({round_:function(t){var e=Oe(t,"x","round");return Lt.engine.runKernel(function(t){return t.round(e)},{$x:e},function(t){return{$x:function(){return Xe(t)}}})}}),To=Ae({rsqrt_:function(t){var e=Oe(t,"x","rsqrt");return Lt.engine.runKernel(function(t){return t.rsqrt(e)},{$x:e},function(t){return{$x:function(){return t.div(e.pow(1.5).mul(2)).neg()}}})}}),Ro=Ae({sigmoid_:function(t){var e=Oe(t,"x","sigmoid");return Lt.engine.runKernel(function(t,n){return n(t.sigmoid(e))},{$x:e},function(t,e){var n=e[0];return{$x:function(){return t.mul(n.mul(je(1).sub(n)))}}})}}),Do=Ae({sign_:function(t){var e=Oe(t,"x","sign");return Lt.engine.runKernel(function(t){return t.sign(e)},{$x:e},function(t){return{$x:function(){return Xe(t)}}})}}),Mo=Ae({sin_:function(t){var e=Oe(t,"x","sin");return Lt.engine.runKernel(function(t){return t.sin(e)},{$x:e},function(t){return{$x:function(){return e.toFloat().cos().mulStrict(t)}}})}}),jo=Ae({sinh_:function(t){var e=Oe(t,"x","sinh");return Lt.engine.runKernel(function(t){return t.sinh(e)},{$x:e},function(t){return{$x:function(){return e.toFloat().cosh().mulStrict(t)}}})}}),Bo=Ae({softplus_:function(t){var e=Oe(t,"x","softplus");return Lt.engine.runKernel(function(t){return t.softplus(e)},{$x:e},function(t){return{$x:function(){return t.mulStrict(e.sigmoid())}}})}}),Lo=Ae({sqrt_:function(t){var e=Oe(t,"x","sqrt");return Lt.engine.runKernel(function(t){return t.sqrt(e)},{$x:e},function(t){return{$x:function(){return t.div(e.toFloat().sqrt().mul(2))}}})}}),zo=Ae({square_:function(t){var e=Oe(t,"x","square");return Lt.engine.runKernel(function(t){return t.square(e)},{$x:e},function(t){return{$x:function(){return t.mul(e.toFloat().mul(2))}}})}}),Fo=Ae({step_:function(t,e){void 0===e&&(e=0);var n=Oe(t,"x","step");return Lt.engine.runKernel(function(t){return t.step(n,e)},{$x:n},function(t){return{$x:function(){return Xe(t)}}})}}),Uo=Ae({tan_:function(t){var e=Oe(t,"x","tan");return Lt.engine.runKernel(function(t){return t.tan(e)},{$x:e},function(t){return{$x:function(){return t.divStrict(e.cos().square())}}})}}),Vo=Ae({tanh_:function(t){var e=Oe(t,"x","tanh");return Lt.engine.runKernel(function(t,n){return n(t.tanh(e))},{$x:e},function(t,e){var n=e[0];return{$x:function(){return je(1).sub(n.square()).mulStrict(t)}}})}});function Wo(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}var qo=Ae({batchNormalization2d_:function(t,e,n,r,i,a){void 0===r&&(r=.001);var o,s,u=Oe(t,"x","batchNormalization"),c=Oe(e,"mean","batchNormalization"),l=Oe(n,"variance","batchNormalization");return null!=i&&(o=Oe(i,"scale","batchNormalization")),null!=a&&(s=Oe(a,"offset","batchNormalization")),b(2===u.rank,"Error in batchNormalization3D: x must be rank 3 but got rank "+u.rank+"."),b(2===c.rank||1===c.rank,"Error in batchNormalization2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."),b(2===l.rank||1===l.rank,"Error in batchNormalization2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."),null!=o&&b(2===o.rank||1===o.rank,"Error in batchNormalization2D: scale must be rank 2 or rank 1 but got rank "+o.rank+"."),null!=s&&b(2===s.rank||1===s.rank,"Error in batchNormalization2D: offset must be rank 2 or rank 1 but got rank "+s.rank+"."),Ko(u,c,l,r,o,s)}}),$o=Ae({batchNormalization3d_:function(t,e,n,r,i,a){void 0===r&&(r=.001);var o,s,u=Oe(t,"x","batchNormalization"),c=Oe(e,"mean","batchNormalization"),l=Oe(n,"variance","batchNormalization");return null!=i&&(o=Oe(i,"scale","batchNormalization")),null!=a&&(s=Oe(a,"offset","batchNormalization")),b(3===u.rank,"Error in batchNormalization3D: x must be rank 3 but got rank "+u.rank+"."),b(3===c.rank||1===c.rank,"Error in batchNormalization3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."),b(3===l.rank||1===l.rank,"Error in batchNormalization3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."),null!=o&&b(3===o.rank||1===o.rank,"Error in batchNormalization3D: scale must be rank 3 or rank 1 but got rank "+o.rank+"."),null!=s&&b(3===s.rank||1===s.rank,"Error in batchNormalization3D: offset must be rank 3 or rank 1 but got rank "+s.rank+"."),Ko(u,c,l,r,o,s)}}),Ho=Ae({batchNormalization4d_:function(t,e,n,r,i,a){void 0===r&&(r=.001);var o,s,u=Oe(t,"x","batchNormalization"),c=Oe(e,"mean","batchNormalization"),l=Oe(n,"variance","batchNormalization");return null!=i&&(o=Oe(i,"scale","batchNormalization")),null!=a&&(s=Oe(a,"offset","batchNormalization")),b(4===u.rank,"Error in batchNormalization4D: x must be rank 4 but got rank "+u.rank+"."),b(4===c.rank||1===c.rank,"Error in batchNormalization4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."),b(4===l.rank||1===l.rank,"Error in batchNormalization4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."),null!=o&&b(4===o.rank||1===o.rank,"Error in batchNormalization4D: scale must be rank 4 or rank 1 but got rank "+o.rank+"."),null!=s&&b(4===s.rank||1===s.rank,"Error in batchNormalization4D: offset must be rank 4 or rank 1 but got rank "+s.rank+"."),Ko(u,c,l,r,o,s)}}),Ko=Ae({batchNormalization_:function(t,e,n,r,i,a){void 0===r&&(r=.001);var o,s,u,c=Oe(t,"x","batchNormalization"),l=Oe(e,"mean","batchNormalization"),f=Oe(n,"variance","batchNormalization");return null!=i&&(o=Oe(i,"scale","batchNormalization")),null!=a&&(s=Oe(a,"offset","batchNormalization")),b(l.rank===f.rank,"Batch normalization gradient requires mean and variance to have equal ranks."),b(null==s||l.rank===s.rank,"Batch normalization gradient requires mean and offset to have equal ranks."),b(null==o||l.rank===o.rank,"Batch normalization gradient requires mean and scale to have equal ranks."),u=0===c.rank||1===c.rank?c.as4D(1,1,1,c.size):2===c.rank?c.as4D(1,1,c.shape[0],c.shape[1]):3===c.rank?c.as4D(1,c.shape[0],c.shape[1],c.shape[2]):c,Lt.engine.runKernel(function(t){return t.batchNormalization(u,Wo(l),Wo(f),r,Wo(o),Wo(s))},{$x:c,$mean:l,$variance:f,$scale:o,$offset:s},function(t){var e=null==o?je(1):o,n=he(l.shape,u.shape),i=[];if(1===l.rank){for(var a=0;a<u.shape.length-1;++a)i.push(u.shape[a]);i.push(1)}var s=c.sub(l),h=t.mul(e),p=To(f.add(je(r))),d=p.mul(p).mul(p).mul(je(-.5));return{$x:function(){return 1===l.rank?t.mul(ro(p.as4D(1,1,1,l.shape[0]),i)).mul(e).reshape(c.shape):t.mul(p).mul(e).reshape(c.shape)},$mean:function(){var t=p.mul(je(-1)).mul(h);return 1===l.rank&&(t=t.sum(n)),t.reshape(l.shape)},$variance:function(){var t=d.mul(s).mul(h);return 1===l.rank&&(t=t.sum(n)),t.reshape(l.shape)},$scale:function(){var e=s.mul(p),r=t.mul(e);return 1===l.rank&&(r=r.sum(n)),r.reshape(l.shape)},$offset:function(){var e=t;return 1===l.rank&&(e=e.sum(n)),e.reshape(l.shape)}}}).reshape(c.shape)}});function Go(t,e,n,r,i,a,o){void 0===o&&(o="channelsLast");var s,u=Jo(e),c=u[0],l=u[1];if("channelsLast"===o)s=[c,l,t[3],t[3]];else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);s=[c,l,t[1],t[1]]}return Xo(t,s,n,r,i,a,!1,o)}function Xo(t,e,n,r,i,a,o,s){void 0===o&&(o=!1),void 0===s&&(s="channelsLast");var u=[-1,-1,-1,-1],c=u[0],l=u[1],f=u[2],h=u[3];if("channelsLast"===s)c=t[0],l=t[1],f=t[2],h=t[3];else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);c=t[0],h=t[1],l=t[2],f=t[3]}var p,d=e[0],m=e[1],g=e[3],y=Jo(n),v=y[0],w=y[1],_=Jo(r),x=_[0],E=_[1],S=Qo(d,x),I=Qo(m,E),O=function(t,e,n,r,i,a,o,s){var u,c,l;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var f=function(t,e,n,r,i,a){null==i&&(i=function(t,e,n,r){void 0===r&&(r=1);var i=Qo(e,r);return Math.floor((t[0]*(n-1)-n+i)/2)}(t,e,r));var o=t[0],s=t[1],u=ts((o-e+2*i)/r+1,a);b(N(u),"The output # of rows ("+u+") must be an integer. Change the stride and/or zero pad parameters");var c=ts((s-e+2*i)/r+1,a);return b(N(c),"The output # of columns ("+c+") must be an integer. Change the stride and/or zero pad parameters"),[u,c,n]}([e,n,1],a,1,r,t,s);c=f[0],l=f[1]}else if("same"===t){var h=((c=Math.ceil(e/r))-1)*r+a-e,p=((l=Math.ceil(n/i))-1)*i+o-n,d=Math.floor(h/2),m=h-d,g=Math.floor(p/2);u={top:d,bottom:m,left:g,right:p-g,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),l=Math.ceil((n-o+1)/i)}return{padInfo:u,outHeight:c,outWidth:l}}(i,l,f,v,w,S,I,a),k=O.padInfo,A=O.outHeight,C=O.outWidth,P=o?g*h:g;return"channelsFirst"===s?p=[c,P,A,C]:"channelsLast"===s&&(p=[c,A,C,P]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:f,inChannels:h,outHeight:A,outWidth:C,outChannels:P,padInfo:k,strideHeight:v,strideWidth:w,filterHeight:d,filterWidth:m,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationHeight:x,dilationWidth:E,inShape:t,outShape:p,filterShape:e}}function Yo(t,e,n,r,i,a,o){void 0===a&&(a=!1),void 0===o&&(o="channelsLast");var s=[-1,-1,-1,-1,-1],u=s[0],c=s[1],l=s[2],f=s[3],h=s[4];if("channelsLast"===o)u=t[0],c=t[1],l=t[2],f=t[3],h=t[4];else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);u=t[0],h=t[1],c=t[2],l=t[3],f=t[4]}var p,d=e[0],m=e[1],g=e[2],y=e[4],v=Zo(n),b=v[0],w=v[1],_=v[2],x=Zo(r),E=x[0],S=x[1],N=x[2],I=function(t,e,n,r,i,a,o,s,u,c){var l,f,h,p;if("same"===t){var d=((f=Math.ceil(e/i))-1)*i+s-e,m=((h=Math.ceil(n/a))-1)*a+u-n,g=((p=Math.ceil(r/o))-1)*o+c-r,y=Math.floor(d/2),v=d-y,b=Math.floor(m/2),w=m-b,_=Math.floor(g/2);l={top:b,bottom:w,left:_,right:g-_,front:y,back:v,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);l={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((e-s+1)/i),h=Math.ceil((n-u+1)/a),p=Math.ceil((r-c+1)/o)}return{padInfo:l,outDepth:f,outHeight:h,outWidth:p}}(i,c,l,f,b,w,_,Qo(d,E),Qo(m,S),Qo(g,N)),O=I.padInfo,k=I.outDepth,A=I.outHeight,C=I.outWidth,P=a?y*h:y;return"channelsFirst"===o?p=[u,P,k,A,C]:"channelsLast"===o&&(p=[u,k,A,C,P]),{batchSize:u,dataFormat:o,inDepth:c,inHeight:l,inWidth:f,inChannels:h,outDepth:k,outHeight:A,outWidth:C,outChannels:P,padInfo:O,strideDepth:b,strideHeight:w,strideWidth:_,filterDepth:d,filterHeight:m,filterWidth:g,dilationDepth:E,dilationHeight:S,dilationWidth:N,inShape:t,outShape:p,filterShape:e}}function Jo(t){return"number"==typeof t?[t,t]:t}function Zo(t){return"number"==typeof t?[t,t,t]:t}function Qo(t,e){return e<=1?t:t+(t-1)*(e-1)}function ts(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function es(t){var e=Jo(t),n=e[0],r=e[1];return 1===n&&1===r}function ns(t,e){return es(t)||es(e)}var rs=Ae({matMul_:function(t,e,n,r){var i;void 0===n&&(n=!1),void 0===r&&(r=!1);var a=Oe(t,"a","matMul"),o=Oe(e,"b","matMul");a=(i=Et(a,o))[0],o=i[1];var s=n?a.shape[a.rank-2]:a.shape[a.rank-1],u=r?o.shape[o.rank-1]:o.shape[o.rank-2],c=n?a.shape[a.rank-1]:a.shape[a.rank-2],l=r?o.shape[o.rank-2]:o.shape[o.rank-1],f=a.shape.slice(0,-2),h=o.shape.slice(0,-2),p=E(f),d=E(h);b(a.rank>=2&&o.rank>=2&&a.rank===o.rank,"Error in matMul: inputs must have the same rank of at least 2, got ranks "+a.rank+" and "+o.rank+"."),b(S(f,h),"Error in matMul: outer dimensions ("+f+") and ("+h+") of Tensors with shapes "+a.shape+" and "+o.shape+" must match."),b(s===u,"Error in matMul: inner shapes ("+s+") and ("+u+") of Tensors with shapes "+a.shape+" and "+o.shape+" and transposeA="+n+" and transposeB="+r+" must match.");var m=a.shape.slice(0,-2).concat([c,l]),g=n?a.as3D(p,s,c):a.as3D(p,c,s),y=r?o.as3D(d,l,u):o.as3D(d,u,l);return Lt.engine.runKernel(function(t){return t.batchMatMul(g,y,n,r)},{$a:g,$b:y},function(t){return n||r?!n&&r?{$a:function(){return t.matMul(y,!1,!1)},$b:function(){return t.matMul(g,!0,!1)}}:n&&!r?{$a:function(){return y.matMul(t,!1,!0)},$b:function(){return g.matMul(t,!1,!1)}}:{$a:function(){return y.matMul(t,!0,!0)},$b:function(){return t.matMul(g,!0,!0)}}:{$a:function(){return t.matMul(y,!1,!0)},$b:function(){return g.matMul(t,!0,!1)}}}).reshape(m)}}),is=Ae({dot_:function(t,e){var n=Oe(t,"t1","dot"),r=Oe(e,"t2","dot");b(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),"Error in dot: inputs must all be rank 1 or 2, but got ranks "+n.rank+" and "+r.rank+".");var i=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];return b(i===a,"Error in dot: inner dimensions of inputs must match, but got "+i+" and "+a+"."),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),as=Ae({outerProduct_:function(t,e){var n=Oe(t,"v1","outerProduct"),r=Oe(e,"v2","outerProduct");return b(1===n.rank&&1===r.rank,"Error in outerProduct: inputs must be rank 1, but got ranks "+n.rank+" and "+r.rank+"."),n.as2D(-1,1).matMul(r.as2D(1,-1))}});function os(t,e,n,r,i,a){b(t.length===e.rank,"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match");var o=t,s=e,u=!1;3===e.rank&&(u=!0,s=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),o=[1,t[0],t[1],t[2]]);var c=o[3],l=s.shape[3];b(4===o.length,"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),b(4===s.rank,"Error in conv2dDerInput: dy must be rank 4, but got rank "+s.rank),b(4===n.rank,"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank),b(c===n.shape[2],"Error in conv2dDerInput: depth of input ("+c+") must match input depth for filter "+n.shape[2]+"."),b(l===n.shape[3],"Error in conv2dDerInput: depth of output ("+l+") must match output depth for filter "+n.shape[3]+"."),null!=a&&b(N(i),"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+".");var f=Xo(o,n.shape,r,1,i,a),h=Lt.engine.runKernel(function(t){return t.conv2dDerInput(s,n,f)},{dy4D:s,filter:n},function(t){return{dy4D:function(){return ls(t,n,r,i,"NHWC",1,a)},filter:function(){return hs(t,s,n.shape,r,i,a)}}});return u?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}function ss(t,e,n,r,i,a){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var s=e;3===s.rank&&(s=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),b(4===o.rank,"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),b(4===s.rank,"Error in conv2dDerFilter: dy must be rank 4, but got shape "+s.shape+"."),b(4===n.length,"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."),b(o.shape[3]===n[2],"Error in conv2dDerFilter: depth of input "+o.shape[3]+") must match input depth in filter ("+n[2]+"."),b(s.shape[3]===n[3],"Error in conv2dDerFilter: depth of dy ("+s.shape[3]+") must match output depth for filter ("+n[3]+")."),null!=a&&b(N(i),"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+".");var u=Xo(o.shape,n,r,1,i,a);return Lt.engine.runKernel(function(t){return t.conv2dDerFilter(o,s,u)},{x4D:o,dy4D:s})}function us(t){var e=function(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],i=e[2];return 1===n&&1===r&&1===i}var cs=Ae({conv1d_:function(t,e,n,r,i,a,o){void 0===i&&(i="NWC"),void 0===a&&(a=1);var s=Oe(t,"x","conv1d"),u=Oe(e,"filter","conv1d"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),b(3===c.rank,"Error in conv1d: input must be rank 3, but got rank "+c.rank+"."),b(3===u.rank,"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."),null!=o&&b(N(r),"Error in conv1d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."),b(c.shape[2]===u.shape[1],"Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+u.shape[1]+"."),b(ns(n,a),"Error in conv1D: Either stride or dilation must be 1. Got stride "+n+" and dilation '"+a+"'"),b("NWC"===i,"Error in conv1d: got dataFormat of "+i+" but only NWC is currently supported.");var f=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),h=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),p=ls(h,f,[1,n],r,"NHWC",[1,a],o);return l?p.as2D(p.shape[2],p.shape[3]):p.as3D(p.shape[0],p.shape[2],p.shape[3])}}),ls=Ae({conv2d_:function(t,e,n,r,i,a,o){void 0===i&&(i="NHWC"),void 0===a&&(a=[1,1]);var s=Oe(t,"x","conv2d"),u=Oe(e,"filter","conv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),b(4===c.rank,"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."),b(4===u.rank,"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."),null!=o&&b(N(r),"Error in conv2d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."),b(c.shape[3]===u.shape[2],"Error in conv2d: depth of input ("+c.shape[3]+") must match input depth for filter "+u.shape[2]+"."),b(ns(n,a),"Error in conv2D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"),b("NHWC"===i,"Error in conv2d: got dataFormat of "+i+" but only NHWC is currently supported.");var f,h=Xo(c.shape,u.shape,n,a,r,o);if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)f=Lt.engine.runKernel(function(t){return t.conv2d(c,u,h)},{x:c,$filter:u},function(t){return b(es(a),"Error in gradient of conv2D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '"+a+"'"),{x:function(){return os(c.shape,t,u,n,r)},$filter:function(){return ss(c,t,u.shape,n,r)}}});else{var p=c.reshape([-1,h.inChannels]),d=u.reshape([h.inChannels,h.outChannels]);f=rs(p,d).reshape(h.outShape)}return l?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}}),fs=Ae({conv3d_:function(t,e,n,r,i,a){void 0===i&&(i="NHWC"),void 0===a&&(a=[1,1,1]);var o=Oe(t,"x","conv3d"),s=Oe(e,"filter","conv3d"),u=o,c=!1;4===o.rank&&(c=!0,u=o.as5D(1,o.shape[0],o.shape[1],o.shape[2],o.shape[3])),b(5===u.rank,"Error in conv3d: input must be rank 5, but got rank "+u.rank+"."),b(5===s.rank,"Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."),b(u.shape[4]===s.shape[3],"Error in conv3d: depth of input ("+u.shape[4]+") must match input depth for filter "+s.shape[3]+"."),b(function(t,e){return us(t)||us(e)}(n,a),"Error in conv3D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"),b("NHWC"===i,"Error in conv3d: got dataFormat of "+i+" but only NHWC is currently supported.");var l=Yo(u.shape,s.shape,n,a,r),f=Lt.engine.runKernel(function(t){return t.conv3d(u,s,l)},{x:u,$filter:s},function(t){return b(us(a),"Error in gradient of conv3D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '"+a+"'"),{x:function(){return function(t,e,n,r,i){b(t.length===e.rank,"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match");var a=t,o=e,s=!1;4===e.rank&&(s=!0,o=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),a=[1,t[0],t[1],t[2],t[3]]);var u=a[4],c=o.shape[4];b(5===a.length,"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),b(5===o.rank,"Error in conv3dDerInput: dy must be rank 5, but got rank "+o.rank),b(5===n.rank,"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),b(u===n.shape[3],"Error in conv3dDerInput: depth of input ("+u+") must match input depth for filter "+n.shape[3]+"."),b(c===n.shape[4],"Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+n.shape[4]+".");var l=Yo(a,n.shape,r,1,i),f=Lt.engine.runKernel(function(t){return t.conv3dDerInput(o,n,l)},{dy5D:o});return s?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}(u.shape,t,s,n,r)},$filter:function(){return function(t,e,n,r,i){var a=t;4===t.rank&&(a=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var o=e;4===o.rank&&(o=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3])),b(5===a.rank,"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),b(5===o.rank,"Error in conv3dDerFilter: dy must be rank 5, but got shape "+o.shape+"."),b(5===n.length,"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),b(a.shape[4]===n[3],"Error in conv3dDerFilter: depth of input "+a.shape[4]+") must match input depth in filter ("+n[3]+"."),b(o.shape[4]===n[4],"Error in conv3dDerFilter: depth of dy ("+o.shape[4]+") must match output depth for filter ("+n[4]+").");var s=Yo(a.shape,n,r,1,i);return Lt.engine.runKernel(function(t){return t.conv3dDerFilter(a,o,s)},{x5D:a,dy5D:o})}(u,t,s.shape,n,r)}}});return c?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}}),hs=Ae({conv2dDerFilter_:ss}),ps=Ae({depthwiseConv2d_:function(t,e,n,r,i,a,o){void 0===i&&(i="NHWC"),void 0===a&&(a=[1,1]);var s=Oe(t,"x","depthwiseConv2d"),u=Oe(e,"filter","depthwiseConv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),b(4===c.rank,"Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."),b(4===u.rank,"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."),b(c.shape[3]===u.shape[2],"Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+u.shape[2]+"."),null==a&&(a=[1,1]),b(ns(n,a),"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"),null!=o&&b(N(r),"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+".");var f=Xo(c.shape,u.shape,n,a,r,o,!0),h=Lt.engine.runKernel(function(t){return t.depthwiseConv2D(c,u,f)},{x:c,$filter:u},function(t){return b(es(a),"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+a+"'"),{x:function(){return function(t,e,n,r){var i=e,a=!1;3===e.rank&&(a=!0,i=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var o=Lt.engine.runKernel(function(t){return t.depthwiseConv2DDerInput(i,n,r)},{dy4D:i});return a?o.as3D(o.shape[1],o.shape[2],o.shape[3]):o}(c.shape,t,u,f)},$filter:function(){return function(t,e,n,r){var i=t;3===t.rank&&(i=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var a=e;return 3===a.rank&&(a=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Lt.engine.runKernel(function(t){return t.depthwiseConv2DDerFilter(i,a,r)},{x4D:i,dy4D:a})}(c,t,u.shape,f)}}});return l?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}}),ds=Ae({separableConv2d_:function(t,e,n,r,i,a,o){void 0===a&&(a=[1,1]),void 0===o&&(o="NHWC");var s=Oe(t,"x","separableConv2d"),u=Oe(e,"depthwiseFilter","separableConv2d"),c=Oe(n,"pointwiseFilter","separableConv2d"),l=s,f=!1;if(3===s.rank&&(f=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");b(4===l.rank,"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."),b(4===u.rank,"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+u.rank+"."),b(4===c.rank,"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+u.rank+"."),b(1===c.shape[0],"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."),b(1===c.shape[1],"Error in separableConv2d: the second dimension of pointwise filter  must be 1, but got "+c.shape[1]+".");var h=u.shape[2],p=u.shape[3];b(c.shape[2]===h*p,"Error in separableConv2d: the third dimension of pointwise filter must be "+h*p+", but got "+c.shape[2]+".");var d=ps(l,u,r,i,o,a),m=ls(d,c,1,"valid",o);return f?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}}),ms=Ae({conv2dTranspose_:function(t,e,n,r,i,a){return os(n,Oe(t,"x","conv2dTranspose"),Oe(e,"filter","conv2dTranspose"),r,i,a)}});var gs=Ae({reverse_:function(t,e){var n=Oe(t,"x","reverse");if(0===n.rank)return n.clone();var r=P(e,n.shape);return Lt.engine.runKernel(function(t){return t.reverse(n,r)},{$x:n},function(t){return{$x:function(){return t.reverse(r)}}}).reshapeAs(n)}}),ys=Ae({reverse1d_:function(t){var e=Oe(t,"x","reverse");return b(1===e.rank,"Error in reverse1D: x must be rank 1 but got\n             rank "+e.rank+"."),gs(e,0)}}),vs=Ae({reverse2d_:function(t,e){var n=Oe(t,"x","reverse");return b(2===n.rank,"Error in reverse2D: x must be rank 2 but got\n             rank "+n.rank+"."),gs(n,e)}}),bs=Ae({reverse3d_:function(t,e){var n=Oe(t,"x","reverse");return b(3===n.rank,"Error in reverse3D: x must be rank 3 but got\n             rank "+n.rank+"."),gs(n,e)}}),ws=Ae({reverse4d_:function(t,e){var n=Oe(t,"x","reverse");return b(4===n.rank,"Error in reverse4D: x must be rank 4 but got\n             rank "+n.rank+"."),gs(n,e)}});function _s(t,e,n,r,i,a){var o=Oe(t,"x","maxPool"),s=o,u=!1;3===o.rank&&(u=!0,s=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),null==r&&(r=[1,1]),b(4===s.rank,"Error in maxPool: input must be rank 4 but got rank "+s.rank+"."),b(ns(n,r),"Error in maxPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"),null!=a&&b(N(i),"Error in maxPool: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+".");var c=Go(s.shape,e,n,r,i,a),l=Lt.engine.runKernel(function(t,e){return e(t.maxPool(s,c))},{x:s},function(t,a){var o=a[0];return{x:function(){return function(t,e,n,r,i,a,o,s){var u=Oe(t,"dy","maxPoolBackprop"),c=Oe(e,"input","maxPoolBackprop"),l=Oe(n,"output","maxPoolBackprop");b(c.rank===u.rank,"Rank of input ("+c.rank+") does not match rank of dy ("+u.rank+")"),null==a&&(a=[1,1]),b(ns(i,a),"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+a+"'"),b(4===u.rank,"Error in maxPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."),b(4===c.rank,"Error in maxPoolBackprop: input must be rank 4 but got rank "+c.rank+"."),null!=s&&b(N(o),"Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+o+".");var f=Go(c.shape,r,i,a,o,s);return Lt.engine.runKernel(function(t){return t.maxPoolBackprop(u,c,l,f)},{$dy:u,$input:c})}(t,s,o,e,n,r,i)}}});return u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}function xs(t,e,n,r,i,a){var o=Oe(t,"x","avgPool","float32");null==r&&(r=[1,1]),b(ns(n,r),"Error in avgPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'");var s=o,u=!1;3===o.rank&&(u=!0,s=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),b(4===s.rank,"Error in avgPool: x must be rank 4 but got rank "+s.rank+"."),null!=a&&b(N(i),"Error in avgPool: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+".");var c=Go(s.shape,e,n,r,i,a),l=Lt.engine.runKernel(function(t){return t.avgPool(s,c)},{x:s},function(t){return{x:function(){return function(t,e,n,r,i,a){var o=Oe(t,"dy","avgPoolBackprop"),s=Oe(e,"input","avgPoolBackprop");b(s.rank===o.rank,"Rank of input ("+s.rank+") does not match rank of dy ("+o.rank+")"),null==i&&(i=[1,1]),b(ns(r,i),"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+i+"'");var u=s,c=o,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),b(4===c.rank,"Error in avgPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."),b(4===u.rank,"Error in avgPoolBackprop: input must be rank 4 but got rank "+u.rank+".");var f=Go(u.shape,n,r,i,a),h=Lt.engine.runKernel(function(t){return t.avgPoolBackprop(c,u,f)},{dy4D:c,input4D:u});return l?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}(t,s,e,n,r,i)}}});return l=l.cast(o.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var Es=Ae({maxPool_:function(t,e,n,r,i){return _s(t,e,n,1,r,i)}}),Ss=Ae({avgPool_:function(t,e,n,r,i){return xs(t,e,n,1,r,i)}}),Ns=Ae({pool_:function(t,e,n,r,i,a){null==i&&(i=[1,1]),null==a&&(a=1),0===r&&(r="valid");var o=Oe(t,"x","maxPool"),s=o,u=!1;3===o.rank&&(u=!0,s=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),b(ns(a,i),"Error in pool: Either strides or dilations must be 1. Got strides "+a+" and dilations '"+i+"'");var c,l=Go(s.shape,e,a,i,r),f=[l.dilationHeight,l.dilationWidth];c="same"===r?function(t,e){var n=t.map(function(t,n){return t+(t-1)*(e[n]-1)}).map(function(t){return t-1}),r=n.map(function(t){return Math.floor(t/2)}),i=n.map(function(t,e){return t-r[e]});return n.map(function(t,e){return[r[e],i[e]]})}([l.filterHeight,l.filterWidth],f):[[0,0],[0,0]];var h=1===f[0]&&1===f[1],p=function(t,e,n){var r=n.map(function(t){return t[0]}),i=n.map(function(t){return t[1]}),a=t.concat(r,i),o=e.map(function(t,e){return(t-a[e]%t)%t}),s=i.map(function(t,e){return t+o[e]});return[e.map(function(t,e){return[r[e],s[e]]}),e.map(function(t,e){return[0,o[e]]})]}([l.inHeight,l.inWidth],f,c),d=p[0],m=p[1],g=h?r:"valid",y=h?s:to(s,f,d),v=("avg"===n?function(){return xs(y,e,a,1,g)}:function(){return _s(y,e,a,1,g)})(),w=h?v:Ma(v,f,m);return u?w.as3D(w.shape[1],w.shape[2],w.shape[3]):w}});var Is=Ae({slice_:function(t,e,n){var r,i,a=Oe(t,"x","slice");if(0===a.rank)throw new Error("Slicing scalar is not possible");r="number"==typeof e?[e].concat(new Array(a.rank-1).fill(0)):e.length<a.rank?e.concat(new Array(a.rank-e.length).fill(0)):e.slice(),i=(i=null==n?new Array(a.rank).fill(-1):"number"==typeof n?[n].concat(new Array(a.rank-1).fill(-1)):n.length<a.rank?n.concat(new Array(a.rank-n.length).fill(-1)):n).map(function(t,e){return t>=0?t:(b(-1===t,"Bad value in size"),a.shape[e]-r[e])}),function(t,e,n){b(t.rank===e.length,"Error in slice"+t.rank+"D: Length of begin "+e+" must match the rank of the array ("+t.rank+")."),b(t.rank===n.length,"Error in slice"+t.rank+"D: Length of size "+n+" must match the rank of the array ("+t.rank+").");for(var r=0;r<t.rank;++r)b(e[r]+n[r]<=t.shape[r],"Error in slice"+t.rank+"D: begin["+r+"] + size["+r+"] ("+(e[r]+n[r])+") would overflow input.shape["+r+"] ("+t.shape[r]+")")}(a,r,i);var o=a.shape;return Lt.engine.runKernel(function(t){return t.slice(a,r,i)},{$x:a},function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],o[n]-r[n]-i[n]]);return{$x:function(){return t.pad(e)}}})}}),Os=Ae({slice1d_:function(t,e,n){var r=Oe(t,"x","slice1d");return b(1===r.rank,"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"),Is(r,[e],[n])}}),ks=Ae({slice2d_:function(t,e,n){var r=Oe(t,"x","slice2d");return b(2===r.rank,"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"),Is(r,e,n)}}),As=Ae({slice3d_:function(t,e,n){var r=Oe(t,"x","slice3d");return b(3===r.rank,"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"),Is(r,e,n)}}),Cs=Ae({slice4d_:function(t,e,n){var r=Oe(t,"x","slice4d");return b(4===r.rank,"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"),Is(r,e,n)}});function Ps(t,e,n,r,i){var a=e[0];return a.rank<n.rank&&(a=a.reshape(oe(a.shape,r))),t.rank<n.rank&&(t=t.reshape(oe(t.shape,r))),{$x:function(){var e=t.mul(n.equal(a).cast(t.dtype));return null==i?e:e.transpose(i)}}}var Ts=Ae({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Oe(t,"x","all","bool"),i=P(e,r.shape),a=i,o=ue(a,r.rank);null!=o&&(r=r.transpose(o),a=le(a.length,r.rank));var s=Lt.engine.runKernel(function(t){return t.all(r,a)},{$x:r});if(n){var u=oe(s.shape,i);return s.reshape(u)}return s}}),Rs=Ae({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Oe(t,"x","any","bool"),i=P(e,r.shape),a=i,o=ue(a,r.rank);null!=o&&(r=r.transpose(o),a=le(a.length,r.rank));var s=Lt.engine.runKernel(function(t){return t.any(r,a)},{$x:r});if(n){var u=oe(s.shape,i);return s.reshape(u)}return s}}),Ds=Ae({argMax_:function(t,e){void 0===e&&(e=0);var n=Oe(t,"x","argMax");null==e&&(e=0);var r=P(e,n.shape),i=ue(r,n.rank);return null!=i&&(n=n.transpose(i),r=le(r.length,n.rank)),Lt.engine.runKernel(function(t){return t.argMax(n,r[0])},{$x:n},function(t){return{$x:function(){return Xe(n)}}})}}),Ms=Ae({argMin_:function(t,e){void 0===e&&(e=0);var n=Oe(t,"x","argMin");null==e&&(e=0);var r=P(e,n.shape),i=ue(r,n.rank);return null!=i&&(n=n.transpose(i),r=le(r.length,n.rank)),Lt.engine.runKernel(function(t){return t.argMin(n,r[0])},{$x:n},function(t){return{$x:function(){return Xe(n)}}})}}),js=Ae({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Oe(t,"x","logSumExp"),i=P(e,r.shape),a=r.max(i,!0),o=r.sub(a).exp().sum(i).log(),s=a.reshape(o.shape).add(o);if(n){var u=oe(s.shape,i);return s.reshape(u)}return s}}),Bs=Ae({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Oe(t,"x","max"),i=r,a=P(e,r.shape),o=a,s=ue(o,r.rank);null!=s&&(r=r.transpose(s),o=le(o.length,r.rank));var u=Lt.engine.runKernel(function(t,e){return e(t.max(r,o))},{$x:r},function(t,e){return Ps(t,e,i,a,s)});if(n){var c=oe(u.shape,a);u=u.reshape(c)}return u}}),Ls=Ae({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Oe(t,"x","mean"),i=P(e,r.shape),a=E(ae(r.shape,i)[1]);return $t(function(t){var r=je(a);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return i.forEach(function(t){n[t]=1}),e.reshape(n).mul(We(t.shape,"float32")).div(r)}}})(r)}}),zs=Ae({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Oe(t,"x","min"),i=r,a=P(e,r.shape),o=a,s=ue(o,r.rank);null!=s&&(r=r.transpose(s),o=le(o.length,r.rank));var u=Lt.engine.runKernel(function(t,e){return e(t.min(r,o))},{$x:r},function(t,e){return Ps(t,e,i,a,s)});if(n){var c=oe(u.shape,a);u=u.reshape(c)}return u}}),Fs=Ae({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=P(e,(t=Oe(t,"x","moments")).shape),i=t.mean(r,n),a=i.shape;return n||(a=oe(i.shape,r)),{mean:i,variance:t.toFloat().sub(i.reshape(a)).square().mean(r,n)}}}),Us=Ae({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Oe(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());var i=P(e,r.shape);return $t(function(t){var e=ue(i,t.rank),r=i,a=t;null!=e&&(a=t.transpose(e),r=le(r.length,t.rank));var o=Lt.engine.runKernel(function(t){return t.sum(a,r)},{permutedX:a});if(n){var s=oe(o.shape,i);o=o.reshape(s)}return{value:o,gradFunc:function(e){var n=t.shape.slice();return i.forEach(function(t){n[t]=1}),e.reshape(n).mul(We(t.shape,"float32"))}}})(r)}}),Vs=Ae({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Oe(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());var i=P(e,r.shape),a=ue(i,r.rank),o=i,s=r;null!=a&&(s=r.transpose(a),o=le(o.length,r.rank));var u=Lt.engine.runKernel(function(t){return t.prod(s,o)},{permutedX:s});if(n){var c=oe(u.shape,i);u=u.reshape(c)}return u}});var Ws=Ae({equal_:function(t,e){var n,r=Oe(t,"a","equal"),i=Oe(e,"b","equal");return n=Et(r,i),r=n[0],i=n[1],pe(r.shape,i.shape),Lt.engine.runKernel(function(t){return t.equal(r,i)},{$a:r,$b:i})}}),qs=Ae({equalStrict_:function(t,e){var n=Oe(t,"a","equalStrict"),r=Oe(e,"b","equalStrict");return w(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),$s=Ae({greater_:function(t,e){var n,r=Oe(t,"a","greater"),i=Oe(e,"b","greater");return n=Et(r,i),r=n[0],i=n[1],pe(r.shape,i.shape),Lt.engine.runKernel(function(t){return t.greater(r,i)},{$a:r,$b:i})}}),Hs=Ae({greaterEqual_:function(t,e){var n,r=Oe(t,"a","greaterEqual"),i=Oe(e,"b","greaterEqual");return n=Et(r,i),r=n[0],i=n[1],pe(r.shape,i.shape),Lt.engine.runKernel(function(t){return t.greaterEqual(r,i)},{$a:r,$b:i},function(t){return{$a:function(){return Xe(r)},$b:function(){return Xe(i)}}})}}),Ks=Ae({greaterEqualStrict_:function(t,e){var n=Oe(t,"a","greaterEqualStrict"),r=Oe(e,"b","greaterEqualStrict");return w(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),Gs=Ae({greaterStrict_:function(t,e){var n=Oe(t,"a","greaterStrict"),r=Oe(e,"b","greaterStrict");return w(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),Xs=Ae({less_:function(t,e){var n,r=Oe(t,"a","less"),i=Oe(e,"b","less");return n=Et(r,i),r=n[0],i=n[1],pe(r.shape,i.shape),Lt.engine.runKernel(function(t){return t.less(r,i)},{$a:r,$b:i})}}),Ys=Ae({lessEqual_:function(t,e){var n,r=Oe(t,"a","lessEqual"),i=Oe(e,"b","lessEqual");return n=Et(r,i),r=n[0],i=n[1],pe(r.shape,i.shape),Lt.engine.runKernel(function(t){return t.lessEqual(r,i)},{$a:r,$b:i})}}),Js=Ae({lessEqualStrict_:function(t,e){var n=Oe(t,"a","lessEqualStrict"),r=Oe(e,"b","lessEqualStrict");return w(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),Zs=Ae({lessStrict_:function(t,e){var n=Oe(t,"a","lessStrict"),r=Oe(e,"b","lessStrict");return w(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),Qs=Ae({notEqual_:function(t,e){var n,r=Oe(t,"a","notEqual"),i=Oe(e,"b","notEqual");return n=Et(r,i),r=n[0],i=n[1],pe(r.shape,i.shape),Lt.engine.runKernel(function(t){return t.notEqual(r,i)},{$a:r,$b:i})}}),tu=Ae({notEqualStrict_:function(t,e){var n=Oe(t,"a","notEqualStrict"),r=Oe(e,"b","notEqualStrict");return w(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});var eu=Ae({add_:function(t,e){var n,r=Oe(t,"a","add"),i=Oe(e,"b","add");n=Et(r,i),r=n[0],i=n[1];var a=pe(r.shape,i.shape);return Lt.engine.runKernel(function(t){return t.add(r,i)},{$a:r,$b:i},function(t){return{$a:function(){var e=t,n=he(r.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},$b:function(){var e=t,n=he(i.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(i.shape)}}})}}),nu=Ae({addN_:function(t){b(Array.isArray(t),function(){return"The argument passed to tf.addN() must be a list of tensors"}),b(t.length>=1,function(){return"Must pass at least one tensor to tf.addN(), but got "+t.length});var e=t.map(function(t,e){return Oe(t,"tensors"+e,"addN")}),n=e[0];e.forEach(function(t){if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(function(t){if(!S(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});var r=e;return Lt.engine.runKernel(function(t){return t.addN(e)},r,function(t){var n={};return e.forEach(function(e,r){n[r]=function(){return t.clone()}}),n})}}),ru=Ae({addStrict_:function(t,e){var n=Oe(t,"a","addStrict"),r=Oe(e,"b","addStrict");return w(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),iu=Ae({atan2_:function(t,e){var n,r=Oe(t,"a","atan2"),i=Oe(e,"b","atan2");n=Et(r,i),r=n[0],i=n[1];var a=pe(r.shape,i.shape);return Lt.engine.runKernel(function(t){return t.atan2(r,i)},{$a:r,$b:i},function(t){return{$a:function(){var e=eu(r.square(),i.square()),n=t.mul(i.div(e)),o=he(r.shape,a);return o.length>0&&(n=n.sum(o)),n.reshape(r.shape)},$b:function(){var e=eu(r.square(),i.square()),n=Ao(t.mul(r.div(e))),o=he(i.shape,a);return o.length>0&&(n=n.sum(o)),n.reshape(i.shape)}}})}}),au=Ae({div_:function(t,e){var n,r,i=Oe(t,"a","div"),a=Oe(e,"b","div");if(n=Et(i,a),i=n[0],a=n[1],"int32"===i.dtype&&"int32"===a.dtype)return su(i,a);r=function(t){return t.realDivide(i,a)};var o=pe(i.shape,a.shape);return Lt.engine.runKernel(r,{$a:i,$b:a},function(t){return{$a:function(){var e=t.div(a.toFloat()),n=he(i.shape,o);return n.length>0?e.sum(n).reshape(i.shape):e},$b:function(){var e=t.mul(i.toFloat()),n=he(a.shape,o);n.length>0&&(e=e.sum(n).reshape(a.shape));var r=a.square();return e.div(r.toFloat()).neg()}}})}}),ou=Ae({divStrict_:function(t,e){var n=Oe(t,"a","div"),r=Oe(e,"b","div");return w(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),su=Ae({floorDiv_:function(t,e){var n,r=Oe(t,"a","floorDiv"),i=Oe(e,"b","floorDiv");n=Et(r,i),r=n[0],i=n[1];var a=pe(r.shape,i.shape);return Lt.engine.runKernel(function(t){return t.floorDiv(r,i)},{$a:r,$b:i},function(t){return{$a:function(){var e=t.div(i.toFloat()),n=he(r.shape,a);return n.length>0?e.sum(n).reshape(r.shape):e},$b:function(){var e=t.mul(r.toFloat()),n=he(i.shape,a);n.length>0&&(e=e.sum(n).reshape(i.shape));var o=i.square();return e.div(o.toFloat()).neg()}}})}}),uu=Ae({maximum_:function(t,e){var n,r=Oe(t,"a","maximum"),i=Oe(e,"b","maximum");return n=Et(r,i),r=n[0],i=n[1],"bool"===r.dtype&&(r=r.toInt(),i=i.toInt()),pe(r.shape,i.shape),Lt.engine.runKernel(function(t){return t.maximum(r,i)},{$a:r,$b:i},function(t){return{$a:function(){return t.mul(r.greaterEqual(i).toFloat())},$b:function(){return t.mul(r.less(i).toFloat())}}})}}),cu=Ae({maximumStrict_:function(t,e){var n=Oe(t,"a","maximumStrict"),r=Oe(e,"b","maximumStrict");return w(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),lu=Ae({minimum_:function(t,e){var n,r=Oe(t,"a","minimum"),i=Oe(e,"b","minimum");return n=Et(r,i),r=n[0],i=n[1],"bool"===r.dtype&&(r=r.toInt(),i=i.toInt()),pe(r.shape,i.shape),Lt.engine.runKernel(function(t){return t.minimum(r,i)},{$a:r,$b:i},function(t){return{$a:function(){return t.mul(r.lessEqual(i).toFloat())},$b:function(){return t.mul(r.greater(i).toFloat())}}})}}),fu=Ae({minimumStrict_:function(t,e){var n=Oe(t,"a","minimumStrict"),r=Oe(e,"b","minimumStrict");return w(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),hu=Ae({mod_:function(t,e){var n,r=Oe(t,"a","mod"),i=Oe(e,"b","mod");n=Et(r,i),r=n[0],i=n[1];var a=pe(r.shape,i.shape);return Lt.engine.runKernel(function(t){return t.mod(r,i)},{$a:r,$b:i},function(t){return{$a:function(){var e=he(r.shape,a);return e.length>0?t.sum(e).reshape(r.shape):t},$b:function(){var e=t.mul(r.div(i).floor().neg()),n=he(i.shape,a);return n.length>0?e.sum(n).reshape(i.shape):e}}})}}),pu=Ae({modStrict_:function(t,e){var n=Oe(t,"a","modStrict"),r=Oe(e,"b","modStrict");return w(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),du=Ae({mul_:function(t,e){var n,r=Oe(t,"a","mul"),i=Oe(e,"b","mul");n=Et(r,i),r=n[0],i=n[1];var a=pe(r.shape,i.shape);return Lt.engine.runKernel(function(t){return t.multiply(r,i)},{$a:r,$b:i},function(t){return{$a:function(){var e=t.mul(i.toFloat()),n=he(r.shape,a);return n.length>0?e.sum(n).reshape(r.shape):e},$b:function(){var e=t.mul(r.toFloat()),n=he(i.shape,a);return n.length>0?e.sum(n).reshape(i.shape):e}}})}}),mu=Ae({mulStrict_:function(t,e){var n=Oe(t,"a","mul"),r=Oe(e,"b","mul");return w(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),gu=Ae({pow_:function(t,e){var n=Oe(t,"base","pow"),r=Oe(e,"exp","pow"),i=pe(n.shape,r.shape);return t=n.cast(_t(n.dtype,r.dtype)),e=r.cast(_t(n.dtype,r.dtype)),Lt.engine.runKernel(function(t,e){return e(t.pow(n,r))},{$base:n,$exp:r},function(t,e){var a=e[0];return{$base:function(){var e=r.toFloat(),a=t.mul(e.mul(n.pow(e.sub(je(1))))),o=he(n.shape,i);return o.length>0&&(a=a.sum(o)),a.reshape(n.shape)},$exp:function(){var e=n.greater(0),o=n.log().where(e,Xe(n)),s=t.mul(a.mul(o)),u=he(r.shape,i);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}})}}),yu=Ae({powStrict_:function(t,e){return w(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),vu=Ae({squaredDifference_:function(t,e){var n,r=Oe(t,"a","squaredDifference"),i=Oe(e,"b","squaredDifference");return n=Et(r,i),r=n[0],i=n[1],pe(r.shape,i.shape),Lt.engine.runKernel(function(t){return t.squaredDifference(r,i)},{$a:r,$b:i},function(t){var e=je(2);return{$a:function(){return t.mul(r.sub(i).mul(e))},$b:function(){return t.mul(i.sub(r).mul(e))}}})}}),bu=Ae({squaredDifferenceStrict_:function(t,e){var n=Oe(t,"a","squaredDifferenceStrict"),r=Oe(e,"b","squaredDifferenceStrict");return w(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),wu=Ae({sub_:function(t,e){var n,r=Oe(t,"a","sub"),i=Oe(e,"b","sub");n=Et(r,i),r=n[0],i=n[1];var a=pe(r.shape,i.shape);return Lt.engine.runKernel(function(t){return t.subtract(r,i)},{$a:r,$b:i},function(t){return{$a:function(){var e=t,n=he(r.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},$b:function(){var e=t,n=he(i.shape,a);return n.length>0&&(e=e.sum(n)),e.neg().reshape(i.shape)}}})}}),_u=Ae({subStrict_:function(t,e){var n=Oe(t,"a","subStrict"),r=Oe(e,"b","subStrict");return w(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}});var xu=Ae({logicalAnd_:function(t,e){var n=Oe(t,"a","logicalAnd","bool"),r=Oe(e,"b","logicalAnd","bool");return pe(n.shape,r.shape),Lt.engine.runKernel(function(t){return t.logicalAnd(n,r)},{$a:n,$b:r})}}),Eu=Ae({logicalNot_:function(t){var e=Oe(t,"x","logicalNot","bool");return Lt.engine.runKernel(function(t){return t.logicalNot(e)},{$x:e})}}),Su=Ae({logicalOr_:function(t,e){var n=Oe(t,"a","logicalOr","bool"),r=Oe(e,"b","logicalOr","bool");return pe(n.shape,r.shape),Lt.engine.runKernel(function(t){return t.logicalOr(n,r)},{$a:n,$b:r})}}),Nu=Ae({logicalXor_:function(t,e){var n=Oe(t,"a","logicalXor","bool"),r=Oe(e,"b","logicalXor","bool");return pe(n.shape,r.shape),Su(t,e).logicalAnd(xu(t,e).logicalNot())}}),Iu=Ae({where_:function(t,e,n){var r=Oe(e,"a","where"),i=Oe(n,"b","where"),a=Oe(t,"condition","where","bool");return w(r.shape,i.shape,"Error in where: "),1===a.rank?b(a.shape[0]===r.shape[0],"The first dimension of `a` must match the size of `condition`."):w(a.shape,i.shape,"Error in where: "),Lt.engine.runKernel(function(t){return t.select(a,r,i)},{$condition:a,$a:r,$b:i},function(t){return{$condition:function(){return Xe(a).toFloat()},$a:function(){return t.mul(a.cast(t.dtype))},$b:function(){return t.mul(a.logicalNot().cast(t.dtype))}}})}}),Ou=function(t){return c(this,void 0,void 0,function(){var e,n,r;return l(this,function(i){switch(i.label){case 0:return[4,(e=Oe(t,"condition","whereAsync","bool")).data()];case 1:return n=i.sent(),r=so(e.shape,n),t!==e&&e.dispose(),[2,r]}})})};var ku=Ae({elu_:function(t){var e=Oe(t,"x","elu");return Lt.engine.runKernel(function(t,n){return n(t.elu(e))},{$x:e},function(t,e){var n=e[0];return{$x:function(){return Lt.engine.runKernel(function(e){return e.eluDer(t,n)},{dy:t,y:n})}}})}}),Au=Ae({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=Oe(t,"x","leakyRelu");return uu(je(e).mul(n),n)}}),Cu=Ae({prelu_:function(t,e){var n=Oe(t,"x","prelu"),r=Oe(e,"alpha","prelu");return Lt.engine.runKernel(function(t){return t.prelu(n,r)},{$x:n,$alpha:r},function(t){var e=n.greater(0);return{$x:function(){return Iu(e,t,t.mul(r))},$alpha:function(){var i=Iu(e,Xe(t),t.mul(n)),a=he(r.shape,t.shape);return a.length>0&&(i=i.sum(a)),i.reshape(r.shape)}}})}}),Pu=Ae({relu_:function(t){var e=Oe(t,"x","relu");return"bool"===e.dtype?e.toInt():Lt.engine.runKernel(function(t){return t.relu(e)},{$x:e},function(t){var n=e.step();return{$x:function(){return t.mulStrict(n.toFloat())}}})}}),Tu=Ae({selu_:function(t){var e=Oe(t,"x","selu");return Lt.engine.runKernel(function(t){return t.selu(e)},{$x:e},function(t){return{$x:function(){var n=e.greater(je(0)),r=je(ia),i=je(aa),a=t.mul(i),o=t.mul(r).mul(e.toFloat().exp());return Iu(n,a,o)}}})}});var Ru=Ae({transpose_:function(t,e){var n=Oe(t,"x","transpose");return null==e&&(e=n.shape.map(function(t,e){return e}).reverse()),b(n.rank===e.length,"Error in transpose: rank of input "+n.rank+" must match length of perm "+e+"."),e.forEach(function(t){b(t>=0&&t<n.rank,"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1?n.clone():Lt.engine.runKernel(function(t){return t.transpose(n,e)},{$x:n},function(t){var n=ce(e);return{$x:function(){return t.transpose(n)}}})}});var Du=Ae({localResponseNormalization_:function(t,e,n,r,i){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===i&&(i=.5);var a=Oe(t,"x","localResponseNormalization");b(4===a.rank||3===a.rank,"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+a.rank+"."),b(N(e),"Error in localResponseNormalization: depthRadius must be an integer\n                     but got depthRadius "+e+".");var o=a,s=!1;3===a.rank&&(s=!0,o=a.as4D(1,a.shape[0],a.shape[1],a.shape[2]));var u=Lt.engine.runKernel(function(t,a){return a(t.localResponseNormalization4D(o,e,n,r,i))},{x4D:o},function(t,a){var s=a[0];return{x4D:function(){return Lt.engine.runKernel(function(a){return a.LRNGrad(t,o,s,e,n,r,i)},{})}}});return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}});var Mu=Ae({norm_:function(t,e,n,r){void 0===e&&(e="euclidean"),void 0===n&&(n=null),void 0===r&&(r=!1);var i=function t(e,n,r){if(void 0===r&&(r=null),0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||r instanceof Array&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(je(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(r instanceof Array&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=Oe(t,"x","norm"),e,n),a=i.shape;if(r){var o=P(n,t.shape);a=oe(i.shape,o)}return i.reshape(a)}});function ju(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function Bu(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var Lu=Ae({gather_:function(t,e,n){void 0===n&&(n=0);var r=Oe(t,"x","gather"),i=Oe(e,"indices","gather","int32");return n=P(n,r.shape)[0],Lt.engine.runKernel(function(t){return t.gather(r,i,n)},{$x:r},function(t){return{$x:function(){if(0===n)return zu(t,i,r.shape[n]);var e=r.shape,a=i.size,o=e.slice(0,n),s=o.length,u=e.slice(n,e.length).slice(1),c=u.length,l=ju(0,s),f=ju(s+1,s+1+c),h=Bu([o,[a],u]),p=t.reshape(h),d=i.reshape([a]),m=Bu([[s],l,f]),g=p.transpose(m),y=zu(g,d,r.shape[n]),v=ce(m);return y.transpose(v)}}})}}),zu=Ae({unsortedSegmentSum_:function(t,e,n){var r=Oe(t,"x","unsortedSegmentSum"),i=Oe(e,"segmentIds","unsortedSegmentSum","int32");return b(N(n),"numSegments must be of dtype int"),Lt.engine.runKernel(function(t){return t.unsortedSegmentSum(r,i,n)},{$x:r},function(t){return{$x:function(){return function(t,e){for(var n=uu(e,Xe(e)),r=Lu(t,n),i=Hs(e,je(0,"int32")),a=r.rank-i.rank,o=0;o<a;++o)i=Fa(i,o+1);i=xu(i,We(r.shape,"bool"));var s=Xe(r);return Iu(i,r,s)}(t,i)}}})}});var Fu=Ae({basicLSTMCell_:function(t,e,n,r,i,a){var o=Oe(t,"forgetBias","basicLSTMCell"),s=Oe(e,"lstmKernel","basicLSTMCell"),u=Oe(n,"lstmBias","basicLSTMCell"),c=Oe(r,"data","basicLSTMCell"),l=Oe(i,"c","basicLSTMCell"),f=Oe(a,"h","basicLSTMCell"),h=c.concat(f,1).matMul(s).add(u),p=h.shape[0],d=h.shape[1]/4,m=[p,d],g=h.slice([0,0],m),y=h.slice([0,d],m),v=h.slice([0,2*d],m),b=h.slice([0,3*d],m),w=g.sigmoid().mulStrict(y.tanh()).addStrict(l.mulStrict(o.add(v).sigmoid()));return[w,w.tanh().mulStrict(b.sigmoid())]}}),Uu=Ae({multiRNNCell_:function(t,e,n,r){for(var i=Oe(e,"data","multiRNNCell"),a=ke(n,"c","multiRNNCell"),o=ke(r,"h","multiRNNCell"),s=i,u=[],c=0;c<t.length;c++){var l=t[c](s,a[c],o[c]);u.push(l[0]),u.push(l[1]),s=l[1]}var f=[],h=[];for(c=0;c<u.length;c+=2)f.push(u[c]),h.push(u[c+1]);return[f,h]}});var Vu=Ae({movingAverage_:function(t,e,n,r,i){void 0===i&&(i=!0);var a=Oe(t,"v","movingAverage"),o=Oe(e,"x","movingAverage"),s=Oe(n,"decay","movingAverage");(function(t,e){b(t.dtype===e.dtype,"The dtypes of the first("+t.dtype+") and second("+e.dtype+") input must match")})(a,o),b(S(a.shape,o.shape),"Shape mismatch in v and x");var u=je(1),c=u.sub(s),l=o.sub(a).mul(c);if(i){b(null!=r,"When using zeroDebias: true, step is required.");var f=Oe(r,"step","movingAverage");l=l.div(u.sub(gu(s,f)))}return a.add(l)}});var Wu=Ae({stridedSlice_:function(t,e,n,r,i,a,o,s,u){if(void 0===i&&(i=0),void 0===a&&(a=0),void 0===o&&(o=0),void 0===s&&(s=0),void 0===u&&(u=0),0!==o)throw new Error("ellipsis mask is not yet supported");if(0!==s)throw new Error("new axis mask is not yet supported");var c=Oe(t,"x","stridedSlice");if(r.every(function(t){return 1===t})){var l=we(c.shape,e,n,r,i,a,o,s,u),f=l[0],h=l[1],p=l[2],d=h.filter(function(t,e){return-1===p.indexOf(e)});return Is(c,f,h).reshape(d)}return Lt.engine.runKernel(function(t){return t.stridedSlice(c,e,n,r,i,a,o,s,u)},{$x:c})}});var qu=Ae({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=Oe(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var i=r.shape[r.shape.length-1];if(e>i)throw new Error("'k' passed to topk() must be <= the last dimension ("+i+") but got "+e);var a=Lt.engine.runKernel(function(t){return t.topk(r,e,n)},{$x:r});return{values:a[0],indices:a[1]}}});var $u=Ae({scatterND_:function(t,e,n){var r=Oe(t,"indices","scatterND","int32"),i=Oe(e,"updates","scatterND");return ve(i,r,n),Lt.engine.runKernel(function(t){return t.scatterND(r,i,n)},{$indices:r,$updates:i})}});var Hu=Ae({fft_:function(t){b("complex64"===t.dtype,"The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+".");var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.engine.runKernel(function(t){return t.fft(r)},{input:t}).reshape(t.shape)}}),Ku=Ae({ifft_:function(t){b("complex64"===t.dtype,"The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+".");var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.engine.runKernel(function(t){return t.ifft(r)},{input:t}).reshape(t.shape)}}),Gu=Ae({rfft_:function(t){b("float32"===t.dtype,"The dtype for rfft() must be real value but\n    got "+t.dtype);var e=t.shape[t.shape.length-1],n=t.size/e,r=t.zerosLike(),i=Te(t,r).as2D(n,e),a=Hu(i),o=Math.floor(e/2)+1,s=Re(a),u=De(a),c=s.split([o,e-o],s.shape.length-1),l=u.split([o,e-o],u.shape.length-1),f=t.shape.slice();return f[t.shape.length-1]=o,Te(c[0],l[0]).reshape(f)}}),Xu=Ae({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),i=Ku(r);return Re(i)}var a=[n,2*(e-1)],o=Re(t).as2D(n,e),s=De(t).as2D(n,e),u=o.slice([0,1],[n,e-2]).reverse(1),c=s.slice([0,1],[n,e-2]).reverse(1).mul(je(-1)),l=o.concat(u,1),f=s.concat(c,1);return r=Te(l,f).as2D(a[0],a[1]),i=Ku(r),Re(i)}}),Yu=Object.freeze({fft:Hu,ifft:Ku,rfft:Gu,irfft:Xu});var Ju=Ae({sparseToDense_:function(t,e,n,r){var i=Oe(t,"sparseIndices","sparseToDense","int32"),a=Oe(e,"sparseValues","sparseToDense"),o=Oe(r,"defaultValue","sparseToDense",a.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var i=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error("outputShape has incorrect number of elements:, "+n.length+", should be: "+a+".");var o=e.size;if(0!==e.rank&&(1!==e.rank||o!==i))throw new Error("sparseValues has incorrect shape "+e.shape+", should be [] or ["+i+"]");if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(i,a,n,o),Lt.engine.runKernel(function(t){return t.sparseToDense(i,a,n,o)},{$sparseIndices:i,$sparseValues:a,$defaultValue:o})}});var Zu,Qu=Ae({gatherND_:function(t,e){var n=Oe(e,"indices","gatherND","int32"),r=Oe(t,"x","gatherND");return Lt.engine.runKernel(function(t){return t.gatherND(r,n)},{$x:r,$indices:n})}});!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Zu||(Zu={}));var tc=Ae({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=Zu.SUM_BY_NONZERO_WEIGHTS);var i=Oe(t,"labels","absoluteDifference"),a=Oe(e,"predictions","absoluteDifference"),o=null;null!=n&&(o=Oe(n,"weights","absoluteDifference")),w(i.shape,a.shape,"Error in absoluteDifference: ");var s=i.sub(a).abs();return ec(s,o,r)}}),ec=Ae({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=Zu.SUM_BY_NONZERO_WEIGHTS);var r=Oe(t,"losses","computeWeightedLoss"),i=null;null!=e&&(i=Oe(e,"weights","computeWeightedLoss"));var a=null==i?r:r.mul(i);if(n===Zu.NONE)return a;if(n===Zu.SUM)return a.sum();if(n===Zu.MEAN){if(null==i)return a.mean();var o=E(r.shape)/E(i.shape),s=a.sum().div(i.sum());return o>1?s.div(je(o)):s}if(n===Zu.SUM_BY_NONZERO_WEIGHTS){if(null==i)return a.sum().div(je(r.size));var u=i.mul(We(r.shape)).notEqual(je(0)).sum().toFloat();return a.sum().div(u)}throw Error("Unknown reduction: "+n)}}),nc=Ae({cosineDistance_:function(t,e,n,r,i){void 0===i&&(i=Zu.SUM_BY_NONZERO_WEIGHTS);var a=Oe(t,"labels","cosineDistance"),o=Oe(e,"predictions","cosineDistance"),s=null;null!=r&&(s=Oe(r,"weights","cosineDistance")),w(a.shape,o.shape,"Error in cosineDistance: ");var u=je(1).sub(a.mul(o).sum(n,!0));return ec(u,s,i)}}),rc=Ae({hingeLoss_:function(t,e,n,r){void 0===r&&(r=Zu.SUM_BY_NONZERO_WEIGHTS);var i=Oe(t,"labels","hingeLoss"),a=Oe(e,"predictions","hingeLoss"),o=null;null!=n&&(o=Oe(n,"weights","hingeLoss")),w(i.shape,a.shape,"Error in hingeLoss: ");var s=je(1);i=je(2).mul(i).sub(s);var u=s.sub(i.mul(a)).relu();return ec(u,o,r)}}),ic=Ae({huberLoss_:function(t,e,n,r,i){void 0===r&&(r=1),void 0===i&&(i=Zu.SUM_BY_NONZERO_WEIGHTS);var a=Oe(t,"labels","huberLoss"),o=Oe(e,"predictions","huberLoss"),s=null;null!=n&&(s=Oe(n,"weights","huberLoss")),w(a.shape,o.shape,"Error in huberLoss: ");var u=je(r),c=o.sub(a).abs(),l=lu(c,u),f=c.sub(l),h=je(.5).mul(l.square()).add(u.mul(f));return ec(h,s,i)}}),ac=Ae({logLoss_:function(t,e,n,r,i){void 0===r&&(r=1e-7),void 0===i&&(i=Zu.SUM_BY_NONZERO_WEIGHTS);var a=Oe(t,"labels","logLoss"),o=Oe(e,"predictions","logLoss"),s=null;null!=n&&(s=Oe(n,"weights","logLoss")),w(a.shape,o.shape,"Error in logLoss: ");var u=je(1),c=je(r),l=a.mul(o.add(c).log()).neg().sub(u.sub(a).mul(u.sub(o).add(c).log()));return ec(l,s,i)}}),oc=Ae({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=Zu.SUM_BY_NONZERO_WEIGHTS);var i=Oe(t,"labels","meanSquaredError"),a=Oe(e,"predictions","meanSquaredError"),o=null;null!=n&&(o=Oe(n,"weights","meanSquaredError")),w(i.shape,a.shape,"Error in meanSquaredError: ");var s=i.squaredDifference(a);return ec(s,o,r)}}),sc=Ae({sigmoidCrossEntropy_:function(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=Zu.SUM_BY_NONZERO_WEIGHTS);var a=Oe(t,"multiClassLabels","sigmoidCrossEntropy"),o=Oe(e,"logits","sigmoidCrossEntropy"),s=null;if(null!=n&&(s=Oe(n,"weights","sigmoidCrossEntropy")),w(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){var u=je(r),c=je(1),l=je(.5);a=a.mul(c.sub(u)).add(l.mul(u))}var f=function(t,e){var n=Oe(t,"labels","sigmoidCrossEntropyWithLogits"),r=Oe(e,"logits","sigmoidCrossEntropyWithLogits");w(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var i=r.relu(),a=r.mul(n),o=r.abs().neg().exp().log1p();return i.sub(a).add(o)}(a,o);return ec(f,s,i)}}),uc=Ae({softmaxCrossEntropy_:function(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=Zu.SUM_BY_NONZERO_WEIGHTS);var a=Oe(t,"onehotLabels","softmaxCrossEntropy"),o=Oe(e,"logits","softmaxCrossEntropy"),s=null;if(null!=n&&(s=Oe(n,"weights","softmaxCrossEntropy")),w(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){var u=je(r),c=je(1),l=je(a.shape[1]);a=a.mul(c.sub(u)).add(u.div(l))}var f=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+e.rank+" and dim was "+n);return $t(function(t,e){var r=e.logSumExp([n],!0),i=e.toFloat().sub(r);return{value:i.mul(t).neg().sum([n]),gradFunc:function(e){var r=oe(e.shape,[n]);return[e.reshape(r).mul(t.toFloat().sub(i.exp())),e.reshape(r).mul(i.exp().sub(t.toFloat()))]}}})(t,e)}(a,o);return ec(f,s,i)}}),cc=Object.freeze({get Reduction(){return Zu},absoluteDifference:tc,computeWeightedLoss:ec,cosineDistance:nc,hingeLoss:rc,huberLoss:ic,logLoss:ac,meanSquaredError:oc,sigmoidCrossEntropy:sc,softmaxCrossEntropy:uc});function lc(t,e){return void 0===e&&(e=!1),Lt.engine.tidy(function(){if(2!==t.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor.");for(var n=t.shape[0],r=t.shape[1],i=Ua(n),a=t.clone(),o=Le([[1]],[1,1]),s=o.clone(),u=n>=r?r:n,c=function(t){var e,u=a,c=s,l=i;e=Lt.engine.tidy(function(){var e=a.slice([t,t],[n-t,1]),u=e.norm(),c=a.slice([t,t],[1,1]),l=c.sign().neg(),f=c.sub(l.mul(u)),h=e.div(f);s=1===h.shape[0]?o.clone():o.concat(h.slice([1,0],[h.shape[0]-1,h.shape[1]]),0);var p=l.matMul(f).div(u).neg(),d=a.slice([t,0],[n-t,r]),m=p.mul(s);a=0===t?d.sub(m.matMul(s.transpose().matMul(d))):a.slice([0,0],[t,r]).concat(d.sub(m.matMul(s.transpose().matMul(d))),0);var g=i.slice([0,t],[n,i.shape[1]-t]);return i=0===t?g.sub(g.matMul(s).matMul(m.transpose())):i.slice([0,0],[n,t]).concat(g.sub(g.matMul(s).matMul(m.transpose())),1),[s,a,i]}),s=e[0],a=e[1],i=e[2],Xt([u,c,l])},l=0;l<u;++l)c(l);return!e&&n>r&&(i=i.slice([0,0],[n,r]),a=a.slice([0,0],[r,r])),[i,a]})}var fc=Ae({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,b(null!=t&&t.length>0,"Gram-Schmidt process: input must not be null, undefined, or empty");for(var n=t[0].shape[0],r=1;r<t.length;++r)b(t[r].shape[0]===n,"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[r].shape[0]+" vs. "+n+")")}else e=!0,t=_a(t,t.shape[0],0).map(function(t){return eo(t,[0])});b(t.length<=t[0].shape[0],"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+").");var i=[],a=t,o=function(t){i.push(Lt.engine.tidy(function(){var e=a[t];if(t>0)for(var n=0;n<t;++n){var r=Us(i[n].mulStrict(e)).mul(i[n]);e=e.sub(r)}return e.div(Mu(e,"euclidean"))}))};for(r=0;r<t.length;++r)o(r);return e?no(i,0):i}}),hc=Ae({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return lc(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce(function(t,e){return t*e}),r=[],i=[];return ao(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0).forEach(function(t){var n=lc(t,e),a=n[0],o=n[1];r.push(a),i.push(o)}),[no(r,0).reshape(t.shape),no(i,0).reshape(t.shape)]}}),pc=Object.freeze({gramSchmidt:fc,qr:hc});function dc(t,e,n,r,i){null==r&&(r=.5),null==i&&(i=Number.NEGATIVE_INFINITY);var a=t.shape[0];return n=Math.min(n,a),b(0<=r&&r<=1,"iouThreshold must be in [0, 1], but was '"+r+"'"),b(2===t.rank,"boxes must be a 2D tensor, but was of rank '"+t.rank+"'"),b(4===t.shape[1],"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),b(1===e.rank,"scores must be a 1D tensor"),b(e.shape[0]===a,"scores has incompatible shape with boxes. Expected "+a+", but was "+e.shape[0]),{maxOutputSize:n,iouThreshold:r,scoreThreshold:i}}var mc=Ae({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=Oe(t,"images","resizeBilinear");b(3===r.rank||4===r.rank,"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."),b(2===e.length,"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");var i=r,a=!1;3===r.rank&&(a=!0,i=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var o=e[0],s=e[1],u=Lt.engine.runKernel(function(t,e){return t.resizeBilinear(i,o,s,n)},{batchImages:i},function(t,e){return{batchImages:function(){return Lt.engine.runKernel(function(e){return e.resizeBilinearBackprop(t,i,n)},{})}}});return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),gc=Ae({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=Oe(t,"images","resizeNearestNeighbor");b(3===r.rank||4===r.rank,"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."),b(2===e.length,"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),b("float32"===r.dtype||"int32"===r.dtype,"`images` must have `int32` or `float32` as dtype");var i=r,a=!1;3===r.rank&&(a=!0,i=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var o=e[0],s=e[1],u=Lt.engine.runKernel(function(t,e){return t.resizeNearestNeighbor(i,o,s,n)},{batchImages:i},function(t,e){return{batchImages:function(){return Lt.engine.runKernel(function(e){return e.resizeNearestNeighborBackprop(t,i,n)},{})}}});return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),yc=Ae({nonMaxSuppression_:function(t,e,n,r,i){void 0===r&&(r=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY);var a=Oe(t,"boxes","nonMaxSuppression"),o=Oe(e,"scores","nonMaxSuppression"),s=dc(a,o,n,r,i);return n=s.maxOutputSize,r=s.iouThreshold,i=s.scoreThreshold,Lt.engine.runKernel(function(t){return t.nonMaxSuppression(a,o,n,r,i)},{$boxes:a})}}),vc=function(t,e,n,r,i){return void 0===r&&(r=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),c(this,void 0,void 0,function(){var a,o,s,u,c,f;return l(this,function(l){switch(l.label){case 0:return a=Oe(t,"boxes","nonMaxSuppressionAsync"),o=Oe(e,"scores","nonMaxSuppressionAsync"),s=dc(a,o,n,r,i),n=s.maxOutputSize,r=s.iouThreshold,i=s.scoreThreshold,[4,a.data()];case 1:return u=l.sent(),[4,o.data()];case 2:return c=l.sent(),f=an(u,c,n,r,i),a!==t&&a.dispose(),o!==e&&o.dispose(),[2,f]}})})},bc=function(t,e,n,r,i,a){var o=Oe(t,"image","cropAndResize","float32"),s=Oe(e,"boxes","cropAndResize","float32"),u=Oe(n,"boxInd","cropAndResize","int32");i=i||"bilinear",a=a||0;var c=s.shape[0];return b(4===o.rank,"Error in cropAndResize: image must be rank 4,but got rank "+o.rank+"."),b(2===s.rank&&4===s.shape[1],"Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+s.shape+"."),b(1===u.rank&&u.shape[0]===c,"Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+s.shape+"."),b(2===r.length,"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."),b(r[0]>=1&&r[1]>=1,"cropSize must be atleast [1,1], but was "+r),b("bilinear"===i||"nearest"===i,"method must be bilinear or nearest, but was "+i),Lt.engine.runKernel(function(t,e){return t.cropAndResize(o,s,u,r,i,a)},{$image:o,$boxes:s})},wc=Object.freeze({resizeBilinear:mc,resizeNearestNeighbor:gc,nonMaxSuppression:yc,nonMaxSuppressionAsync:vc,cropAndResize:bc}),_c=Object.freeze({image:wc,linalg:pc,losses:cc,spectral:Yu,op:Ae,batchNormalization2d:qo,batchNormalization3d:$o,batchNormalization4d:Ho,batchNormalization:Ko,complex:Te,real:Re,imag:De,concat:ga,concat1d:ya,concat2d:va,concat3d:ba,concat4d:wa,split:_a,conv1d:cs,conv2d:ls,conv3d:fs,conv2dDerFilter:hs,depthwiseConv2d:ps,separableConv2d:ds,conv2dTranspose:ms,matMul:rs,dot:is,outerProduct:as,reverse:gs,reverse1d:ys,reverse2d:vs,reverse3d:bs,reverse4d:ws,maxPool:Es,avgPool:Ss,pool:Ns,slice:Is,slice1d:Os,slice2d:ks,slice3d:As,slice4d:Cs,abs:lo,acos:fo,acosh:ho,asin:po,asinh:mo,atan:go,atanh:yo,ceil:vo,clipByValue:bo,cos:wo,cosh:_o,erf:xo,exp:Eo,expm1:So,floor:No,log:Io,log1p:Oo,logSigmoid:ko,neg:Ao,reciprocal:Co,round:Po,rsqrt:To,sigmoid:Ro,sign:Do,sin:Mo,sinh:jo,softplus:Bo,sqrt:Lo,square:zo,step:Fo,tan:Uo,tanh:Vo,all:Ts,any:Rs,argMax:Ds,argMin:Ms,logSumExp:js,max:Bs,mean:Ls,min:zs,moments:Fs,sum:Us,prod:Vs,equal:Ws,equalStrict:qs,greater:$s,greaterEqual:Hs,greaterEqualStrict:Ks,greaterStrict:Gs,less:Xs,lessEqual:Ys,lessEqualStrict:Js,lessStrict:Zs,notEqual:Qs,notEqualStrict:tu,add:eu,addN:nu,addStrict:ru,atan2:iu,div:au,divStrict:ou,floorDiv:su,maximum:uu,maximumStrict:cu,minimum:lu,minimumStrict:fu,mod:hu,modStrict:pu,mul:du,mulStrict:mu,pow:gu,powStrict:yu,squaredDifference:vu,squaredDifferenceStrict:bu,sub:wu,subStrict:_u,elu:ku,leakyRelu:Au,prelu:Cu,relu:Pu,selu:Tu,logicalAnd:xu,logicalNot:Eu,logicalOr:Su,logicalXor:Nu,where:Iu,whereAsync:Ou,buffer:Ra,toPixels:Ta,print:Da,batchToSpaceND:Ma,cast:ja,clone:Ba,cumsum:La,depthToSpace:za,expandDims:Fa,eye:Ua,fromPixels:Va,multinomial:Wa,oneHot:qa,pad:$a,pad1d:Ha,pad2d:Ka,pad3d:Ga,pad4d:Xa,rand:Ya,randomNormal:Ja,randomUniform:Za,reshape:Qa,spaceToBatchND:to,squeeze:eo,stack:no,tile:ro,truncatedNormal:io,unstack:ao,setdiff1dAsync:oo,fill:$e,linspace:He,ones:We,range:Ke,scalar:je,tensor:Me,tensor1d:Be,tensor2d:Le,tensor3d:ze,tensor4d:Fe,tensor5d:Ue,tensor6d:Ve,zeros:qe,onesLike:Ge,zerosLike:Xe,transpose:Ru,softmax:Ce,logSoftmax:Pe,localResponseNormalization:Du,norm:Mu,gather:Lu,unsortedSegmentSum:zu,basicLSTMCell:Fu,multiRNNCell:Uu,movingAverage:Vu,stridedSlice:Wu,topk:qu,scatterND:$u,fft:Hu,ifft:Ku,rfft:Gu,irfft:Xu,sparseToDense:Ju,gatherND:Qu}),xc=function(){function t(){this.blockSize=48,this.firstUse=!0,Lt.get("IS_BROWSER")&&(this.fromPixels2DContext=document.createElement("canvas").getContext("2d"))}return t.prototype.setDataMover=function(t){this.data=new Ye(t)},t.prototype.register=function(t,e,n){if(this.firstUse&&(this.firstUse=!1,Lt.get("IS_NODE")&&Zt("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n")),this.data.has(t))throw new Error("Data buffer is already registered");this.data.set(t,{dtype:n})},t.prototype.write=function(t,e){if(null==e)throw new Error("MathBackendCPU.write(): values can not be null");this.data.get(t).values=e},t.prototype.fromPixels=function(t,e){if(null==t)throw new Error("pixels passed to tf.fromPixels() can not be null");var n,r;if(Lt.get("IS_NODE")&&null==t.getContext)throw new Error("When running in node, pixels must be an HTMLCanvasElement like the one returned by the `canvas` npm package");if(null!=t.getContext)n=t.getContext("2d").getImageData(0,0,t.width,t.height).data;else if(t instanceof ImageData)n=t.data;else{if(!(t instanceof HTMLImageElement||t instanceof HTMLVideoElement))throw new Error("pixels passed to tf.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement or ImageData, but was "+t.constructor.name);if(null==this.fromPixels2DContext)throw new Error("Can't read pixels from HTMLImageElement outside the browser.");this.fromPixels2DContext.canvas.width=t.width,this.fromPixels2DContext.canvas.height=t.height,this.fromPixels2DContext.drawImage(t,0,0,t.width,t.height),n=this.fromPixels2DContext.getImageData(0,0,t.width,t.height).data}if(4===e)r=new Int32Array(n);else{var i=t.width*t.height;r=new Int32Array(i*e);for(var a=0;a<i;a++)for(var o=0;o<e;++o)r[a*e+o]=n[4*a+o]}return ze(r,[t.height,t.width,e],"int32")},t.prototype.read=function(t){return c(this,void 0,void 0,function(){return l(this,function(e){return[2,this.readSync(t)]})})},t.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return"complex64"===n?tn(r.real.dataSync(),r.imag.dataSync()):this.data.get(t).values},t.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}},t.prototype.time=function(t){return c(this,void 0,void 0,function(){var e;return l(this,function(n){return e=J(),t(),[2,{kernelMs:J()-e}]})})},t.prototype.memory=function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},t.prototype.complex=function(t,e){var n=ft.make(t.shape,{},"complex64");return this.data.get(n.dataId).complexTensors={real:Lt.engine.keep(t.clone()),imag:Lt.engine.keep(e.clone())},n},t.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},t.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},t.prototype.assertNotComplex=function(t,e){Array.isArray(t)||(t=[t]),t.forEach(function(t){null!=t&&b("complex64"!==t.dtype,e+" does not support complex64 tensors.")})},t.prototype.slice=function(t,e,n){if(this.assertNotComplex(t,"slice"),Ee(t.shape,e,n)){var r=Se(e,t.strides),i=E(n);return Me(t.dataSync().subarray(r,r+i),n,t.dtype)}for(var a=Ra(n,t.dtype),o=0;o<a.size;++o){var s=a.indexToLoc(o).map(function(t,n){return t+e[n]});a.values[o]=t.get.apply(t,s)}return a.toTensor()},t.prototype.stridedSlice=function(t,e,n,r,i,a,o,s,u){this.assertNotComplex(t,"stridedSlice");var c=we(t.shape,e,n,r,i,a,o,s,u),l=c[0],f=c[1],h=c[2],p=f.filter(function(t,e){return-1===h.indexOf(e)});if(p.some(function(t){return 0===t}))return Me([],p);for(var d=Ra(f,t.dtype),m=0;m<d.size;m++){for(var g=d.indexToLoc(m),y=new Array(g.length),v=0;v<y.length;v++)y[v]=g[v]*r[v]+l[v];d.set.apply(d,[t.get.apply(t,y)].concat(g))}return d.toTensor().reshape(p)},t.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),i=0,a=0;a<t.rank;a++)a!==e&&(r[i++]=t.shape[a]);var o=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)o[e]=a,u[a]=this.slice(t,o,s).reshape(r);return u},t.prototype.reverse=function(t,e){this.assertNotComplex(t,"reverse");for(var n=Ra(t.shape,t.dtype),r=t.buffer(),i=function(i){var a=n.indexToLoc(i),o=a.slice();e.forEach(function(e){return o[e]=t.shape[e]-1-o[e]}),n.set.apply(n,[r.get.apply(r,o)].concat(a))},a=0;a<n.size;a++)i(a);return n.toTensor()},t.prototype.concat=function(t,e){this.assertNotComplex(t,"concat");var n=t.map(function(t){var n=E(t.shape.slice(e));return t.as2D(-1,n)}),r=de(n.map(function(t){return t.shape}),1),i=Ra(r,t[0].dtype).values;if(1===n[0].shape[0]){var a=0;n.forEach(function(t){i.set(t.dataSync(),a),a+=t.size})}else{var o=0;n.forEach(function(t){for(var e=t.dataSync(),n=0,a=0;a<t.shape[0];++a)for(var s=a*r[1]+o,u=0;u<t.shape[1];++u)i[s+u]=e[n++];o+=t.shape[1]})}var s=de(t.map(function(t){return t.shape}),e);return Me(i,s,t[0].dtype)},t.prototype.neg=function(t){return this.assertNotComplex(t,"neg"),this.multiply(je(-1),t)},t.prototype.add=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),function(t,e,n,r){return{real:t+n,imag:e+r}}):this.broadcastedBinaryOp(t,e,_t(t.dtype,e.dtype),function(t,e){return t+e})},t.prototype.addN=function(t){this.assertNotComplex(t,"addN");for(var e=t.map(function(t){return t.dataSync()}),n=Ra(t[0].shape,t[0].dtype),r=n.values,i=0;i<t.length;i++)for(var a=e[i],o=0;o<r.length;o++)r[o]+=a[o];return n.toTensor()},t.prototype.subtract=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),function(t,e,n,r){return{real:t-n,imag:e-r}}):this.broadcastedBinaryOp(t,e,_t(t.dtype,e.dtype),function(t,e){return t-e})},t.prototype.pow=function(t,e){return this.assertNotComplex([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){return Math.pow(t,e)})},t.prototype.batchMatMul=function(t,e,n,r){this.assertNotComplex([t,e],"matMul");for(var i=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],o=r?e.shape[1]:e.shape[2],s=t.shape[0],u=t.dataSync(),c=e.dataSync(),l=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],f=l[0],h=l[1],p=l[2],d=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],m=d[0],g=d[1],y=d[2],v=a*o,b=Ra([s,a,o],t.dtype),w=b.values,_=this.blockSize,x=0;x<s;x++)for(var E=0;E<a;E+=_)for(var S=0;S<o;S+=_)for(var N=0;N<i;N+=_)for(var I=Math.min(E+_,a),O=Math.min(S+_,o),k=Math.min(N+_,i),A=E;A<I;A++)for(var C=S;C<O;C++){for(var P=0,T=N;T<k;T++)P+=u[x*f+A*h+T*p]*c[T*m+C*g+x*y];w[x*v+(A*o+C)]+=P}return b.toTensor()},t.prototype.multiply=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),function(t,e,n,r){return{real:t*n-e*r,imag:t*r+e*n}}):this.broadcastedBinaryOp(t,e,_t(t.dtype,e.dtype),function(t,e){return t*e})},t.prototype.realDivide=function(t,e){return this.assertNotComplex([t,e],"realDivide"),this.broadcastedBinaryOp(t,e,"float32",function(t,e){return t/e})},t.prototype.floorDiv=function(t,e){return this.assertNotComplex([t,e],"floorDiv"),this.broadcastedBinaryOp(t,e,"int32",function(t,e){return Math.floor(t/e)})},t.prototype.sum=function(t,e){this.assertNotComplex(t,"sum"),se("sum",e,t.rank);for(var n=ae(t.shape,e),r=n[0],i=n[1],a=qe(r,_t(t.dtype,"int32")),o=E(i),s=a.dataSync(),u=t.dataSync(),c=0;c<s.length;++c){for(var l=c*o,f=0,h=0;h<o;++h)f+=u[l+h];s[c]=f}return a},t.prototype.prod=function(t,e){this.assertNotComplex(t,"sum");for(var n=ae(t.shape,e),r=n[0],i=n[1],a=qe(r,_t(t.dtype,"int32")),o=E(i),s=a.dataSync(),u=t.dataSync(),c=0;c<s.length;++c){for(var l=c*o,f=1,h=0;h<o;++h)f*=u[l+h];s[c]=f}return a},t.prototype.unsortedSegmentSum=function(t,e,n){this.assertNotComplex(t,"unsortedSegmentSum");for(var r=[],i=t.rank-e.rank,a=0;a<i;++a)e=e.expandDims(a+1);for(a=0;a<n;++a){var o=je(a,"int32"),s=Ws(o,e).asType("float32").mul(t).sum(0);r.push(s)}return no(r)},t.prototype.argMin=function(t,e){this.assertNotComplex(t,"argMin");var n=[e];se("argMin",n,t.rank);for(var r=ae(t.shape,n),i=r[0],a=r[1],o=qe(i,"int32"),s=E(a),u=o.dataSync(),c=t.dataSync(),l=0;l<u.length;++l){for(var f=l*s,h=c[f],p=0,d=0;d<s;++d){var m=c[f+d];m<h&&(h=m,p=d)}u[l]=p}return o},t.prototype.argMax=function(t,e){this.assertNotComplex(t,"argMax");var n=[e];se("argMax",n,t.rank);for(var r=ae(t.shape,n),i=r[0],a=r[1],o=qe(i,"int32"),s=E(a),u=o.dataSync(),c=t.dataSync(),l=0;l<u.length;++l){for(var f=l*s,h=c[f],p=0,d=0;d<s;++d){var m=c[f+d];m>h&&(h=m,p=d)}u[l]=p}return o},t.prototype.cumsum=function(t,e,n,r){if(this.assertNotComplex(t,"cumsum"),e!==t.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(t.rank-1)+" but got axis="+e);for(var i=_t(t.dtype,"int32"),a=qe(t.shape,i),o=a.dataSync(),s=t.dataSync(),u=t.shape[t.rank-1],c=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},l=0;l<s.length;l+=u)for(var f=0;f<u;f++){var h=c(l,f);if(0===f)o[h]=n?0:s[h];else{var p=c(l,f-1);o[h]=n?s[p]+o[p]:s[h]+o[p]}}return a},t.prototype.equal=function(t,e){return this.assertNotComplex([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t===e?1:0})},t.prototype.notEqual=function(t,e){return this.assertNotComplex([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t!==e?1:0})},t.prototype.less=function(t,e){return this.assertNotComplex([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t<e?1:0})},t.prototype.lessEqual=function(t,e){return this.assertNotComplex([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t<=e?1:0})},t.prototype.greater=function(t,e){return this.assertNotComplex([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t>e?1:0})},t.prototype.greaterEqual=function(t,e){return this.assertNotComplex([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t>=e?1:0})},t.prototype.logicalNot=function(t){this.assertNotComplex(t,"logicalNot");for(var e=t.dataSync(),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return ft.make(t.shape,{values:n},"bool")},t.prototype.logicalAnd=function(t,e){return this.assertNotComplex([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t&&e})},t.prototype.logicalOr=function(t,e){return this.assertNotComplex([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t||e})},t.prototype.select=function(t,e,n){this.assertNotComplex([t,e,n],"select");for(var r=t.dataSync(),i=e.dataSync(),a=n.dataSync(),o=qe(e.shape,_t(e.dtype,n.dtype)),s=o.dataSync(),u=0,c=0===t.rank||t.rank>1||1===e.rank?1:e.shape[1],l=0;l<r.length;l++)for(var f=0;f<c;f++)1===r[l]?s[u++]=i[l]:s[u++]=a[l];return o},t.prototype.where=function(t){this.assertNotComplex([t],"where");var e=t.dataSync();return so(t.shape,e)},t.prototype.topk=function(t,e,n){return this.assertNotComplex(t,"topk"),un(t.dataSync(),t.shape,t.dtype,e)},t.prototype.min=function(t,e){this.assertNotComplex(t,"min"),se("min",e,t.rank);for(var n=ae(t.shape,e),r=n[0],i=n[1],a=qe(r,t.dtype),o=E(i),s=a.dataSync(),u=t.dataSync(),c=0;c<s.length;++c){for(var l=c*o,f=u[l],h=0;h<o;++h){var p=u[l+h];p<f&&(f=p)}s[c]=f}return a},t.prototype.minimum=function(t,e){return this.assertNotComplex([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){return Math.min(t,e)})},t.prototype.mod=function(t,e){return this.assertNotComplex([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})},t.prototype.max=function(t,e){this.assertNotComplex(t,"max"),se("max",e,t.rank);for(var n=ae(t.shape,e),r=n[0],i=n[1],a=qe(r,t.dtype),o=E(i),s=a.dataSync(),u=t.dataSync(),c=0;c<s.length;++c){for(var l=c*o,f=u[l],h=0;h<o;++h){var p=u[l+h];p>f&&(f=p)}s[c]=f}return a},t.prototype.maximum=function(t,e){return this.assertNotComplex([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){return Math.max(t,e)})},t.prototype.all=function(t,e){this.assertNotComplex(t,"all"),se("all",e,t.rank);for(var n=ae(t.shape,e),r=n[0],i=n[1],a=qe(r,t.dtype),o=E(i),s=a.dataSync(),u=t.dataSync(),c=0;c<s.length;++c){for(var l=c*o,f=u[l],h=0;h<o;++h){var p=u[l+h];f=f&&p}s[c]=f}return a},t.prototype.any=function(t,e){this.assertNotComplex(t,"any"),se("any",e,t.rank);for(var n=ae(t.shape,e),r=n[0],i=n[1],a=qe(r,t.dtype),o=E(i),s=a.dataSync(),u=t.dataSync(),c=0;c<s.length;++c){for(var l=c*o,f=u[l],h=0;h<o;++h){var p=u[l+h];f=f||p}s[c]=f}return a},t.prototype.squaredDifference=function(t,e){return this.assertNotComplex([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){var n=t-e;return n*n})},t.prototype.ceil=function(t){this.assertNotComplex(t,"ceil");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return ft.make(t.shape,{values:n})},t.prototype.floor=function(t){this.assertNotComplex(t,"floor");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return ft.make(t.shape,{values:n})},t.prototype.sign=function(t){this.assertNotComplex(t,"x");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return ft.make(t.shape,{values:n})},t.prototype.round=function(t){this.assertNotComplex(t,"round");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=Math.floor(e[r]);e[r]-i<.5?n[r]=Math.floor(e[r]):e[r]-i>.5?n[r]=Math.ceil(e[r]):n[r]=i%2==0?i:i+1}return ft.make(t.shape,{values:n})},t.prototype.exp=function(t){this.assertNotComplex(t,"exp");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return ft.make(t.shape,{values:n})},t.prototype.expm1=function(t){this.assertNotComplex(t,"expm1");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return ft.make(t.shape,{values:n})},t.prototype.log=function(t){this.assertNotComplex(t,"log");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=e[r];n[r]=Math.log(i)}return ft.make(t.shape,{values:n})},t.prototype.log1p=function(t){this.assertNotComplex(t,"log1p");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=e[r];n[r]=Math.log1p(i)}return ft.make(t.shape,{values:n})},t.prototype.sqrt=function(t){this.assertNotComplex(t,"sqrt");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=e[r];n[r]=Math.sqrt(i)}return ft.make(t.shape,{values:n})},t.prototype.rsqrt=function(t){this.assertNotComplex(t,"rsqrt");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=e[r];n[r]=1/Math.sqrt(i)}return ft.make(t.shape,{values:n})},t.prototype.square=function(t){this.assertNotComplex(t,"square");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=e[r];n[r]=i*i}return ft.make(t.shape,{values:n})},t.prototype.reciprocal=function(t){this.assertNotComplex(t,"reciprocal");for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return ft.make(t.shape,{values:n})},t.prototype.relu=function(t){this.assertNotComplex(t,"relu");for(var e=qe(t.shape,t.dtype),n=e.dataSync(),r=t.dataSync(),i=0;i<r.length;++i)n[i]=Math.max(0,r[i]);return e},t.prototype.prelu=function(t,e){return this.assertNotComplex([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){return t<0?e*t:t})},t.prototype.elu=function(t){this.assertNotComplex(t,"elu");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r){var i=n[r];e[r]=i>=0?i:Math.exp(i)-1}return ft.make(t.shape,{values:e})},t.prototype.eluDer=function(t,e){this.assertNotComplex([t,e],"eluDer");for(var n=new Float32Array(e.size),r=e.dataSync(),i=t.dataSync(),a=0;a<r.length;++a){var o=r[a];n[a]=o>=1?i[a]:i[a]*(o+1)}return ft.make(e.shape,{values:n})},t.prototype.selu=function(t){this.assertNotComplex(t,"selu");for(var e=ia,n=aa,r=new Float32Array(t.size),i=t.dataSync(),a=0;a<i.length;++a){var o=i[a];r[a]=o>=0?n*o:e*(Math.exp(o)-1)}return ft.make(t.shape,{values:r})},t.prototype.clip=function(t,e,n){this.assertNotComplex(t,"clip");for(var r=new Float32Array(t.size),i=t.dataSync(),a=0;a<i.length;++a){var o=i[a];r[a]=o>n?n:o<e?e:o}return ft.make(t.shape,{values:r})},t.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return ft.make(t.shape,{values:e})},t.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<t.size;++r){var i=n[2*r],a=n[2*r+1];e[r]=Math.hypot(i,a)}return ft.make(t.shape,{values:e})},t.prototype.int=function(t){this.assertNotComplex(t,"int");for(var e=new Int32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=n[r];return ft.make(t.shape,{values:e},"int32")},t.prototype.sigmoid=function(t){this.assertNotComplex(t,"sigmoid");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return ft.make(t.shape,{values:e})},t.prototype.softplus=function(t){this.assertNotComplex(t,"softplus");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=t.dataSync(),i=0;i<r.length;++i){var a,o=r[i]>-e,s=r[i]<e,u=Math.exp(r[i]);a=s?u:o?r[i]:Math.log(1+u),n[i]=a}return ft.make(t.shape,{values:n})},t.prototype.sin=function(t){this.assertNotComplex(t,"sin");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return ft.make(t.shape,{values:e})},t.prototype.cos=function(t){this.assertNotComplex(t,"cos");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return ft.make(t.shape,{values:e})},t.prototype.tan=function(t){this.assertNotComplex(t,"tan");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return ft.make(t.shape,{values:e})},t.prototype.asin=function(t){this.assertNotComplex(t,"asin");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return ft.make(t.shape,{values:e})},t.prototype.acos=function(t){this.assertNotComplex(t,"acos");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return ft.make(t.shape,{values:e})},t.prototype.atan=function(t){this.assertNotComplex(t,"atan");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return ft.make(t.shape,{values:e})},t.prototype.atan2=function(t,e){return this.assertNotComplex([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){return Math.atan2(t,e)})},t.prototype.sinh=function(t){this.assertNotComplex(t,"sinh");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return ft.make(t.shape,{values:e})},t.prototype.cosh=function(t){this.assertNotComplex(t,"cosh");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return ft.make(t.shape,{values:e})},t.prototype.tanh=function(t){this.assertNotComplex(t,"tanh");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=I(n[r]);return ft.make(t.shape,{values:e})},t.prototype.asinh=function(t){this.assertNotComplex(t,"asinh");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return ft.make(t.shape,{values:e})},t.prototype.acosh=function(t){this.assertNotComplex(t,"acosh");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return ft.make(t.shape,{values:e})},t.prototype.atanh=function(t){this.assertNotComplex(t,"atanh");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return ft.make(t.shape,{values:e})},t.prototype.erf=function(t){this.assertNotComplex(t,"erf");for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r){var i=n[r],a=1/(1+.3275911*i);e[r]=1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-i*i)}return ft.make(t.shape,{values:e})},t.prototype.step=function(t,e){void 0===e&&(e=0),this.assertNotComplex(t,"step");for(var n=new Float32Array(t.size),r=t.dataSync(),i=0;i<r.length;++i){var a=r[i];isNaN(a)?n[i]=NaN:n[i]=a>0?1:e}return ft.make(t.shape,{values:n})},t.prototype.conv2d=function(t,e,n){this.assertNotComplex([t,e],"conv2d");for(var r=n.filterHeight,i=n.filterWidth,a=n.dilationHeight,o=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=Ra(n.outShape,t.dtype),l=t.dataSync(),f=e.dataSync(),h=c.values,p=0;p<n.batchSize;++p)for(var d=p*t.strides[0],m=p*c.strides[0],g=0;g<n.outHeight;++g)for(var y=m+g*c.strides[1],v=g*n.strideHeight-s,b=0;b<r;b++){var w=v+b*a;if(!(w<0||w>=n.inHeight))for(var _=b*e.strides[0],x=d+w*t.strides[1],E=0;E<n.outWidth;++E)for(var S=y+E*n.outChannels,N=E*n.strideWidth-u,I=0;I<i;I++){var O=N+I*o;if(!(O<0||O>=n.inWidth))for(var k=_+I*e.strides[1],A=x+O*n.inChannels,C=k,P=0;P<n.inChannels;++P){for(var T=l[A+P],R=0;R<n.outChannels;++R)h[S+R]+=T*f[C+R];C+=n.outChannels}}}return c.toTensor()},t.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,i=n.filterHeight,a=n.filterWidth,o=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,f=n.padInfo.top,h=Ra(n.outShape,t.dtype),p=t.dataSync(),d=e.dataSync(),m=h.values,g=0;g<n.batchSize;++g)for(var y=g*t.strides[0],v=g*h.strides[0],b=0;b<n.outDepth;++b)for(var w=v+b*h.strides[1],_=b*n.strideDepth-c,x=0;x<r;x++){var E=_+x*o;if(!(E<0||E>=n.inDepth))for(var S=x*e.strides[0],N=y+E*t.strides[1],I=0;I<n.outHeight;++I)for(var O=w+I*h.strides[2],k=I*n.strideHeight-f,A=0;A<i;A++){var C=k+A*s;if(!(C<0||C>=n.inHeight))for(var P=S+A*e.strides[1],T=N+C*t.strides[2],R=0;R<n.outWidth;++R)for(var D=O+R*n.outChannels,M=R*n.strideWidth-l,j=0;j<a;j++){var B=M+j*u;if(!(B<0||B>=n.inWidth))for(var L=P+j*e.strides[2],z=T+B*n.inChannels,F=L,U=0;U<n.inChannels;++U){for(var V=p[z+U],W=0;W<n.outChannels;++W)m[D+W]+=V*d[F+W];F+=n.outChannels}}}}return h.toTensor()},t.prototype.conv2dDerInput=function(t,e,n){this.assertNotComplex([t,e],"conv2dDerInput");for(var r=Ra(n.inShape,"float32"),i=r.values,a=r.strides,o=a[0],s=a[1],u=a[2],c=t.dataSync(),l=t.strides,f=l[0],h=l[1],p=l[2],d=e.dataSync(),m=e.strides,g=m[0],y=m[1],v=m[2],b=n.batchSize,w=n.filterHeight,_=n.filterWidth,x=n.inChannels,E=n.inHeight,S=n.inWidth,N=n.outChannels,I=n.outHeight,O=n.outWidth,k=n.strideHeight,A=n.strideWidth,C=w-1-n.padInfo.top,P=_-1-n.padInfo.left,T=0;T<b;++T)for(var R=0;R<x;++R)for(var D=0;D<E;++D)for(var M=D-C,j=Math.max(0,Math.ceil(M/k)),B=Math.min(I,(w+M)/k),L=0;L<S;++L){for(var z=L-P,F=Math.max(0,Math.ceil(z/A)),U=Math.min(O,(_+z)/A),V=0,W=j;W<B;++W)for(var q=W*k-M,$=F;$<U;++$)for(var H=f*T+h*W+p*$,K=g*(w-1-q)+y*(_-1-($*A-z))+v*R,G=0;G<N;++G)V+=c[H+G]*d[K+G];i[o*T+s*D+u*L+R]=V}return r.toTensor()},t.prototype.conv3dDerInput=function(t,e,n){for(var r=Ra(n.inShape,"float32"),i=r.values,a=r.strides,o=a[0],s=a[1],u=a[2],c=a[3],l=t.dataSync(),f=t.strides,h=f[0],p=f[1],d=f[2],m=f[3],g=e.dataSync(),y=e.strides,v=y[0],b=y[1],w=y[2],_=y[3],x=n.batchSize,E=n.filterDepth,S=n.filterHeight,N=n.filterWidth,I=n.inChannels,O=n.inDepth,k=n.inHeight,A=n.inWidth,C=n.outChannels,P=n.outDepth,T=n.outHeight,R=n.outWidth,D=n.strideDepth,M=n.strideHeight,j=n.strideWidth,B=E-1-n.padInfo.front,L=S-1-n.padInfo.top,z=N-1-n.padInfo.left,F=0;F<x;++F)for(var U=0;U<I;++U)for(var V=0;V<O;++V)for(var W=V-B,q=Math.max(0,Math.ceil(W/D)),$=Math.min(P,(E+W)/D),H=0;H<k;++H)for(var K=H-L,G=Math.max(0,Math.ceil(K/M)),X=Math.min(T,(S+K)/M),Y=0;Y<A;++Y){for(var J=Y-z,Z=Math.max(0,Math.ceil(J/j)),Q=Math.min(R,(N+J)/j),tt=0,et=q;et<$;++et)for(var nt=et*D-W,rt=G;rt<X;++rt)for(var it=rt*M-K,at=Z;at<Q;++at)for(var ot=h*F+p*et+d*rt+m*at,st=v*(E-1-nt)+b*(S-1-it)+w*(N-1-(at*j-J))+_*U,ut=0;ut<C;++ut)tt+=l[ot+ut]*g[st+ut];i[o*F+s*V+u*H+c*Y+U]=tt}return r.toTensor()},t.prototype.conv2dDerFilter=function(t,e,n){this.assertNotComplex([t,e],"conv2dDerFilter");for(var r=n.strideHeight,i=n.strideWidth,a=n.filterHeight,o=n.filterWidth,s=Ra(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,l=0;l<a;++l)for(var f=Math.max(0,Math.ceil((c-l)/r)),h=Math.min(n.outHeight,(n.inHeight+c-l)/r),p=0;p<o;++p)for(var d=Math.max(0,Math.ceil((u-p)/i)),m=Math.min(n.outWidth,(n.inWidth+u-p)/i),g=0;g<n.inChannels;++g)for(var y=0;y<n.outChannels;++y){for(var v=0,b=0;b<n.batchSize;++b)for(var w=f;w<h;++w)for(var _=l+w*r-c,x=d;x<m;++x){var E=p+x*i-u;v+=t.get(b,_,E,g)*e.get(b,w,x,y)}s.set(v,l,p,g,y)}return s.toTensor()},t.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,i=n.strideHeight,a=n.strideWidth,o=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=Ra(n.filterShape,"float32"),l=c.values,f=c.strides,h=f[0],p=f[1],d=f[2],m=f[3],g=e.dataSync(),y=e.strides,v=y[0],b=y[1],w=y[2],_=y[3],x=t.dataSync(),E=t.strides,S=E[0],N=E[1],I=E[2],O=E[3],k=n.padInfo.front,A=n.padInfo.left,C=n.padInfo.top,P=0;P<o;++P)for(var T=Math.max(0,Math.ceil((k-P)/r)),R=Math.min(n.outDepth,(n.inDepth+k-P)/r),D=P*h,M=0;M<s;++M)for(var j=Math.max(0,Math.ceil((C-M)/i)),B=Math.min(n.outHeight,(n.inHeight+C-M)/i),L=M*p+D,z=0;z<u;++z)for(var F=Math.max(0,Math.ceil((A-z)/a)),U=Math.min(n.outWidth,(n.inWidth+A-z)/a),V=z*d+L,W=0;W<n.inChannels;++W)for(var q=W*m+V,$=0;$<n.outChannels;++$){for(var H=0,K=0;K<n.batchSize;++K)for(var G=K*S,X=K*v,Y=T;Y<R;++Y)for(var J=(P+Y*r-k)*N+G,Z=Y*b+X,Q=j;Q<B;++Q)for(var tt=(M+Q*i-C)*I+J,et=Q*w+Z,nt=F;nt<U;++nt){var rt=nt*_+et;H+=x[(z+nt*a-A)*O+tt+W]*g[rt+$]}l[q+$]=H}return c.toTensor()},t.prototype.depthwiseConv2D=function(t,e,n){this.assertNotComplex([t,e],"depthwiseConv2D");for(var r=n.filterHeight,i=n.filterWidth,a=n.dilationHeight,o=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=Ra(n.outShape,t.dtype),f=t.dataSync(),h=e.dataSync(),p=l.values,d=0;d<n.batchSize;++d)for(var m=d*t.strides[0],g=d*l.strides[0],y=0;y<n.outHeight;++y)for(var v=g+y*l.strides[1],b=y*n.strideHeight-s,w=0;w<r;++w){var _=b+w*a;if(!(_<0||_>=n.inHeight))for(var x=w*e.strides[0],E=m+_*t.strides[1],S=0;S<n.outWidth;++S)for(var N=v+S*l.strides[2],I=S*n.strideWidth-u,O=0;O<i;++O){var k=I+O*o;if(!(k<0||k>=n.inWidth))for(var A=x+O*e.strides[1],C=E+k*n.inChannels,P=N,T=A,R=0;R<n.inChannels;++R){for(var D=f[C+R],M=0;M<c;++M)p[P+M]+=D*h[T+M];P+=c,T+=c}}}return l.toTensor()},t.prototype.depthwiseConv2DDerInput=function(t,e,n){this.assertNotComplex([t,e],"depthwiseConv2DDerInput");for(var r=Ra(n.inShape,"float32"),i=r.values,a=r.strides,o=a[0],s=a[1],u=a[2],c=t.dataSync(),l=t.strides,f=l[0],h=l[1],p=l[2],d=e.dataSync(),m=e.strides,g=m[0],y=m[1],v=m[2],b=n.batchSize,w=n.filterHeight,_=n.filterWidth,x=n.inChannels,E=n.inHeight,S=n.inWidth,N=n.outChannels,I=n.outHeight,O=n.outWidth,k=n.strideHeight,A=n.strideWidth,C=w-1-n.padInfo.top,P=_-1-n.padInfo.left,T=N/x,R=0;R<b;++R)for(var D=0;D<x;++D)for(var M=0;M<E;++M)for(var j=M-C,B=Math.max(0,Math.ceil(j/k)),L=Math.min(I,(w+j)/k),z=0;z<S;++z){for(var F=z-P,U=Math.max(0,Math.ceil(F/A)),V=Math.min(O,(_+F)/A),W=0,q=B;q<L;++q)for(var $=q*k-j,H=U;H<V;++H)for(var K=f*R+h*q+p*H,G=g*(w-1-$)+y*(_-1-(H*A-F))+v*D,X=0;X<T;++X)W+=c[K+(D*T+X)]*d[G+X];i[o*R+s*M+u*z+D]=W}return r.toTensor()},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){this.assertNotComplex([t,e],"depthwiseConv2DDerFilter");for(var r=n.strideHeight,i=n.strideWidth,a=n.filterHeight,o=n.filterWidth,s=Ra(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,f=0;f<a;++f)for(var h=Math.max(0,Math.ceil((c-f)/r)),p=Math.min(n.outHeight,(n.inHeight+c-f)/r),d=0;d<o;++d)for(var m=Math.max(0,Math.ceil((u-d)/i)),g=Math.min(n.outWidth,(n.inWidth+u-d)/i),y=0;y<n.outChannels;++y){for(var v=Math.trunc(y/l),b=y%l,w=0,_=0;_<n.batchSize;++_)for(var x=h;x<p;++x)for(var E=f+x*r-c,S=m;S<g;++S){var N=d+S*i-u;w+=t.get(_,E,N,v)*e.get(_,x,S,y)}s.set(w,f,d,v,b)}return s.toTensor()},t.prototype.tile=function(t,e){this.assertNotComplex(t,"tile");for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var i=Ra(n,t.dtype),a=t.buffer();for(r=0;r<i.values.length;++r){for(var o=i.indexToLoc(r),s=new Array(t.rank),u=0;u<s.length;u++)s[u]=o[u]%t.shape[u];var c=a.locToIndex(s);i.values[r]=a.values[c]}return i.toTensor()},t.prototype.pad=function(t,e,n){this.assertNotComplex(t,"pad");var r=e.map(function(e,n){return e[0]+t.shape[n]+e[1]}),i=e.map(function(t){return t[0]}),a=t.buffer(),o=Ra(r,t.dtype);0!==n&&o.values.fill(n);for(var s=0;s<t.size;s++){var u=a.indexToLoc(s),c=u.map(function(t,e){return t+i[e]});o.set.apply(o,[t.get.apply(t,u)].concat(c))}return o.toTensor()},t.prototype.transpose=function(t,e){this.assertNotComplex(t,"transpose");for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[e[r]];var i=t.dataSync(),a=Ra(n,t.dtype),o=t.buffer();for(r=0;r<t.size;++r){for(var s=o.indexToLoc(r),u=new Array(s.length),c=0;c<u.length;c++)u[c]=s[e[c]];var l=a.locToIndex(u);a.values[l]=i[r]}return a.toTensor()},t.prototype.gather=function(t,e,n){this.assertNotComplex([t,e],"gather");var r=t.shape.slice(),i=e.dataSync();r[n]=i.length;for(var a=Ra(r,t.dtype),o=t.buffer(),s=0;s<a.size;++s){var u=a.indexToLoc(s),c=u.slice();c[n]=i[u[n]];var l=o.locToIndex(c);a.values[s]=o.values[l]}return a.toTensor()},t.prototype.batchToSpaceND=function(t,e,n){this.assertNotComplex([t],"batchToSpaceND");var r=e.reduce(function(t,e){return t*e}),i=Qt(t.shape,e,r),a=te(i.length,e.length),o=ee(t.shape,e,r),s=ne(n,e.length),u=re(o,n,e.length);return t.reshape(i).transpose(a).reshape(o).slice(s,u)},t.prototype.spaceToBatchND=function(t,e,n){this.assertNotComplex([t],"spaceToBatchND");var r=e.reduce(function(t,e){return t*e}),i=[[0,0]];i.push.apply(i,n);for(var a=1+e.length;a<t.shape.length;++a)i.push([0,0]);var o=t.pad(i),s=Qt(o.shape,e,r,!1),u=te(s.length,e.length,!1),c=ee(o.shape,e,r,!1);return o.reshape(s).transpose(u).reshape(c)},t.prototype.pool=function(t,e,n){this.assertNotComplex(t,"pool");for(var r=e.strideHeight,i=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,f="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,h=t.dataSync(),p=Ra(e.outShape,t.dtype),d=p.values,m=e.outShape[1]*e.outShape[2]*e.outShape[3],g=e.outShape[2]*e.outShape[3],y=e.outShape[3],v=0;v<e.batchSize;++v)for(var b=v*m,w=v*t.strides[0],_=0;_<e.inChannels;++_)for(var x=0;x<e.outHeight;++x)for(var E=x*r-c,S=Math.max(0,E),N=Math.min(e.inHeight,s+E),I=b+x*g,O=0;O<e.outWidth;++O){for(var k=O*i-l,A=Math.max(0,k),C=Math.min(e.inWidth,u+k),P=f,T=0,R=0,D=S;D<N;D+=a){for(var M=w+D*t.strides[1],j=A;j<C;j+=o){var B=h[M+j*t.strides[2]+_];"max"===n&&B>P?P=B:"avg"===n&&(T+=B,R++)}if(isNaN(P))break}d[I+O*y+_]="avg"===n?T/R:P}return p.toTensor()},t.prototype.maxPool=function(t,e){return this.pool(t,e,"max")},t.prototype.maxPoolPositions=function(t,e){for(var n=Ra(e.outShape,"int32"),r=e.strideHeight,i=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,f=0;f<e.batchSize;++f)for(var h=0;h<e.inChannels;++h)for(var p=0;p<e.outHeight;++p){for(var d=p*r-c,m=d;m<0;)m+=a;for(var g=Math.min(e.inHeight,s+d),y=0;y<e.outWidth;++y){for(var v=y*i-l,b=v;b<0;)b+=o;for(var w=Math.min(e.inWidth,u+v),_=Number.NEGATIVE_INFINITY,x=-1,E=m;E<g;E+=a)for(var S=E-d,N=b;N<w;N+=o){var I=N-v,O=t.get(f,E,N,h);O>_&&(_=O,x=S*u+I)}n.set(x,f,p,y,h)}}return n.toTensor()},t.prototype.maxPoolBackprop=function(t,e,n,r){this.assertNotComplex([e,n],"maxPoolBackprop");for(var i=this.maxPoolPositions(e,r),a=r.strideHeight,o=r.strideWidth,s=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,l=r.effectiveFilterWidth,f=l-1-r.padInfo.left,h=c-1-r.padInfo.top,p=Ra(e.shape,"float32"),d=0;d<r.batchSize;++d)for(var m=0;m<r.inChannels;++m)for(var g=0;g<r.inHeight;++g)for(var y=0;y<r.inWidth;++y){for(var v=g-h,b=y-f,w=0,_=0;_<c;_+=s){var x=(v+_)/a;if(!(x<0||x>=r.outHeight||Math.floor(x)!==x))for(var E=0;E<l;E+=u){var S=(b+E)/o;if(!(S<0||S>=r.outWidth||Math.floor(S)!==S)){var N=c*l-1-i.get(d,x,S,m)===_*l+E?1:0;0!==N&&(w+=t.get(d,x,S,m)*N)}}}p.set(w,d,g,y,m)}return p.toTensor()},t.prototype.avgPoolBackprop=function(t,e,n){this.assertNotComplex([t,e],"avgPoolBackprop");for(var r=n.strideHeight,i=n.strideWidth,a=n.filterHeight,o=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,f=l-1-n.padInfo.left,h=c-1-n.padInfo.top,p=Ra(e.shape,"float32"),d=1/(a*o),m=0;m<n.batchSize;++m)for(var g=0;g<n.inChannels;++g)for(var y=0;y<n.inHeight;++y)for(var v=0;v<n.inWidth;++v){for(var b=y-h,w=v-f,_=0,x=0;x<c;x+=s){var E=(b+x)/r;if(!(E<0||E>=n.outHeight||Math.floor(E)!==E))for(var S=0;S<l;S+=u){var N=(w+S)/i;N<0||N>=n.outWidth||Math.floor(N)!==N||(_+=t.get(m,E,N,g))}}p.set(_*d,m,y,v,g)}return p.toTensor()},t.prototype.cast=function(t,e){return Ze(t,e,this)},t.prototype.reshape=function(t,e){return Qe(t,e)},t.prototype.avgPool=function(t,e){return this.assertNotComplex(t,"avgPool"),this.pool(t,e,"avg").toFloat()},t.prototype.resizeBilinear=function(t,e,n,r){this.assertNotComplex(t,"resizeBilinear");for(var i=t.shape,a=i[0],o=i[1],s=i[2],u=i[3],c=t.dataSync(),l=new Float32Array(E([a,e,n,u])),f=[r&&e>1?o-1:o,r&&n>1?s-1:s],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=0,d=f[0]/h[0],m=f[1]/h[1],g=0;g<a;g++)for(var y=0;y<e;y++)for(var v=d*y,b=Math.floor(v),w=v-b,_=Math.min(o-1,Math.ceil(v)),x=g*t.strides[0]+b*t.strides[1],S=g*t.strides[0]+_*t.strides[1],N=0;N<n;N++)for(var I=m*N,O=Math.floor(I),k=I-O,A=Math.min(s-1,Math.ceil(I)),C=x+O*t.strides[2],P=S+O*t.strides[2],T=x+ +A*t.strides[2],R=S+A*t.strides[2],D=0;D<u;D++){var M=c[C+D],j=c[P+D],B=M+(c[T+D]-M)*k,L=B+(j+(c[R+D]-j)*k-B)*w;l[p++]=L}return Me(l,[a,e,n,u])},t.prototype.resizeBilinearBackprop=function(t,e,n){this.assertNotComplex([t,e],"resizeBilinearBackprop");for(var r=e.shape,i=r[0],a=r[1],o=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],f=new Float32Array(i*a*o*s),h=[n&&c>1?a-1:a,n&&l>1?o-1:o],p=[n&&c>1?c-1:c,n&&l>1?l-1:l],d=h[0]/p[0],m=h[1]/p[1],g=t.dataSync(),y=0,v=0;v<i;v++)for(var b=v*e.strides[0],w=0;w<c;w++)for(var _=w*d,x=Math.floor(_),E=Math.min(Math.ceil(_),a-1),S=b+x*e.strides[1],N=b+E*e.strides[1],I=_-x,O=1-I,k=0;k<l;k++)for(var A=k*m,C=Math.floor(A),P=Math.min(Math.ceil(A),o-1),T=A-C,R=1-T,D=S+C*e.strides[2],M=S+P*e.strides[2],j=N+C*e.strides[2],B=N+P*e.strides[2],L=O*R,z=O*T,F=I*R,U=I*T,V=0;V<s;V++){var W=g[y++];f[D+V]+=W*L,f[M+V]+=W*z,f[j+V]+=W*F,f[B+V]+=W*U}return Fe(f,[i,o,a,s],e.dtype)},t.prototype.resizeNearestNeighbor=function(t,e,n,r){this.assertNotComplex(t,"resizeNearestNeighbor");for(var i=t.shape,a=i[0],o=i[1],s=i[2],u=i[3],c=t.dataSync(),l=new Float32Array(a*e*n*u),f=[r&&e>1?o-1:o,r&&n>1?s-1:s],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=f[0]/h[0],d=f[1]/h[1],m=0,g=0;g<a;g++)for(var y=g*t.strides[0],v=0;v<e;v++)for(var b=p*v,w=y+Math.min(o-1,r?Math.round(b):Math.floor(b))*t.strides[1],_=0;_<n;_++)for(var x=d*_,E=w+Math.min(s-1,r?Math.round(x):Math.floor(x))*t.strides[2],S=0;S<u;S++){var N=c[E+S];l[m++]=N}return Me(l,[a,e,n,u],t.dtype)},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){this.assertNotComplex([t,e],"resizeNearestNeighborBackprop");for(var r=e.shape,i=r[0],a=r[1],o=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],f=new Float32Array(i*a*o*s),h=t.dataSync(),p=[n&&c>1?a-1:a,n&&l>1?o-1:o],d=[n&&c>1?c-1:c,n&&l>1?l-1:l],m=p[0]/d[0],g=p[1]/d[1],y=1/m,v=1/g,b=2*Math.ceil(y)+2,w=2*Math.ceil(v)+2,_=0;_<i;_++)for(var x=_*e.strides[0],E=0;E<a;E++)for(var S=x+E*e.strides[1],N=Math.floor(E*y),I=Math.floor(N-b/2),O=0;O<o;O++)for(var k=S+O*e.strides[2],A=Math.floor(O*v),C=Math.floor(A-w/2),P=0;P<s;P++){for(var T=0,R=0;R<b;R++){var D=R+I;if(!(D<0||D>=c)){var M=x+D*t.strides[1],j=D*m;if(E===Math.min(a-1,n?Math.round(j):Math.floor(j)))for(var B=0;B<w;B++){var L=B+C;if(!(L<0||L>=l)){var z=M+L*t.strides[2],F=L*g;O===Math.min(o-1,n?Math.round(F):Math.floor(F))&&(T+=h[z+P])}}}}f[k+P]=T}return Fe(f,e.shape,e.dtype)},t.prototype.batchNormalization=function(t,e,n,r,i,a){this.assertNotComplex([t,e,n,i,a],"batchNormalization");for(var o=t.dataSync(),s=e.dataSync(),u=n.dataSync(),c=i?i.dataSync():new Float32Array([1]),l=a?a.dataSync():new Float32Array([0]),f=new Float32Array(o.length),h=l.length,p=c.length,d=u.length,m=s.length,g=0,y=0,v=0,b=0,w=0;w<o.length;++w)f[w]=l[g++]+(o[w]-s[y++])*c[v++]/Math.sqrt(u[b++]+r),g>=h&&(g=0),y>=m&&(y=0),v>=p&&(v=0),b>=d&&(b=0);return Fe(f,t.shape)},t.prototype.localResponseNormalization4D=function(t,e,n,r,i){this.assertNotComplex(t,"localResponseNormalization4D");var a=t.shape[3],o=a-1,s=t.dataSync(),u=E(t.shape),c=new Float32Array(u);function l(t){for(var n=t%a,r=t-n+Math.max(0,n-e),i=t-n+Math.min(n+e,o),u=0;r<=i;r++){var c=s[r];u+=c*c}return u}for(var f=0;f<u;f++){var h=l(f),p=s[f]*Math.pow(n+r*h,-i);c[f]=p}return Fe(c,t.shape)},t.prototype.LRNGrad=function(t,e,n,r,i,a,o){this.assertNotComplex(t,"LRNGrad");for(var s=t.shape[3],u=t.dataSync(),c=e.dataSync(),l=n.dataSync(),f=new Float32Array(E(t.shape)),h=E(t.shape),p=0;p<h;p++){for(var d=p%s,m=p-d+Math.max(0,d-r),g=p-d+Math.min(s,d+r+1),y=0,v=m;v<g;v++)y+=Math.pow(c[v],2);for(y=a*y+i,v=m;v<g;v++){var b=-2*a*o*c[v]*l[p]/y;p===v&&(b+=Math.pow(y,-o)),b*=u[p],f[v]+=b}}return Fe(f,t.shape)},t.prototype.multinomial=function(t,e,n,r){this.assertNotComplex(t,"multinomial");for(var i=e?t:Ce(t),a=i.shape[0],o=i.shape[1],s=qe([a,n],"int32"),u=s.dataSync(),c=i.dataSync(),l=0;l<a;++l){var f=l*o,h=new Float32Array(o-1);h[0]=c[f];for(var p=1;p<h.length;++p)h[p]=h[p-1]+c[f+p];for(var d=Ca(r.toString()),m=l*n,g=0;g<n;++g){var y=d();u[m+g]=h.length;for(var v=0;v<h.length;v++)if(y<h[v]){u[m+g]=v;break}}}return s},t.prototype.oneHot=function(t,e,n,r){this.assertNotComplex(t,"oneHot");var i=new Float32Array(t.size*e);i.fill(r);for(var a=0;a<t.size;++a)t.get(a)>=0&&t.get(a)<e&&(i[a*e+t.get(a)]=n);return Le(i,[t.size,e],"int32")},t.prototype.nonMaxSuppression=function(t,e,n,r,i){return this.assertNotComplex(t,"nonMaxSuppression"),an(t.dataSync(),e.dataSync(),n,r,i)},t.prototype.fft=function(t){return this.fftBatch(t,!1)},t.prototype.ifft=function(t){return this.fftBatch(t,!0)},t.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],i=Ra(t.shape,"float32"),a=Ra(t.shape,"float32"),o=Re(t).as2D(n,r),s=De(t).as2D(n,r),u=0;u<n;u++)for(var c=o.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),f=Te(c,l),h=this.fftImpl(f,e).dataSync(),p=0;p<r;p++){var d=en(h,p);i.values[u*r+p]=d.real,a.values[u*r+p]=d.imag}return Te(i.toTensor(),a.toTensor()).as2D(n,r)},t.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var i=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(i=Te(Re(i).div(je(r)),De(i).div(je(r)))),i}var a=t.dataSync(),o=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(a,r,e));return Te(o.real,o.imag).as2D(t.shape[0],t.shape[1])},t.prototype.isExponentOf2=function(t){return 0==(t&t-1)},t.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=t.dataSync(),i=e/2,a=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),i=0;i<t.length;i+=4)n[Math.floor(i/4)]=t[i],r[Math.floor(i/4)]=t[i+1];return{real:n,imag:r}}(r),o=Te(a.real,a.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),i=2;i<t.length;i+=4)n[Math.floor(i/4)]=t[i],r[Math.floor(i/4)]=t[i+1];return{real:n,imag:r}}(r),u=Te(s.real,s.imag).as1D();o=this.fftRadix2(o,i,n),u=this.fftRadix2(u,i,n);var c=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),i=0;i<Math.ceil(t/2);i++){var a=(e?2:-2)*Math.PI*(i/t);n[i]=Math.cos(a),r[i]=Math.sin(a)}return{real:n,imag:r}}(e,n),l=Te(c.real,c.imag).mul(u),f=o.add(l),h=o.sub(l),p=Re(f).concat(Re(h)),d=De(f).concat(De(h));return Te(p,d).as1D()},t.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),i=0;i<e;i++){for(var a=0,o=0,s=0;s<e;s++){var u=rn(i*s,e,n),c=en(t,s);a+=c.real*u.real-c.imag*u.imag,o+=c.real*u.imag+c.imag*u.real}n&&(a/=e,o/=e),nn(r,a,o,i)}return r},t.prototype.depthToSpace=function(t,e,n){b("NHWC"===n,"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),b(e>1,"blockSize should be > 1 for depthToSpace, but was: "+e);for(var r=t.shape[0],i=t.shape[1],a=t.shape[2],o=t.shape[3],s=i*e,u=a*e,c=o/(e*e),l=t.dataSync(),f=new Float32Array(r*s*u*c),h=0,p=0;p<r;++p)for(var d=0;d<s;++d)for(var m=Math.floor(d/e),g=d%e,y=0;y<u;++y)for(var v=Math.floor(y/e),w=(g*e+y%e)*c,_=0;_<c;++_){var x=_+w+o*(v+a*(m+i*p));f[h++]=l[x]}return Fe(f,[r,s,u,c])},t.prototype.broadcastedBinaryOp=function(t,e,n,r){var i=pe(t.shape,e.shape),a=Ra(i,n),o=t.dataSync(),s=e.dataSync(),u=fe(t.shape,i),c=fe(e.shape,i),l=a.values;if(u.length+c.length===0)for(var f=0;f<l.length;++f)l[f]=r(o[f%o.length],s[f%s.length]);else{var h=t.buffer(),p=e.buffer(),d=function(n){var i=a.indexToLoc(n),f=i.slice(-t.rank);u.forEach(function(t){return f[t]=0});var d=h.locToIndex(f),m=i.slice(-e.rank);c.forEach(function(t){return m[t]=0});var g=p.locToIndex(m);l[n]=r(o[d],s[g])};for(f=0;f<l.length;++f)d(f)}return a.toTensor()},t.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=pe(t.shape,e.shape),i=Ra(r,"float32"),a=Ra(r,"float32"),o=t.dataSync(),s=e.dataSync(),u=fe(t.shape,r),c=fe(e.shape,r),l=i.values,f=a.values;if(u.length+c.length===0)for(var h=0;h<l.length;h++){var p=h%o.length,d=h%s.length,m=n(o[2*p],o[2*p+1],s[2*d],s[2*d+1]);l[h]=m.real,f[h]=m.imag}else{var g=this.data.get(t.dataId).complexTensors.real.buffer(),y=this.data.get(e.dataId).complexTensors.real.buffer(),v=function(r){var a=i.indexToLoc(r),h=a.slice(-t.rank);u.forEach(function(t){return h[t]=0});var p=g.locToIndex(h),d=a.slice(-e.rank);c.forEach(function(t){return d[t]=0});var m=y.locToIndex(d),v=n(o[2*p],o[2*p+1],s[2*m],s[2*m+1]);l[r]=v.real,f[r]=v.imag};for(h=0;h<l.length;h++)v(h)}return this.complex(i.toTensor(),a.toTensor())},t.prototype.split=function(t,e,n){return sn(t,e,n)},t.prototype.dispose=function(){},t.prototype.floatPrecision=function(){return 32},t.prototype.cropAndResize=function(t,e,n,r,i,a){for(var o=t.shape,s=o[0],u=o[1],c=o[2],l=o[3],f=e.shape[0],h=r[0],p=r[1],d=Ra([f,h,p,l],t.dtype),m=e.dataSync(),g=n.dataSync(),y=t.dataSync(),v=t.strides,b=d.strides,w=0;w<f;w++){var _=4*w,x=m[_],E=m[_+1],S=m[_+2],N=m[_+3],I=g[w];if(!(I>=s))for(var O=h>1?(S-x)*(u-1)/(h-1):0,k=p>1?(N-E)*(c-1)/(p-1):0,A=0;A<h;A++){var C=h>1?x*(u-1)+A*O:.5*(x+S)*(u-1);if(C<0||C>u-1)for(var P=0;P<p;P++)for(var T=0;T<l;T++){var R=T+P*b[2]+A*b[1]+w*b[0];d.values[R]=a}else if("bilinear"===i){var D=Math.floor(C),M=Math.ceil(C),j=C-D;for(P=0;P<p;P++)if(($=p>1?E*(c-1)+P*k:.5*(E+N)*(c-1))<0||$>c-1)for(T=0;T<l;T++)R=T+P*b[2]+A*b[1]+w*b[0],d.values[R]=a;else{var B=Math.floor($),L=Math.ceil($),z=$-B;for(T=0;T<l;T++){var F=y[R=T+B*v[2]+D*v[1]+I*v[0]],U=y[R=T+L*v[2]+D*v[1]+I*v[0]],V=y[R=T+B*v[2]+M*v[1]+I*v[0]],W=F+(U-F)*z,q=V+(y[R=T+L*v[2]+M*v[1]+I*v[0]]-V)*z;R=T+P*b[2]+A*b[1]+w*b[0],d.values[R]=W+(q-W)*j}}}else for(P=0;P<p;++P){var $;if(($=p>1?E*(c-1)+P*k:.5*(E+N)*(c-1))<0||$>c-1)for(T=0;T<l;T++)R=T+P*b[2]+A*b[1]+w*b[0],d.values[R]=a;else{var H=Math.round($),K=Math.round(C);for(T=0;T<l;T++){var G=T+H*v[2]+K*v[1]+I*v[0],X=T+P*b[2]+A*b[1]+w*b[0];d.values[X]=y[G]}}}}}return d.toTensor()},t.prototype.sparseToDense=function(t,e,n,r){var i=be(0,t,n),a=i.sliceRank,o=i.numUpdates,s=i.sliceSize,u=i.strides,c=i.outputSize;return this.scatter(t,e,n,c,s,o,a,u,r,!1)},t.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],i=me(t,e),a=i[0],o=i[1],s=i[2],u=i[3];if(0===o)return Me([],a,t.dtype);for(var c=new st([o,s],t.dtype),l=e.dataSync(),f=t.dataSync(),h=0;h<o;h++){for(var p=[],d=0,m=0;m<r;m++){var g=l[h*r+m];d+=g*u[m],p.push(g)}if(d<0||d>=t.size/s)throw new Error("Invalid indices: "+p+" does not index into "+t.shape);for(var y=0;y<s;y++)c.values[h*s+y]=f[d*s+y]}return c.toTensor().reshape(a)},t.prototype.scatterND=function(t,e,n){var r=be(0,t,n),i=r.sliceRank,a=r.numUpdates,o=r.sliceSize,s=r.strides,u=r.outputSize,c=je(0);return this.scatter(t,e,n,u,o,a,i,s,c,!0)},t.prototype.scatter=function(t,e,n,r,i,a,o,s,u,c){var l=[r/i,i],f=t.dataSync(),h=e.dataSync();if(0===r)return Me([],n,e.dtype);var p=new st(l,e.dtype);p.values.fill(u.dataSync()[0]);for(var d=0;d<a;d++){for(var m=[],g=0,y=0;y<o;y++){var v=f[d*o+y];m.push(v),g+=v*s[y]}if(g<0||g>=r/i)throw new Error("Invalid indices: "+m+" does not index into "+n);for(var b=0;b<i;b++)c?p.values[g*i+b]+=h[d*i+b]:p.values[g*i+b]=0===e.rank?h[0]:h[d*i+b]}return p.toTensor().reshape(n)},t}();Lt.registerBackend("cpu",function(){return new xc},1,lt);var Ec="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:i;function Sc(){return new Promise(function(t){return Ec(function(){return t()})})}var Nc={float32:4,int32:4,uint16:2,uint8:1,bool:1};function Ic(t,e){for(var n={},r=0,i=function(e){var i=e.name,a=e.dtype,o=e.shape,s=E(o),u=void 0;if("quantization"in e){var c=e.quantization;if("uint8"!==c.dtype&&"uint16"!==c.dtype)throw new Error("Weight "+e.name+" has unknown quantization dtype "+c.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var l=Nc[c.dtype],f=t.slice(r,r+s*l),h="uint8"===c.dtype?new Uint8Array(f):new Uint16Array(f);if("float32"===a)u=Float32Array.from(h,function(t){return t*c.scale+c.min});else{if("int32"!==a)throw new Error("Unsupported dtype in weight '"+i+"': "+a);u=Int32Array.from(h,function(t){return Math.round(t*c.scale+c.min)})}r+=s*l}else{var p=Nc[a];if(f=t.slice(r,r+s*p),"float32"===a)u=new Float32Array(f);else if("int32"===a)u=new Int32Array(f);else{if("bool"!==a)throw new Error("Unsupported dtype in weight '"+i+"': "+a);u=new Uint8Array(f)}r+=s*p}var d=void 0;if("float32"===a)d=Me(u,o,"float32");else if("int32"===a)d=Me(u,o,"int32");else{if("bool"!==a)throw new Error("Unsupported dtype in weight '"+i+"': "+a);d=Me(u,o,"bool")}n[i]=d},a=0,o=e;a<o.length;a++)i(o[a]);return n}function Oc(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var e=0,n=[];t.forEach(function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});var r=new Uint8Array(e),i=0;return n.forEach(function(t){r.set(new Uint8Array(t.buffer),i),i+=t.byteLength}),r.buffer}var kc=void 0!==a&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ac(t){return kc?a.byteLength(t):new Blob([t]).size}function Cc(t){var e=0;t.forEach(function(t){e+=t.byteLength});var n=new Uint8Array(e),r=0;return t.forEach(function(t){n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}function Pc(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var e=t.split("/");return e[e.length-1]}function Tc(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Ac(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Ac(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var Rc=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,"save")},t.getLoadHandlers=function(e){return t.getHandlers(e,"load")},t.getHandlers=function(t,e){var n=[];return("load"===e?this.getInstance().loadRouters:this.getInstance().saveRouters).forEach(function(e){var r=e(t);null!==r&&n.push(r)}),n},t}(),Dc="://",Mc=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){b(null!=e,"scheme must not be undefined or null."),e.endsWith(Dc)&&(e=e.slice(0,e.indexOf(Dc))),b(e.length>0,"scheme must not be an empty string.");var r=t.getInstance();b(null==r.managers[e],"A model store manager is already registered for scheme '"+e+"'."),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error("Cannot find model manager for scheme '"+t+"'");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function jc(t){if(-1===t.indexOf(Dc))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Mc.getSchemes().join(","));return{scheme:t.split(Dc)[0],path:t.split(Dc)[1]}}function Bc(t,e,n){return void 0===n&&(n=!1),c(this,void 0,void 0,function(){var r,i,a,o,s,u,c,f,h;return l(this,function(l){switch(l.label){case 0:return b(t!==e,"Old path and new path are the same: '"+t+"'"),b((r=Rc.getLoadHandlers(t)).length>0,"Copying failed because no load handler is found for source URL "+t+"."),b(r.length<2,"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."),i=r[0],b((a=Rc.getSaveHandlers(e)).length>0,"Copying failed because no save handler is found for destination URL "+e+"."),b(a.length<2,"Copying failed because more than one ("+r.length+") save handlers for destination URL "+e+"."),o=a[0],s=jc(t).scheme,u=jc(t).path,c=s===jc(t).scheme,[4,i.load()];case 1:return f=l.sent(),n&&c?[4,Mc.getManager(s).removeModel(u)]:[3,3];case 2:l.sent(),l.label=3;case 3:return[4,o.save(f)];case 4:return h=l.sent(),!n||c?[3,6]:[4,Mc.getManager(s).removeModel(u)];case 5:l.sent(),l.label=6;case 6:return[2,h.modelArtifactsInfo]}})})}var Lc="models_store",zc="model_info_store";function Fc(){if(!Lt.get("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function Uc(t){var e=t.result;e.createObjectStore(Lc,{keyPath:"modelPath"}),e.createObjectStore(zc,{keyPath:"modelPath"})}var Vc=function(){function t(t){if(this.indexedDB=Fc(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return c(this,void 0,void 0,function(){return l(this,function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]})})},t.prototype.load=function(){return c(this,void 0,void 0,function(){return l(this,function(t){return[2,this.databaseAction(this.modelPath)]})})},t.prototype.databaseAction=function(t,e){var n=this;return new Promise(function(t,r){var i=n.indexedDB.open("tensorflowjs",1);i.onupgradeneeded=function(){return Uc(i)},i.onsuccess=function(){var a=i.result;if(null==e){var o=a.transaction(Lc,"readonly"),s=o.objectStore(Lc).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return a.close(),r(new Error("Cannot find model with path '"+n.modelPath+"' in IndexedDB."));t(s.result.modelArtifacts)},s.onerror=function(t){return a.close(),r(s.error)},o.oncomplete=function(){return a.close()}}else{var u,c=Tc(e),l=a.transaction(zc,"readwrite"),f=l.objectStore(zc),h=f.put({modelPath:n.modelPath,modelArtifactsInfo:c});h.onsuccess=function(){var i=(u=a.transaction(Lc,"readwrite")).objectStore(Lc).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:c});i.onsuccess=function(){return t({modelArtifactsInfo:c})},i.onerror=function(t){var e=(f=l.objectStore(zc)).delete(n.modelPath);e.onsuccess=function(){return a.close(),r(i.error)},e.onerror=function(t){return a.close(),r(i.error)}}},h.onerror=function(t){return a.close(),r(h.error)},l.oncomplete=function(){null==u?a.close():u.oncomplete=function(){return a.close()}}}},i.onerror=function(t){return r(i.error)}})},t.URL_SCHEME="indexeddb://",t}(),Wc=function(t){return Lt.get("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Vc.URL_SCHEME)?function(t){return new Vc(t)}(t.slice(Vc.URL_SCHEME.length)):null};Rc.registerSaveRouter(Wc),Rc.registerLoadRouter(Wc);var qc=function(){function t(){this.indexedDB=Fc()}return t.prototype.listModels=function(){return c(this,void 0,void 0,function(){var t=this;return l(this,function(e){return[2,new Promise(function(e,n){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return Uc(r)},r.onsuccess=function(){var t=r.result,i=t.transaction(zc,"readonly"),a=i.objectStore(zc).getAll();a.onsuccess=function(){for(var t={},n=0,r=a.result;n<r.length;n++){var i=r[n];t[i.modelPath]=i.modelArtifactsInfo}e(t)},a.onerror=function(e){return t.close(),n(a.error)},i.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}})]})})},t.prototype.removeModel=function(t){return c(this,void 0,void 0,function(){var e=this;return l(this,function(n){return t=function(t){return t.startsWith(Vc.URL_SCHEME)?t.slice(Vc.URL_SCHEME.length):t}(t),[2,new Promise(function(n,r){var i=e.indexedDB.open("tensorflowjs",1);i.onupgradeneeded=function(){return Uc(i)},i.onsuccess=function(){var e,a=i.result,o=a.transaction(zc,"readwrite"),s=o.objectStore(zc),u=s.get(t);u.onsuccess=function(){if(null==u.result)return a.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var i=s.delete(t),o=function(){var i=(e=a.transaction(Lc,"readwrite")).objectStore(Lc).delete(t);i.onsuccess=function(){return n(u.result.modelArtifactsInfo)},i.onerror=function(t){return r(u.error)}};i.onsuccess=o,i.onerror=function(t){return o(),a.close(),r(u.error)}},u.onerror=function(t){return a.close(),r(u.error)},o.oncomplete=function(){null==e?a.close():e.oncomplete=function(){return a.close()}}},i.onerror=function(t){return r(i.error)}})]})})},t}();if(Lt.get("IS_BROWSER"))try{Mc.registerManager(Vc.URL_SCHEME,new qc)}catch(vt){}var $c="/",Hc="tensorflowjs_models",Kc="info",Gc="model_topology",Xc="weight_specs",Yc="weight_data";function Jc(t){return{info:[Hc,t,Kc].join($c),topology:[Hc,t,Gc].join($c),weightSpecs:[Hc,t,Xc].join($c),weightData:[Hc,t,Yc].join($c)}}function Zc(t){var e=t.split($c);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join($c)}var Qc=function(){function t(t){if(!Lt.get("IS_BROWSER")||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Jc(this.modelPath)}return t.prototype.save=function(t){return c(this,void 0,void 0,function(){var e,n,r,i;return l(this,function(o){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Tc(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){return kc?a.from(t).toString("base64"):btoa(String.fromCharCode.apply(null,new Uint8Array(t)))}(t.weightData)),[2,{modelArtifactsInfo:r}]}catch(t){for(i in this.keys)this.LS.removeItem(this.keys[i]);throw new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}return[2]})})},t.prototype.load=function(){return c(this,void 0,void 0,function(){var t,e,n,r,i;return l(this,function(o){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(e.modelTopology=n,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(e.weightSpecs=r,null==(i=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return e.weightData=function(t){if(kc){var e=a.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),i=0;i<n.length;++i)r.set([n.charCodeAt(i)],i);return r.buffer}(i),[2,e]})})},t.URL_SCHEME="localstorage://",t}(),tl=function(t){return Lt.get("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Qc.URL_SCHEME)?function(t){return new Qc(t)}(t.slice(Qc.URL_SCHEME.length)):null};Rc.registerSaveRouter(tl),Rc.registerLoadRouter(tl);var el=function(){function t(){b(Lt.get("IS_BROWSER"),"Current environment is not a web browser"),b(void 0!==window.localStorage,"Current browser does not appear to support localStorage"),this.LS=window.localStorage}return t.prototype.listModels=function(){return c(this,void 0,void 0,function(){var t,e,n,r,i,a;return l(this,function(o){for(t={},e=Hc+$c,n=$c+Kc,r=0;r<this.LS.length;++r)(i=this.LS.key(r)).startsWith(e)&&i.endsWith(n)&&(a=Zc(i),t[a]=JSON.parse(this.LS.getItem(i)));return[2,t]})})},t.prototype.removeModel=function(t){return c(this,void 0,void 0,function(){var e,n;return l(this,function(r){if(t=function(t){return t.startsWith(Qc.URL_SCHEME)?t.slice(Qc.URL_SCHEME.length):t}(t),e=Jc(t),null==this.LS.getItem(e.info))throw new Error("Cannot find model at path '"+t+"'");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]})})},t}();if(Lt.get("IS_BROWSER"))try{Mc.registerManager(Qc.URL_SCHEME,new el)}catch(vt){}var nl="model",rl=".json",il=".weights.bin",al=function(){function t(e){if(!Lt.get("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=nl),this.modelTopologyFileName=e+rl,this.weightDataFileName=e+il}return t.prototype.save=function(t){return c(this,void 0,void 0,function(){var e,n,r,i,a,o;return l(this,function(s){if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");return n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,weightsManifest:n},i=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,a.href=i,a.click(),null!=t.weightData&&((o=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,o.href=e,o.click()),[2,{modelArtifactsInfo:Tc(t)}]})})},t.URL_SCHEME="downloads://",t}(),ol=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return c(this,void 0,void 0,function(){var t,e,n=this;return l(this,function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise(function(r,i){var a=new FileReader;a.onload=function(a){var o=JSON.parse(a.target.result),s=o.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=o.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,e)}catch(t){return void i(t)}var l=[],f=[],h=[];u.forEach(function(t){t.paths.forEach(function(t){f.push(t),h.push(null)}),l.push.apply(l,t.weights)}),u.forEach(function(t){t.paths.forEach(function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,i=f.indexOf(t);h[i]=n,-1===h.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:Cc(h)})},e.onerror=function(e){return i("Failed to weights data from file of path '"+t+"'.")},e.readAsArrayBuffer(c[t])})})}else i(new Error("weightManifest field is missing from file "+t.name))}else i(new Error("modelTopology field is missing from file "+t.name))},a.onerror=function(e){return i("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},a.readAsText(t)})]})})},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map(function(t){return Pc(t.name)}),i={},a=0,o=t;a<o.length;a++)o[a].paths.forEach(function(t){var a=Pc(t);if(-1!==n.indexOf(a))throw new Error("Duplicate file basename found in weights manifest: '"+a+"'");if(n.push(a),-1===r.indexOf(a))throw new Error("Weight file with basename '"+a+"' is not provided.");i[t]=e[r.indexOf(a)]});if(n.length!==e.length)throw new Error("Mismatch in the number of files in weights manifest ("+n.length+") and the number of weight files provided ("+e.length+").");return i},t}();function sl(t,e,n){return c(this,void 0,void 0,function(){var r,i;return l(this,function(a){switch(a.label){case 0:return null==n&&(n=fetch),r=t.map(function(t){return n(t,e)}),[4,Promise.all(r)];case 1:return i=a.sent(),[4,Promise.all(i.map(function(t){return t.arrayBuffer()}))];case 2:return[2,a.sent()]}})})}function ul(t){var e=this;return function(n,r,i){return void 0===r&&(r=""),c(e,void 0,void 0,function(){var e,a,o,s,u,c,f,h,p,d;return l(this,function(l){switch(l.label){case 0:if(e=n.map(function(){return!1}),a={},o=null!=i?i.map(function(){return!1}):[],s=[],n.forEach(function(t,n){var r=0;t.weights.forEach(function(t){var u="quantization"in t?t.quantization.dtype:t.dtype,c=Nc[u]*E(t.shape),l=function(){e[n]=!0,null==a[n]&&(a[n]=[]),a[n].push({manifestEntry:t,groupOffset:r,sizeBytes:c})};null!=i?i.forEach(function(e,n){e===t.name&&(l(),o[n]=!0)}):l(),s.push(t.name),r+=c})}),!o.every(function(t){return t}))throw u=i.filter(function(t,e){return!o[e]}),new Error("Could not find weights in manifest with names: "+u.join(", ")+". \nManifest JSON has weights with names: "+s.join(", ")+".");return c=e.reduce(function(t,e,n){return e&&t.push(n),t},[]),f=[],c.forEach(function(t){n[t].paths.forEach(function(t){var e=r+(r.endsWith("/")?"":"/")+t;f.push(e)})}),[4,t(f)];case 1:return h=l.sent(),p={},d=0,c.forEach(function(t){for(var e=n[t].paths.length,r=0,i=0;i<e;i++)r+=h[d+i].byteLength;for(var o=new ArrayBuffer(r),s=new Uint8Array(o),u=0,c=0;c<e;c++){var l=new Uint8Array(h[d+c]);s.set(l,u),u+=l.byteLength}a[t].forEach(function(t){var e=Ic(o.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)p[n]=e[n]}),d+=e}),[2,p]}})})}}Rc.registerSaveRouter(function(t){return Lt.get("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(al.URL_SCHEME)?function(t){return void 0===t&&(t="model"),new al(t)}(t.slice(al.URL_SCHEME.length)):null});var cl=function(){function t(t,e,n,r){if(this.weightPathPrefix=n,this.DEFAULT_METHOD="POST",null==r){if("undefined"==typeof fetch)throw new Error("browserHTTPRequest is not supported outside the web browser without a fetch polyfill.");this.fetchFunc=fetch.bind("undefined"==typeof window?null:window)}else b("function"==typeof r,"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetchFunc=r;if(b(null!=t&&t.length>0,"URL path for browserHTTPRequest must not be null, undefined or empty."),Array.isArray(t)&&b(2===t.length,"URL paths for browserHTTPRequest must have a length of 2, (actual length is "+t.length+")."),this.path=t,null!=e&&null!=e.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e||{}}return t.prototype.save=function(t){return c(this,void 0,void 0,function(){var e,n,r,i;return l(this,function(a){switch(a.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,weightsManifest:n},e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.getFetchFunc()(this.path,e)];case 1:if((i=a.sent()).ok)return[2,{modelArtifactsInfo:Tc(t),responses:[i]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+i.status+".")}})})},t.prototype.load=function(){return c(this,void 0,void 0,function(){return l(this,function(t){return[2,Array.isArray(this.path)?this.loadBinaryModel():this.loadJSONModel()]})})},t.prototype.loadBinaryTopology=function(){return c(this,void 0,void 0,function(){var t,e;return l(this,function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),[4,this.getFetchFunc()(this.path[0],this.requestInit)];case 1:if(!(t=n.sent()).ok)throw new Error("BrowserHTTPRequest.load() failed due to HTTP response: "+t.statusText);return[4,t.arrayBuffer()];case 2:return[2,n.sent()];case 3:throw e=n.sent(),new Error(this.path[0]+" not found. "+e);case 4:return[2]}})})},t.prototype.loadBinaryModel=function(){return c(this,void 0,void 0,function(){var t,e,n,r,i,a,o,s;return l(this,function(u){switch(u.label){case 0:return t=this.loadBinaryTopology(),[4,this.getFetchFunc()(this.path[1],this.requestInit)];case 1:if(!(e=u.sent()).ok)throw new Error("BrowserHTTPRequest.load() failed due to HTTP response: "+e.statusText);return[4,Promise.all([t,e])];case 2:return n=u.sent(),r=n[0],[4,n[1].json()];case 3:return null==(i=u.sent())?[3,5]:[4,this.loadWeights(i)];case 4:s=u.sent(),a=s[0],o=s[1],u.label=5;case 5:return[2,{modelTopology:r,weightSpecs:a,weightData:o}]}})})},t.prototype.loadJSONModel=function(){return c(this,void 0,void 0,function(){var t,e,n,r,i,a,o,s;return l(this,function(u){switch(u.label){case 0:return[4,this.getFetchFunc()(this.path,this.requestInit)];case 1:if(!(t=u.sent()).ok)throw new Error("BrowserHTTPRequest.load() failed due to HTTP response: "+t.statusText);return[4,t.json()];case 2:if(e=u.sent(),n=e.modelTopology,r=e.weightsManifest,null==n&&null==r)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==r?[3,4]:(o=e.weightsManifest,[4,this.loadWeights(o)]);case 3:s=u.sent(),i=s[0],a=s[1],u.label=4;case 4:return[2,{modelTopology:n,weightSpecs:i,weightData:a}]}})})},t.prototype.loadWeights=function(t){return c(this,void 0,void 0,function(){var e,n,r,i,a,o,s,u,c,f,h,p;return l(this,function(l){switch(l.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf("/"),n=t.lastIndexOf("?");return[t.substring(0,e)+"/",n>e?t.substring(n):""]}(e),r=n[0],i=n[1],a=this.weightPathPrefix||r,o=[],s=0,u=t;s<u.length;s++)c=u[s],o.push.apply(o,c.weights);return f=[],t.forEach(function(t){t.paths.forEach(function(t){f.push(a+t+i)})}),h=[o],p=Cc,[4,sl(f,this.requestInit,this.getFetchFunc())];case 1:return[2,h.concat([p.apply(void 0,[l.sent()])])]}})})},t.prototype.getFetchFunc=function(){return this.fetchFunc},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function ll(t){return null!=t.match(cl.URL_SCHEME_REGEX)}var fl=function(t){return"undefined"==typeof fetch?null:(Array.isArray(t)?t.every(function(t){return ll(t)}):ll(t))?hl(t):null};function hl(t,e,n,r){return new cl(t,e,n,r)}Rc.registerSaveRouter(fl),Rc.registerLoadRouter(fl);var pl=function(){function t(t,e,n){this.modelTopology=t,this.weightSpecs=e,this.weightData=n}return t.prototype.load=function(){return c(this,void 0,void 0,function(){var t;return l(this,function(e){return t={},null!=this.modelTopology&&(t=u({modelTopology:this.modelTopology},t)),null!=this.weightSpecs&&this.weightSpecs.length>0&&(t=u({weightSpecs:this.weightSpecs},t)),null!=this.weightData&&this.weightData.byteLength>0&&(t=u({weightData:this.weightData},t)),[2,t]})})},t}(),dl=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return c(this,void 0,void 0,function(){return l(this,function(e){return[2,this.saveHandler(t)]})})},t}();var ml=Rc.registerSaveRouter,gl=Rc.registerLoadRouter,yl=Rc.getSaveHandlers,vl=Rc.getLoadHandlers,bl=Object.freeze({browserFiles:function(t){return new ol(t)},browserHTTPRequest:hl,concatenateArrayBuffers:Cc,decodeWeights:Ic,encodeWeights:function(t){return c(this,void 0,void 0,function(){var e,n,r,i;return l(this,function(a){switch(a.label){case 0:for(r in e=[],n=[],t){if("float32"!==(i=t[r]).dtype&&"int32"!==i.dtype&&"bool"!==i.dtype)throw new Error("Unsupported dtype in weight '"+r+"': "+i.dtype);e.push({name:r,shape:i.shape,dtype:i.dtype}),n.push(i.data())}return[4,Promise.all(n)];case 1:return[2,{data:Oc(a.sent()),specs:e}]}})})},fromMemory:function(t,e,n){return new pl(t,e,n)},getLoadHandlers:vl,getModelArtifactsInfoForJSON:Tc,getSaveHandlers:yl,isHTTPScheme:ll,loadWeights:function(t,e,n,r){return void 0===e&&(e=""),c(this,void 0,void 0,function(){return l(this,function(i){return[2,ul(function(t){return sl(t,r)})(t,e,n)]})})},registerLoadRouter:gl,registerSaveRouter:ml,weightsLoaderFactory:ul,withSaveHandler:function(t){return new dl(t)},copyModel:function(t,e){return c(this,void 0,void 0,function(){return l(this,function(n){switch(n.label){case 0:return[4,Bc(t,e,!1)];case 1:return[2,n.sent()]}})})},listModels:function(){return c(this,void 0,void 0,function(){var t,e,n,r,i,a,o;return l(this,function(s){switch(s.label){case 0:t=Mc.getSchemes(),e={},n=0,r=t,s.label=1;case 1:return n<r.length?(i=r[n],[4,Mc.getManager(i).listModels()]):[3,4];case 2:for(o in a=s.sent())e[i+Dc+o]=a[o];s.label=3;case 3:return n++,[3,1];case 4:return[2,e]}})})},moveModel:function(t,e){return c(this,void 0,void 0,function(){return l(this,function(n){switch(n.label){case 0:return[4,Bc(t,e,!0)];case 1:return[2,n.sent()]}})})},removeModel:function(t){return c(this,void 0,void 0,function(){var e;return l(this,function(n){switch(n.label){case 0:return e=jc(t),[4,Mc.getManager(e.scheme).removeModel(e.path)];case 1:return[2,n.sent()]}})})}});var wl=Ae({confusionMatrix_:function(t,e,n){var r=Oe(t,"labels","confusionMatrix"),i=Oe(e,"predictions","confusionMatrix");b(null==n||n>0&&Number.isInteger(n),"If provided, numClasses must be a positive integer, but got "+n),b(1===r.rank,"Expected the rank of labels to be 1, but got "+r.rank),b(1===i.rank,"Expected the rank of predictions to be 1, but got "+i.rank),b(r.shape[0]===i.shape[0],"Mismatch in the number of examples: "+r.shape[0]+" vs. "+i.shape[0]+". Labels and predictions should have the same number of elements."),b(n>0&&Number.isInteger(n),"numClasses is required to be a positive integer, but got "+n);var a=qa(r.asType("int32"),n),o=qa(i.asType("int32"),n);return a.transpose().matMul(o).asType("int32")}}),_l=Object.freeze({confusionMatrix:wl}),xl=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),El=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig]},t}();function Sl(t){b(null!=t.className,"Class being registered does not have the static className property defined."),b("string"==typeof t.className,"className is required to be a string, but got type "+typeof t.className),b(t.className.length>0,"Class being registered has an empty-string as its className, which is disallowed."),El.register(t)}var Nl=Object.freeze({Serializable:xl,SerializationMap:El,registerClass:Sl});function Il(t,e,n){return null==n&&(n=Lt.get("TEST_EPSILON")),Ol(t,e,function(t,e){return kl(t,Number(e),n)})}function Ol(t,e,n){if(t instanceof ft||e instanceof ft){if(t instanceof ft&&e instanceof ft){if(t.dtype!==e.dtype)throw new Error("Arrays are of different type actual: "+t.dtype+" vs expected: "+e.dtype+".");if(!S(t.shape,e.shape))throw new Error("Arrays are of different shape actual: "+t.shape+" vs expected: "+e.shape+".")}}else{var r=t.constructor.name,i=e.constructor.name;if(r!==i)throw new Error("Arrays are of different type actual: "+r+" vs expected: "+i)}var a,o;if(a=t instanceof ft?t.dataSync():t,o=e instanceof ft?e.dataSync():e,a.length!==o.length)throw new Error("Arrays have different lengths actual: "+a.length+" vs expected: "+o.length+".\nActual:   "+a+".\nExpected: "+o+".");for(var s=0;s<o.length;++s){var u=a[s],c=o[s];if(!n(u,c))throw new Error("Arrays differ: actual["+s+"] = "+u+", expected["+s+"] = "+c+".\nActual:   "+a+".\nExpected: "+o+".")}}function kl(t,e,n){return!(!isNaN(t)||!isNaN(e))||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Al=Object.freeze({WEBGL_ENVS:{HAS_WEBGL:!0},NODE_ENVS:{IS_NODE:!0},CHROME_ENVS:{IS_CHROME:!0},BROWSER_ENVS:{IS_BROWSER:!0},CPU_ENVS:{HAS_WEBGL:!1},ALL_ENVS:{},expectArraysClose:Il,expectPromiseToFail:function(t,e){t().then(function(){return e.fail()},function(){return e()})},expectArraysEqual:function(t,e){return t instanceof ft&&"string"===t.dtype||e instanceof ft&&"string"===e.dtype||t instanceof Array&&U(t[0])||e instanceof Array&&U(e[0])?Ol(t,e,function(t,e){return t==e}):Il(t,e,0)},expectNumbersClose:function(t,e,n){if(null==n&&(n=Lt.get("TEST_EPSILON")),!kl(t,e,n))throw new Error("Numbers differ: actual === "+t+", expected === "+e)},expectValuesInRange:function(t,e,n){var r;r=t instanceof ft?t.dataSync():t;for(var i=0;i<r.length;i++)if(r[i]<e||r[i]>n)throw new Error("Value out of range:"+r[i]+" low: "+e+", high: "+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}}),Cl="0.14.5",Pl=Object.freeze({gpgpu_util:Ni,webgl_util:ri,MathBackendWebGL:uo,GPGPUContext:Ii}),Tl=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),i=r.value,a=r.grads;return this.applyGradients(a),Object.keys(a).forEach(function(t){return a[t].dispose()}),e?i:(i.dispose(),null)},e.prototype.computeGradients=function(t,e){return qt(t,e)},e}(xl);Object.defineProperty(Tl,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var Rl=function(t){function e(e,n,r){void 0===r&&(r=null);var i=t.call(this)||this;return i.learningRate=e,i.rho=n,i.epsilon=r,i.accumulatedGrads={},i.accumulatedUpdates={},i.c=Gt(je(-e)),i.rhoScalar=Gt(je(n)),i.oneMinusRho=Gt(je(1-n)),null===r&&(r=Lt.get("EPSILON")),i.epsilonScalar=Gt(je(r)),i}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=function(n){var i=Lt.engine.registeredVariables[n];null==r.accumulatedGrads[n]&&Kt(function(){e.accumulatedGrads[n]=Xe(i).variable(!1)}),null==r.accumulatedUpdates[n]&&Kt(function(){e.accumulatedUpdates[n]=Xe(i).variable(!1)});var a=t[n],o=r.accumulatedGrads[n],s=r.accumulatedUpdates[n];Kt(function(){var t=e.rhoScalar.mul(o).add(e.oneMinusRho.mul(a.square())),r=s.add(e.epsilonScalar).sqrt().div(o.add(e.epsilonScalar).sqrt()).mul(a),u=e.rhoScalar.mul(s).add(e.oneMinusRho.mul(r.square()));e.accumulatedGrads[n].assign(t),e.accumulatedUpdates[n].assign(u);var c=e.c.mul(r).add(i);i.assign(c)})},r=this;for(var i in t)n(i)},e.prototype.dispose=function(){var t=this;this.c.dispose(),this.epsilonScalar.dispose(),this.rhoScalar.dispose(),this.oneMinusRho.dispose(),null!=this.accumulatedUpdates&&(Object.keys(this.accumulatedUpdates).forEach(function(e){return t.accumulatedUpdates[e].dispose()}),Object.keys(this.accumulatedGrads).forEach(function(e){return t.accumulatedGrads[e].dispose()}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},e.className="AdadeltaOptimizer",e}(Tl);Sl(Rl);var Dl=function(t){function e(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads={},r.c=Gt(je(-e)),r.epsilon=Gt(je(Lt.get("EPSILON"))),r}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=function(n){var i=Lt.engine.registeredVariables[n];null==r.accumulatedGrads[n]&&Kt(function(){e.accumulatedGrads[n]=$e(i.shape,e.initialAccumulatorValue).variable(!1)});var a=t[n],o=r.accumulatedGrads[n];Kt(function(){var t=o.add(a.square());e.accumulatedGrads[n].assign(t);var r=e.c.mul(a.div(t.add(e.epsilon).sqrt())).add(i);i.assign(r)})},r=this;for(var i in t)n(i)},e.prototype.dispose=function(){var t=this;this.epsilon.dispose(),this.c.dispose(),null!=this.accumulatedGrads&&Object.keys(this.accumulatedGrads).forEach(function(e){return t.accumulatedGrads[e].dispose()})},e.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},e.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},e.className="AdagradOptimizer",e}(Tl);Sl(Dl);var Ml=function(t){function e(e,n,r,i){void 0===i&&(i=null);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=i,a.accumulatedFirstMoment={},a.accumulatedSecondMoment={},a.c=Gt(je(-e)),a.beta1Scalar=Gt(je(n)),a.beta2Scalar=Gt(je(r)),Kt(function(){a.accBeta1=je(n).variable(),a.accBeta2=je(r).variable()}),a.oneMinusBeta1=Gt(je(1-n)),a.oneMinusBeta2=Gt(je(1-r)),a.one=Gt(je(1)),null===i&&(i=Lt.get("EPSILON")),a.epsScalar=Gt(je(i)),a}return s(e,t),e.prototype.applyGradients=function(t){var e=this;Kt(function(){var n=e.one.sub(e.accBeta1),r=e.one.sub(e.accBeta2);for(var i in t){var a=Lt.engine.registeredVariables[i];if(null==e.accumulatedFirstMoment[i]){var o=!1;e.accumulatedFirstMoment[i]=Xe(a).variable(o)}null==e.accumulatedSecondMoment[i]&&(o=!1,e.accumulatedSecondMoment[i]=Xe(a).variable(o));var s=t[i],u=e.accumulatedFirstMoment[i],c=e.accumulatedSecondMoment[i],l=e.beta1Scalar.mul(u).add(e.oneMinusBeta1.mul(s)),f=e.beta2Scalar.mul(c).add(e.oneMinusBeta2.mul(s.square())),h=l.div(n),p=f.div(r);e.accumulatedFirstMoment[i].assign(l),e.accumulatedSecondMoment[i].assign(f);var d=e.c.mul(h.div(e.epsScalar.add(p.sqrt()))).add(a);a.assign(d)}e.accBeta1.assign(e.accBeta1.mul(e.beta1Scalar)),e.accBeta2.assign(e.accBeta2.mul(e.beta2Scalar))})},e.prototype.dispose=function(){var t=this;this.c.dispose(),this.epsScalar.dispose(),this.beta1Scalar.dispose(),this.beta2Scalar.dispose(),this.accBeta1.dispose(),this.accBeta2.dispose(),this.oneMinusBeta1.dispose(),this.oneMinusBeta2.dispose(),this.one.dispose(),null!=this.accumulatedFirstMoment&&Object.keys(this.accumulatedFirstMoment).forEach(function(e){return t.accumulatedFirstMoment[e].dispose()}),null!=this.accumulatedSecondMoment&&Object.keys(this.accumulatedSecondMoment).forEach(function(e){return t.accumulatedSecondMoment[e].dispose()})},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},e.className="AdamOptimizer",e}(Tl);Sl(Ml);var jl=function(t){function e(e,n,r,i,a){void 0===i&&(i=null),void 0===a&&(a=0);var o=t.call(this)||this;return o.learningRate=e,o.beta1=n,o.beta2=r,o.epsilon=i,o.decay=a,o.accumulatedFirstMoment={},o.accumulatedWeightedInfNorm={},o.c=Gt(je(-e)),o.beta1Scalar=Gt(je(n)),o.beta2Scalar=Gt(je(r)),o.decayScalar=Gt(je(a)),Kt(function(){o.iteration=je(0).variable(),o.accBeta1=je(n).variable()}),o.oneMinusBeta1=Gt(je(1-n)),o.one=Gt(je(1)),null===i&&(i=Lt.get("EPSILON")),o.epsScalar=Gt(je(i)),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;Kt(function(){var n=e.one.sub(e.accBeta1),r=e.c.div(e.one.add(e.decayScalar.mul(e.iteration)));for(var i in t){var a=Lt.engine.registeredVariables[i];if(null==e.accumulatedFirstMoment[i]){var o=!1;e.accumulatedFirstMoment[i]=Xe(a).variable(o)}null==e.accumulatedWeightedInfNorm[i]&&(o=!1,e.accumulatedWeightedInfNorm[i]=Xe(a).variable(o));var s=t[i],u=e.accumulatedFirstMoment[i],c=e.accumulatedWeightedInfNorm[i],l=e.beta1Scalar.mul(u).add(e.oneMinusBeta1.mul(s)),f=e.beta2Scalar.mul(c),h=s.abs(),p=f.maximum(h);e.accumulatedFirstMoment[i].assign(l),e.accumulatedWeightedInfNorm[i].assign(p);var d=r.div(n).mul(l.div(e.epsScalar.add(p))).add(a);a.assign(d)}e.iteration.assign(e.iteration.add(e.one)),e.accBeta1.assign(e.accBeta1.mul(e.beta1Scalar))})},e.prototype.dispose=function(){var t=this;this.c.dispose(),this.epsScalar.dispose(),this.accBeta1.dispose(),this.beta1Scalar.dispose(),this.beta2Scalar.dispose(),this.oneMinusBeta1.dispose(),this.decayScalar.dispose(),this.iteration.dispose(),this.one.dispose(),null!=this.accumulatedFirstMoment&&Object.keys(this.accumulatedFirstMoment).forEach(function(e){return t.accumulatedFirstMoment[e].dispose()}),null!=this.accumulatedWeightedInfNorm&&Object.keys(this.accumulatedWeightedInfNorm).forEach(function(e){return t.accumulatedWeightedInfNorm[e].dispose()})},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},e.className="AdamaxOptimizer",e}(Tl);Sl(jl);var Bl=function(t){function e(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return s(e,t),e.prototype.applyGradients=function(t){var e=this;Object.keys(t).forEach(function(n){var r=t[n],i=Lt.engine.registeredVariables[n];Kt(function(){var t=e.c.mul(r).add(i);i.assign(t)})})},e.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Gt(je(-t))},e.prototype.dispose=function(){this.c.dispose()},e.prototype.getConfig=function(){return{learningRate:this.learningRate}},e.fromConfig=function(t,e){return new t(e.learningRate)},e.className="SGDOptimizer",e}(Tl);Sl(Bl);var Ll=function(t){function e(e,n,r){void 0===r&&(r=!1);var i=t.call(this,e)||this;return i.learningRate=e,i.momentum=n,i.useNesterov=r,i.m=je(i.momentum),i.accumulations={},i}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=function(n){var i=Lt.engine.registeredVariables[n];null==r.accumulations[n]&&Kt(function(){e.accumulations[n]=Xe(i).variable(!1)});var a=r.accumulations[n],o=t[n];Kt(function(){var t,r=e.m.mul(a).add(o);t=e.useNesterov?e.c.mul(o.add(r.mul(e.m))).add(i):e.c.mul(r).add(i),e.accumulations[n].assign(r),i.assign(t)})},r=this;for(var i in t)n(i)},e.prototype.dispose=function(){if(t.prototype.dispose.call(this),this.m.dispose(),null!=this.accumulations)for(var e in this.accumulations)this.accumulations[e].dispose()},e.prototype.setMomentum=function(t){this.momentum=t},e.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},e.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},e.className="MomentumOptimizer",e}(Bl);Sl(Ll);var zl=function(t){function e(e,n,r,i,a){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===i&&(i=null),void 0===a&&(a=!1);var o=t.call(this)||this;return o.learningRate=e,o.decay=n,o.momentum=r,o.epsilon=i,o.accumulatedMeanSquares={},o.accumulatedMeanGrads={},o.accumulatedMoments={},o.c=Gt(je(e)),o.decayScalar=Gt(je(n)),o.momentumScalar=Gt(je(r)),o.oneMinusDecay=Gt(je(1-n)),o.centered=a,null===i&&(i=Lt.get("EPSILON")),o.epsilonScalar=Gt(je(i)),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=function(n){var i=Lt.engine.registeredVariables[n];null==r.accumulatedMeanSquares[n]&&Kt(function(){e.accumulatedMeanSquares[n]=Xe(i).variable(!1)}),null==r.accumulatedMeanGrads[n]&&r.centered&&Kt(function(){e.accumulatedMeanGrads[n]=Xe(i).variable(!1)}),null==r.accumulatedMoments[n]&&Kt(function(){e.accumulatedMoments[n]=Xe(i).variable(!1)});var a=r.accumulatedMeanSquares[n],o=r.accumulatedMeanGrads[n],s=r.accumulatedMoments[n],u=t[n];Kt(function(){var t=e.decayScalar.mul(a).add(e.oneMinusDecay.mul(u.square()));if(e.centered){var r=e.decayScalar.mul(o).add(e.oneMinusDecay.mul(u)),c=e.momentumScalar.mul(s).add(e.c.mul(u).div(t.sub(r.square().add(e.epsilonScalar)).sqrt()));e.accumulatedMeanSquares[n].assign(t),e.accumulatedMeanGrads[n].assign(r),e.accumulatedMoments[n].assign(c);var l=i.sub(c);i.assign(l)}else{var f=e.decayScalar.mul(a).add(e.oneMinusDecay.mul(u.square()));c=e.momentumScalar.mul(s).add(e.c.mul(u).div(f.add(e.epsilonScalar).sqrt())),e.accumulatedMeanSquares[n].assign(f),e.accumulatedMoments[n].assign(c),l=i.sub(c),i.assign(l)}})},r=this;for(var i in t)n(i)},e.prototype.dispose=function(){var t=this;this.c.dispose(),this.epsilonScalar.dispose(),this.decayScalar.dispose(),this.momentumScalar.dispose(),this.oneMinusDecay.dispose(),null!=this.accumulatedMeanSquares&&Object.keys(this.accumulatedMeanSquares).forEach(function(e){return t.accumulatedMeanSquares[e].dispose()}),null!=this.accumulatedMeanGrads&&this.centered&&Object.keys(this.accumulatedMeanGrads).forEach(function(e){return t.accumulatedMeanGrads[e].dispose()}),null!=this.accumulatedMoments&&Object.keys(this.accumulatedMoments).forEach(function(e){return t.accumulatedMoments[e].dispose()})},e.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},e.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},e.className="RMSPropOptimizer",e}(Tl);Sl(zl);var Fl=function(){function t(){}return t.sgd=function(t){return new Bl(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new Ll(t,e,n)},t.rmsprop=function(t,e,n,r,i){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===i&&(i=!1),new zl(t,e,n,r,i)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new Ml(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new Rl(t,e,n)},t.adamax=function(t,e,n,r,i){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===i&&(i=0),new jl(t,e,n,r,i)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new Dl(t,e)},t}(),Ul={sgd:Fl.sgd,momentum:Fl.momentum,adadelta:Fl.adadelta,adagrad:Fl.adagrad,rmsprop:Fl.rmsprop,adamax:Fl.adamax,adam:Fl.adam},Vl=jt.setBackend,Wl=jt.getBackend,ql=jt.disposeVariables,$l=jt.memory;!function(t){ct=t}(_c)}).call(this,n(14),n(11),n(83).setImmediate,n(4).Buffer)},,function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){var r=n(4),i=r.Buffer;function a(t,e){for(var n in t)e[n]=t[n]}function o(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(a(r,e),e.Buffer=o),a(i,o),o.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},o.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},o.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},o.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(137),i=n(138),a=n(84);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=h(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),i=(t=s(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|p(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):h(t,e);if("Buffer"===e.type&&a(e.data))return h(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(l(e),t=s(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|p(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return U(t).length;default:if(r)return F(t).length;e=(""+e).toLowerCase(),r=!0}}function m(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function g(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,i){var a,o=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;o=2,s/=2,u/=2,n/=2}function c(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var l=-1;for(a=n;a<s;a++)if(c(t,a)===c(e,-1===l?0:a-l)){if(-1===l&&(l=a),a-l+1===u)return l*o}else-1!==l&&(a-=a-l),l=-1}else for(n+u>s&&(n=s-u),a=n;a>=0;a--){for(var f=!0,h=0;h<u;h++)if(c(t,a+h)!==c(e,h)){f=!1;break}if(f)return a}return-1}function v(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var a=e.length;if(a%2!=0)throw new TypeError("Invalid hex string");r>a/2&&(r=a/2);for(var o=0;o<r;++o){var s=parseInt(e.substr(2*o,2),16);if(isNaN(s))return o;t[n+o]=s}return o}function b(t,e,n,r){return V(F(e,t.length-n),t,n,r)}function w(t,e,n,r){return V(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function _(t,e,n,r){return w(t,e,n,r)}function x(t,e,n,r){return V(U(e),t,n,r)}function E(t,e,n,r){return V(function(t,e){for(var n,r,i,a=[],o=0;o<t.length&&!((e-=2)<0);++o)n=t.charCodeAt(o),r=n>>8,i=n%256,a.push(i),a.push(r);return a}(e,t.length-n),t,n,r)}function S(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function N(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var a,o,s,u,c=t[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(a=t[i+1]))&&(u=(31&c)<<6|63&a)>127&&(l=u);break;case 3:a=t[i+1],o=t[i+2],128==(192&a)&&128==(192&o)&&(u=(15&c)<<12|(63&a)<<6|63&o)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:a=t[i+1],o=t[i+2],s=t[i+3],128==(192&a)&&128==(192&o)&&128==(192&s)&&(u=(15&c)<<18|(63&a)<<12|(63&o)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=f}return function(t){var e=t.length;if(e<=I)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=I));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,a=Math.min(n,r);i<a;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!a(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var o=t[n];if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?N(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return A(this,e,n);case"utf8":case"utf-8":return N(this,e,n);case"ascii":return O(this,e,n);case"latin1":case"binary":return k(this,e,n);case"base64":return S(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var a=(i>>>=0)-(r>>>=0),o=(n>>>=0)-(e>>>=0),s=Math.min(a,o),c=this.slice(r,i),l=t.slice(e,n),f=0;f<s;++f)if(c[f]!==l[f]){a=c[f],o=l[f];break}return a<o?-1:o<a?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return _(this,t,e,n);case"base64":return x(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var I=4096;function O(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function k(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function A(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",a=e;a<n;++a)i+=z(t[a]);return i}function C(t,e,n){for(var r=t.slice(e,n),i="",a=0;a<r.length;a+=2)i+=String.fromCharCode(r[a]+256*r[a+1]);return i}function P(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function T(t,e,n,r,i,a){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<a)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function R(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,a=Math.min(t.length-n,2);i<a;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function D(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,a=Math.min(t.length-n,4);i<a;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function M(t,e,n,r,i,a){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function j(t,e,n,r,a){return a||M(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function B(t,e,n,r,a){return a||M(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var a=0;a<i;++a)n[a]=this[a+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=this[t],i=1,a=0;++a<e&&(i*=256);)r+=this[t+a]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||P(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||P(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||P(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||P(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||P(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=this[t],i=1,a=0;++a<e&&(i*=256);)r+=this[t+a]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=e,i=1,a=this[t+--r];r>0&&(i*=256);)a+=this[t+--r]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*e)),a},u.prototype.readInt8=function(t,e){return e||P(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||P(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||P(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||P(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||P(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||P(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||P(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||P(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||P(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||T(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,a=0;for(this[e]=255&t;++a<n&&(i*=256);)this[e+a]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||T(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,a=1;for(this[e+i]=255&t;--i>=0&&(a*=256);)this[e+i]=t/a&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):R(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):R(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):D(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);T(this,t,e,n,i-1,-i)}var a=0,o=1,s=0;for(this[e]=255&t;++a<n&&(o*=256);)t<0&&0===s&&0!==this[e+a-1]&&(s=1),this[e+a]=(t/o>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);T(this,t,e,n,i-1,-i)}var a=n-1,o=1,s=0;for(this[e+a]=255&t;--a>=0&&(o*=256);)t<0&&0===s&&0!==this[e+a+1]&&(s=1),this[e+a]=(t/o>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):R(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):R(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):D(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||T(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return j(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return j(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return B(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return B(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,a=r-n;if(this===t&&n<e&&e<r)for(i=a-1;i>=0;--i)t[i+e]=this[i+n];else if(a<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+a),e);return a},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var a;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(a=e;a<n;++a)this[a]=t;else{var o=u.isBuffer(t)?t:F(new u(t,r).toString()),s=o.length;for(a=0;a<n-e;++a)this[a+e]=o[a%s]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function z(t){return t<16?"0"+t.toString(16):t.toString(16)}function F(t,e){var n;e=e||1/0;for(var r=t.length,i=null,a=[],o=0;o<r;++o){if((n=t.charCodeAt(o))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&a.push(239,191,189);continue}if(o+1===r){(e-=3)>-1&&a.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&a.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&a.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;a.push(n)}else if(n<2048){if((e-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function U(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(11))},function(t,e,n){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}function a(t,e,n){if(a.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(n=e,e=10),this._init(t||0,e||10,n||"be"))}var o;"object"==typeof t?t.exports=a:e.BN=a,a.BN=a,a.wordSize=26;try{o=n(174).Buffer}catch(t){}function s(t,e,n){for(var r=0,i=Math.min(t.length,n),a=e;a<i;a++){var o=t.charCodeAt(a)-48;r<<=4,r|=o>=49&&o<=54?o-49+10:o>=17&&o<=22?o-17+10:15&o}return r}function u(t,e,n,r){for(var i=0,a=Math.min(t.length,n),o=e;o<a;o++){var s=t.charCodeAt(o)-48;i*=r,i+=s>=49?s-49+10:s>=17?s-17+10:s}return i}a.isBN=function(t){return t instanceof a||null!==t&&"object"==typeof t&&t.constructor.wordSize===a.wordSize&&Array.isArray(t.words)},a.max=function(t,e){return t.cmp(e)>0?t:e},a.min=function(t,e){return t.cmp(e)<0?t:e},a.prototype._init=function(t,e,n){if("number"==typeof t)return this._initNumber(t,e,n);if("object"==typeof t)return this._initArray(t,e,n);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&i++,16===e?this._parseHex(t,i):this._parseBase(t,e,i),"-"===t[0]&&(this.negative=1),this.strip(),"le"===n&&this._initArray(this.toArray(),e,n)},a.prototype._initNumber=function(t,e,n){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),e,n)},a.prototype._initArray=function(t,e,n){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var a,o,s=0;if("be"===n)for(i=t.length-1,a=0;i>=0;i-=3)o=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[a]|=o<<s&67108863,this.words[a+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,a++);else if("le"===n)for(i=0,a=0;i<t.length;i+=3)o=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[a]|=o<<s&67108863,this.words[a+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,a++);return this.strip()},a.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var r,i,a=0;for(n=t.length-6,r=0;n>=e;n-=6)i=s(t,n,n+6),this.words[r]|=i<<a&67108863,this.words[r+1]|=i>>>26-a&4194303,(a+=24)>=26&&(a-=26,r++);n+6!==e&&(i=s(t,e,n+6),this.words[r]|=i<<a&67108863,this.words[r+1]|=i>>>26-a&4194303),this.strip()},a.prototype._parseBase=function(t,e,n){this.words=[0],this.length=1;for(var r=0,i=1;i<=67108863;i*=e)r++;r--,i=i/e|0;for(var a=t.length-n,o=a%r,s=Math.min(a,a-o)+n,c=0,l=n;l<s;l+=r)c=u(t,l,l+r,e),this.imuln(i),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==o){var f=1;for(c=u(t,l,t.length,e),l=0;l<o;l++)f*=e;this.imuln(f),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}},a.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},a.prototype.clone=function(){var t=new a(null);return this.copy(t),t},a.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},a.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},a.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},a.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var c=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],f=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function h(t,e,n){n.negative=e.negative^t.negative;var r=t.length+e.length|0;n.length=r,r=r-1|0;var i=0|t.words[0],a=0|e.words[0],o=i*a,s=67108863&o,u=o/67108864|0;n.words[0]=s;for(var c=1;c<r;c++){for(var l=u>>>26,f=67108863&u,h=Math.min(c,e.length-1),p=Math.max(0,c-t.length+1);p<=h;p++){var d=c-p|0;l+=(o=(i=0|t.words[d])*(a=0|e.words[p])+f)/67108864|0,f=67108863&o}n.words[c]=0|f,u=0|l}return 0!==u?n.words[c]=0|u:n.length--,n.strip()}a.prototype.toString=function(t,e){var n;if(e=0|e||1,16===(t=t||10)||"hex"===t){n="";for(var i=0,a=0,o=0;o<this.length;o++){var s=this.words[o],u=(16777215&(s<<i|a)).toString(16);n=0!==(a=s>>>24-i&16777215)||o!==this.length-1?c[6-u.length]+u+n:u+n,(i+=2)>=26&&(i-=26,o--)}for(0!==a&&(n=a.toString(16)+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(t===(0|t)&&t>=2&&t<=36){var h=l[t],p=f[t];n="";var d=this.clone();for(d.negative=0;!d.isZero();){var m=d.modn(p).toString(t);n=(d=d.idivn(p)).isZero()?m+n:c[h-m.length]+m+n}for(this.isZero()&&(n="0"+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},a.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},a.prototype.toJSON=function(){return this.toString(16)},a.prototype.toBuffer=function(t,e){return r(void 0!==o),this.toArrayLike(o,t,e)},a.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},a.prototype.toArrayLike=function(t,e,n){var i=this.byteLength(),a=n||Math.max(1,i);r(i<=a,"byte array longer than desired length"),r(a>0,"Requested array length <= 0"),this.strip();var o,s,u="le"===e,c=new t(a),l=this.clone();if(u){for(s=0;!l.isZero();s++)o=l.andln(255),l.iushrn(8),c[s]=o;for(;s<a;s++)c[s]=0}else{for(s=0;s<a-i;s++)c[s]=0;for(s=0;!l.isZero();s++)o=l.andln(255),l.iushrn(8),c[a-s-1]=o}return c},Math.clz32?a.prototype._countBits=function(t){return 32-Math.clz32(t)}:a.prototype._countBits=function(t){var e=t,n=0;return e>=4096&&(n+=13,e>>>=13),e>=64&&(n+=7,e>>>=7),e>=8&&(n+=4,e>>>=4),e>=2&&(n+=2,e>>>=2),n+e},a.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,n=0;return 0==(8191&e)&&(n+=13,e>>>=13),0==(127&e)&&(n+=7,e>>>=7),0==(15&e)&&(n+=4,e>>>=4),0==(3&e)&&(n+=2,e>>>=2),0==(1&e)&&n++,n},a.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},a.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var n=this._zeroBits(this.words[e]);if(t+=n,26!==n)break}return t},a.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},a.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},a.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},a.prototype.isNeg=function(){return 0!==this.negative},a.prototype.neg=function(){return this.clone().ineg()},a.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},a.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},a.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},a.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},a.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},a.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var n=0;n<e.length;n++)this.words[n]=this.words[n]&t.words[n];return this.length=e.length,this.strip()},a.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},a.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},a.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},a.prototype.iuxor=function(t){var e,n;this.length>t.length?(e=this,n=t):(e=t,n=this);for(var r=0;r<n.length;r++)this.words[r]=e.words[r]^n.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},a.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},a.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},a.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},a.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),n=t%26;this._expand(e),n>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return n>0&&(this.words[i]=~this.words[i]&67108863>>26-n),this.strip()},a.prototype.notn=function(t){return this.clone().inotn(t)},a.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var n=t/26|0,i=t%26;return this._expand(n+1),this.words[n]=e?this.words[n]|1<<i:this.words[n]&~(1<<i),this.strip()},a.prototype.iadd=function(t){var e,n,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(n=this,r=t):(n=t,r=this);for(var i=0,a=0;a<r.length;a++)e=(0|n.words[a])+(0|r.words[a])+i,this.words[a]=67108863&e,i=e>>>26;for(;0!==i&&a<n.length;a++)e=(0|n.words[a])+i,this.words[a]=67108863&e,i=e>>>26;if(this.length=n.length,0!==i)this.words[this.length]=i,this.length++;else if(n!==this)for(;a<n.length;a++)this.words[a]=n.words[a];return this},a.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},a.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var n,r,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(n=this,r=t):(n=t,r=this);for(var a=0,o=0;o<r.length;o++)a=(e=(0|n.words[o])-(0|r.words[o])+a)>>26,this.words[o]=67108863&e;for(;0!==a&&o<n.length;o++)a=(e=(0|n.words[o])+a)>>26,this.words[o]=67108863&e;if(0===a&&o<n.length&&n!==this)for(;o<n.length;o++)this.words[o]=n.words[o];return this.length=Math.max(this.length,o),n!==this&&(this.negative=1),this.strip()},a.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,n){var r,i,a,o=t.words,s=e.words,u=n.words,c=0,l=0|o[0],f=8191&l,h=l>>>13,p=0|o[1],d=8191&p,m=p>>>13,g=0|o[2],y=8191&g,v=g>>>13,b=0|o[3],w=8191&b,_=b>>>13,x=0|o[4],E=8191&x,S=x>>>13,N=0|o[5],I=8191&N,O=N>>>13,k=0|o[6],A=8191&k,C=k>>>13,P=0|o[7],T=8191&P,R=P>>>13,D=0|o[8],M=8191&D,j=D>>>13,B=0|o[9],L=8191&B,z=B>>>13,F=0|s[0],U=8191&F,V=F>>>13,W=0|s[1],q=8191&W,$=W>>>13,H=0|s[2],K=8191&H,G=H>>>13,X=0|s[3],Y=8191&X,J=X>>>13,Z=0|s[4],Q=8191&Z,tt=Z>>>13,et=0|s[5],nt=8191&et,rt=et>>>13,it=0|s[6],at=8191&it,ot=it>>>13,st=0|s[7],ut=8191&st,ct=st>>>13,lt=0|s[8],ft=8191&lt,ht=lt>>>13,pt=0|s[9],dt=8191&pt,mt=pt>>>13;n.negative=t.negative^e.negative,n.length=19;var gt=(c+(r=Math.imul(f,U))|0)+((8191&(i=(i=Math.imul(f,V))+Math.imul(h,U)|0))<<13)|0;c=((a=Math.imul(h,V))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(d,U),i=(i=Math.imul(d,V))+Math.imul(m,U)|0,a=Math.imul(m,V);var yt=(c+(r=r+Math.imul(f,q)|0)|0)+((8191&(i=(i=i+Math.imul(f,$)|0)+Math.imul(h,q)|0))<<13)|0;c=((a=a+Math.imul(h,$)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(y,U),i=(i=Math.imul(y,V))+Math.imul(v,U)|0,a=Math.imul(v,V),r=r+Math.imul(d,q)|0,i=(i=i+Math.imul(d,$)|0)+Math.imul(m,q)|0,a=a+Math.imul(m,$)|0;var vt=(c+(r=r+Math.imul(f,K)|0)|0)+((8191&(i=(i=i+Math.imul(f,G)|0)+Math.imul(h,K)|0))<<13)|0;c=((a=a+Math.imul(h,G)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(w,U),i=(i=Math.imul(w,V))+Math.imul(_,U)|0,a=Math.imul(_,V),r=r+Math.imul(y,q)|0,i=(i=i+Math.imul(y,$)|0)+Math.imul(v,q)|0,a=a+Math.imul(v,$)|0,r=r+Math.imul(d,K)|0,i=(i=i+Math.imul(d,G)|0)+Math.imul(m,K)|0,a=a+Math.imul(m,G)|0;var bt=(c+(r=r+Math.imul(f,Y)|0)|0)+((8191&(i=(i=i+Math.imul(f,J)|0)+Math.imul(h,Y)|0))<<13)|0;c=((a=a+Math.imul(h,J)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(E,U),i=(i=Math.imul(E,V))+Math.imul(S,U)|0,a=Math.imul(S,V),r=r+Math.imul(w,q)|0,i=(i=i+Math.imul(w,$)|0)+Math.imul(_,q)|0,a=a+Math.imul(_,$)|0,r=r+Math.imul(y,K)|0,i=(i=i+Math.imul(y,G)|0)+Math.imul(v,K)|0,a=a+Math.imul(v,G)|0,r=r+Math.imul(d,Y)|0,i=(i=i+Math.imul(d,J)|0)+Math.imul(m,Y)|0,a=a+Math.imul(m,J)|0;var wt=(c+(r=r+Math.imul(f,Q)|0)|0)+((8191&(i=(i=i+Math.imul(f,tt)|0)+Math.imul(h,Q)|0))<<13)|0;c=((a=a+Math.imul(h,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(I,U),i=(i=Math.imul(I,V))+Math.imul(O,U)|0,a=Math.imul(O,V),r=r+Math.imul(E,q)|0,i=(i=i+Math.imul(E,$)|0)+Math.imul(S,q)|0,a=a+Math.imul(S,$)|0,r=r+Math.imul(w,K)|0,i=(i=i+Math.imul(w,G)|0)+Math.imul(_,K)|0,a=a+Math.imul(_,G)|0,r=r+Math.imul(y,Y)|0,i=(i=i+Math.imul(y,J)|0)+Math.imul(v,Y)|0,a=a+Math.imul(v,J)|0,r=r+Math.imul(d,Q)|0,i=(i=i+Math.imul(d,tt)|0)+Math.imul(m,Q)|0,a=a+Math.imul(m,tt)|0;var _t=(c+(r=r+Math.imul(f,nt)|0)|0)+((8191&(i=(i=i+Math.imul(f,rt)|0)+Math.imul(h,nt)|0))<<13)|0;c=((a=a+Math.imul(h,rt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(A,U),i=(i=Math.imul(A,V))+Math.imul(C,U)|0,a=Math.imul(C,V),r=r+Math.imul(I,q)|0,i=(i=i+Math.imul(I,$)|0)+Math.imul(O,q)|0,a=a+Math.imul(O,$)|0,r=r+Math.imul(E,K)|0,i=(i=i+Math.imul(E,G)|0)+Math.imul(S,K)|0,a=a+Math.imul(S,G)|0,r=r+Math.imul(w,Y)|0,i=(i=i+Math.imul(w,J)|0)+Math.imul(_,Y)|0,a=a+Math.imul(_,J)|0,r=r+Math.imul(y,Q)|0,i=(i=i+Math.imul(y,tt)|0)+Math.imul(v,Q)|0,a=a+Math.imul(v,tt)|0,r=r+Math.imul(d,nt)|0,i=(i=i+Math.imul(d,rt)|0)+Math.imul(m,nt)|0,a=a+Math.imul(m,rt)|0;var xt=(c+(r=r+Math.imul(f,at)|0)|0)+((8191&(i=(i=i+Math.imul(f,ot)|0)+Math.imul(h,at)|0))<<13)|0;c=((a=a+Math.imul(h,ot)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(T,U),i=(i=Math.imul(T,V))+Math.imul(R,U)|0,a=Math.imul(R,V),r=r+Math.imul(A,q)|0,i=(i=i+Math.imul(A,$)|0)+Math.imul(C,q)|0,a=a+Math.imul(C,$)|0,r=r+Math.imul(I,K)|0,i=(i=i+Math.imul(I,G)|0)+Math.imul(O,K)|0,a=a+Math.imul(O,G)|0,r=r+Math.imul(E,Y)|0,i=(i=i+Math.imul(E,J)|0)+Math.imul(S,Y)|0,a=a+Math.imul(S,J)|0,r=r+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(_,Q)|0,a=a+Math.imul(_,tt)|0,r=r+Math.imul(y,nt)|0,i=(i=i+Math.imul(y,rt)|0)+Math.imul(v,nt)|0,a=a+Math.imul(v,rt)|0,r=r+Math.imul(d,at)|0,i=(i=i+Math.imul(d,ot)|0)+Math.imul(m,at)|0,a=a+Math.imul(m,ot)|0;var Et=(c+(r=r+Math.imul(f,ut)|0)|0)+((8191&(i=(i=i+Math.imul(f,ct)|0)+Math.imul(h,ut)|0))<<13)|0;c=((a=a+Math.imul(h,ct)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(M,U),i=(i=Math.imul(M,V))+Math.imul(j,U)|0,a=Math.imul(j,V),r=r+Math.imul(T,q)|0,i=(i=i+Math.imul(T,$)|0)+Math.imul(R,q)|0,a=a+Math.imul(R,$)|0,r=r+Math.imul(A,K)|0,i=(i=i+Math.imul(A,G)|0)+Math.imul(C,K)|0,a=a+Math.imul(C,G)|0,r=r+Math.imul(I,Y)|0,i=(i=i+Math.imul(I,J)|0)+Math.imul(O,Y)|0,a=a+Math.imul(O,J)|0,r=r+Math.imul(E,Q)|0,i=(i=i+Math.imul(E,tt)|0)+Math.imul(S,Q)|0,a=a+Math.imul(S,tt)|0,r=r+Math.imul(w,nt)|0,i=(i=i+Math.imul(w,rt)|0)+Math.imul(_,nt)|0,a=a+Math.imul(_,rt)|0,r=r+Math.imul(y,at)|0,i=(i=i+Math.imul(y,ot)|0)+Math.imul(v,at)|0,a=a+Math.imul(v,ot)|0,r=r+Math.imul(d,ut)|0,i=(i=i+Math.imul(d,ct)|0)+Math.imul(m,ut)|0,a=a+Math.imul(m,ct)|0;var St=(c+(r=r+Math.imul(f,ft)|0)|0)+((8191&(i=(i=i+Math.imul(f,ht)|0)+Math.imul(h,ft)|0))<<13)|0;c=((a=a+Math.imul(h,ht)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(L,U),i=(i=Math.imul(L,V))+Math.imul(z,U)|0,a=Math.imul(z,V),r=r+Math.imul(M,q)|0,i=(i=i+Math.imul(M,$)|0)+Math.imul(j,q)|0,a=a+Math.imul(j,$)|0,r=r+Math.imul(T,K)|0,i=(i=i+Math.imul(T,G)|0)+Math.imul(R,K)|0,a=a+Math.imul(R,G)|0,r=r+Math.imul(A,Y)|0,i=(i=i+Math.imul(A,J)|0)+Math.imul(C,Y)|0,a=a+Math.imul(C,J)|0,r=r+Math.imul(I,Q)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(O,Q)|0,a=a+Math.imul(O,tt)|0,r=r+Math.imul(E,nt)|0,i=(i=i+Math.imul(E,rt)|0)+Math.imul(S,nt)|0,a=a+Math.imul(S,rt)|0,r=r+Math.imul(w,at)|0,i=(i=i+Math.imul(w,ot)|0)+Math.imul(_,at)|0,a=a+Math.imul(_,ot)|0,r=r+Math.imul(y,ut)|0,i=(i=i+Math.imul(y,ct)|0)+Math.imul(v,ut)|0,a=a+Math.imul(v,ct)|0,r=r+Math.imul(d,ft)|0,i=(i=i+Math.imul(d,ht)|0)+Math.imul(m,ft)|0,a=a+Math.imul(m,ht)|0;var Nt=(c+(r=r+Math.imul(f,dt)|0)|0)+((8191&(i=(i=i+Math.imul(f,mt)|0)+Math.imul(h,dt)|0))<<13)|0;c=((a=a+Math.imul(h,mt)|0)+(i>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,r=Math.imul(L,q),i=(i=Math.imul(L,$))+Math.imul(z,q)|0,a=Math.imul(z,$),r=r+Math.imul(M,K)|0,i=(i=i+Math.imul(M,G)|0)+Math.imul(j,K)|0,a=a+Math.imul(j,G)|0,r=r+Math.imul(T,Y)|0,i=(i=i+Math.imul(T,J)|0)+Math.imul(R,Y)|0,a=a+Math.imul(R,J)|0,r=r+Math.imul(A,Q)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(C,Q)|0,a=a+Math.imul(C,tt)|0,r=r+Math.imul(I,nt)|0,i=(i=i+Math.imul(I,rt)|0)+Math.imul(O,nt)|0,a=a+Math.imul(O,rt)|0,r=r+Math.imul(E,at)|0,i=(i=i+Math.imul(E,ot)|0)+Math.imul(S,at)|0,a=a+Math.imul(S,ot)|0,r=r+Math.imul(w,ut)|0,i=(i=i+Math.imul(w,ct)|0)+Math.imul(_,ut)|0,a=a+Math.imul(_,ct)|0,r=r+Math.imul(y,ft)|0,i=(i=i+Math.imul(y,ht)|0)+Math.imul(v,ft)|0,a=a+Math.imul(v,ht)|0;var It=(c+(r=r+Math.imul(d,dt)|0)|0)+((8191&(i=(i=i+Math.imul(d,mt)|0)+Math.imul(m,dt)|0))<<13)|0;c=((a=a+Math.imul(m,mt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(L,K),i=(i=Math.imul(L,G))+Math.imul(z,K)|0,a=Math.imul(z,G),r=r+Math.imul(M,Y)|0,i=(i=i+Math.imul(M,J)|0)+Math.imul(j,Y)|0,a=a+Math.imul(j,J)|0,r=r+Math.imul(T,Q)|0,i=(i=i+Math.imul(T,tt)|0)+Math.imul(R,Q)|0,a=a+Math.imul(R,tt)|0,r=r+Math.imul(A,nt)|0,i=(i=i+Math.imul(A,rt)|0)+Math.imul(C,nt)|0,a=a+Math.imul(C,rt)|0,r=r+Math.imul(I,at)|0,i=(i=i+Math.imul(I,ot)|0)+Math.imul(O,at)|0,a=a+Math.imul(O,ot)|0,r=r+Math.imul(E,ut)|0,i=(i=i+Math.imul(E,ct)|0)+Math.imul(S,ut)|0,a=a+Math.imul(S,ct)|0,r=r+Math.imul(w,ft)|0,i=(i=i+Math.imul(w,ht)|0)+Math.imul(_,ft)|0,a=a+Math.imul(_,ht)|0;var Ot=(c+(r=r+Math.imul(y,dt)|0)|0)+((8191&(i=(i=i+Math.imul(y,mt)|0)+Math.imul(v,dt)|0))<<13)|0;c=((a=a+Math.imul(v,mt)|0)+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,r=Math.imul(L,Y),i=(i=Math.imul(L,J))+Math.imul(z,Y)|0,a=Math.imul(z,J),r=r+Math.imul(M,Q)|0,i=(i=i+Math.imul(M,tt)|0)+Math.imul(j,Q)|0,a=a+Math.imul(j,tt)|0,r=r+Math.imul(T,nt)|0,i=(i=i+Math.imul(T,rt)|0)+Math.imul(R,nt)|0,a=a+Math.imul(R,rt)|0,r=r+Math.imul(A,at)|0,i=(i=i+Math.imul(A,ot)|0)+Math.imul(C,at)|0,a=a+Math.imul(C,ot)|0,r=r+Math.imul(I,ut)|0,i=(i=i+Math.imul(I,ct)|0)+Math.imul(O,ut)|0,a=a+Math.imul(O,ct)|0,r=r+Math.imul(E,ft)|0,i=(i=i+Math.imul(E,ht)|0)+Math.imul(S,ft)|0,a=a+Math.imul(S,ht)|0;var kt=(c+(r=r+Math.imul(w,dt)|0)|0)+((8191&(i=(i=i+Math.imul(w,mt)|0)+Math.imul(_,dt)|0))<<13)|0;c=((a=a+Math.imul(_,mt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(L,Q),i=(i=Math.imul(L,tt))+Math.imul(z,Q)|0,a=Math.imul(z,tt),r=r+Math.imul(M,nt)|0,i=(i=i+Math.imul(M,rt)|0)+Math.imul(j,nt)|0,a=a+Math.imul(j,rt)|0,r=r+Math.imul(T,at)|0,i=(i=i+Math.imul(T,ot)|0)+Math.imul(R,at)|0,a=a+Math.imul(R,ot)|0,r=r+Math.imul(A,ut)|0,i=(i=i+Math.imul(A,ct)|0)+Math.imul(C,ut)|0,a=a+Math.imul(C,ct)|0,r=r+Math.imul(I,ft)|0,i=(i=i+Math.imul(I,ht)|0)+Math.imul(O,ft)|0,a=a+Math.imul(O,ht)|0;var At=(c+(r=r+Math.imul(E,dt)|0)|0)+((8191&(i=(i=i+Math.imul(E,mt)|0)+Math.imul(S,dt)|0))<<13)|0;c=((a=a+Math.imul(S,mt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(L,nt),i=(i=Math.imul(L,rt))+Math.imul(z,nt)|0,a=Math.imul(z,rt),r=r+Math.imul(M,at)|0,i=(i=i+Math.imul(M,ot)|0)+Math.imul(j,at)|0,a=a+Math.imul(j,ot)|0,r=r+Math.imul(T,ut)|0,i=(i=i+Math.imul(T,ct)|0)+Math.imul(R,ut)|0,a=a+Math.imul(R,ct)|0,r=r+Math.imul(A,ft)|0,i=(i=i+Math.imul(A,ht)|0)+Math.imul(C,ft)|0,a=a+Math.imul(C,ht)|0;var Ct=(c+(r=r+Math.imul(I,dt)|0)|0)+((8191&(i=(i=i+Math.imul(I,mt)|0)+Math.imul(O,dt)|0))<<13)|0;c=((a=a+Math.imul(O,mt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,r=Math.imul(L,at),i=(i=Math.imul(L,ot))+Math.imul(z,at)|0,a=Math.imul(z,ot),r=r+Math.imul(M,ut)|0,i=(i=i+Math.imul(M,ct)|0)+Math.imul(j,ut)|0,a=a+Math.imul(j,ct)|0,r=r+Math.imul(T,ft)|0,i=(i=i+Math.imul(T,ht)|0)+Math.imul(R,ft)|0,a=a+Math.imul(R,ht)|0;var Pt=(c+(r=r+Math.imul(A,dt)|0)|0)+((8191&(i=(i=i+Math.imul(A,mt)|0)+Math.imul(C,dt)|0))<<13)|0;c=((a=a+Math.imul(C,mt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(L,ut),i=(i=Math.imul(L,ct))+Math.imul(z,ut)|0,a=Math.imul(z,ct),r=r+Math.imul(M,ft)|0,i=(i=i+Math.imul(M,ht)|0)+Math.imul(j,ft)|0,a=a+Math.imul(j,ht)|0;var Tt=(c+(r=r+Math.imul(T,dt)|0)|0)+((8191&(i=(i=i+Math.imul(T,mt)|0)+Math.imul(R,dt)|0))<<13)|0;c=((a=a+Math.imul(R,mt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(L,ft),i=(i=Math.imul(L,ht))+Math.imul(z,ft)|0,a=Math.imul(z,ht);var Rt=(c+(r=r+Math.imul(M,dt)|0)|0)+((8191&(i=(i=i+Math.imul(M,mt)|0)+Math.imul(j,dt)|0))<<13)|0;c=((a=a+Math.imul(j,mt)|0)+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863;var Dt=(c+(r=Math.imul(L,dt))|0)+((8191&(i=(i=Math.imul(L,mt))+Math.imul(z,dt)|0))<<13)|0;return c=((a=Math.imul(z,mt))+(i>>>13)|0)+(Dt>>>26)|0,Dt&=67108863,u[0]=gt,u[1]=yt,u[2]=vt,u[3]=bt,u[4]=wt,u[5]=_t,u[6]=xt,u[7]=Et,u[8]=St,u[9]=Nt,u[10]=It,u[11]=Ot,u[12]=kt,u[13]=At,u[14]=Ct,u[15]=Pt,u[16]=Tt,u[17]=Rt,u[18]=Dt,0!==c&&(u[19]=c,n.length++),n};function d(t,e,n){return(new m).mulp(t,e,n)}function m(t,e){this.x=t,this.y=e}Math.imul||(p=h),a.prototype.mulTo=function(t,e){var n=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,e):n<63?h(this,t,e):n<1024?function(t,e,n){n.negative=e.negative^t.negative,n.length=t.length+e.length;for(var r=0,i=0,a=0;a<n.length-1;a++){var o=i;i=0;for(var s=67108863&r,u=Math.min(a,e.length-1),c=Math.max(0,a-t.length+1);c<=u;c++){var l=a-c,f=(0|t.words[l])*(0|e.words[c]),h=67108863&f;s=67108863&(h=h+s|0),i+=(o=(o=o+(f/67108864|0)|0)+(h>>>26)|0)>>>26,o&=67108863}n.words[a]=s,r=o,o=i}return 0!==r?n.words[a]=r:n.length--,n.strip()}(this,t,e):d(this,t,e)},m.prototype.makeRBT=function(t){for(var e=new Array(t),n=a.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,n,t);return e},m.prototype.revBin=function(t,e,n){if(0===t||t===n-1)return t;for(var r=0,i=0;i<e;i++)r|=(1&t)<<e-i-1,t>>=1;return r},m.prototype.permute=function(t,e,n,r,i,a){for(var o=0;o<a;o++)r[o]=e[t[o]],i[o]=n[t[o]]},m.prototype.transform=function(t,e,n,r,i,a){this.permute(a,t,e,n,r,i);for(var o=1;o<i;o<<=1)for(var s=o<<1,u=Math.cos(2*Math.PI/s),c=Math.sin(2*Math.PI/s),l=0;l<i;l+=s)for(var f=u,h=c,p=0;p<o;p++){var d=n[l+p],m=r[l+p],g=n[l+p+o],y=r[l+p+o],v=f*g-h*y;y=f*y+h*g,g=v,n[l+p]=d+g,r[l+p]=m+y,n[l+p+o]=d-g,r[l+p+o]=m-y,p!==s&&(v=u*f-c*h,h=u*h+c*f,f=v)}},m.prototype.guessLen13b=function(t,e){var n=1|Math.max(e,t),r=1&n,i=0;for(n=n/2|0;n;n>>>=1)i++;return 1<<i+1+r},m.prototype.conjugate=function(t,e,n){if(!(n<=1))for(var r=0;r<n/2;r++){var i=t[r];t[r]=t[n-r-1],t[n-r-1]=i,i=e[r],e[r]=-e[n-r-1],e[n-r-1]=-i}},m.prototype.normalize13b=function(t,e){for(var n=0,r=0;r<e/2;r++){var i=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+n;t[r]=67108863&i,n=i<67108864?0:i/67108864|0}return t},m.prototype.convert13b=function(t,e,n,i){for(var a=0,o=0;o<e;o++)a+=0|t[o],n[2*o]=8191&a,a>>>=13,n[2*o+1]=8191&a,a>>>=13;for(o=2*e;o<i;++o)n[o]=0;r(0===a),r(0==(-8192&a))},m.prototype.stub=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=0;return e},m.prototype.mulp=function(t,e,n){var r=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(r),a=this.stub(r),o=new Array(r),s=new Array(r),u=new Array(r),c=new Array(r),l=new Array(r),f=new Array(r),h=n.words;h.length=r,this.convert13b(t.words,t.length,o,r),this.convert13b(e.words,e.length,c,r),this.transform(o,a,s,u,r,i),this.transform(c,a,l,f,r,i);for(var p=0;p<r;p++){var d=s[p]*l[p]-u[p]*f[p];u[p]=s[p]*f[p]+u[p]*l[p],s[p]=d}return this.conjugate(s,u,r),this.transform(s,u,h,a,r,i),this.conjugate(h,a,r),this.normalize13b(h,r),n.negative=t.negative^e.negative,n.length=t.length+e.length,n.strip()},a.prototype.mul=function(t){var e=new a(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},a.prototype.mulf=function(t){var e=new a(null);return e.words=new Array(this.length+t.length),d(this,t,e)},a.prototype.imul=function(t){return this.clone().mulTo(t,this)},a.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,n=0;n<this.length;n++){var i=(0|this.words[n])*t,a=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=a>>>26,this.words[n]=67108863&a}return 0!==e&&(this.words[n]=e,this.length++),this},a.prototype.muln=function(t){return this.clone().imuln(t)},a.prototype.sqr=function(){return this.mul(this)},a.prototype.isqr=function(){return this.imul(this.clone())},a.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),n=0;n<e.length;n++){var r=n/26|0,i=n%26;e[n]=(t.words[r]&1<<i)>>>i}return e}(t);if(0===e.length)return new a(1);for(var n=this,r=0;r<e.length&&0===e[r];r++,n=n.sqr());if(++r<e.length)for(var i=n.sqr();r<e.length;r++,i=i.sqr())0!==e[r]&&(n=n.mul(i));return n},a.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,n=t%26,i=(t-n)/26,a=67108863>>>26-n<<26-n;if(0!==n){var o=0;for(e=0;e<this.length;e++){var s=this.words[e]&a,u=(0|this.words[e])-s<<n;this.words[e]=u|o,o=s>>>26-n}o&&(this.words[e]=o,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},a.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},a.prototype.iushrn=function(t,e,n){var i;r("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var a=t%26,o=Math.min((t-a)/26,this.length),s=67108863^67108863>>>a<<a,u=n;if(i-=o,i=Math.max(0,i),u){for(var c=0;c<o;c++)u.words[c]=this.words[c];u.length=o}if(0===o);else if(this.length>o)for(this.length-=o,c=0;c<this.length;c++)this.words[c]=this.words[c+o];else this.words[0]=0,this.length=1;var l=0;for(c=this.length-1;c>=0&&(0!==l||c>=i);c--){var f=0|this.words[c];this.words[c]=l<<26-a|f>>>a,l=f&s}return u&&0!==l&&(u.words[u.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},a.prototype.ishrn=function(t,e,n){return r(0===this.negative),this.iushrn(t,e,n)},a.prototype.shln=function(t){return this.clone().ishln(t)},a.prototype.ushln=function(t){return this.clone().iushln(t)},a.prototype.shrn=function(t){return this.clone().ishrn(t)},a.prototype.ushrn=function(t){return this.clone().iushrn(t)},a.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26,i=1<<e;return!(this.length<=n)&&!!(this.words[n]&i)},a.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==e&&n++,this.length=Math.min(n,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},a.prototype.maskn=function(t){return this.clone().imaskn(t)},a.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},a.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},a.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},a.prototype.addn=function(t){return this.clone().iaddn(t)},a.prototype.subn=function(t){return this.clone().isubn(t)},a.prototype.iabs=function(){return this.negative=0,this},a.prototype.abs=function(){return this.clone().iabs()},a.prototype._ishlnsubmul=function(t,e,n){var i,a,o=t.length+n;this._expand(o);var s=0;for(i=0;i<t.length;i++){a=(0|this.words[i+n])+s;var u=(0|t.words[i])*e;s=((a-=67108863&u)>>26)-(u/67108864|0),this.words[i+n]=67108863&a}for(;i<this.length-n;i++)s=(a=(0|this.words[i+n])+s)>>26,this.words[i+n]=67108863&a;if(0===s)return this.strip();for(r(-1===s),s=0,i=0;i<this.length;i++)s=(a=-(0|this.words[i])+s)>>26,this.words[i]=67108863&a;return this.negative=1,this.strip()},a.prototype._wordDiv=function(t,e){var n=(this.length,t.length),r=this.clone(),i=t,o=0|i.words[i.length-1];0!==(n=26-this._countBits(o))&&(i=i.ushln(n),r.iushln(n),o=0|i.words[i.length-1]);var s,u=r.length-i.length;if("mod"!==e){(s=new a(null)).length=u+1,s.words=new Array(s.length);for(var c=0;c<s.length;c++)s.words[c]=0}var l=r.clone()._ishlnsubmul(i,1,u);0===l.negative&&(r=l,s&&(s.words[u]=1));for(var f=u-1;f>=0;f--){var h=67108864*(0|r.words[i.length+f])+(0|r.words[i.length+f-1]);for(h=Math.min(h/o|0,67108863),r._ishlnsubmul(i,h,f);0!==r.negative;)h--,r.negative=0,r._ishlnsubmul(i,1,f),r.isZero()||(r.negative^=1);s&&(s.words[f]=h)}return s&&s.strip(),r.strip(),"div"!==e&&0!==n&&r.iushrn(n),{div:s||null,mod:r}},a.prototype.divmod=function(t,e,n){return r(!t.isZero()),this.isZero()?{div:new a(0),mod:new a(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(i=s.div.neg()),"div"!==e&&(o=s.mod.neg(),n&&0!==o.negative&&o.iadd(t)),{div:i,mod:o}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(o=s.mod.neg(),n&&0!==o.negative&&o.isub(t)),{div:s.div,mod:o}):t.length>this.length||this.cmp(t)<0?{div:new a(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new a(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new a(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,o,s},a.prototype.div=function(t){return this.divmod(t,"div",!1).div},a.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},a.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},a.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var n=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),i=t.andln(1),a=n.cmp(r);return a<0||1===i&&0===a?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},a.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,n=0,i=this.length-1;i>=0;i--)n=(e*n+(0|this.words[i]))%t;return n},a.prototype.idivn=function(t){r(t<=67108863);for(var e=0,n=this.length-1;n>=0;n--){var i=(0|this.words[n])+67108864*e;this.words[n]=i/t|0,e=i%t}return this.strip()},a.prototype.divn=function(t){return this.clone().idivn(t)},a.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new a(1),o=new a(0),s=new a(0),u=new a(1),c=0;e.isEven()&&n.isEven();)e.iushrn(1),n.iushrn(1),++c;for(var l=n.clone(),f=e.clone();!e.isZero();){for(var h=0,p=1;0==(e.words[0]&p)&&h<26;++h,p<<=1);if(h>0)for(e.iushrn(h);h-- >0;)(i.isOdd()||o.isOdd())&&(i.iadd(l),o.isub(f)),i.iushrn(1),o.iushrn(1);for(var d=0,m=1;0==(n.words[0]&m)&&d<26;++d,m<<=1);if(d>0)for(n.iushrn(d);d-- >0;)(s.isOdd()||u.isOdd())&&(s.iadd(l),u.isub(f)),s.iushrn(1),u.iushrn(1);e.cmp(n)>=0?(e.isub(n),i.isub(s),o.isub(u)):(n.isub(e),s.isub(i),u.isub(o))}return{a:s,b:u,gcd:n.iushln(c)}},a.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,o=new a(1),s=new a(0),u=n.clone();e.cmpn(1)>0&&n.cmpn(1)>0;){for(var c=0,l=1;0==(e.words[0]&l)&&c<26;++c,l<<=1);if(c>0)for(e.iushrn(c);c-- >0;)o.isOdd()&&o.iadd(u),o.iushrn(1);for(var f=0,h=1;0==(n.words[0]&h)&&f<26;++f,h<<=1);if(f>0)for(n.iushrn(f);f-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);e.cmp(n)>=0?(e.isub(n),o.isub(s)):(n.isub(e),s.isub(o))}return(i=0===e.cmpn(1)?o:s).cmpn(0)<0&&i.iadd(t),i},a.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),n=t.clone();e.negative=0,n.negative=0;for(var r=0;e.isEven()&&n.isEven();r++)e.iushrn(1),n.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;n.isEven();)n.iushrn(1);var i=e.cmp(n);if(i<0){var a=e;e=n,n=a}else if(0===i||0===n.cmpn(1))break;e.isub(n)}return n.iushln(r)},a.prototype.invm=function(t){return this.egcd(t).a.umod(t)},a.prototype.isEven=function(){return 0==(1&this.words[0])},a.prototype.isOdd=function(){return 1==(1&this.words[0])},a.prototype.andln=function(t){return this.words[0]&t},a.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,n=(t-e)/26,i=1<<e;if(this.length<=n)return this._expand(n+1),this.words[n]|=i,this;for(var a=i,o=n;0!==a&&o<this.length;o++){var s=0|this.words[o];a=(s+=a)>>>26,s&=67108863,this.words[o]=s}return 0!==a&&(this.words[o]=a,this.length++),this},a.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},a.prototype.cmpn=function(t){var e,n=t<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this.strip(),this.length>1)e=1;else{n&&(t=-t),r(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},a.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},a.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,n=this.length-1;n>=0;n--){var r=0|this.words[n],i=0|t.words[n];if(r!==i){r<i?e=-1:r>i&&(e=1);break}}return e},a.prototype.gtn=function(t){return 1===this.cmpn(t)},a.prototype.gt=function(t){return 1===this.cmp(t)},a.prototype.gten=function(t){return this.cmpn(t)>=0},a.prototype.gte=function(t){return this.cmp(t)>=0},a.prototype.ltn=function(t){return-1===this.cmpn(t)},a.prototype.lt=function(t){return-1===this.cmp(t)},a.prototype.lten=function(t){return this.cmpn(t)<=0},a.prototype.lte=function(t){return this.cmp(t)<=0},a.prototype.eqn=function(t){return 0===this.cmpn(t)},a.prototype.eq=function(t){return 0===this.cmp(t)},a.red=function(t){return new x(t)},a.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},a.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},a.prototype._forceRed=function(t){return this.red=t,this},a.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},a.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},a.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},a.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},a.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},a.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},a.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},a.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},a.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},a.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},a.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},a.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},a.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},a.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function y(t,e){this.name=t,this.p=new a(e,16),this.n=this.p.bitLength(),this.k=new a(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function b(){y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function x(t){if("string"==typeof t){var e=a._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function E(t){x.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new a(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var t=new a(null);return t.words=new Array(Math.ceil(this.n/13)),t},y.prototype.ireduce=function(t){var e,n=t;do{this.split(n,this.tmp),e=(n=(n=this.imulK(n)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:n.ucmp(this.p);return 0===r?(n.words[0]=0,n.length=1):r>0?n.isub(this.p):n.strip(),n},y.prototype.split=function(t,e){t.iushrn(this.n,0,e)},y.prototype.imulK=function(t){return t.imul(this.k)},i(v,y),v.prototype.split=function(t,e){for(var n=Math.min(t.length,9),r=0;r<n;r++)e.words[r]=t.words[r];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var i=t.words[9];for(e.words[e.length++]=4194303&i,r=10;r<t.length;r++){var a=0|t.words[r];t.words[r-10]=(4194303&a)<<4|i>>>22,i=a}i>>>=22,t.words[r-10]=i,0===i&&t.length>10?t.length-=10:t.length-=9},v.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,n=0;n<t.length;n++){var r=0|t.words[n];e+=977*r,t.words[n]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(b,y),i(w,y),i(_,y),_.prototype.imulK=function(t){for(var e=0,n=0;n<t.length;n++){var r=19*(0|t.words[n])+e,i=67108863&r;r>>>=26,t.words[n]=i,e=r}return 0!==e&&(t.words[t.length++]=e),t},a._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new v;else if("p224"===t)e=new b;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return g[t]=e,e},x.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},x.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},x.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},x.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},x.prototype.add=function(t,e){this._verify2(t,e);var n=t.add(e);return n.cmp(this.m)>=0&&n.isub(this.m),n._forceRed(this)},x.prototype.iadd=function(t,e){this._verify2(t,e);var n=t.iadd(e);return n.cmp(this.m)>=0&&n.isub(this.m),n},x.prototype.sub=function(t,e){this._verify2(t,e);var n=t.sub(e);return n.cmpn(0)<0&&n.iadd(this.m),n._forceRed(this)},x.prototype.isub=function(t,e){this._verify2(t,e);var n=t.isub(e);return n.cmpn(0)<0&&n.iadd(this.m),n},x.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},x.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},x.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},x.prototype.isqr=function(t){return this.imul(t,t.clone())},x.prototype.sqr=function(t){return this.mul(t,t)},x.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var n=this.m.add(new a(1)).iushrn(2);return this.pow(t,n)}for(var i=this.m.subn(1),o=0;!i.isZero()&&0===i.andln(1);)o++,i.iushrn(1);r(!i.isZero());var s=new a(1).toRed(this),u=s.redNeg(),c=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new a(2*l*l).toRed(this);0!==this.pow(l,c).cmp(u);)l.redIAdd(u);for(var f=this.pow(l,i),h=this.pow(t,i.addn(1).iushrn(1)),p=this.pow(t,i),d=o;0!==p.cmp(s);){for(var m=p,g=0;0!==m.cmp(s);g++)m=m.redSqr();r(g<d);var y=this.pow(f,new a(1).iushln(d-g-1));h=h.redMul(y),f=y.redSqr(),p=p.redMul(f),d=g}return h},x.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},x.prototype.pow=function(t,e){if(e.isZero())return new a(1).toRed(this);if(0===e.cmpn(1))return t.clone();var n=new Array(16);n[0]=new a(1).toRed(this),n[1]=t;for(var r=2;r<n.length;r++)n[r]=this.mul(n[r-1],t);var i=n[0],o=0,s=0,u=e.bitLength()%26;for(0===u&&(u=26),r=e.length-1;r>=0;r--){for(var c=e.words[r],l=u-1;l>=0;l--){var f=c>>l&1;i!==n[0]&&(i=this.sqr(i)),0!==f||0!==o?(o<<=1,o|=f,(4===++s||0===r&&0===l)&&(i=this.mul(i,n[o]),s=0,o=0)):s=0}u=26}return i},x.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},x.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},a.mont=function(t){return new E(t)},i(E,x),E.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},E.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},E.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var n=t.imul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),a=i;return i.cmp(this.m)>=0?a=i.isub(this.m):i.cmpn(0)<0&&(a=i.iadd(this.m)),a._forceRed(this)},E.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new a(0)._forceRed(this);var n=t.mul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},E.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,n(173)(t))},,,function(t,e,n){"use strict";var r=e;r.version=n(180).version,r.utils=n(181),r.rand=n(107),r.curve=n(45),r.curves=n(186),r.ec=n(194),r.eddsa=n(198)},,,function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){function n(t,e){if(!t)throw new Error(e||"Assertion failed")}t.exports=n,n.equal=function(t,e,n){if(t!=e)throw new Error(n||"Assertion failed: "+t+" != "+e)}},,function(t,e){var n,r,i=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(t){n=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(t){r=o}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var t=s(h);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";var r=n(12),i=n(2);function a(t,e){return 55296==(64512&t.charCodeAt(e))&&(!(e<0||e+1>=t.length)&&56320==(64512&t.charCodeAt(e+1)))}function o(t){return(t>>>24|t>>>8&65280|t<<8&16711680|(255&t)<<24)>>>0}function s(t){return 1===t.length?"0"+t:t}function u(t){return 7===t.length?"0"+t:6===t.length?"00"+t:5===t.length?"000"+t:4===t.length?"0000"+t:3===t.length?"00000"+t:2===t.length?"000000"+t:1===t.length?"0000000"+t:t}e.inherits=i,e.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var n=[];if("string"==typeof t)if(e){if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),i=0;i<t.length;i+=2)n.push(parseInt(t[i]+t[i+1],16))}else for(var r=0,i=0;i<t.length;i++){var o=t.charCodeAt(i);o<128?n[r++]=o:o<2048?(n[r++]=o>>6|192,n[r++]=63&o|128):a(t,i)?(o=65536+((1023&o)<<10)+(1023&t.charCodeAt(++i)),n[r++]=o>>18|240,n[r++]=o>>12&63|128,n[r++]=o>>6&63|128,n[r++]=63&o|128):(n[r++]=o>>12|224,n[r++]=o>>6&63|128,n[r++]=63&o|128)}else for(i=0;i<t.length;i++)n[i]=0|t[i];return n},e.toHex=function(t){for(var e="",n=0;n<t.length;n++)e+=s(t[n].toString(16));return e},e.htonl=o,e.toHex32=function(t,e){for(var n="",r=0;r<t.length;r++){var i=t[r];"little"===e&&(i=o(i)),n+=u(i.toString(16))}return n},e.zero2=s,e.zero8=u,e.join32=function(t,e,n,i){var a=n-e;r(a%4==0);for(var o=new Array(a/4),s=0,u=e;s<o.length;s++,u+=4){var c;c="big"===i?t[u]<<24|t[u+1]<<16|t[u+2]<<8|t[u+3]:t[u+3]<<24|t[u+2]<<16|t[u+1]<<8|t[u],o[s]=c>>>0}return o},e.split32=function(t,e){for(var n=new Array(4*t.length),r=0,i=0;r<t.length;r++,i+=4){var a=t[r];"big"===e?(n[i]=a>>>24,n[i+1]=a>>>16&255,n[i+2]=a>>>8&255,n[i+3]=255&a):(n[i+3]=a>>>24,n[i+2]=a>>>16&255,n[i+1]=a>>>8&255,n[i]=255&a)}return n},e.rotr32=function(t,e){return t>>>e|t<<32-e},e.rotl32=function(t,e){return t<<e|t>>>32-e},e.sum32=function(t,e){return t+e>>>0},e.sum32_3=function(t,e,n){return t+e+n>>>0},e.sum32_4=function(t,e,n,r){return t+e+n+r>>>0},e.sum32_5=function(t,e,n,r,i){return t+e+n+r+i>>>0},e.sum64=function(t,e,n,r){var i=t[e],a=r+t[e+1]>>>0,o=(a<r?1:0)+n+i;t[e]=o>>>0,t[e+1]=a},e.sum64_hi=function(t,e,n,r){return(e+r>>>0<e?1:0)+t+n>>>0},e.sum64_lo=function(t,e,n,r){return e+r>>>0},e.sum64_4_hi=function(t,e,n,r,i,a,o,s){var u=0,c=e;return u+=(c=c+r>>>0)<e?1:0,u+=(c=c+a>>>0)<a?1:0,t+n+i+o+(u+=(c=c+s>>>0)<s?1:0)>>>0},e.sum64_4_lo=function(t,e,n,r,i,a,o,s){return e+r+a+s>>>0},e.sum64_5_hi=function(t,e,n,r,i,a,o,s,u,c){var l=0,f=e;return l+=(f=f+r>>>0)<e?1:0,l+=(f=f+a>>>0)<a?1:0,l+=(f=f+s>>>0)<s?1:0,t+n+i+o+u+(l+=(f=f+c>>>0)<c?1:0)>>>0},e.sum64_5_lo=function(t,e,n,r,i,a,o,s,u,c){return e+r+a+s+c>>>0},e.rotr64_hi=function(t,e,n){return(e<<32-n|t>>>n)>>>0},e.rotr64_lo=function(t,e,n){return(t<<32-n|e>>>n)>>>0},e.shr64_hi=function(t,e,n){return t>>>n},e.shr64_lo=function(t,e,n){return(t<<32-n|e>>>n)>>>0}},,,function(t,e,n){var r=n(3).Buffer,i=n(57).Transform,a=n(42).StringDecoder;function o(t){i.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}n(2)(o,i),o.prototype.update=function(t,e,n){"string"==typeof t&&(t=r.from(t,e));var i=this._update(t);return this.hashMode?this:(n&&(i=this._toString(i,n)),i)},o.prototype.setAutoPadding=function(){},o.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},o.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},o.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},o.prototype._transform=function(t,e,n){var r;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){r=t}finally{n(r)}},o.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},o.prototype._finalOrDigest=function(t){var e=this.__final()||r.alloc(0);return t&&(e=this._toString(e,t,!0)),e},o.prototype._toString=function(t,e,n){if(this._decoder||(this._decoder=new a(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var r=this._decoder.write(t);return n&&(r+=this._decoder.end()),r},t.exports=o},,,function(t,e,n){"use strict";var r=n(41),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=f;var a=n(31);a.inherits=n(2);var o=n(87),s=n(60);a.inherits(f,o);for(var u=i(s.prototype),c=0;c<u.length;c++){var l=u[c];f.prototype[l]||(f.prototype[l]=s.prototype[l])}function f(t){if(!(this instanceof f))return new f(t);o.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||r.nextTick(p,this)}function p(t){t.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),f.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){"use strict";(function(e,r){var i=n(3).Buffer,a=e.crypto||e.msCrypto;a&&a.getRandomValues?t.exports=function(t,n){if(t>65536)throw new Error("requested too many random bytes");var o=new e.Uint8Array(t);t>0&&a.getRandomValues(o);var s=i.from(o.buffer);if("function"==typeof n)return r.nextTick(function(){n(null,s)});return s}:t.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,n(11),n(14))},function(t,e,n){var r=n(3).Buffer;function i(t,e){this._block=r.alloc(t),this._finalSize=e,this._blockSize=t,this._len=0}i.prototype.update=function(t,e){"string"==typeof t&&(e=e||"utf8",t=r.from(t,e));for(var n=this._block,i=this._blockSize,a=t.length,o=this._len,s=0;s<a;){for(var u=o%i,c=Math.min(a-s,i-u),l=0;l<c;l++)n[u+l]=t[s+l];s+=c,(o+=c)%i==0&&this._update(n)}return this._len+=a,this},i.prototype.digest=function(t){var e=this._len%this._blockSize;this._block[e]=128,this._block.fill(0,e+1),e>=this._finalSize&&(this._update(this._block),this._block.fill(0));var n=8*this._len;if(n<=4294967295)this._block.writeUInt32BE(n,this._blockSize-4);else{var r=(4294967295&n)>>>0,i=(n-r)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var a=this._hash();return t?a.toString(t):a},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=i},,,,,,,function(t,e,n){"use strict";var r=n(2),i=n(56),a=n(61),o=n(62),s=n(18);function u(t){s.call(this,"digest"),this._hash=t}r(u,s),u.prototype._update=function(t){this._hash.update(t)},u.prototype._final=function(){return this._hash.digest()},t.exports=function(t){return"md5"===(t=t.toLowerCase())?new i:"rmd160"===t||"ripemd160"===t?new a:new u(o(t))}},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(4).Buffer)},function(t,e,n){(function(e){t.exports=function(t,n){for(var r=Math.min(t.length,n.length),i=new e(r),a=0;a<r;++a)i[a]=t[a]^n[a];return i}}).call(this,n(4).Buffer)},function(t,e,n){"use strict";var r=n(15),i=n(12);function a(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}e.BlockHash=a,a.prototype.update=function(t,e){if(t=r.toArray(t,e),this.pending?this.pending=this.pending.concat(t):this.pending=t,this.pendingTotal+=t.length,this.pending.length>=this._delta8){var n=(t=this.pending).length%this._delta8;this.pending=t.slice(t.length-n,t.length),0===this.pending.length&&(this.pending=null),t=r.join32(t,0,t.length-n,this.endian);for(var i=0;i<t.length;i+=this._delta32)this._update(t,i,i+this._delta32)}return this},a.prototype.digest=function(t){return this.update(this._pad()),i(null===this.pending),this._digest(t)},a.prototype._pad=function(){var t=this.pendingTotal,e=this._delta8,n=e-(t+this.padLength)%e,r=new Array(n+this.padLength);r[0]=128;for(var i=1;i<n;i++)r[i]=0;if(t<<=3,"big"===this.endian){for(var a=8;a<this.padLength;a++)r[i++]=0;r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=t>>>24&255,r[i++]=t>>>16&255,r[i++]=t>>>8&255,r[i++]=255&t}else for(r[i++]=255&t,r[i++]=t>>>8&255,r[i++]=t>>>16&255,r[i++]=t>>>24&255,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=0,a=8;a<this.padLength;a++)r[i++]=0;return r}},function(t,e,n){var r=e;r.bignum=n(5),r.define=n(202).define,r.base=n(35),r.constants=n(113),r.decoders=n(208),r.encoders=n(210)},function(t,e,n){var r=e;r.Reporter=n(205).Reporter,r.DecoderBuffer=n(112).DecoderBuffer,r.EncoderBuffer=n(112).EncoderBuffer,r.Node=n(206)},,,,,,function(t,e,n){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var a,o,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,n)});case 3:return e.nextTick(function(){t.call(null,n,r)});case 4:return e.nextTick(function(){t.call(null,n,r,i)});default:for(a=new Array(s-1),o=0;o<a.length;)a[o++]=arguments[o];return e.nextTick(function(){t.apply(null,a)})}}}:t.exports=e}).call(this,n(14))},function(t,e,n){"use strict";var r=n(3).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function a(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=l,this.end=f,e=3;break;default:return this.write=h,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function o(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function l(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function h(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.StringDecoder=a,a.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},a.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},a.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=o(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=o(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=o(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},a.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){var r=n(3).Buffer;function i(t){r.isBuffer(t)||(t=r.from(t));for(var e=t.length/4|0,n=new Array(e),i=0;i<e;i++)n[i]=t.readUInt32BE(4*i);return n}function a(t){for(;0<t.length;t++)t[0]=0}function o(t,e,n,r,i){for(var a,o,s,u,c=n[0],l=n[1],f=n[2],h=n[3],p=t[0]^e[0],d=t[1]^e[1],m=t[2]^e[2],g=t[3]^e[3],y=4,v=1;v<i;v++)a=c[p>>>24]^l[d>>>16&255]^f[m>>>8&255]^h[255&g]^e[y++],o=c[d>>>24]^l[m>>>16&255]^f[g>>>8&255]^h[255&p]^e[y++],s=c[m>>>24]^l[g>>>16&255]^f[p>>>8&255]^h[255&d]^e[y++],u=c[g>>>24]^l[p>>>16&255]^f[d>>>8&255]^h[255&m]^e[y++],p=a,d=o,m=s,g=u;return a=(r[p>>>24]<<24|r[d>>>16&255]<<16|r[m>>>8&255]<<8|r[255&g])^e[y++],o=(r[d>>>24]<<24|r[m>>>16&255]<<16|r[g>>>8&255]<<8|r[255&p])^e[y++],s=(r[m>>>24]<<24|r[g>>>16&255]<<16|r[p>>>8&255]<<8|r[255&d])^e[y++],u=(r[g>>>24]<<24|r[p>>>16&255]<<16|r[d>>>8&255]<<8|r[255&m])^e[y++],[a>>>=0,o>>>=0,s>>>=0,u>>>=0]}var s=[0,1,2,4,8,16,32,64,128,27,54],u=function(){for(var t=new Array(256),e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;for(var n=[],r=[],i=[[],[],[],[]],a=[[],[],[],[]],o=0,s=0,u=0;u<256;++u){var c=s^s<<1^s<<2^s<<3^s<<4;c=c>>>8^255&c^99,n[o]=c,r[c]=o;var l=t[o],f=t[l],h=t[f],p=257*t[c]^16843008*c;i[0][o]=p<<24|p>>>8,i[1][o]=p<<16|p>>>16,i[2][o]=p<<8|p>>>24,i[3][o]=p,p=16843009*h^65537*f^257*l^16843008*o,a[0][c]=p<<24|p>>>8,a[1][c]=p<<16|p>>>16,a[2][c]=p<<8|p>>>24,a[3][c]=p,0===o?o=s=1:(o=l^t[t[t[h^l]]],s^=t[t[s]])}return{SBOX:n,INV_SBOX:r,SUB_MIX:i,INV_SUB_MIX:a}}();function c(t){this._key=i(t),this._reset()}c.blockSize=16,c.keySize=32,c.prototype.blockSize=c.blockSize,c.prototype.keySize=c.keySize,c.prototype._reset=function(){for(var t=this._key,e=t.length,n=e+6,r=4*(n+1),i=[],a=0;a<e;a++)i[a]=t[a];for(a=e;a<r;a++){var o=i[a-1];a%e==0?(o=o<<8|o>>>24,o=u.SBOX[o>>>24]<<24|u.SBOX[o>>>16&255]<<16|u.SBOX[o>>>8&255]<<8|u.SBOX[255&o],o^=s[a/e|0]<<24):e>6&&a%e==4&&(o=u.SBOX[o>>>24]<<24|u.SBOX[o>>>16&255]<<16|u.SBOX[o>>>8&255]<<8|u.SBOX[255&o]),i[a]=i[a-e]^o}for(var c=[],l=0;l<r;l++){var f=r-l,h=i[f-(l%4?0:4)];c[l]=l<4||f<=4?h:u.INV_SUB_MIX[0][u.SBOX[h>>>24]]^u.INV_SUB_MIX[1][u.SBOX[h>>>16&255]]^u.INV_SUB_MIX[2][u.SBOX[h>>>8&255]]^u.INV_SUB_MIX[3][u.SBOX[255&h]]}this._nRounds=n,this._keySchedule=i,this._invKeySchedule=c},c.prototype.encryptBlockRaw=function(t){return o(t=i(t),this._keySchedule,u.SUB_MIX,u.SBOX,this._nRounds)},c.prototype.encryptBlock=function(t){var e=this.encryptBlockRaw(t),n=r.allocUnsafe(16);return n.writeUInt32BE(e[0],0),n.writeUInt32BE(e[1],4),n.writeUInt32BE(e[2],8),n.writeUInt32BE(e[3],12),n},c.prototype.decryptBlock=function(t){var e=(t=i(t))[1];t[1]=t[3],t[3]=e;var n=o(t,this._invKeySchedule,u.INV_SUB_MIX,u.INV_SBOX,this._nRounds),a=r.allocUnsafe(16);return a.writeUInt32BE(n[0],0),a.writeUInt32BE(n[3],4),a.writeUInt32BE(n[2],8),a.writeUInt32BE(n[1],12),a},c.prototype.scrub=function(){a(this._keySchedule),a(this._invKeySchedule),a(this._key)},t.exports.AES=c},function(t,e,n){var r=n(3).Buffer,i=n(56);t.exports=function(t,e,n,a){if(r.isBuffer(t)||(t=r.from(t,"binary")),e&&(r.isBuffer(e)||(e=r.from(e,"binary")),8!==e.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var o=n/8,s=r.alloc(o),u=r.alloc(a||0),c=r.alloc(0);o>0||a>0;){var l=new i;l.update(c),l.update(t),e&&l.update(e),c=l.digest();var f=0;if(o>0){var h=s.length-o;f=Math.min(o,c.length),c.copy(s,h,0,f),o-=f}if(f<c.length&&a>0){var p=u.length-a,d=Math.min(a,c.length-f);c.copy(u,p,f,f+d),a-=d}}return c.fill(0),{key:s,iv:u}}},function(t,e,n){"use strict";var r=e;r.base=n(182),r.short=n(183),r.mont=n(184),r.edwards=n(185)},function(t,e,n){(function(e){var r=n(201),i=n(213),a=n(214),o=n(64),s=n(96);function u(t){var n;"object"!=typeof t||e.isBuffer(t)||(n=t.passphrase,t=t.key),"string"==typeof t&&(t=new e(t));var u,c,l=a(t,n),f=l.tag,h=l.data;switch(f){case"CERTIFICATE":c=r.certificate.decode(h,"der").tbsCertificate.subjectPublicKeyInfo;case"PUBLIC KEY":switch(c||(c=r.PublicKey.decode(h,"der")),u=c.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return r.RSAPublicKey.decode(c.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return c.subjectPrivateKey=c.subjectPublicKey,{type:"ec",data:c};case"1.2.840.10040.4.1":return c.algorithm.params.pub_key=r.DSAparam.decode(c.subjectPublicKey.data,"der"),{type:"dsa",data:c.algorithm.params};default:throw new Error("unknown key id "+u)}throw new Error("unknown key type "+f);case"ENCRYPTED PRIVATE KEY":h=function(t,n){var r=t.algorithm.decrypt.kde.kdeparams.salt,a=parseInt(t.algorithm.decrypt.kde.kdeparams.iters.toString(),10),u=i[t.algorithm.decrypt.cipher.algo.join(".")],c=t.algorithm.decrypt.cipher.iv,l=t.subjectPrivateKey,f=parseInt(u.split("-")[1],10)/8,h=s.pbkdf2Sync(n,r,a,f),p=o.createDecipheriv(u,h,c),d=[];return d.push(p.update(l)),d.push(p.final()),e.concat(d)}(h=r.EncryptedPrivateKey.decode(h,"der"),n);case"PRIVATE KEY":switch(u=(c=r.PrivateKey.decode(h,"der")).algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return r.RSAPrivateKey.decode(c.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:c.algorithm.curve,privateKey:r.ECPrivateKey.decode(c.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return c.algorithm.params.priv_key=r.DSAparam.decode(c.subjectPrivateKey,"der"),{type:"dsa",params:c.algorithm.params};default:throw new Error("unknown key id "+u)}throw new Error("unknown key type "+f);case"RSA PUBLIC KEY":return r.RSAPublicKey.decode(h,"der");case"RSA PRIVATE KEY":return r.RSAPrivateKey.decode(h,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:r.DSAPrivateKey.decode(h,"der")};case"EC PRIVATE KEY":return{curve:(h=r.ECPrivateKey.decode(h,"der")).parameters.value,privateKey:h.privateKey};default:throw new Error("unknown key type "+f)}}t.exports=u,u.signature=r.signature}).call(this,n(4).Buffer)},,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";(function(global){__webpack_require__.d(__webpack_exports__,"a",function(){return FrozenModel}),__webpack_require__.d(__webpack_exports__,"b",function(){return loadFrozenModel}),__webpack_require__.d(__webpack_exports__,"c",function(){return loadTfHubModule}),__webpack_require__.d(__webpack_exports__,"d",function(){return version});var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),__assign=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function __awaiter(t,e,n,r){return new(n||(n=Promise))(function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})}function __generator(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=r[2&a[0]?"return":a[0]?"throw":"next"])&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[0,i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}var commonjsGlobal="undefined"!=typeof window?window:void 0!==global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(t,e){return t(e={exports:{}},e.exports),e.exports}var aspromise=asPromise;function asPromise(t,e){for(var n=new Array(arguments.length-1),r=0,i=2,a=!0;i<arguments.length;)n[r++]=arguments[i++];return new Promise(function(i,o){n[r]=function(t){if(a)if(a=!1,t)o(t);else{for(var e=new Array(arguments.length-1),n=0;n<e.length;)e[n++]=arguments[n];i.apply(null,e)}};try{t.apply(e||null,n)}catch(t){a&&(a=!1,o(t))}})}var base64_1=createCommonjsModule(function(t,e){var n=e;n.length=function(t){var e=t.length;if(!e)return 0;for(var n=0;--e%4>1&&"="===t.charAt(e);)++n;return Math.ceil(3*t.length)/4-n};for(var r=new Array(64),i=new Array(123),a=0;a<64;)i[r[a]=a<26?a+65:a<52?a+71:a<62?a-4:a-59|43]=a++;n.encode=function(t,e,n){for(var i,a=null,o=[],s=0,u=0;e<n;){var c=t[e++];switch(u){case 0:o[s++]=r[c>>2],i=(3&c)<<4,u=1;break;case 1:o[s++]=r[i|c>>4],i=(15&c)<<2,u=2;break;case 2:o[s++]=r[i|c>>6],o[s++]=r[63&c],u=0}s>8191&&((a||(a=[])).push(String.fromCharCode.apply(String,o)),s=0)}return u&&(o[s++]=r[i],o[s++]=61,1===u&&(o[s++]=61)),a?(s&&a.push(String.fromCharCode.apply(String,o.slice(0,s))),a.join("")):String.fromCharCode.apply(String,o.slice(0,s))},n.decode=function(t,e,n){for(var r,a=n,o=0,s=0;s<t.length;){var u=t.charCodeAt(s++);if(61===u&&o>1)break;if(void 0===(u=i[u]))throw Error("invalid encoding");switch(o){case 0:r=u,o=1;break;case 1:e[n++]=r<<2|(48&u)>>4,r=u,o=2;break;case 2:e[n++]=(15&r)<<4|(60&u)>>2,r=u,o=3;break;case 3:e[n++]=(3&r)<<6|u,o=0}}if(1===o)throw Error("invalid encoding");return n-a},n.test=function(t){return/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(t)}}),eventemitter=EventEmitter;function EventEmitter(){this._listeners={}}EventEmitter.prototype.on=function(t,e,n){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:e,ctx:n||this}),this},EventEmitter.prototype.off=function(t,e){if(void 0===t)this._listeners={};else if(void 0===e)this._listeners[t]=[];else for(var n=this._listeners[t],r=0;r<n.length;)n[r].fn===e?n.splice(r,1):++r;return this},EventEmitter.prototype.emit=function(t){var e=this._listeners[t];if(e){for(var n=[],r=1;r<arguments.length;)n.push(arguments[r++]);for(r=0;r<e.length;)e[r].fn.apply(e[r++].ctx,n)}return this};var float_1=factory(factory);function factory(t){return"undefined"!=typeof Float32Array?function(){var e=new Float32Array([-0]),n=new Uint8Array(e.buffer),r=128===n[3];function i(t,r,i){e[0]=t,r[i]=n[0],r[i+1]=n[1],r[i+2]=n[2],r[i+3]=n[3]}function a(t,r,i){e[0]=t,r[i]=n[3],r[i+1]=n[2],r[i+2]=n[1],r[i+3]=n[0]}function o(t,r){return n[0]=t[r],n[1]=t[r+1],n[2]=t[r+2],n[3]=t[r+3],e[0]}function s(t,r){return n[3]=t[r],n[2]=t[r+1],n[1]=t[r+2],n[0]=t[r+3],e[0]}t.writeFloatLE=r?i:a,t.writeFloatBE=r?a:i,t.readFloatLE=r?o:s,t.readFloatBE=r?s:o}():function(){function e(t,e,n,r){var i=e<0?1:0;if(i&&(e=-e),0===e)t(1/e>0?0:2147483648,n,r);else if(isNaN(e))t(2143289344,n,r);else if(e>3.4028234663852886e38)t((i<<31|2139095040)>>>0,n,r);else if(e<1.1754943508222875e-38)t((i<<31|Math.round(e/1.401298464324817e-45))>>>0,n,r);else{var a=Math.floor(Math.log(e)/Math.LN2);t((i<<31|a+127<<23|8388607&Math.round(e*Math.pow(2,-a)*8388608))>>>0,n,r)}}function n(t,e,n){var r=t(e,n),i=2*(r>>31)+1,a=r>>>23&255,o=8388607&r;return 255===a?o?NaN:i*(1/0):0===a?1.401298464324817e-45*i*o:i*Math.pow(2,a-150)*(o+8388608)}t.writeFloatLE=e.bind(null,writeUintLE),t.writeFloatBE=e.bind(null,writeUintBE),t.readFloatLE=n.bind(null,readUintLE),t.readFloatBE=n.bind(null,readUintBE)}(),"undefined"!=typeof Float64Array?function(){var e=new Float64Array([-0]),n=new Uint8Array(e.buffer),r=128===n[7];function i(t,r,i){e[0]=t,r[i]=n[0],r[i+1]=n[1],r[i+2]=n[2],r[i+3]=n[3],r[i+4]=n[4],r[i+5]=n[5],r[i+6]=n[6],r[i+7]=n[7]}function a(t,r,i){e[0]=t,r[i]=n[7],r[i+1]=n[6],r[i+2]=n[5],r[i+3]=n[4],r[i+4]=n[3],r[i+5]=n[2],r[i+6]=n[1],r[i+7]=n[0]}function o(t,r){return n[0]=t[r],n[1]=t[r+1],n[2]=t[r+2],n[3]=t[r+3],n[4]=t[r+4],n[5]=t[r+5],n[6]=t[r+6],n[7]=t[r+7],e[0]}function s(t,r){return n[7]=t[r],n[6]=t[r+1],n[5]=t[r+2],n[4]=t[r+3],n[3]=t[r+4],n[2]=t[r+5],n[1]=t[r+6],n[0]=t[r+7],e[0]}t.writeDoubleLE=r?i:a,t.writeDoubleBE=r?a:i,t.readDoubleLE=r?o:s,t.readDoubleBE=r?s:o}():function(){function e(t,e,n,r,i,a){var o=r<0?1:0;if(o&&(r=-r),0===r)t(0,i,a+e),t(1/r>0?0:2147483648,i,a+n);else if(isNaN(r))t(0,i,a+e),t(2146959360,i,a+n);else if(r>1.7976931348623157e308)t(0,i,a+e),t((o<<31|2146435072)>>>0,i,a+n);else{var s;if(r<2.2250738585072014e-308)t((s=r/5e-324)>>>0,i,a+e),t((o<<31|s/4294967296)>>>0,i,a+n);else{var u=Math.floor(Math.log(r)/Math.LN2);1024===u&&(u=1023),t(4503599627370496*(s=r*Math.pow(2,-u))>>>0,i,a+e),t((o<<31|u+1023<<20|1048576*s&1048575)>>>0,i,a+n)}}}function n(t,e,n,r,i){var a=t(r,i+e),o=t(r,i+n),s=2*(o>>31)+1,u=o>>>20&2047,c=4294967296*(1048575&o)+a;return 2047===u?c?NaN:s*(1/0):0===u?5e-324*s*c:s*Math.pow(2,u-1075)*(c+4503599627370496)}t.writeDoubleLE=e.bind(null,writeUintLE,0,4),t.writeDoubleBE=e.bind(null,writeUintBE,4,0),t.readDoubleLE=n.bind(null,readUintLE,0,4),t.readDoubleBE=n.bind(null,readUintBE,4,0)}(),t}function writeUintLE(t,e,n){e[n]=255&t,e[n+1]=t>>>8&255,e[n+2]=t>>>16&255,e[n+3]=t>>>24}function writeUintBE(t,e,n){e[n]=t>>>24,e[n+1]=t>>>16&255,e[n+2]=t>>>8&255,e[n+3]=255&t}function readUintLE(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}function readUintBE(t,e){return(t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3])>>>0}var inquire_1=inquire;function inquire(moduleName){try{var mod$$1=eval("quire".replace(/^/,"re"))(moduleName);if(mod$$1&&(mod$$1.length||Object.keys(mod$$1).length))return mod$$1}catch(t){}return null}var utf8_1=createCommonjsModule(function(t,e){var n=e;n.length=function(t){for(var e=0,n=0,r=0;r<t.length;++r)(n=t.charCodeAt(r))<128?e+=1:n<2048?e+=2:55296==(64512&n)&&56320==(64512&t.charCodeAt(r+1))?(++r,e+=4):e+=3;return e},n.read=function(t,e,n){if(n-e<1)return"";for(var r,i=null,a=[],o=0;e<n;)(r=t[e++])<128?a[o++]=r:r>191&&r<224?a[o++]=(31&r)<<6|63&t[e++]:r>239&&r<365?(r=((7&r)<<18|(63&t[e++])<<12|(63&t[e++])<<6|63&t[e++])-65536,a[o++]=55296+(r>>10),a[o++]=56320+(1023&r)):a[o++]=(15&r)<<12|(63&t[e++])<<6|63&t[e++],o>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,a)),o=0);return i?(o&&i.push(String.fromCharCode.apply(String,a.slice(0,o))),i.join("")):String.fromCharCode.apply(String,a.slice(0,o))},n.write=function(t,e,n){for(var r,i,a=n,o=0;o<t.length;++o)(r=t.charCodeAt(o))<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):55296==(64512&r)&&56320==(64512&(i=t.charCodeAt(o+1)))?(r=65536+((1023&r)<<10)+(1023&i),++o,e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128);return n-a}}),pool_1=pool;function pool(t,e,n){var r=n||8192,i=r>>>1,a=null,o=r;return function(n){if(n<1||n>i)return t(n);o+n>r&&(a=t(r),o=0);var s=e.call(a,o,o+=n);return 7&o&&(o=1+(7|o)),s}}var longbits=LongBits;function LongBits(t,e){this.lo=t>>>0,this.hi=e>>>0}var zero=LongBits.zero=new LongBits(0,0);zero.toNumber=function(){return 0},zero.zzEncode=zero.zzDecode=function(){return this},zero.length=function(){return 1};var zeroHash=LongBits.zeroHash="\0\0\0\0\0\0\0\0";LongBits.fromNumber=function(t){if(0===t)return zero;var e=t<0;e&&(t=-t);var n=t>>>0,r=(t-n)/4294967296>>>0;return e&&(r=~r>>>0,n=~n>>>0,++n>4294967295&&(n=0,++r>4294967295&&(r=0))),new LongBits(n,r)},LongBits.from=function(t){if("number"==typeof t)return LongBits.fromNumber(t);if(minimal.isString(t)){if(!minimal.Long)return LongBits.fromNumber(parseInt(t,10));t=minimal.Long.fromString(t)}return t.low||t.high?new LongBits(t.low>>>0,t.high>>>0):zero},LongBits.prototype.toNumber=function(t){if(!t&&this.hi>>>31){var e=1+~this.lo>>>0,n=~this.hi>>>0;return e||(n=n+1>>>0),-(e+4294967296*n)}return this.lo+4294967296*this.hi},LongBits.prototype.toLong=function(t){return minimal.Long?new minimal.Long(0|this.lo,0|this.hi,Boolean(t)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(t)}};var charCodeAt=String.prototype.charCodeAt;LongBits.fromHash=function(t){return t===zeroHash?zero:new LongBits((charCodeAt.call(t,0)|charCodeAt.call(t,1)<<8|charCodeAt.call(t,2)<<16|charCodeAt.call(t,3)<<24)>>>0,(charCodeAt.call(t,4)|charCodeAt.call(t,5)<<8|charCodeAt.call(t,6)<<16|charCodeAt.call(t,7)<<24)>>>0)},LongBits.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},LongBits.prototype.zzEncode=function(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this},LongBits.prototype.zzDecode=function(){var t=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this},LongBits.prototype.length=function(){var t=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return 0===n?0===e?t<16384?t<128?1:2:t<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:n<128?9:10};var minimal=createCommonjsModule(function(t,e){var n=e;function r(t,e,n){for(var r=Object.keys(e),i=0;i<r.length;++i)void 0!==t[r[i]]&&n||(t[r[i]]=e[r[i]]);return t}function i(t){function e(t,n){if(!(this instanceof e))return new e(t,n);Object.defineProperty(this,"message",{get:function(){return t}}),Error.captureStackTrace?Error.captureStackTrace(this,e):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),n&&r(this,n)}return(e.prototype=Object.create(Error.prototype)).constructor=e,Object.defineProperty(e.prototype,"name",{get:function(){return t}}),e.prototype.toString=function(){return this.name+": "+this.message},e}n.asPromise=aspromise,n.base64=base64_1,n.EventEmitter=eventemitter,n.float=float_1,n.inquire=inquire_1,n.utf8=utf8_1,n.pool=pool_1,n.LongBits=longbits,n.emptyArray=Object.freeze?Object.freeze([]):[],n.emptyObject=Object.freeze?Object.freeze({}):{},n.isNode=Boolean(commonjsGlobal.process&&commonjsGlobal.process.versions&&commonjsGlobal.process.versions.node),n.isInteger=Number.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},n.isString=function(t){return"string"==typeof t||t instanceof String},n.isObject=function(t){return t&&"object"==typeof t},n.isset=n.isSet=function(t,e){var n=t[e];return!(null==n||!t.hasOwnProperty(e))&&("object"!=typeof n||(Array.isArray(n)?n.length:Object.keys(n).length)>0)},n.Buffer=function(){try{var t=n.inquire("buffer").Buffer;return t.prototype.utf8Write?t:null}catch(t){return null}}(),n._Buffer_from=null,n._Buffer_allocUnsafe=null,n.newBuffer=function(t){return"number"==typeof t?n.Buffer?n._Buffer_allocUnsafe(t):new n.Array(t):n.Buffer?n._Buffer_from(t):"undefined"==typeof Uint8Array?t:new Uint8Array(t)},n.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,n.Long=commonjsGlobal.dcodeIO&&commonjsGlobal.dcodeIO.Long||n.inquire("long"),n.key2Re=/^true|false|0|1$/,n.key32Re=/^-?(?:0|[1-9][0-9]*)$/,n.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,n.longToHash=function(t){return t?n.LongBits.from(t).toHash():n.LongBits.zeroHash},n.longFromHash=function(t,e){var r=n.LongBits.fromHash(t);return n.Long?n.Long.fromBits(r.lo,r.hi,e):r.toNumber(Boolean(e))},n.merge=r,n.lcFirst=function(t){return t.charAt(0).toLowerCase()+t.substring(1)},n.newError=i,n.ProtocolError=i("ProtocolError"),n.oneOfGetter=function(t){for(var e={},n=0;n<t.length;++n)e[t[n]]=1;return function(){for(var t=Object.keys(this),n=t.length-1;n>-1;--n)if(1===e[t[n]]&&void 0!==this[t[n]]&&null!==this[t[n]])return t[n]}},n.oneOfSetter=function(t){return function(e){for(var n=0;n<t.length;++n)t[n]!==e&&delete this[t[n]]}},n.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},n._configure=function(){var t=n.Buffer;t?(n._Buffer_from=t.from!==Uint8Array.from&&t.from||function(e,n){return new t(e,n)},n._Buffer_allocUnsafe=t.allocUnsafe||function(e){return new t(e)}):n._Buffer_from=n._Buffer_allocUnsafe=null}}),writer=Writer,BufferWriter,LongBits$1=minimal.LongBits,base64=minimal.base64,utf8=minimal.utf8;function Op(t,e,n){this.fn=t,this.len=e,this.next=void 0,this.val=n}function noop(){}function State(t){this.head=t.head,this.tail=t.tail,this.len=t.len,this.next=t.states}function Writer(){this.len=0,this.head=new Op(noop,0,0),this.tail=this.head,this.states=null}function writeByte(t,e,n){e[n]=255&t}function writeVarint32(t,e,n){for(;t>127;)e[n++]=127&t|128,t>>>=7;e[n]=t}function VarintOp(t,e){this.len=t,this.next=void 0,this.val=e}function writeVarint64(t,e,n){for(;t.hi;)e[n++]=127&t.lo|128,t.lo=(t.lo>>>7|t.hi<<25)>>>0,t.hi>>>=7;for(;t.lo>127;)e[n++]=127&t.lo|128,t.lo=t.lo>>>7;e[n++]=t.lo}function writeFixed32(t,e,n){e[n]=255&t,e[n+1]=t>>>8&255,e[n+2]=t>>>16&255,e[n+3]=t>>>24}Writer.create=minimal.Buffer?function(){return(Writer.create=function(){return new BufferWriter})()}:function(){return new Writer},Writer.alloc=function(t){return new minimal.Array(t)},minimal.Array!==Array&&(Writer.alloc=minimal.pool(Writer.alloc,minimal.Array.prototype.subarray)),Writer.prototype._push=function(t,e,n){return this.tail=this.tail.next=new Op(t,e,n),this.len+=e,this},VarintOp.prototype=Object.create(Op.prototype),VarintOp.prototype.fn=writeVarint32,Writer.prototype.uint32=function(t){return this.len+=(this.tail=this.tail.next=new VarintOp((t>>>=0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this},Writer.prototype.int32=function(t){return t<0?this._push(writeVarint64,10,LongBits$1.fromNumber(t)):this.uint32(t)},Writer.prototype.sint32=function(t){return this.uint32((t<<1^t>>31)>>>0)},Writer.prototype.uint64=function(t){var e=LongBits$1.from(t);return this._push(writeVarint64,e.length(),e)},Writer.prototype.int64=Writer.prototype.uint64,Writer.prototype.sint64=function(t){var e=LongBits$1.from(t).zzEncode();return this._push(writeVarint64,e.length(),e)},Writer.prototype.bool=function(t){return this._push(writeByte,1,t?1:0)},Writer.prototype.fixed32=function(t){return this._push(writeFixed32,4,t>>>0)},Writer.prototype.sfixed32=Writer.prototype.fixed32,Writer.prototype.fixed64=function(t){var e=LongBits$1.from(t);return this._push(writeFixed32,4,e.lo)._push(writeFixed32,4,e.hi)},Writer.prototype.sfixed64=Writer.prototype.fixed64,Writer.prototype.float=function(t){return this._push(minimal.float.writeFloatLE,4,t)},Writer.prototype.double=function(t){return this._push(minimal.float.writeDoubleLE,8,t)};var writeBytes=minimal.Array.prototype.set?function(t,e,n){e.set(t,n)}:function(t,e,n){for(var r=0;r<t.length;++r)e[n+r]=t[r]};Writer.prototype.bytes=function(t){var e=t.length>>>0;if(!e)return this._push(writeByte,1,0);if(minimal.isString(t)){var n=Writer.alloc(e=base64.length(t));base64.decode(t,n,0),t=n}return this.uint32(e)._push(writeBytes,e,t)},Writer.prototype.string=function(t){var e=utf8.length(t);return e?this.uint32(e)._push(utf8.write,e,t):this._push(writeByte,1,0)},Writer.prototype.fork=function(){return this.states=new State(this),this.head=this.tail=new Op(noop,0,0),this.len=0,this},Writer.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Op(noop,0,0),this.len=0),this},Writer.prototype.ldelim=function(){var t=this.head,e=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=t.next,this.tail=e,this.len+=n),this},Writer.prototype.finish=function(){for(var t=this.head.next,e=this.constructor.alloc(this.len),n=0;t;)t.fn(t.val,e,n),n+=t.len,t=t.next;return e},Writer._configure=function(t){BufferWriter=t};var writer_buffer=BufferWriter$1;(BufferWriter$1.prototype=Object.create(writer.prototype)).constructor=BufferWriter$1;var Buffer=minimal.Buffer;function BufferWriter$1(){writer.call(this)}BufferWriter$1.alloc=function(t){return(BufferWriter$1.alloc=minimal._Buffer_allocUnsafe)(t)};var writeBytesBuffer=Buffer&&Buffer.prototype instanceof Uint8Array&&"set"===Buffer.prototype.set.name?function(t,e,n){e.set(t,n)}:function(t,e,n){if(t.copy)t.copy(e,n,0,t.length);else for(var r=0;r<t.length;)e[n++]=t[r++]};function writeStringBuffer(t,e,n){t.length<40?minimal.utf8.write(t,e,n):e.utf8Write(t,n)}BufferWriter$1.prototype.bytes=function(t){minimal.isString(t)&&(t=minimal._Buffer_from(t,"base64"));var e=t.length>>>0;return this.uint32(e),e&&this._push(writeBytesBuffer,e,t),this},BufferWriter$1.prototype.string=function(t){var e=Buffer.byteLength(t);return this.uint32(e),e&&this._push(writeStringBuffer,e,t),this};var reader=Reader,BufferReader,LongBits$2=minimal.LongBits,utf8$1=minimal.utf8;function indexOutOfRange(t,e){return RangeError("index out of range: "+t.pos+" + "+(e||1)+" > "+t.len)}function Reader(t){this.buf=t,this.pos=0,this.len=t.length}var create_array="undefined"!=typeof Uint8Array?function(t){if(t instanceof Uint8Array||Array.isArray(t))return new Reader(t);throw Error("illegal buffer")}:function(t){if(Array.isArray(t))return new Reader(t);throw Error("illegal buffer")},e;function readLongVarint(){var t=new LongBits$2(0,0),e=0;if(!(this.len-this.pos>4)){for(;e<3;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t}return t.lo=(t.lo|(127&this.buf[this.pos++])<<7*e)>>>0,t}for(;e<4;++e)if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t;if(t.lo=(t.lo|(127&this.buf[this.pos])<<28)>>>0,t.hi=(t.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return t;if(e=0,this.len-this.pos>4){for(;e<5;++e)if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}else for(;e<5;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}throw Error("invalid varint encoding")}function readFixed32_end(t,e){return(t[e-4]|t[e-3]<<8|t[e-2]<<16|t[e-1]<<24)>>>0}function readFixed64(){if(this.pos+8>this.len)throw indexOutOfRange(this,8);return new LongBits$2(readFixed32_end(this.buf,this.pos+=4),readFixed32_end(this.buf,this.pos+=4))}Reader.create=minimal.Buffer?function(t){return(Reader.create=function(t){return minimal.Buffer.isBuffer(t)?new BufferReader(t):create_array(t)})(t)}:create_array,Reader.prototype._slice=minimal.Array.prototype.subarray||minimal.Array.prototype.slice,Reader.prototype.uint32=(e=4294967295,function(){if(e=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return e;if((this.pos+=5)>this.len)throw this.pos=this.len,indexOutOfRange(this,10);return e}),Reader.prototype.int32=function(){return 0|this.uint32()},Reader.prototype.sint32=function(){var t=this.uint32();return t>>>1^-(1&t)|0},Reader.prototype.bool=function(){return 0!==this.uint32()},Reader.prototype.fixed32=function(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)},Reader.prototype.sfixed32=function(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return 0|readFixed32_end(this.buf,this.pos+=4)},Reader.prototype.float=function(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);var t=minimal.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t},Reader.prototype.double=function(){if(this.pos+8>this.len)throw indexOutOfRange(this,4);var t=minimal.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t},Reader.prototype.bytes=function(){var t=this.uint32(),e=this.pos,n=this.pos+t;if(n>this.len)throw indexOutOfRange(this,t);return this.pos+=t,Array.isArray(this.buf)?this.buf.slice(e,n):e===n?new this.buf.constructor(0):this._slice.call(this.buf,e,n)},Reader.prototype.string=function(){var t=this.bytes();return utf8$1.read(t,0,t.length)},Reader.prototype.skip=function(t){if("number"==typeof t){if(this.pos+t>this.len)throw indexOutOfRange(this,t);this.pos+=t}else do{if(this.pos>=this.len)throw indexOutOfRange(this)}while(128&this.buf[this.pos++]);return this},Reader.prototype.skipType=function(t){switch(t){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(t=7&this.uint32());)this.skipType(t);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+t+" at offset "+this.pos)}return this},Reader._configure=function(t){BufferReader=t;var e=minimal.Long?"toLong":"toNumber";minimal.merge(Reader.prototype,{int64:function(){return readLongVarint.call(this)[e](!1)},uint64:function(){return readLongVarint.call(this)[e](!0)},sint64:function(){return readLongVarint.call(this).zzDecode()[e](!1)},fixed64:function(){return readFixed64.call(this)[e](!0)},sfixed64:function(){return readFixed64.call(this)[e](!1)}})};var reader_buffer=BufferReader$1;function BufferReader$1(t){reader.call(this,t)}(BufferReader$1.prototype=Object.create(reader.prototype)).constructor=BufferReader$1,minimal.Buffer&&(BufferReader$1.prototype._slice=minimal.Buffer.prototype.slice),BufferReader$1.prototype.string=function(){var t=this.uint32();return this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len))};var service=Service;function Service(t,e,n){if("function"!=typeof t)throw TypeError("rpcImpl must be a function");minimal.EventEmitter.call(this),this.rpcImpl=t,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(n)}(Service.prototype=Object.create(minimal.EventEmitter.prototype)).constructor=Service,Service.prototype.rpcCall=function t(e,n,r,i,a){if(!i)throw TypeError("request must be specified");var o=this;if(!a)return minimal.asPromise(t,o,e,n,r,i);if(o.rpcImpl)try{return o.rpcImpl(e,n[o.requestDelimited?"encodeDelimited":"encode"](i).finish(),function(t,n){if(t)return o.emit("error",t,e),a(t);if(null!==n){if(!(n instanceof r))try{n=r[o.responseDelimited?"decodeDelimited":"decode"](n)}catch(t){return o.emit("error",t,e),a(t)}return o.emit("data",n,e),a(null,n)}o.end(!0)})}catch(t){return o.emit("error",t,e),void setTimeout(function(){a(t)},0)}else setTimeout(function(){a(Error("already ended"))},0)},Service.prototype.end=function(t){return this.rpcImpl&&(t||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this};var rpc_1=createCommonjsModule(function(t,e){e.Service=service}),roots={},indexMinimal=createCommonjsModule(function(t,e){var n=e;function r(){n.Reader._configure(n.BufferReader),n.util._configure()}n.build="minimal",n.Writer=writer,n.BufferWriter=writer_buffer,n.Reader=reader,n.BufferReader=reader_buffer,n.util=minimal,n.rpc=rpc_1,n.roots=roots,n.configure=r,n.Writer._configure(n.BufferWriter),r()}),minimal$1=indexMinimal,minimal_1=minimal$1.roots,minimal_2=minimal$1.Reader,minimal_3=minimal$1.util,$Reader=minimal$1.Reader,$util=minimal$1.util,$root=minimal$1.roots.default||(minimal$1.roots.default={});$root.tensorflow=function(){var t,e,n={};return n.Any=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.typeUrl="",t.prototype.value=$util.newBuffer([]),t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.Any;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.typeUrl=t.string();break;case 2:r.value=t.bytes();break;default:t.skipType(7&i)}}return r},t}(),n.DataType=(t={},(e=Object.create(t))[t[0]="DT_INVALID"]=0,e[t[1]="DT_FLOAT"]=1,e[t[2]="DT_DOUBLE"]=2,e[t[3]="DT_INT32"]=3,e[t[4]="DT_UINT8"]=4,e[t[5]="DT_INT16"]=5,e[t[6]="DT_INT8"]=6,e[t[7]="DT_STRING"]=7,e[t[8]="DT_COMPLEX64"]=8,e[t[9]="DT_INT64"]=9,e[t[10]="DT_BOOL"]=10,e[t[11]="DT_QINT8"]=11,e[t[12]="DT_QUINT8"]=12,e[t[13]="DT_QINT32"]=13,e[t[14]="DT_BFLOAT16"]=14,e[t[101]="DT_FLOAT_REF"]=101,e[t[102]="DT_DOUBLE_REF"]=102,e[t[103]="DT_INT32_REF"]=103,e[t[104]="DT_UINT8_REF"]=104,e[t[105]="DT_INT16_REF"]=105,e[t[106]="DT_INT8_REF"]=106,e[t[107]="DT_STRING_REF"]=107,e[t[108]="DT_COMPLEX64_REF"]=108,e[t[109]="DT_INT64_REF"]=109,e[t[110]="DT_BOOL_REF"]=110,e[t[111]="DT_QINT8_REF"]=111,e[t[112]="DT_QUINT8_REF"]=112,e[t[113]="DT_QINT32_REF"]=113,e[t[114]="DT_BFLOAT16_REF"]=114,e),n.TensorShape=function(){function t(t){if(this.dim=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.dim=$util.emptyArray,t.prototype.unknownRank=!1,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.TensorShape;t.pos<n;){var i=t.uint32();switch(i>>>3){case 2:r.dim&&r.dim.length||(r.dim=[]),r.dim.push($root.tensorflow.TensorShape.Dim.decode(t,t.uint32()));break;case 3:r.unknownRank=t.bool();break;default:t.skipType(7&i)}}return r},t.Dim=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.size=$util.Long?$util.Long.fromBits(0,0,!1):0,t.prototype.name="",t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.TensorShape.Dim;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.size=t.int64();break;case 2:r.name=t.string();break;default:t.skipType(7&i)}}return r},t}(),t}(),n.Tensor=function(){function t(t){if(this.floatVal=[],this.doubleVal=[],this.intVal=[],this.stringVal=[],this.scomplexVal=[],this.int64Val=[],this.boolVal=[],this.uint32Val=[],this.uint64Val=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.dtype=0,t.prototype.tensorShape=null,t.prototype.versionNumber=0,t.prototype.tensorContent=$util.newBuffer([]),t.prototype.floatVal=$util.emptyArray,t.prototype.doubleVal=$util.emptyArray,t.prototype.intVal=$util.emptyArray,t.prototype.stringVal=$util.emptyArray,t.prototype.scomplexVal=$util.emptyArray,t.prototype.int64Val=$util.emptyArray,t.prototype.boolVal=$util.emptyArray,t.prototype.uint32Val=$util.emptyArray,t.prototype.uint64Val=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.Tensor;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.dtype=t.int32();break;case 2:r.tensorShape=$root.tensorflow.TensorShape.decode(t,t.uint32());break;case 3:r.versionNumber=t.int32();break;case 4:r.tensorContent=t.bytes();break;case 5:if(r.floatVal&&r.floatVal.length||(r.floatVal=[]),2==(7&i))for(var a=t.uint32()+t.pos;t.pos<a;)r.floatVal.push(t.float());else r.floatVal.push(t.float());break;case 6:if(r.doubleVal&&r.doubleVal.length||(r.doubleVal=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.doubleVal.push(t.double());else r.doubleVal.push(t.double());break;case 7:if(r.intVal&&r.intVal.length||(r.intVal=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.intVal.push(t.int32());else r.intVal.push(t.int32());break;case 8:r.stringVal&&r.stringVal.length||(r.stringVal=[]),r.stringVal.push(t.bytes());break;case 9:if(r.scomplexVal&&r.scomplexVal.length||(r.scomplexVal=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.scomplexVal.push(t.float());else r.scomplexVal.push(t.float());break;case 10:if(r.int64Val&&r.int64Val.length||(r.int64Val=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.int64Val.push(t.int64());else r.int64Val.push(t.int64());break;case 11:if(r.boolVal&&r.boolVal.length||(r.boolVal=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.boolVal.push(t.bool());else r.boolVal.push(t.bool());break;case 16:if(r.uint32Val&&r.uint32Val.length||(r.uint32Val=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.uint32Val.push(t.uint32());else r.uint32Val.push(t.uint32());break;case 17:if(r.uint64Val&&r.uint64Val.length||(r.uint64Val=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.uint64Val.push(t.uint64());else r.uint64Val.push(t.uint64());break;default:t.skipType(7&i)}}return r},t}(),n.AttrValue=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.list=null,t.prototype.s=$util.newBuffer([]),t.prototype.i=$util.Long?$util.Long.fromBits(0,0,!1):0,t.prototype.f=0,t.prototype.b=!1,t.prototype.type=0,t.prototype.shape=null,t.prototype.tensor=null,t.prototype.placeholder="",t.prototype.func=null,Object.defineProperty(t.prototype,"value",{get:$util.oneOfGetter(e=["list","s","i","f","b","type","shape","tensor","placeholder","func"]),set:$util.oneOfSetter(e)}),t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.AttrValue;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.list=$root.tensorflow.AttrValue.ListValue.decode(t,t.uint32());break;case 2:r.s=t.bytes();break;case 3:r.i=t.int64();break;case 4:r.f=t.float();break;case 5:r.b=t.bool();break;case 6:r.type=t.int32();break;case 7:r.shape=$root.tensorflow.TensorShape.decode(t,t.uint32());break;case 8:r.tensor=$root.tensorflow.Tensor.decode(t,t.uint32());break;case 9:r.placeholder=t.string();break;case 10:r.func=$root.tensorflow.NameAttrList.decode(t,t.uint32());break;default:t.skipType(7&i)}}return r},t.ListValue=function(){function t(t){if(this.s=[],this.i=[],this.f=[],this.b=[],this.type=[],this.shape=[],this.tensor=[],this.func=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.s=$util.emptyArray,t.prototype.i=$util.emptyArray,t.prototype.f=$util.emptyArray,t.prototype.b=$util.emptyArray,t.prototype.type=$util.emptyArray,t.prototype.shape=$util.emptyArray,t.prototype.tensor=$util.emptyArray,t.prototype.func=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.AttrValue.ListValue;t.pos<n;){var i=t.uint32();switch(i>>>3){case 2:r.s&&r.s.length||(r.s=[]),r.s.push(t.bytes());break;case 3:if(r.i&&r.i.length||(r.i=[]),2==(7&i))for(var a=t.uint32()+t.pos;t.pos<a;)r.i.push(t.int64());else r.i.push(t.int64());break;case 4:if(r.f&&r.f.length||(r.f=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.f.push(t.float());else r.f.push(t.float());break;case 5:if(r.b&&r.b.length||(r.b=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.b.push(t.bool());else r.b.push(t.bool());break;case 6:if(r.type&&r.type.length||(r.type=[]),2==(7&i))for(a=t.uint32()+t.pos;t.pos<a;)r.type.push(t.int32());else r.type.push(t.int32());break;case 7:r.shape&&r.shape.length||(r.shape=[]),r.shape.push($root.tensorflow.TensorShape.decode(t,t.uint32()));break;case 8:r.tensor&&r.tensor.length||(r.tensor=[]),r.tensor.push($root.tensorflow.Tensor.decode(t,t.uint32()));break;case 9:r.func&&r.func.length||(r.func=[]),r.func.push($root.tensorflow.NameAttrList.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return r},t}(),t}(),n.NameAttrList=function(){function t(t){if(this.attr={},t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.attr=$util.emptyObject,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n,r=void 0===e?t.len:t.pos+e,i=new $root.tensorflow.NameAttrList;t.pos<r;){var a=t.uint32();switch(a>>>3){case 1:i.name=t.string();break;case 2:t.skip().pos++,i.attr===$util.emptyObject&&(i.attr={}),n=t.string(),t.pos++,i.attr[n]=$root.tensorflow.AttrValue.decode(t,t.uint32());break;default:t.skipType(7&a)}}return i},t}(),n.NodeDef=function(){function t(t){if(this.input=[],this.attr={},t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.op="",t.prototype.input=$util.emptyArray,t.prototype.device="",t.prototype.attr=$util.emptyObject,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n,r=void 0===e?t.len:t.pos+e,i=new $root.tensorflow.NodeDef;t.pos<r;){var a=t.uint32();switch(a>>>3){case 1:i.name=t.string();break;case 2:i.op=t.string();break;case 3:i.input&&i.input.length||(i.input=[]),i.input.push(t.string());break;case 4:i.device=t.string();break;case 5:t.skip().pos++,i.attr===$util.emptyObject&&(i.attr={}),n=t.string(),t.pos++,i.attr[n]=$root.tensorflow.AttrValue.decode(t,t.uint32());break;default:t.skipType(7&a)}}return i},t}(),n.VersionDef=function(){function t(t){if(this.badConsumers=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.producer=0,t.prototype.minConsumer=0,t.prototype.badConsumers=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.VersionDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.producer=t.int32();break;case 2:r.minConsumer=t.int32();break;case 3:if(r.badConsumers&&r.badConsumers.length||(r.badConsumers=[]),2==(7&i))for(var a=t.uint32()+t.pos;t.pos<a;)r.badConsumers.push(t.int32());else r.badConsumers.push(t.int32());break;default:t.skipType(7&i)}}return r},t}(),n.GraphDef=function(){function t(t){if(this.node=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.node=$util.emptyArray,t.prototype.versions=null,t.prototype.library=null,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.GraphDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.node&&r.node.length||(r.node=[]),r.node.push($root.tensorflow.NodeDef.decode(t,t.uint32()));break;case 4:r.versions=$root.tensorflow.VersionDef.decode(t,t.uint32());break;case 2:r.library=$root.tensorflow.FunctionDefLibrary.decode(t,t.uint32());break;default:t.skipType(7&i)}}return r},t}(),n.CollectionDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.nodeList=null,t.prototype.bytesList=null,t.prototype.int64List=null,t.prototype.floatList=null,t.prototype.anyList=null,Object.defineProperty(t.prototype,"kind",{get:$util.oneOfGetter(e=["nodeList","bytesList","int64List","floatList","anyList"]),set:$util.oneOfSetter(e)}),t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.CollectionDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.nodeList=$root.tensorflow.CollectionDef.NodeList.decode(t,t.uint32());break;case 2:r.bytesList=$root.tensorflow.CollectionDef.BytesList.decode(t,t.uint32());break;case 3:r.int64List=$root.tensorflow.CollectionDef.Int64List.decode(t,t.uint32());break;case 4:r.floatList=$root.tensorflow.CollectionDef.FloatList.decode(t,t.uint32());break;case 5:r.anyList=$root.tensorflow.CollectionDef.AnyList.decode(t,t.uint32());break;default:t.skipType(7&i)}}return r},t.NodeList=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.CollectionDef.NodeList;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.value&&r.value.length||(r.value=[]),r.value.push(t.string());break;default:t.skipType(7&i)}}return r},t}(),t.BytesList=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.CollectionDef.BytesList;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.value&&r.value.length||(r.value=[]),r.value.push(t.bytes());break;default:t.skipType(7&i)}}return r},t}(),t.Int64List=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.CollectionDef.Int64List;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:if(r.value&&r.value.length||(r.value=[]),2==(7&i))for(var a=t.uint32()+t.pos;t.pos<a;)r.value.push(t.int64());else r.value.push(t.int64());break;default:t.skipType(7&i)}}return r},t}(),t.FloatList=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.CollectionDef.FloatList;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:if(r.value&&r.value.length||(r.value=[]),2==(7&i))for(var a=t.uint32()+t.pos;t.pos<a;)r.value.push(t.float());else r.value.push(t.float());break;default:t.skipType(7&i)}}return r},t}(),t.AnyList=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.CollectionDef.AnyList;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.value&&r.value.length||(r.value=[]),r.value.push($root.tensorflow.Any.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return r},t}(),t}(),n.SaverDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e,n;return t.prototype.filenameTensorName="",t.prototype.saveTensorName="",t.prototype.restoreOpName="",t.prototype.maxToKeep=0,t.prototype.sharded=!1,t.prototype.keepCheckpointEveryNHours=0,t.prototype.version=0,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.SaverDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.filenameTensorName=t.string();break;case 2:r.saveTensorName=t.string();break;case 3:r.restoreOpName=t.string();break;case 4:r.maxToKeep=t.int32();break;case 5:r.sharded=t.bool();break;case 6:r.keepCheckpointEveryNHours=t.float();break;case 7:r.version=t.int32();break;default:t.skipType(7&i)}}return r},t.CheckpointFormatVersion=(e={},(n=Object.create(e))[e[0]="LEGACY"]=0,n[e[1]="V1"]=1,n[e[2]="V2"]=2,n),t}(),n.TensorInfo=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.name="",t.prototype.cooSparse=null,t.prototype.dtype=0,t.prototype.tensorShape=null,Object.defineProperty(t.prototype,"encoding",{get:$util.oneOfGetter(e=["name","cooSparse"]),set:$util.oneOfSetter(e)}),t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.TensorInfo;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.name=t.string();break;case 4:r.cooSparse=$root.tensorflow.TensorInfo.CooSparse.decode(t,t.uint32());break;case 2:r.dtype=t.int32();break;case 3:r.tensorShape=$root.tensorflow.TensorShape.decode(t,t.uint32());break;default:t.skipType(7&i)}}return r},t.CooSparse=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.valuesTensorName="",t.prototype.indicesTensorName="",t.prototype.denseShapeTensorName="",t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.TensorInfo.CooSparse;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.valuesTensorName=t.string();break;case 2:r.indicesTensorName=t.string();break;case 3:r.denseShapeTensorName=t.string();break;default:t.skipType(7&i)}}return r},t}(),t}(),n.SignatureDef=function(){function t(t){if(this.inputs={},this.outputs={},t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.inputs=$util.emptyObject,t.prototype.outputs=$util.emptyObject,t.prototype.methodName="",t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n,r=void 0===e?t.len:t.pos+e,i=new $root.tensorflow.SignatureDef;t.pos<r;){var a=t.uint32();switch(a>>>3){case 1:t.skip().pos++,i.inputs===$util.emptyObject&&(i.inputs={}),n=t.string(),t.pos++,i.inputs[n]=$root.tensorflow.TensorInfo.decode(t,t.uint32());break;case 2:t.skip().pos++,i.outputs===$util.emptyObject&&(i.outputs={}),n=t.string(),t.pos++,i.outputs[n]=$root.tensorflow.TensorInfo.decode(t,t.uint32());break;case 3:i.methodName=t.string();break;default:t.skipType(7&a)}}return i},t}(),n.AssetFileDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.tensorInfo=null,t.prototype.filename="",t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.AssetFileDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.tensorInfo=$root.tensorflow.TensorInfo.decode(t,t.uint32());break;case 2:r.filename=t.string();break;default:t.skipType(7&i)}}return r},t}(),n.OpDef=function(){function t(t){if(this.inputArg=[],this.outputArg=[],this.attr=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.inputArg=$util.emptyArray,t.prototype.outputArg=$util.emptyArray,t.prototype.attr=$util.emptyArray,t.prototype.deprecation=null,t.prototype.summary="",t.prototype.description="",t.prototype.isCommutative=!1,t.prototype.isAggregate=!1,t.prototype.isStateful=!1,t.prototype.allowsUninitializedInput=!1,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.OpDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.name=t.string();break;case 2:r.inputArg&&r.inputArg.length||(r.inputArg=[]),r.inputArg.push($root.tensorflow.OpDef.ArgDef.decode(t,t.uint32()));break;case 3:r.outputArg&&r.outputArg.length||(r.outputArg=[]),r.outputArg.push($root.tensorflow.OpDef.ArgDef.decode(t,t.uint32()));break;case 4:r.attr&&r.attr.length||(r.attr=[]),r.attr.push($root.tensorflow.OpDef.AttrDef.decode(t,t.uint32()));break;case 8:r.deprecation=$root.tensorflow.OpDef.OpDeprecation.decode(t,t.uint32());break;case 5:r.summary=t.string();break;case 6:r.description=t.string();break;case 18:r.isCommutative=t.bool();break;case 16:r.isAggregate=t.bool();break;case 17:r.isStateful=t.bool();break;case 19:r.allowsUninitializedInput=t.bool();break;default:t.skipType(7&i)}}return r},t.ArgDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.description="",t.prototype.type=0,t.prototype.typeAttr="",t.prototype.numberAttr="",t.prototype.typeListAttr="",t.prototype.isRef=!1,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.OpDef.ArgDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.name=t.string();break;case 2:r.description=t.string();break;case 3:r.type=t.int32();break;case 4:r.typeAttr=t.string();break;case 5:r.numberAttr=t.string();break;case 6:r.typeListAttr=t.string();break;case 16:r.isRef=t.bool();break;default:t.skipType(7&i)}}return r},t}(),t.AttrDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.type="",t.prototype.defaultValue=null,t.prototype.description="",t.prototype.hasMinimum=!1,t.prototype.minimum=$util.Long?$util.Long.fromBits(0,0,!1):0,t.prototype.allowedValues=null,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.OpDef.AttrDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.name=t.string();break;case 2:r.type=t.string();break;case 3:r.defaultValue=$root.tensorflow.AttrValue.decode(t,t.uint32());break;case 4:r.description=t.string();break;case 5:r.hasMinimum=t.bool();break;case 6:r.minimum=t.int64();break;case 7:r.allowedValues=$root.tensorflow.AttrValue.decode(t,t.uint32());break;default:t.skipType(7&i)}}return r},t}(),t.OpDeprecation=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.version=0,t.prototype.explanation="",t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.OpDef.OpDeprecation;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.version=t.int32();break;case 2:r.explanation=t.string();break;default:t.skipType(7&i)}}return r},t}(),t}(),n.OpList=function(){function t(t){if(this.op=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.op=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.OpList;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.op&&r.op.length||(r.op=[]),r.op.push($root.tensorflow.OpDef.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return r},t}(),n.MetaGraphDef=function(){function t(t){if(this.collectionDef={},this.signatureDef={},this.assetFileDef=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.metaInfoDef=null,t.prototype.graphDef=null,t.prototype.saverDef=null,t.prototype.collectionDef=$util.emptyObject,t.prototype.signatureDef=$util.emptyObject,t.prototype.assetFileDef=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n,r=void 0===e?t.len:t.pos+e,i=new $root.tensorflow.MetaGraphDef;t.pos<r;){var a=t.uint32();switch(a>>>3){case 1:i.metaInfoDef=$root.tensorflow.MetaGraphDef.MetaInfoDef.decode(t,t.uint32());break;case 2:i.graphDef=$root.tensorflow.GraphDef.decode(t,t.uint32());break;case 3:i.saverDef=$root.tensorflow.SaverDef.decode(t,t.uint32());break;case 4:t.skip().pos++,i.collectionDef===$util.emptyObject&&(i.collectionDef={}),n=t.string(),t.pos++,i.collectionDef[n]=$root.tensorflow.CollectionDef.decode(t,t.uint32());break;case 5:t.skip().pos++,i.signatureDef===$util.emptyObject&&(i.signatureDef={}),n=t.string(),t.pos++,i.signatureDef[n]=$root.tensorflow.SignatureDef.decode(t,t.uint32());break;case 6:i.assetFileDef&&i.assetFileDef.length||(i.assetFileDef=[]),i.assetFileDef.push($root.tensorflow.AssetFileDef.decode(t,t.uint32()));break;default:t.skipType(7&a)}}return i},t.MetaInfoDef=function(){function t(t){if(this.tags=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.metaGraphVersion="",t.prototype.strippedOpList=null,t.prototype.anyInfo=null,t.prototype.tags=$util.emptyArray,t.prototype.tensorflowVersion="",t.prototype.tensorflowGitVersion="",t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.MetaGraphDef.MetaInfoDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.metaGraphVersion=t.string();break;case 2:r.strippedOpList=$root.tensorflow.OpList.decode(t,t.uint32());break;case 3:r.anyInfo=$root.tensorflow.Any.decode(t,t.uint32());break;case 4:r.tags&&r.tags.length||(r.tags=[]),r.tags.push(t.string());break;case 5:r.tensorflowVersion=t.string();break;case 6:r.tensorflowGitVersion=t.string();break;default:t.skipType(7&i)}}return r},t}(),t}(),n.SavedModel=function(){function t(t){if(this.metaGraphs=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.savedModelSchemaVersion=$util.Long?$util.Long.fromBits(0,0,!1):0,t.prototype.metaGraphs=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.SavedModel;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.savedModelSchemaVersion=t.int64();break;case 2:r.metaGraphs&&r.metaGraphs.length||(r.metaGraphs=[]),r.metaGraphs.push($root.tensorflow.MetaGraphDef.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return r},t}(),n.FunctionDefLibrary=function(){function t(t){if(this.function=[],this.gradient=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.function=$util.emptyArray,t.prototype.gradient=$util.emptyArray,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.FunctionDefLibrary;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.function&&r.function.length||(r.function=[]),r.function.push($root.tensorflow.FunctionDef.decode(t,t.uint32()));break;case 2:r.gradient&&r.gradient.length||(r.gradient=[]),r.gradient.push($root.tensorflow.GradientDef.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return r},t}(),n.FunctionDef=function(){function t(t){if(this.attr={},this.nodeDef=[],this.ret={},t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.signature=null,t.prototype.attr=$util.emptyObject,t.prototype.nodeDef=$util.emptyArray,t.prototype.ret=$util.emptyObject,t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n,r=void 0===e?t.len:t.pos+e,i=new $root.tensorflow.FunctionDef;t.pos<r;){var a=t.uint32();switch(a>>>3){case 1:i.signature=$root.tensorflow.OpDef.decode(t,t.uint32());break;case 5:t.skip().pos++,i.attr===$util.emptyObject&&(i.attr={}),n=t.string(),t.pos++,i.attr[n]=$root.tensorflow.AttrValue.decode(t,t.uint32());break;case 3:i.nodeDef&&i.nodeDef.length||(i.nodeDef=[]),i.nodeDef.push($root.tensorflow.NodeDef.decode(t,t.uint32()));break;case 4:t.skip().pos++,i.ret===$util.emptyObject&&(i.ret={}),n=t.string(),t.pos++,i.ret[n]=t.string();break;default:t.skipType(7&a)}}return i},t}(),n.GradientDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.functionName="",t.prototype.gradientFunc="",t.decode=function(t,e){t instanceof $Reader||(t=$Reader.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new $root.tensorflow.GradientDef;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.functionName=t.string();break;case 2:r.gradientFunc=t.string();break;default:t.skipType(7&i)}}return r},t}(),n}();var compiled_api=$root,compiled_api_1=compiled_api.tensorflow;function getParamValue(t,e,n,r){var i=e.params[t];if(i&&void 0!==i.inputIndex){if("tensor"===i.type)return getTensor(e.inputNames[i.inputIndex],n,r);if("tensors"===i.type)return(0===i.inputIndex?0===i.inputParamLength?e.inputNames:e.inputNames.slice(i.inputIndex,-i.inputParamLength):e.inputNames.splice(i.inputIndex)).map(function(t){return getTensor(t,n,r)});var a=Array.prototype.slice.call(getTensor(e.inputNames.slice(i.inputIndex)[0],n,r).dataSync());return"number"===i.type?a[0]:a}return i&&i.value}function getTensor(t,e,n){var r=parseNodeName(t),i=r[0],a=r[1],o=n.currentContextIds.find(function(t){return!!e[getNodeNameWithContextId(i,t)]});return void 0!==o?e[getNodeNameWithContextId(i,o)][a]:void 0}function getTensorsForCurrentContenxt(t,e,n){return e[getNodeNameWithContextId(t,n.currentContextId)]}function getNodeNameAndIndex(t,e){var n=parseNodeName(t),r=n[0],i=n[1];return[getNodeNameWithContextId(r,e&&e.currentContextId),i]}function getNodeNameWithContextId(t,e){return e?t+"-"+e:t}function parseNodeName(t){var e=t.lastIndexOf(":");return-1===e?[t,0]:[t.substring(0,e),Number(t.substring(e+1))]}function split$1(t,e){for(var n=[],r=0;r<t.length;r+=e)n.push(t.slice(r,r+e));return n}var json=[{tfOpName:"Add",dlOpName:"add",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",dlOpName:"addN",category:"arithmetic",params:[{tfInputIndex:0,tfInputParamLength:0,dlParamName:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",dlOpName:"add",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",dlOpName:"sub",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",dlOpName:"div",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",dlOpName:"div",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",dlOpName:"floorDiv",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",dlOpName:"mul",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",dlOpName:"maximum",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"}]},{tfOpName:"Minimum",dlOpName:"minimum",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"}]},{tfOpName:"Pow",dlOpName:"pow",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",dlOpName:"squaredDifference",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",dlOpName:"mod",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",dlOpName:"mod",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}],arithmetic=Object.freeze({json:json}),json$1=[{tfOpName:"Abs",dlOpName:"abs",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",dlOpName:"acos",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",dlOpName:"asin",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",dlOpName:"atan",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",dlOpName:"atan2",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"y",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",dlOpName:"ceil",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",dlOpName:"clipByValue",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"clip_value_min",dlParamName:"clipValueMin",type:"number"},{tfParamName:"clip_value_max",dlParamName:"clipValueMax",type:"number"}]},{tfOpName:"Cos",dlOpName:"cos",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",dlOpName:"cosh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",dlOpName:"elu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",dlOpName:"exp",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",dlOpName:"floor",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",dlOpName:"log",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",dlOpName:"neg",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",dlOpName:"relu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",dlOpName:"clipByValue",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{dlParamName:"clipValueMin",type:"number",defaultValue:0},{dlParamName:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",dlOpName:"selu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",dlOpName:"sigmoid",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",dlOpName:"sin",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",dlOpName:"sinh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",dlOpName:"sqrt",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",dlOpName:"rsqrt",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",dlOpName:"square",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",dlOpName:"tan",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",dlOpName:"tanh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",dlOpName:"sign",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",dlOpName:"round",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",dlOpName:"expm1",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",dlOpName:"log1p",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",dlOpName:"reciprocal",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",dlOpName:"reciprocal",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",dlOpName:"softplus",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",dlOpName:"asinh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",dlOpName:"acosh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",dlOpName:"atanh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",dlOpName:"erf",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",dlOpName:"prod",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axes",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool",notSupported:!0},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",dlOpName:"leakyRelu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"alpha",dlParamName:"alpha",type:"number",defaultValue:.2},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}],basicMath=Object.freeze({json:json$1}),json$2=[{tfOpName:"LoopCond",dlOpName:"loopCond",category:"control",params:[{tfInputIndex:0,dlParamName:"pred",type:"tensor"}]},{tfOpName:"Switch",dlOpName:"switch",category:"control",params:[{tfInputIndex:0,dlParamName:"data",type:"tensor"},{tfInputIndex:1,dlParamName:"pred",type:"tensor"}]},{tfOpName:"Merge",dlOpName:"merge",category:"control",params:[{tfInputIndex:0,tfInputParamLength:0,dlParamName:"tensors",type:"tensors"}]},{tfOpName:"Enter",dlOpName:"enter",category:"control",params:[{tfInputIndex:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{tfParamName:"frame_name",dlParamName:"frameName",type:"string"},{tfParamName:"is_constant",dlParamName:"isConstant",type:"bool"}]},{tfOpName:"Exit",dlOpName:"exit",category:"control",params:[{tfInputIndex:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",dlOpName:"nextIteration",category:"control",params:[{tfInputIndex:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",dlOpName:"tensorArray",category:"control",params:[{tfInputIndex:0,dlParamName:"size",type:"number"},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"},{tfParamName:"element_shape",dlParamName:"elementShape",type:"shape"},{tfParamName:"dynamic_size",dlParamName:"dynamicSize",type:"bool"},{tfParamName:"clear_after_read",dlParamName:"clearAfterRead",type:"bool"},{tfParamName:"identical_element_shapes",dlParamName:"identicalElementShapes",type:"bool"},{tfParamName:"tensor_array_name",dlParamName:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",dlOpName:"tensorArrayWrite",category:"control",params:[{tfInputIndex:0,dlParamName:"tensorArrayId",type:"number"},{tfInputIndex:1,dlParamName:"index",type:"number"},{tfInputIndex:2,dlParamName:"tensor",type:"tensor"},{tfInputIndex:3,dlParamName:"flowIn",type:"number"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",dlOpName:"tensorArrayRead",category:"control",params:[{tfInputIndex:0,dlParamName:"tensorArrayId",type:"number"},{tfInputIndex:1,dlParamName:"index",type:"number"},{tfInputIndex:2,dlParamName:"flowIn",type:"number"},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",dlOpName:"tensorArrayGather",category:"control",params:[{tfInputIndex:0,dlParamName:"tensorArrayId",type:"number"},{tfInputIndex:1,dlParamName:"indices",type:"number[]"},{tfInputIndex:2,dlParamName:"flowIn",type:"number"},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"},{tfParamName:"element_shape",dlParamName:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",dlOpName:"tensorArrayScatter",category:"control",params:[{tfInputIndex:0,dlParamName:"tensorArrayId",type:"number"},{tfInputIndex:1,dlParamName:"indices",type:"number[]"},{tfInputIndex:2,dlParamName:"tensor",type:"tensor"},{tfInputIndex:3,dlParamName:"flowIn",type:"number"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",dlOpName:"tensorArrayConcat",category:"control",params:[{tfInputIndex:0,dlParamName:"tensorArrayId",type:"number"},{tfInputIndex:1,dlParamName:"flowIn",type:"number"},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"},{tfParamName:"element_shape_except0",dlParamName:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",dlOpName:"tensorArraySplit",category:"control",params:[{tfInputIndex:0,dlParamName:"tensorArrayId",type:"number"},{tfInputIndex:1,dlParamName:"tensor",type:"tensor"},{tfInputIndex:2,dlParamName:"lengths",type:"number[]"},{tfInputIndex:3,dlParamName:"flowIn",type:"number"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",dlOpName:"tensorArraySize",category:"control",params:[{tfInputIndex:0,dlParamName:"tensorArrayId",type:"number"},{tfInputIndex:1,dlParamName:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",dlOpName:"tensorArrayClose",category:"control",params:[{tfInputIndex:0,dlParamName:"tensorArrayId",type:"number"}]}],control=Object.freeze({json:json$2}),json$3=[{tfOpName:"AvgPool",dlOpName:"avgPool",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0},{tfParamName:"ksize",dlParamName:"kernelSize",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",dlOpName:"maxPool",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0},{tfParamName:"ksize",dlParamName:"kernelSize",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",dlOpName:"conv1d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"stride",dlParamName:"stride",type:"number"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NWC"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{tfParamName:"dilation",dlParamName:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",dlOpName:"conv2d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"useCudnnOnGpu",dlParamName:"useCudnnOnGpu",type:"bool"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NHWC"},{tfParamName:"dilations",dlParamName:"dilations",type:"number[]"}]},{tfOpName:"Conv2DBackpropInput",dlOpName:"conv2dTranspose",category:"convolution",params:[{tfInputIndex:2,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfInputIndex:0,dlParamName:"outputShape",type:"number[]"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",dlOpName:"depthwiseConv2d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"input",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NHWC"},{tfParamName:"dilations",dlParamName:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",dlOpName:"depthwiseConv2d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"input",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NHWC"},{tfParamName:"dilations",dlParamName:"dilations",type:"number[]"}]}],convolution=Object.freeze({json:json$3}),json$4=[{tfOpName:"Fill",dlOpName:"fill",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfInputIndex:1,dlParamName:"value",type:"number"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",dlOpName:"linspace",category:"creation",params:[{tfInputIndex:0,dlParamName:"start",type:"number"},{tfInputIndex:1,dlParamName:"stop",type:"number"},{tfInputIndex:2,dlParamName:"num",type:"number"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",dlOpName:"oneHot",category:"creation",params:[{tfInputIndex:0,dlParamName:"indices",type:"tensor"},{tfInputIndex:1,dlParamName:"depth",type:"number"},{tfInputIndex:2,dlParamName:"onValue",type:"number",defaultValue:1},{tfInputIndex:3,dlParamName:"offValue",type:"number",defaultValue:0},{tfParamName:"axis",dlParamName:"axis",type:"number",notSupported:!0},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",dlOpName:"ones",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",dlOpName:"onesLike",category:"creation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",dlOpName:"randomUniform",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"minval",dlParamName:"minval",type:"number",defaultValue:0},{tfParamName:"maxval",dlParamName:"maxval",type:"number",defaultValue:1},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"},{tfParamName:"seed",dlParamName:"seed",type:"number",defaultValue:0},{tfParamName:"seed2",dlParamName:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfParamName:"T",dlParamName:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",dlOpName:"range",category:"creation",params:[{tfInputIndex:0,dlParamName:"start",type:"number"},{tfInputIndex:1,dlParamName:"stop",type:"number"},{tfInputIndex:2,dlParamName:"step",type:"number",defaultValue:0},{tfParamName:"Tidx",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"truncatedNormal",dlOpName:"truncatedNormal",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"means",dlParamName:"mean",type:"number",defaultValue:0},{tfParamName:"stddev",dlParamName:"stdDev",type:"number",defaultValue:1},{tfParamName:"seed",dlParamName:"seed",type:"number"},{tfParamName:"seed2",dlParamName:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"},{tfParamName:"T",dlParamName:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",dlOpName:"zeros",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",dlOpName:"zerosLike",category:"creation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]}],creation=Object.freeze({json:json$4}),json$5=[{tfOpName:"NonMaxSuppressionV2",dlOpName:"nonMaxSuppression",category:"dynamic",params:[{tfInputIndex:0,dlParamName:"boxes",type:"tensor"},{tfInputIndex:1,dlParamName:"scores",type:"tensor"},{tfInputIndex:2,dlParamName:"maxOutputSize",type:"number"},{tfInputIndex:3,dlParamName:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",dlOpName:"nonMaxSuppression",category:"dynamic",params:[{tfInputIndex:0,dlParamName:"boxes",type:"tensor"},{tfInputIndex:1,dlParamName:"scores",type:"tensor"},{tfInputIndex:2,dlParamName:"maxOutputSize",type:"number"},{tfInputIndex:3,dlParamName:"iouThreshold",type:"number"},{tfInputIndex:4,dlParamName:"scoreThreshold",type:"number"}]},{tfOpName:"Where",dlOpName:"whereAsync",category:"dynamic",params:[{tfInputIndex:0,dlParamName:"condition",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",dlOpName:"setdiff1dAsync",category:"dynamic",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"y",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}],dynamic=Object.freeze({json:json$5}),json$6=[{tfOpName:"TopKV2",dlOpName:"topK",category:"evaluation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"k",type:"number"},{tfParamName:"sorted",dlParamName:"sorted",type:"bool"}]}],evaluation=Object.freeze({json:json$6}),json$7=[{tfOpName:"PlaceholderWithDefault",dlOpName:"placeholder",category:"graph",params:[{tfInputIndex:0,dlParamName:"default",type:"tensor"},{tfParamName:"shape",dlParamName:"shape",type:"shape"},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",dlOpName:"placeholder",category:"graph",params:[{tfParamName:"shape",dlParamName:"shape",type:"shape"},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"Const",dlOpName:"const",category:"graph"},{tfOpName:"Identity",dlOpName:"identity",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"Snapshot",dlOpName:"snapshot",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"Rank",dlOpName:"rank",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"Size",dlOpName:"size",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"Shape",dlOpName:"shape",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"ShapeN",dlOpName:"shapeN",category:"graph",params:[{tfInputIndex:0,tfInputParamLength:0,dlParamName:"x",type:"tensors"}]},{tfOpName:"Print",dlOpName:"print",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,tfInputParamLength:1,dlParamName:"data",type:"tensors"},{tfParamName:"message",dlParamName:"message",type:"string"},{tfParamName:"first_n",dlParamName:"firstN",type:"number",notSupprted:!0},{tfParamName:"summarize",dlParamName:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",dlOpName:"noop",category:"graph",params:[]},{tfOpName:"StopGradient",dlOpName:"stopGradient",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",dlOpName:"fakeQuantWithMinMaxVars",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"min",dlParamName:"min",type:"number"},{tfParamName:"max",dlParamName:"max",type:"number"}]}],graph=Object.freeze({json:json$7}),json$8=[{tfOpName:"ResizeBilinear",dlOpName:"resizeBilinear",category:"image",params:[{tfInputIndex:0,dlParamName:"images",type:"tensor"},{tfInputIndex:1,dlParamName:"size",type:"number[]"},{tfParamName:"align_corners",dlParamName:"alignCorners",type:"bool"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",dlOpName:"resizeNearestNeighbor",category:"image",params:[{tfInputIndex:0,dlParamName:"images",type:"tensor"},{tfInputIndex:1,dlParamName:"size",type:"number[]"},{tfParamName:"align_corners",dlParamName:"alignCorners",type:"bool"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",dlOpName:"cropAndResize",category:"image",params:[{tfInputIndex:0,dlParamName:"image",type:"tensor"},{tfInputIndex:1,dlParamName:"boxes",type:"tensor"},{tfInputIndex:2,dlParamName:"boxInd",type:"tensor"},{tfInputIndex:3,dlParamName:"cropSize",type:"number[]"},{tfParamName:"method",dlParamName:"method",type:"string"},{tfParamName:"extrapolation_value",dlParamName:"extrapolationValue",type:"number"}]}],image$1=Object.freeze({json:json$8}),json$9=[{tfOpName:"Equal",dlOpName:"equal",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",dlOpName:"notEqual",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",dlOpName:"greater",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",dlOpName:"greaterEqual",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",dlOpName:"less",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",dlOpName:"lessEqual",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",dlOpName:"logicalAnd",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",dlOpName:"logicalNot",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",dlOpName:"logicalOr",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",dlOpName:"where",category:"logical",params:[{tfInputIndex:0,dlParamName:"condition",type:"tensor"},{tfInputIndex:1,dlParamName:"a",type:"tensor"},{tfInputIndex:2,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}],logical=Object.freeze({json:json$9}),json$10=[{tfOpName:"MatMul",dlOpName:"matMul",category:"matrices",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"transpose_a",dlParamName:"transposeA",type:"bool",defaultValue:!1},{tfParamName:"transpose_b",dlParamName:"transposeB",type:"bool",defaultValue:!1},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",dlOpName:"matMul",category:"matrices",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"adj_x",dlParamName:"transposeA",type:"bool",defaultValue:!1},{tfParamName:"adj_y",dlParamName:"transposeB",type:"bool",defaultValue:!1},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",dlOpName:"transpose",category:"matrices",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"perm",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}],matrices=Object.freeze({json:json$10}),json$11=[{tfOpName:"FusedBatchNorm",dlOpName:"batchNormalization",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"scale",type:"tensor"},{tfInputIndex:2,dlParamName:"offset",type:"tensor"},{tfInputIndex:3,dlParamName:"mean",type:"tensor"},{tfInputIndex:4,dlParamName:"variance",type:"tensor"},{tfParamName:"epsilon",dlParamName:"epsilon",type:"number",defaultValue:.001},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",dlOpName:"batchNormalization",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"scale",type:"tensor"},{tfInputIndex:2,dlParamName:"offset",type:"tensor"},{tfInputIndex:3,dlParamName:"mean",type:"tensor"},{tfInputIndex:4,dlParamName:"variance",type:"tensor"},{tfParamName:"epsilon",dlParamName:"epsilon",type:"number",defaultValue:.001},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",dlOpName:"localResponseNormalization",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"depth_radius",dlParamName:"radius",type:"number",defaultValue:5},{tfParamName:"bias",dlParamName:"bias",type:"number",defaultValue:1},{tfParamName:"alpha",dlParamName:"alpha",type:"number",defaultValue:1},{tfParamName:"beta",dlParamName:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",dlOpName:"softmax",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",dlOpName:"logSoftmax",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"SparseToDense",dlOpName:"sparseToDense",category:"normalization",params:[{tfInputIndex:0,dlParamName:"sparseIndices",type:"tensor"},{tfInputIndex:1,dlParamName:"outputShape",type:"number[]"},{tfInputIndex:2,dlParamName:"sparseValues",type:"tensor"},{tfInputIndex:3,dlParamName:"defaultValue",type:"tensor"},{tfParamName:"validate_indices",dlParamName:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],normalization=Object.freeze({json:json$11}),json$12=[{tfOpName:"Max",dlOpName:"max",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Mean",dlOpName:"mean",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Min",dlOpName:"min",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Sum",dlOpName:"sum",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"All",dlOpName:"all",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Any",dlOpName:"any",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",dlOpName:"argMax",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]},{tfOpName:"ArgMin",dlOpName:"argMin",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]},{tfOpName:"Prod",dlOpName:"prod",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]}],reduction=Object.freeze({json:json$12}),json$13=[{tfOpName:"ConcatV2",dlOpName:"concat",category:"slice_join",params:[{tfInputIndex:0,tfInputParamLength:1,dlParamName:"tensors",type:"tensors"},{tfInputIndex:-1,dlParamName:"axis",type:"number"}]},{tfOpName:"Concat",dlOpName:"concat",category:"slice_join",params:[{tfInputIndex:1,tfInputParamLength:1,dlParamName:"tensors",type:"tensors"},{tfInputIndex:0,dlParamName:"axis",type:"number"}]},{tfOpName:"GatherV2",dlOpName:"gather",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"indices",type:"tensor"},{tfInputIndex:2,dlParamName:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",dlOpName:"gather",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"indices",type:"tensor"},{tfParamName:"axis",dlParamName:"axis",type:"number",defaultValue:0},{tfParamName:"validate_indices",dlParamName:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",dlOpName:"reverse",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",dlOpName:"reverse",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"}]},{tfOpName:"Slice",dlOpName:"slice",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"begin",type:"number[]"},{tfInputIndex:2,dlParamName:"size",type:"number[]"}]},{tfOpName:"StridedSlice",dlOpName:"stridedSlice",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"begin",type:"number[]"},{tfInputIndex:2,dlParamName:"end",type:"number[]"},{tfInputIndex:3,dlParamName:"strides",type:"number[]"},{tfParamName:"begin_mask",dlParamName:"beginMask",type:"number",defaultValue:0},{tfParamName:"end_mask",dlParamName:"endMask",type:"number",defaultValue:0},{tfParamName:"new_axis_mask",dlParamName:"newAxisMask",type:"number",defaultValue:0},{tfParamName:"ellipsis_mask",dlParamName:"ellipsisMask",type:"number",defaultValue:0},{tfParamName:"shrink_axis_mask",dlParamName:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",dlOpName:"stack",category:"slice_join",params:[{tfInputIndex:0,tfInputParamLength:0,dlParamName:"tensors",type:"tensors"},{tfParamName:"axis",dlParamName:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",dlOpName:"unstack",category:"slice_join",params:[{tfInputIndex:0,tfInputParamLength:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"axis",dlParamName:"axis",type:"number",defaultValue:0},{tfParamName:"num",dlParamName:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",dlOpName:"tile",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"reps",type:"number[]"}]},{tfOpName:"Split",dlOpName:"split",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"axis",type:"number",defaultValue:0},{tfInputIndex:1,dlParamName:"x",type:"tensor"},{tfParamName:"num_split",dlParamName:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",dlOpName:"split",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"numOrSizeSplits",type:"number[]"},{tfInputIndex:2,dlParamName:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",dlOpName:"scatterNd",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"indices",type:"tensor"},{tfInputIndex:1,dlParamName:"values",type:"tensor"},{tfInputIndex:2,dlParamName:"shape",type:"number[]"}]},{tfOpName:"GatherNd",dlOpName:"gatherNd",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",dlOpName:"sparseToDense",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"sparseIndices",type:"tensor"},{tfInputIndex:1,dlParamName:"outputShape",type:"number[]"},{tfInputIndex:2,dlParamName:"sparseValues",type:"tensor"},{tfInputIndex:3,dlParamName:"defaultValue",type:"tensor"},{tfParamName:"validate_indices",dlParamName:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],sliceJoin=Object.freeze({json:json$13}),json$14=[{tfOpName:"FFT",dlOpName:"fft",category:"spectral",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"IFFT",dlOpName:"ifft",category:"spectral",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"RFFT",dlOpName:"rfft",category:"spectral",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"fft_length",type:"number",unsupported:!0}]},{tfOpName:"IRFFT",dlOpName:"irfft",category:"spectral",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"fft_length",type:"number",unsupported:!0}]}],spectral=Object.freeze({json:json$14}),json$15=[{tfOpName:"Cast",dlOpName:"cast",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"SrcT",dlParamName:"sdtype",type:"dtype",notSupported:!0},{tfParamName:"DstT",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",dlOpName:"expandDims",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,tfParamNameDeprecated:"dim",dlParamName:"axis",type:"number"}]},{tfOpName:"Pad",dlOpName:"pad",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"padding",type:"number[]"},{tfParamName:"constant_value",dlParamName:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",dlOpName:"pad",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"padding",type:"number[]"},{tfInputIndex:2,dlParamName:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",dlOpName:"reshape",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"shape",type:"number[]"}]},{tfOpName:"Squeeze",dlOpName:"squeeze",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"axis",tfParamNameDeprecated:"squeeze_dims",dlParamName:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",dlOpName:"spaceToBatchND",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"blockShape",type:"number[]"},{tfInputIndex:2,dlParamName:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",dlOpName:"batchToSpaceND",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"blockShape",type:"number[]"},{tfInputIndex:2,dlParamName:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",dlOpName:"depthToSpace",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"block_size",dlParamName:"blockSize",type:"number"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string"}]}],transformation=Object.freeze({json:json$15}),CONTROL_FLOW_OPS=["Switch","Merge","Enter","Exit","NextIteration"],DYNAMIC_SHAPE_OPS=["NonMaxSuppressionV2","NonMaxSuppressionV3","Where"],OperationMapper=function(){function t(){var t=[arithmetic,basicMath,control,convolution,creation,dynamic,evaluation,logical,image$1,graph,matrices,normalization,reduction,sliceJoin,spectral,transformation],e=[].concat.apply([],t.map(function(t){return t.json}));this.opMappers=e.reduce(function(t,e){return t[e.tfOpName]=e,t},{})}return Object.defineProperty(t,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),t.prototype.isControlFlow=function(t){return CONTROL_FLOW_OPS.some(function(e){return e===t.op})},t.prototype.isDynamicShape=function(t){return DYNAMIC_SHAPE_OPS.some(function(e){return e===t.op})},t.prototype.transformGraph=function(t){var e=this,n=!1,r=!1,i=[],a=[],o=t.node.reduce(function(t,o){return t[o.name]=e.mapNode(o),e.isControlFlow(o)&&(n=!0),e.isDynamicShape(o)&&(r=!0),"Placeholder"===o.op&&i.push(t[o.name]),"Const"===o.op&&a.push(t[o.name]),t},{}),s=[],u=[];return Object.keys(o).forEach(function(t){var e=o[t];e.inputNames.forEach(function(t){var n=getNodeNameAndIndex(t)[0];e.inputs.push(o[n]),o[n].children.push(e)}),0===e.inputs.length&&s.push(e)}),Object.keys(o).forEach(function(t){var e=o[t];0===e.children.length&&u.push(e)}),{nodes:o,inputs:s,outputs:u,weights:a,placeholders:i,withControlFlow:n,withDynamicShape:r}},t.prototype.mapNode=function(t){var e=this,n=this.opMappers[t.op];if(void 0===n)throw new Error("Tensorflow Op is not supported: "+t.op);var r={name:t.name,op:n.dlOpName,category:n.category,inputNames:(t.input||[]).map(function(t){return t.startsWith("^")?t.substr(1):t}),inputs:[],children:[],params:{}};return n.params&&(r.params=n.params.reduce(function(n,r){var i=r.tfInputIndex,a=r.tfInputParamLength,o=r.type,s=void 0;if(void 0===i)switch(r.type){case"string":void 0===(s=e.getStringParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getStringParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"number":void 0===(s=e.getNumberParam(t.attr,r.tfParamName,r.defaultValue||0))&&r.tfParamNameDeprecated&&(s=e.getNumberParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"number[]":void 0===(s=e.getNumericArrayParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getNumericArrayParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"bool":void 0===(s=e.getBoolParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getBoolParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"shape":void 0===(s=e.getTensorShapeParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getTensorShapeParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"dtype":void 0===(s=e.getDtypeParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getDtypeParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: "+r.type+" for op: "+t.op)}return n[r.dlParamName]={value:s,inputIndex:i,type:o,inputParamLength:a},n},{})),r},t.prototype.getStringParam=function(t,e,n,r){void 0===r&&(r=!1);var i=t[e];if(void 0!==i){var a=String.fromCharCode.apply(null,i.s);return r?a:a.toLowerCase()}return n},t.prototype.getBoolParam=function(t,e,n){var r=t[e];return r?r.b:n},t.prototype.getNumberParam=function(t,e,n){var r=t[e],i=r?r[r.value]:n;return"number"==typeof i?i:i.toInt()},t.prototype.getDtypeParam=function(t,e,n){var r=t[e];if(r&&r.type)switch(r.type){case compiled_api_1.DataType.DT_FLOAT:return"float32";case compiled_api_1.DataType.DT_INT32:return"int32";case compiled_api_1.DataType.DT_BOOL:return"bool";default:return n}return n},t.prototype.getTensorShapeParam=function(t,e,n){var r=t[e];return r&&r.shape?r.shape.dim.map(function(t){return"number"==typeof t.size?t.size:t.size.toInt()}):n},t.prototype.getNumericArrayParam=function(t,e,n){var r=t[e];return r?(r.list.f&&r.list.f.length?r.list.f:r.list.i).map(function(t){return"number"==typeof t?t:t.toInt()}):n},t}(),executeOp=function(t,e,n){switch(t.op){case"add":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.u)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"addN":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.v)(getParamValue("tensors",t,e,n))];case"mod":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.vc)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"mul":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zc)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"div":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.lb)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"floorDiv":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Bb)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"sub":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Td)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"minimum":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tc)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"maximum":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.oc)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"pow":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tc)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"squaredDifference":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Nd)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$1=function(t,e,n){switch(t.op){case"abs":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.r)(getParamValue("x",t,e,n))];case"acos":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.s)(getParamValue("x",t,e,n))];case"acosh":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.t)(getParamValue("x",t,e,n))];case"asin":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.B)(getParamValue("x",t,e,n))];case"asinh":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.C)(getParamValue("x",t,e,n))];case"atan":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.D)(getParamValue("x",t,e,n))];case"atan2":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.E)(getParamValue("x",t,e,n),getParamValue("y",t,e,n))];case"atanh":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.F)(getParamValue("x",t,e,n))];case"ceil":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.P)(getParamValue("x",t,e,n))];case"cos":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.db)(getParamValue("x",t,e,n))];case"cosh":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.eb)(getParamValue("x",t,e,n))];case"elu":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ob)(getParamValue("x",t,e,n))];case"erf":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tb)(getParamValue("x",t,e,n))];case"exp":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ub)(getParamValue("x",t,e,n))];case"expm1":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.wb)(getParamValue("x",t,e,n))];case"floor":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ab)(getParamValue("x",t,e,n))];case"log":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ac)(getParamValue("x",t,e,n))];case"log1p":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.bc)(getParamValue("x",t,e,n))];case"neg":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dc)(getParamValue("x",t,e,n))];case"reciprocal":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ed)(getParamValue("x",t,e,n))];case"relu":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fd)(getParamValue("x",t,e,n))];case"round":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.nd)(getParamValue("x",t,e,n))];case"selu":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.rd)(getParamValue("x",t,e,n))];case"sigmoid":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.wd)(getParamValue("x",t,e,n))];case"sin":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.yd)(getParamValue("x",t,e,n))];case"sign":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.xd)(getParamValue("x",t,e,n))];case"sinh":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zd)(getParamValue("x",t,e,n))];case"softplus":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Gd)(getParamValue("x",t,e,n))];case"sqrt":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ld)(getParamValue("x",t,e,n))];case"square":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Md)(getParamValue("x",t,e,n))];case"tanh":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Xd)(getParamValue("x",t,e,n))];case"tan":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Wd)(getParamValue("x",t,e,n))];case"clipByValue":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Q)(getParamValue("x",t,e,n),getParamValue("clipValueMin",t,e,n),getParamValue("clipValueMax",t,e,n))];case"rsqrt":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.lb)(Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pd)(1,"float32"),Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ld)(getTensor(t.inputNames[0],e,n)))];case"prod":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Xc)(getParamValue("x",t,e,n),getParamValue("axes",t,e,n))];case"leakyRelu":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sb)(getParamValue("x",t,e,n),getParamValue("alpha",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},TensorArray=function(){function t(e,n,r,i,a,o,s){this.name=e,this.dtype=n,this.maxSize=r,this.elementShape=i,this.identicalElementShapes=a,this.dynamicSize=o,this.clearAfterRead=s,this.tensors=[],this.closed_=!1,this.id=t.nextId++}return Object.defineProperty(t.prototype,"closed",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),t.prototype.clearAndClose=function(){this.tensors.forEach(function(t){return t.tensor.dispose()}),this.tensors=[],this.closed_=!0},t.prototype.size=function(){return this.tensors.length},t.prototype.read=function(t){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(t<0||t>=this.tensors.length)throw new Error("Tried to read from index "+t+", but array size is: "+this.tensors.length);var e=this.tensors[t];if(e.cleared)throw new Error("TensorArray "+this.name+": Could not read index "+t+" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor},t.prototype.readMany=function(t){var e=this;return t.map(function(t){return e.read(t)})},t.prototype.write=function(t,e){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error("Tried to write to index "+t+", but array is not resizeable and size is: "+this.maxSize);var n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+",\n          because the value dtype is "+e.dtype+", but TensorArray dtype is "+this.dtype+".");if(0===this.size()&&0===this.elementShape.length&&(this.elementShape=e.shape),this.assertShapesMatch(this.elementShape,e.shape,"TensorArray "+this.name+": Could not write to TensorArray index "+t+"."),n&&n.read)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+", because it has already been read.");if(n&&n.written)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+", because it has already been written.");n.tensor=e,n.written=!0,this.tensors[t]=n},t.prototype.writeMany=function(t,e){var n=this;if(t.length!==e.length)throw new Error("TensorArray "+this.name+": could not write multiple tensors,because the index size: "+t.length+" is not the same as tensors size: "+e.length+".");t.forEach(function(t,r){return n.write(t,e[r])})},t.prototype.gather=function(t,e){if(e&&e!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but gather requested dtype "+e);if(!t){t=[];for(var n=0;n<this.size();n++)t.push(n)}if(0===t.length)return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Yd)([],[0].concat(this.elementShape));var r=this.readMany(t);return this.assertShapesMatch(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Qd)(r,0)},t.prototype.concat=function(t){if(t&&t!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but concat requested dtype "+t);if(0===this.size())return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Yd)([],[0].concat(this.elementShape));for(var e=[],n=0;n<this.size();n++)e.push(n);var r=this.readMany(e);return this.assertShapesMatch(this.elementShape,r[0].shape,"TensorArray shape mismatch: tensor array shape ("+this.elementShape+") vs first tensor shape ("+r[0].shape+")"),Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.T)(r,0)},t.prototype.scatter=function(t,e){if(e.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+e.dtype);if(t.length!==e.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: "+t.length+" vs. "+e.shape[0]);var n=Math.max.apply(Math,t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error("Max index must be < array size ("+n+"  vs. "+this.maxSize+")");this.writeMany(t,Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pe)(e,0))},t.prototype.split=function(t,e){var n=this;if(e.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+e.dtype);var r=0,i=t.map(function(t){return r+=t});if(r!==e.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+r+", and tensor's shape is: "+e.shape);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error("TensorArray's size is not equal to the size of lengths ("+this.maxSize+" vs. "+t.length+"), and the TensorArray is not marked as dynamically resizeable");var a=0===r?0:e.size/r,o=[];Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ge)(function(){e=e.reshape([1,r,a]);for(var s=0;s<t.length;++s){var u=[0,0===s?0:i[s-1],0],c=[1,t[s],a];o[s]=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ad)(e,u,c).reshape(n.elementShape)}return o});for(var s=[],u=0;u<t.length;u++)s[u]=u;this.writeMany(s,o)},t.prototype.assertShapesMatch=function(t,e,n){void 0===n&&(n=""),_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.qe.assert(this.arraysEqual(t,e),n+" Shapes "+t+" and "+e+" must match")},t.prototype.arraysEqual=function(t,e){if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0},t.nextId=0,t}();function executeOp$2(t,e,n){return __awaiter(this,void 0,void 0,function(){var r,i,a,o,s,u,c,l,f,h,p,d,m,g,y,v,b,w,_,x,E,S,N,I,O,k,A,C,P,T,R,D,M,j,B;return __generator(this,function(L){switch(L.label){case 0:switch(t.op){case"loopCond":return[3,1];case"switch":return[3,2];case"merge":return[3,4];case"enter":return[3,5];case"exit":return[3,6];case"nextIteration":return[3,7];case"tensorArray":return[3,8];case"tensorArrayWrite":return[3,9];case"tensorArrayRead":return[3,10];case"tensorArrayGather":return[3,11];case"tensorArrayScatter":return[3,12];case"tensorArrayConcat":return[3,13];case"tensorArraySplit":return[3,14];case"tensorArraySize":return[3,15];case"tensorArrayClose":return[3,16]}return[3,17];case 1:return[2,[getParamValue("pred",t,e,n).clone()]];case 2:return r=getParamValue("pred",t,e,n),i=getParamValue("data",t,e,n),[4,r.data()];case 3:return[2,L.sent()[0]?[void 0,i.clone()]:[i.clone(),void 0]];case 4:return[2,(a=t.inputNames.find(function(t){return void 0!==getTensor(t,e,n)}))?[getTensor(a,e,n).clone()]:void 0];case 5:return o=getParamValue("frameName",t,e,n),s=getParamValue("tensor",t,e,n),n.enterFrame(o),[2,[s.clone()]];case 6:return u=getParamValue("tensor",t,e,n),n.exitFrame(),[2,[u.clone()]];case 7:return c=getParamValue("tensor",t,e,n),n.nextIteration(),[2,[c.clone()]];case 8:return l=getParamValue("size",t,e,n),f=getParamValue("dtype",t,e,n),h=getParamValue("elementShape",t,e,n),p=getParamValue("dynamicSize",t,e,n),d=getParamValue("clearAfterRead",t,e,n),m=getParamValue("identicalElementShapes",t,e,n),g=getParamValue("name",t,e,n),y=new TensorArray(g,f,l,h,m,p,d),n.addTensorArray(y),[2,[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pd)(y.id),Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pd)(1)]];case 9:return v=getParamValue("tensorArrayId",t,e,n),b=getParamValue("index",t,e,n),w=getParamValue("tensor",t,e,n),n.getTensorArray(v).write(b,w),[2,[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pd)(1)]];case 10:return _=getParamValue("tensorArrayId",t,e,n),x=getParamValue("index",t,e,n),[2,[n.getTensorArray(_).read(x)]];case 11:return E=getParamValue("tensorArrayId",t,e,n),S=getParamValue("indices",t,e,n),N=getParamValue("dtype",t,e,n),[2,[n.getTensorArray(E).gather(S,N)]];case 12:return I=getParamValue("tensorArrayId",t,e,n),O=getParamValue("indices",t,e,n),k=getParamValue("tensor",t,e,n),n.getTensorArray(I).scatter(O,k),[2,[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pd)(1)]];case 13:return A=getParamValue("tensorArrayId",t,e,n),C=n.getTensorArray(A),P=getParamValue("dtype",t,e,n),[2,[C.concat(P)]];case 14:return T=getParamValue("tensorArrayId",t,e,n),R=getParamValue("tensor",t,e,n),D=getParamValue("lengths",t,e,n),n.getTensorArray(T).split(D,R),[2,[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pd)(1)]];case 15:return M=getParamValue("tensorArrayId",t,e,n),j=n.getTensorArray(M),[2,[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pd)(j.size(),"int32")]];case 16:return B=getParamValue("tensorArrayId",t,e,n),n.getTensorArray(B).clearAndClose(),[2,[]];case 17:throw TypeError("Node type "+t.op+" is not implemented")}})})}var executeOp$3=function(t,e,n){switch(t.op){case"conv1d":var r=getParamValue("stride",t,e,n),i=getParamValue("pad",t,e,n),a=getParamValue("dataFormat",t,e,n).toUpperCase(),o=getParamValue("dilation",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Y)(getParamValue("x",t,e,n),getParamValue("filter",t,e,n),r,i,a,o)];case"conv2d":r=getParamValue("strides",t,e,n),i=getParamValue("pad",t,e,n),a=getParamValue("dataFormat",t,e,n).toUpperCase();var s=getParamValue("dilations",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Z)(getParamValue("x",t,e,n),getParamValue("filter",t,e,n),[r[1],r[2]],i,a,[s[0],s[1]])];case"conv2dTranspose":var u=getParamValue("outputShape",t,e,n);return r=getParamValue("strides",t,e,n),i=getParamValue("pad",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.bb)(getParamValue("x",t,e,n),getParamValue("filter",t,e,n),u,[r[1],r[2]],i)];case"depthwiseConv2d":return r=getParamValue("strides",t,e,n),i=getParamValue("pad",t,e,n),s=getParamValue("dilations",t,e,n),a=getParamValue("dataFormat",t,e,n).toUpperCase(),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ib)(getParamValue("input",t,e,n),getParamValue("filter",t,e,n),[r[1],r[2]],i,a,[s[0],s[1]])];case"avgPool":r=getParamValue("strides",t,e,n),i=getParamValue("pad",t,e,n);var c=getParamValue("kernelSize",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.G)(getParamValue("x",t,e,n),[c[1],c[2]],[r[1],r[2]],i)];case"maxPool":return r=getParamValue("strides",t,e,n),i=getParamValue("pad",t,e,n),c=getParamValue("kernelSize",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.nc)(getParamValue("x",t,e,n),[c[1],c[2]],[r[1],r[2]],i)];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$4=function(t,e,n){switch(t.op){case"fill":var r=getParamValue("shape",t,e,n),i=getParamValue("dtype",t,e,n),a=getParamValue("value",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zb)(r,a,i)];case"linspace":var o=getParamValue("start",t,e,n),s=getParamValue("stop",t,e,n),u=getParamValue("num",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Yb)(o,s,u)];case"oneHot":var c=getParamValue("indices",t,e,n),l=getParamValue("depth",t,e,n),f=getParamValue("onValue",t,e,n),h=getParamValue("offValue",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ic)(c,l,f,h)];case"ones":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Jc)(getParamValue("shape",t,e,n),getParamValue("dtype",t,e,n))];case"onesLike":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Kc)(getParamValue("x",t,e,n))];case"randomUniform":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.bd)(getParamValue("shape",t,e,n),getParamValue("minval",t,e,n),getParamValue("maxval",t,e,n),getParamValue("dtype",t,e,n))];case"range":o=getParamValue("start",t,e,n);var p=getParamValue("stop",t,e,n),d=getParamValue("step",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cd)(o,p,d,getParamValue("dtype",t,e,n))];case"truncatedNormal":r=getParamValue("shape",t,e,n);var m=getParamValue("mean",t,e,n),g=getParamValue("stdDev",t,e,n),y=getParamValue("seed",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ne)(r,m,g,getParamValue("dtype",t,e,n),y)];case"zeros":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ze)(getParamValue("shape",t,e,n),getParamValue("dtype",t,e,n))];case"zerosLike":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ae)(getParamValue("x",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}};function executeOp$5(t,e,n){return __awaiter(this,void 0,void 0,function(){var r,i,a,o,s;return __generator(this,function(u){switch(u.label){case 0:switch(t.op){case"nonMaxSuppression":return[3,1];case"whereAsync":return[3,3];case"setdiff1dAsync":return[3,5]}return[3,7];case 1:return r=getParamValue("boxes",t,e,n),i=getParamValue("scores",t,e,n),a=getParamValue("maxOutputSize",t,e,n),o=getParamValue("iouThreshold",t,e,n),s=getParamValue("scoreThreshold",t,e,n),[4,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ob.nonMaxSuppressionAsync(r,i,a,o,s)];case 2:return[2,[u.sent()]];case 3:return[4,Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ye)(getParamValue("condition",t,e,n))];case 4:return[2,[u.sent()]];case 5:return[4,Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.vd)(getParamValue("x",t,e,n),getParamValue("y",t,e,n))];case 6:return[2,u.sent()];case 7:throw TypeError("Node type "+t.op+" is not implemented")}})})}var executeOp$6=function(t,e,n){switch(t.op){case"topK":var r=getParamValue("x",t,e,n),i=getParamValue("k",t,e,n),a=getParamValue("sorted",t,e,n),o=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ke)(r,i,a);return[o.values,o.indices];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$7=function(t,e,n){switch(t.op){case"const":return e[t.name];case"placeholder":var r=getParamValue("default",t,e,n);return[getTensor(t.name,e,n)||r];case"identity":case"stopGradient":case"fakeQuantWithMinMaxVars":case"snapshot":return[getParamValue("x",t,e,n).clone()];case"shape":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Zd)(getParamValue("x",t,e,n).shape,"int32")];case"shapeN":return getParamValue("x",t,e,n).map(function(t){return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Zd)(t.shape)});case"size":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pd)(getParamValue("x",t,e,n).size,"int32")];case"rank":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pd)(getParamValue("x",t,e,n).rank,"int32")];case"noop":return[];case"print":var i=getParamValue("x",t,e,n),a=getParamValue("data",t,e,n),o=getParamValue("message",t,e,n),s=getParamValue("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(var u=0;u<a.length;u++)console.log(Array.prototype.slice.call(a[0].dataSync()).slice(0,s));return[i];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$8=function(t,e,n){switch(t.op){case"resizeBilinear":var r=getParamValue("images",t,e,n),i=getParamValue("size",t,e,n),a=getParamValue("alignCorners",t,e,n);return[_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ob.resizeBilinear(r,[i[0],i[1]],a)];case"resizeNearestNeighbor":return r=getParamValue("images",t,e,n),i=getParamValue("size",t,e,n),a=getParamValue("alignCorners",t,e,n),[_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ob.resizeNearestNeighbor(r,[i[0],i[1]],a)];case"cropAndResize":var o=getParamValue("image",t,e,n),s=getParamValue("boxes",t,e,n),u=getParamValue("boxInd",t,e,n),c=getParamValue("cropSize",t,e,n),l=getParamValue("method",t,e,n),f=getParamValue("extrapolationValue",t,e,n);return[_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ob.cropAndResize(o,s,u,c,l,f)];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$9=function(t,e,n){switch(t.op){case"equal":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.rb)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"notEqual":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Gc)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"greater":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ib)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"greaterEqual":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Jb)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"less":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tb)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"lessEqual":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ub)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"logicalAnd":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fc)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"logicalNot":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.gc)(getParamValue("a",t,e,n))];case"logicalOr":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.hc)(getParamValue("a",t,e,n),getParamValue("b",t,e,n))];case"where":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.xe)(getParamValue("condition",t,e,n),getParamValue("a",t,e,n),getParamValue("b",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$10=function(t,e,n){switch(t.op){case"matMul":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kc)(getParamValue("a",t,e,n),getParamValue("b",t,e,n),getParamValue("transposeA",t,e,n),getParamValue("transposeB",t,e,n))];case"transpose":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.me)(getParamValue("x",t,e,n),getParamValue("perm",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$11=function(t,e,n){switch(t.op){case"batchNormalization":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.I)(getParamValue("x",t,e,n),getParamValue("mean",t,e,n),getParamValue("variance",t,e,n),getParamValue("epsilon",t,e,n),getParamValue("scale",t,e,n),getParamValue("offset",t,e,n))];case"localResponseNormalization":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Zb)(getParamValue("x",t,e,n),getParamValue("radius",t,e,n),getParamValue("bias",t,e,n),getParamValue("alpha",t,e,n),getParamValue("beta",t,e,n))];case"softmax":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Fd)(getParamValue("x",t,e,n))];case"logSoftmax":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dc)(getParamValue("x",t,e,n))];case"sparseToDense":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Id)(getParamValue("sparseIndices",t,e,n),getParamValue("outputShape",t,e,n),getParamValue("sparseValues",t,e,n),getParamValue("defaultValue",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$12=function(t,e,n){switch(t.op){case"max":var r=getParamValue("axis",t,e,n),i=getParamValue("keepDims",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mc)(getParamValue("x",t,e,n),r,i)];case"mean":return r=getParamValue("axis",t,e,n),i=getParamValue("keepDims",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.qc)(getParamValue("x",t,e,n),r,i)];case"min":return r=getParamValue("axis",t,e,n),i=getParamValue("keepDims",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sc)(getParamValue("x",t,e,n),r,i)];case"sum":return r=getParamValue("axis",t,e,n),i=getParamValue("keepDims",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Vd)(getParamValue("x",t,e,n),r,i)];case"all":return r=getParamValue("axis",t,e,n),i=getParamValue("keepDims",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.x)(getParamValue("x",t,e,n),r,i)];case"any":return r=getParamValue("axis",t,e,n),i=getParamValue("keepDims",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.y)(getParamValue("x",t,e,n),r,i)];case"argMax":return r=getParamValue("axis",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.z)(getParamValue("x",t,e,n),r)];case"argMin":return r=getParamValue("axis",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.A)(getParamValue("x",t,e,n),r)];case"prod":return r=getParamValue("axis",t,e,n),i=getParamValue("keepDims",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Xc)(getParamValue("x",t,e,n),r,i)];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$13=function(t,e,n){switch(t.op){case"concat":var r=getParamValue("axis",t,e,n),i=getParamValue("tensors",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.T)(i,r)];case"gather":r=getParamValue("axis",t,e,n);var a=getParamValue("x",t,e,n),o=getParamValue("indices",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Db)(a,o,r)];case"reverse":return r=getParamValue("axis",t,e,n),a=getParamValue("x",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.hd)(a,r)];case"slice":var s=getParamValue("begin",t,e,n),u=getParamValue("size",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ad)(getParamValue("x",t,e,n),s,u)];case"stridedSlice":s=getParamValue("begin",t,e,n);var c=getParamValue("end",t,e,n),l=getParamValue("strides",t,e,n),f=getParamValue("beginMask",t,e,n),h=getParamValue("endMask",t,e,n),p=getParamValue("ellipsisMask",t,e,n),d=getParamValue("newAxisMask",t,e,n),m=getParamValue("shrinkAxisMask",t,e,n),g=getParamValue("x",t,e,n);if(1===s.length&&g.shape.length>1)for(var y=1;y<g.shape.length;y++)s.push(0),c.push(g.shape[y]),l.push(l[0]);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sd)(g,s,c,l,f,h,p,d,m)];case"stack":return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ge)(function(){var r=getParamValue("axis",t,e,n),i=getParamValue("tensors",t,e,n),a=i[0].shape,o=i[0].squeeze().shape,s=i.map(function(t){var e=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.qe.arraysEqual(t.shape,a);if(!e&&!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.qe.arraysEqual(t.squeeze().shape,o))throw new Error("the input tensors shape does not match");return e?t:t.reshape(a)});return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Qd)(s,r)]});case"unstack":return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ge)(function(){var r=getParamValue("axis",t,e,n),i=getParamValue("tensor",t,e,n);return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pe)(i,r)});case"tile":var v=getParamValue("reps",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.he)(getParamValue("x",t,e,n),v)];case"split":r=getParamValue("axis",t,e,n);var b=getParamValue("numOrSizeSplits",t,e,n);return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Kd)(getParamValue("x",t,e,n),b,r);case"scatterNd":o=getParamValue("indices",t,e,n);var w=getParamValue("values",t,e,n),_=getParamValue("shape",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.qd)(o,w,_)];case"gatherNd":var x=getParamValue("x",t,e,n);return o=getParamValue("indices",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Eb)(x,o)];case"sparseToDense":o=getParamValue("sparseIndices",t,e,n),_=getParamValue("outputShape",t,e,n);var E=getParamValue("sparseValues",t,e,n),S=getParamValue("defaultValue",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Id)(o,E,_,S)];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$14=function(t,e,n){switch(t.op){case"fft":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.yb)(getParamValue("x",t,e,n))];case"ifft":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mb)(getParamValue("x",t,e,n))];case"rfft":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.md)(getParamValue("x",t,e,n))];case"irfft":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Qb)(getParamValue("x",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},executeOp$15=function(t,e,n){switch(t.op){case"cast":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.O)(getParamValue("x",t,e,n),getParamValue("dtype",t,e,n))];case"expandDims":var r=getParamValue("axis",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.vb)(getParamValue("x",t,e,n),r)];case"squeeze":return r=getParamValue("axis",t,e,n),[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pd)(getParamValue("x",t,e,n),r)];case"reshape":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.gd)(getParamValue("x",t,e,n),getParamValue("shape",t,e,n))];case"pad":return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Nc)(getParamValue("x",t,e,n),split$1(getParamValue("padding",t,e,n),2),getParamValue("constantValue",t,e,n))];case"spaceToBatchND":var i=getParamValue("blockShape",t,e,n),a=split$1(getParamValue("paddings",t,e,n),2);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Hd)(getParamValue("x",t,e,n),i,a)];case"batchToSpaceND":i=getParamValue("blockShape",t,e,n);var o=split$1(getParamValue("crops",t,e,n),2);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.M)(getParamValue("x",t,e,n),i,o)];case"depthToSpace":var s=getParamValue("blockSize",t,e,n),u=getParamValue("dataFormat",t,e,n);return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.hb)(getParamValue("x",t,e,n),s,u)];default:throw TypeError("Node type "+t.op+" is not implemented")}};function executeOp$16(t,e,n){switch(t.category){case"arithmetic":return executeOp(t,e,n);case"basic_math":return executeOp$1(t,e,n);case"control":return executeOp$2(t,e,n);case"convolution":return executeOp$3(t,e,n);case"creation":return executeOp$4(t,e,n);case"dynamic":return executeOp$5(t,e,n);case"evaluation":return executeOp$6(t,e,n);case"image":return executeOp$8(t,e,n);case"graph":return executeOp$7(t,e,n);case"logical":return executeOp$9(t,e,n);case"matrices":return executeOp$10(t,e,n);case"normalization":return executeOp$11(t,e,n);case"reduction":return executeOp$12(t,e,n);case"slice_join":return executeOp$13(t,e,n);case"spectral":return executeOp$14(t,e,n);case"transformation":return executeOp$15(t,e,n);default:throw TypeError("Node type "+t.op+" is not implemented")}}var ExecutionContext=function(){function t(t,e){this.weightMap=t,this.tensorArrayMap=e,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return t.prototype.newFrame=function(t,e){return{id:t,frameName:e,iterationId:0}},Object.defineProperty(t.prototype,"currentContext",{get:function(){return this.contexts},set:function(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextId",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextIds",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),t.prototype.generateCurrentContextIds=function(){for(var t=[],e=0;e<this.contexts.length-1;e++){var n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t},t.prototype.contextIdforContexts=function(t){return t?t.map(function(t){return 0===t.id&&0===t.iterationId?"":t.frameName+"-"+t.iterationId}).join("/"):""},t.prototype.enterFrame=function(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},t.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},t.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");this.contexts=this.contexts.slice(),this.lastId++;var t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},t.prototype.getWeight=function(t){return this.weightMap[t]},t.prototype.addTensorArray=function(t){this.tensorArrayMap[t.id]=t},t.prototype.getTensorArray=function(t){return this.tensorArrayMap[t]},t}(),GraphExecutor=function(){function t(t){this.graph=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this.placeholders=t.placeholders,this._outputs=t.outputs,this.compile()}return Object.defineProperty(t.prototype,"weightMap",{get:function(){return this._weightMap},set:function(t){var e=Object.keys(t).map(function(e){return t[e].map(function(t){return t.id})});this.weightIds=[].concat.apply([],e),this._weightMap=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputs",{get:function(){return this.placeholders.map(function(t){return{name:t.name,shape:t.params.shape?t.params.shape.value:void 0,dtype:t.params.dtype?t.params.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputs",{get:function(){return this._outputs.map(function(t){return{name:t.name,shape:t.params.shape?t.params.shape.value:void 0,dtype:t.params.dtype?t.params.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputNodes",{get:function(){return this.placeholders.map(function(t){return t.name})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputNodes",{get:function(){return this.outputs.map(function(t){return t.name})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isControlFlowModel",{get:function(){return this.graph.withControlFlow},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isDynamicShapeModel",{get:function(){return this.graph.withDynamicShape},enumerable:!0,configurable:!0}),t.prototype.compile=function(t){if(!this.graph.withControlFlow&&!this.graph.withDynamicShape){var e=[],n=t||this.graph.placeholders,r=n.map(function(t){return t.name}).sort().join(this.SEPERATOR);if(!this.compiledMap.get(r)){for(var i=n.concat(this.graph.weights),a={};i.length>0;){var o=i.pop();a[o.name]=!0,e.push(o),o.children.forEach(function(t){!a[t.name]&&t.inputNames.every(function(t){var e=getNodeNameAndIndex(t)[0];return a[e]})&&i.push(t)})}this.compiledMap.set(r,e)}}},t.prototype.execute=function(t,e,n){var r=this;void 0===e&&(e=!0);var i=Object.keys(t).sort();this.checkInput(t,e),this.checkInputShapeAndType(t,e),this.compile(i.map(function(t){return r.graph.nodes[t]}));var a=this.calculateOutputs(n);this.checkOutput(this.compiledMap.get(i.join(this.SEPERATOR)),a);var o={};return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ge)(function(){for(var e=new ExecutionContext(r._weightMap,o),n=__assign({},r.weightMap,t),s=r.getFrozenTensorIds(n),u={},c=r.compiledMap.get(i.join(r.SEPERATOR)),l=0;l<c.length;l++){var f=c[l];if(n[f.name]||(n[f.name]=executeOp$16(f,n,e),r.checkTensorForDisposal(f.name,f,n,e,s,a,u)),a.every(function(t){return!!n[t]}))break}return r.findOutputs(n,e,a)})},t.prototype.getFrozenTensorIds=function(t){var e=[].concat.apply([],Object.keys(t).map(function(e){return t[e]}).map(function(t){return t.map(function(t){return t.id})}));return new Set(e)},t.prototype.checkTensorForDisposal=function(t,e,n,r,i,a,o){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach(function(t){null!=t&&(o[t.id]=(o[t.id]||0)+e.children.length)}),e.inputs.forEach(function(t){if("control"!==t.category){var e=getTensorsForCurrentContenxt(t.name,n,r);null!=e&&e.forEach(function(t){if(t&&!i.has(t.id)){var e=o[t.id];1===e?(t.dispose(),delete o[t.id]):null!=e&&o[t.id]--}})}}))},t.prototype.executeAsync=function(t,e){return __awaiter(this,void 0,void 0,function(){var n,r,i,a,o,s,u,c,l=this;return __generator(this,function(f){switch(f.label){case 0:return this.checkInput(t,!1),this.checkInputShapeAndType(t,!1),n={},r=new ExecutionContext(this._weightMap,n),i=this.calculateOutputs(e),[4,this.executeWithControlFlow(t,r,i)];case 1:return a=f.sent(),o=this.findOutputs(a,r,e),s=Object.keys(o).map(function(t){return o[t].id}),u=Object.keys(t).map(function(e){return t[e].map(function(t){return t.id})}),c=[].concat.apply([],u),Object.keys(a).forEach(function(t){a[t].forEach(function(t){t&&-1===s.indexOf(t.id)&&-1===c.indexOf(t.id)&&-1===l.weightIds.indexOf(t.id)&&t.dispose()})}),[2,o]}})})},t.prototype.executeWithControlFlow=function(t,e,n){return __awaiter(this,void 0,void 0,function(){var r,i,a,o,s,u,c,l,f=this;return __generator(this,function(h){switch(h.label){case 0:r=Object.keys(t),i=r.map(function(t){return f.graph.nodes[t]}),a=i.concat(this.graph.weights).map(function(t){return{node:t,contexts:e.currentContext}}),o=__assign({},this.weightMap,t),s={},u=this.getFrozenTensorIds(o),c={},h.label=1;case 1:return a.length>0?(l=this.processStack(i,a,e,o,c,u,n,s),[4,Promise.all(l)]):[3,3];case 2:return h.sent(),[3,1];case 3:return[2,o]}})})},t.prototype.processStack=function(t,e,n,r,i,a,o,s){for(var u=this,c=[],l=function(){var l=e.pop();n.currentContext=l.contexts;var h="";if("enter"===l.node.op&&getParamValue("isConstant",l.node,r,n)&&(h=getNodeNameAndIndex(l.node.name,n)[0]),-1===t.indexOf(l.node)){var p=executeOp$16(l.node,r,n);h||(h=getNodeNameAndIndex(l.node.name,n)[0]);var d=n.currentContext;p instanceof Promise?c.push(p.then(function(t){return r[h]=t,n.currentContext=d,u.checkTensorForDisposal(h,l.node,r,n,a,o,s),u.processChildNodes(l.node,e,n,r,i),t})):(r[h]=p,f.checkTensorForDisposal(h,l.node,r,n,a,o,s),f.processChildNodes(l.node,e,n,r,i))}else f.processChildNodes(l.node,e,n,r,i)},f=this;e.length>0;)l();return c},t.prototype.processChildNodes=function(t,e,n,r,i){t.children.forEach(function(t){var a=getNodeNameAndIndex(t.name,n)[0];i[a]||("merge"===t.op?t.inputNames.some(function(t){return!!getTensor(t,r,n)})&&(i[a]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(function(t){return!!getTensor(t,r,n)})&&(i[a]=!0,e.push({contexts:n.currentContext,node:t})))})},t.prototype.calculateOutputs=function(t){return!t||t instanceof Array||(t=[t]),t||this.graph.outputs.map(function(t){return t.name})},t.prototype.findOutputs=function(t,e,n){return this.calculateOutputs(n).reduce(function(n,r){return n[r]=getTensor(r,t,e),n},{})},t.prototype.dispose=function(){var t=this;Object.keys(this.weightMap).forEach(function(e){return t.weightMap[e].forEach(function(t){return t.dispose()})})},t.prototype.checkInputShapeAndType=function(t,e){void 0===e&&(e=!0),this.placeholders.forEach(function(n){var r=t[n.name];if(e||r){var i=r[0];if(n.params.shape&&n.params.shape.value){var a=n.params.shape.value,o=a.length===i.shape.length&&i.shape.every(function(t,e){return-1===a[e]||a[e]===t});_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.qe.assert(o,"The shape of dict['"+n.name+"'] provided in model.execute(dict) must be ["+a+"], but was ["+i.shape+"]")}n.params.dtype&&n.params.dtype.value&&_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.qe.assert(i.dtype===n.params.dtype.value,"The dtype of dict['"+n.name+"'] provided in model.execute(dict) must be "+n.params.dtype.value+", but was "+i.dtype)}})},t.prototype.checkInput=function(t,e){var n=this;void 0===e&&(e=!0);var r=Object.keys(t),i=[],a=[];this.inputNodes.forEach(function(t){-1===r.indexOf(t)&&i.push(t)}),r.forEach(function(t){-1===n.inputNodes.indexOf(t)&&a.push(t)});var o=a.filter(function(t){return!n.graph.nodes[t]});if(i.length>0&&e)throw new Error("The dict provided in model.execute(dict) has the keys ["+r+"], but is missing the required keys: ["+i+"].");if(a.length>0&&e)throw new Error("The dict provided in model.execute(dict) has unused keys: ["+a+"]. Please provide only the following keys: ["+this.inputNodes+"].");if(o.length>0)throw new Error("The dict provided in model.execute(dict) has keys: ["+o+"] not part of model graph.")},t.prototype.checkOutput=function(t,e){var n=t.map(function(t){return t.name}),r=[];if(e.forEach(function(t){-1===n.indexOf(t)&&r.push(t)}),r.length>0)throw new Error("The following outputs are not generated by the execution: ["+r+"].")},t}(),TFHUB_SEARCH_PARAM="?tfjs-format=file",DEFAULT_MODEL_NAME="tensorflowjs_model.pb",DEFAULT_MANIFEST_NAME="weights_manifest.json",FrozenModel=function(){function t(t,e,n,r){this.modelUrl=t,this.weightManifestUrl=e,this.requestOption=n,this.weightPrefix=r,this.version="n/a"}return Object.defineProperty(t.prototype,"modelVersion",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputNodes",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputNodes",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputs",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputs",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"weights",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),t.prototype.findIOHandler=function(){var t=[this.modelUrl,this.weightManifestUrl];if(this.requestOption)this.handler=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pb.browserHTTPRequest(t,this.requestOption,this.weightPrefix);else{var e=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pb.getLoadHandlers(t);if(0===e.length)e.push(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pb.browserHTTPRequest(t,this.requestOption));else if(e.length>1)throw new Error("Found more than one ("+e.length+") load handlers for URL '"+[t]+"'");this.handler=e[0]}},t.prototype.load=function(){return __awaiter(this,void 0,void 0,function(){var t,e,n;return __generator(this,function(r){switch(r.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return[4,this.handler.load()];case 1:return t=r.sent(),e=compiled_api_1.GraphDef.decode(new Uint8Array(t.modelTopology)),this.version=e.versions.producer+"."+e.versions.minConsumer,n=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pb.decodeWeights(t.weightData,t.weightSpecs),this.executor=new GraphExecutor(OperationMapper.Instance.transformGraph(e)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),[2,!0]}})})},t.prototype.predict=function(t,e){return this.execute_(t,!0,this.outputNodes)},t.prototype.constructTensorMap=function(t){var e=t instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.o?[t]:t;if(e.length!==this.inputNodes.length)throw new Error("Input tensor count mismatch,the frozen model has "+this.inputNodes.length+" placeholders, while there are "+e.length+" input tensors.");return this.inputNodes.reduce(function(t,n,r){return t[n]=e[r],t},{})},t.prototype.execute=function(t,e){return this.execute_(t,!1,e)},t.prototype.execute_=function(t,e,n){if(void 0===e&&(e=!0),n=n||this.outputNodes,(t instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.o||Array.isArray(t))&&(t=this.constructTensorMap(t)),this.executor.isControlFlowModel||this.executor.isDynamicShapeModel)throw new Error("The model contains control flow or dynamic shape ops, please use executeAsync method");var r=this.executor.execute(this.convertTensorMapToTensorsMap(t),e,n),i=Object.keys(r);return Array.isArray(n)&&n.length>1?n.map(function(t){return r[t]}):r[i[0]]},t.prototype.executeAsync=function(t,e){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:if(!this.executor.isControlFlowModel&&!this.executor.isDynamicShapeModel)throw new Error("The model does not contain control flow or dynamic shape ops, please use execute method for better performance.");return e=e||this.outputNodes,(t instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.o||Array.isArray(t))&&(t=this.constructTensorMap(t)),[4,this.executor.executeAsync(this.convertTensorMapToTensorsMap(t),e)];case 1:return n=i.sent(),r=Object.keys(n),[2,Array.isArray(e)&&e.length>1?e.map(function(t){return n[t]}):n[r[0]]]}})})},t.prototype.convertTensorMapToTensorsMap=function(t){return Object.keys(t).reduce(function(e,n){return e[n]=[t[n]],e},{})},t.prototype.dispose=function(){this.executor.dispose()},t}();function loadFrozenModel(t,e,n){return __awaiter(this,void 0,void 0,function(){var r;return __generator(this,function(i){switch(i.label){case 0:return[4,(r=new FrozenModel(t,e,n)).load()];case 1:return i.sent(),[2,r]}})})}function loadTfHubModule(t,e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){return t.endsWith("/")||(t+="/"),[2,loadFrozenModel(""+t+DEFAULT_MODEL_NAME+TFHUB_SEARCH_PARAM,""+t+DEFAULT_MANIFEST_NAME+TFHUB_SEARCH_PARAM,e)]})})}var version="0.7.2"}).call(this,__webpack_require__(11))},function(t,e,n){"use strict";n.r(e),function(t,r,i){n.d(e,"array",function(){return ot}),n.d(e,"Dataset",function(){return it}),n.d(e,"zip",function(){return st}),n.d(e,"CSVDataset",function(){return gt}),n.d(e,"TextLineDataset",function(){return lt}),n.d(e,"csv",function(){return Ot}),n.d(e,"generator",function(){return kt}),n.d(e,"FileDataSource",function(){return At}),n.d(e,"URLDataSource",function(){return It}),n.d(e,"version_data",function(){return Ct});var a=n(0),o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function s(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function u(t,e,n,r){return new(n||(n=Promise))(function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})}function c(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}var l="undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{};function f(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function h(t,e){return t(e={exports:{}},e.exports),e.exports}var p=h(function(t){!function(t,e,n){function r(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function i(t,e){var n=new function(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}(t),i=e&&e.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+1.1102230246251565e-16*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.alea=i}(0,t)}),d=h(function(t){!function(t,e,n){function r(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function i(t,e){var n=new function(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xor128=i}(0,t)}),m=h(function(t){!function(t,e,n){function r(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function i(t,e){var n=new function(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xorwow=i}(0,t)}),g=h(function(t){!function(t,e,n){function r(t,e){return e.x=t.x.slice(),e.i=t.i,e}function i(t,e){null==t&&(t=+new Date);var n=new function(t){var e=this;e.next=function(){var t,n,r=e.x,i=e.i;return t=r[i],n=(t^=t>>>7)^t<<24,n^=(t=r[i+1&7])^t>>>10,n^=(t=r[i+3&7])^t>>>3,n^=(t=r[i+4&7])^t<<7,t=r[i+7&7],n^=(t^=t<<13)^t<<9,r[i]=n,e.i=i+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.x&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xorshift7=i}(0,t)}),y=h(function(t){!function(t,e,n){function r(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function i(t,e){null==t&&(t=+new Date);var n=new function(t){var e=this;e.next=function(){var t,n,r=e.w,i=e.X,a=e.i;return e.w=r=r+1640531527|0,n=i[a+34&127],t=i[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=i[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,i,a,o,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),i=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,i=0==(n=s[127&a]^=r+o)?i+1:0);for(i>=128&&(s[127&(e&&e.length||0)]=-1),i=127,a=512;a>0;--a)r=s[i+34&127],n=s[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[i]=r^n;t.w=o,t.X=s,t.i=i}(e,t)}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.X&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xor4096=i}(0,t)}),v=h(function(t){!function(t,e,n){function r(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function i(t,e){var n=new function(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,i=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^i,e.a=i-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.tychei=i}(0,t)}),b=h(function(t){!function(e,r){var i,a=(0,eval)("this"),o=256,s=6,u="random",c=r.pow(o,s),l=r.pow(2,52),f=2*l,h=o-1;function p(t,n,p){var y=[],v=m(function t(e,n){var r,i=[],a=typeof e;if(n&&"object"==a)for(r in e)try{i.push(t(e[r],n-1))}catch(t){}return i.length?i:"string"==a?e:e+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[t,g(e)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(o):(t=new Uint8Array(o),(a.crypto||a.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=a.navigator,r=n&&n.plugins;return[+new Date,a,r,a.screen,g(e)]}}():t,3),y),b=new function(t){var e,n=t.length,r=this,i=0,a=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);i<o;)s[i]=i++;for(i=0;i<o;i++)s[i]=s[a=h&a+t[i%n]+(e=s[i])],s[a]=e;(r.g=function(t){for(var e,n=0,i=r.i,a=r.j,s=r.S;t--;)e=s[i=h&i+1],n=n*o+s[h&(s[i]=s[a=h&a+e])+(s[a]=e)];return r.i=i,r.j=a,n})(o)}(y),w=function(){for(var t=b.g(s),e=c,n=0;t<l;)t=(t+n)*o,e*=o,n=b.g(1);for(;t>=f;)t/=2,e/=2,n>>>=1;return(t+n)/e};return w.int32=function(){return 0|b.g(4)},w.quick=function(){return b.g(4)/4294967296},w.double=w,m(g(b.S),e),(n.pass||p||function(t,e,n,i){return i&&(i.S&&d(i,b),t.state=function(){return d(b,{})}),n?(r[u]=t,e):t})(w,v,"global"in n?n.global:this==r,n.state)}function d(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){for(var n,r=t+"",i=0;i<r.length;)e[h&i]=h&(n^=19*e[h&i])+r.charCodeAt(i++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(r["seed"+u]=p,m(r.random(),e),t.exports){t.exports=p;try{i=n(85)}catch(t){}}}([],Math)});b.alea=p,b.xor128=d,b.xorwow=m,b.xorshift7=g,b.xor4096=y,b.tychei=v;var w=b.alea,_=h(function(t,e){function n(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function i(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function a(t,e){if(void 0===e&&(e=[]),Array.isArray(t)||l(t))for(var n=0;n<t.length;++n)a(t[n],e);else e.push(t);return e}function o(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function s(t){return t%1==0}function u(t,e){var n=e.length;return i((t=null==t?e.map(function(t,e){return e}):[].concat(t)).every(function(t){return t>=-n&&t<n}),"All values in axis param must be in range [-"+n+", "+n+") but got axis "+t),i(t.every(function(t){return s(t)}),"All values in axis param must be integers but got axis "+t),t.map(function(t){return t<0?n+t:t})}function c(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+e+" being uploaded contains "+r+".")}}function l(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function f(t){return"string"==typeof t||t instanceof String}function h(t){return"boolean"==typeof t}function p(t){return"number"==typeof t}function d(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}Object.defineProperty(e,"__esModule",{value:!0}),e.shuffle=n,e.clamp=function(t,e,n){return Math.max(t,Math.min(e,n))},e.nearestLargerEven=function(t){return t%2==0?t:t+1},e.sum=function(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e},e.randUniform=function(t,e){var n=Math.random();return e*n+(1-n)*t},e.distSquared=function(t,e){for(var n=0,r=0;r<t.length;r++){var i=Number(t[r])-Number(e[r]);n+=i*i}return n},e.assert=i,e.assertShapesMatch=function(t,e,n){void 0===n&&(n=""),i(o(t,e),n+" Shapes "+t+" and "+e+" must match")},e.assertNonNull=function(t){i(null!=t,"The input to the tensor constructor must be a non-null value.")},e.flatten=a,e.sizeFromShape=function(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e},e.isScalarShape=function(t){return 0===t.length},e.arraysEqual=o,e.isInt=s,e.tanh=function(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)},e.sizeToSquarishShape=function(t){for(var e=Math.floor(Math.sqrt(t));e>1;--e)if(t%e==0)return[e,t/e];return[1,t]},e.createShuffledIndices=function(t){for(var e=new Uint32Array(t),r=0;r<t;++r)e[r]=r;return n(e),e},e.rightPad=function(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)},e.repeatedTry=function(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise(function(r,i){var a=0,o=function(){if(t())r();else{var s=e(++a);null!=n&&a>=n?i():setTimeout(o,s)}};o()})},e.inferFromImplicitShape=function(t,e){for(var n=1,r=-1,i=0;i<t.length;++i)if(t[i]>=0)n*=t[i];else if(-1===t[i]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+i);r=i}else if(t[i]<0)throw Error("Shapes can not be < 0. Found "+t[i]+" at dim "+i);if(-1===r){if(e>0&&e!==n)throw Error("Size("+e+") must match the product of shape "+t);return t}if(0===n)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(e%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+e+" / "+n);var a=t.slice();return a[r]=e/n,a},e.parseAxisParam=u,e.squeezeShape=function(t,e){for(var n=[],r=[],i=null==e?null:u(e,t).sort(),a=0,o=0;o<t.length;++o){if(null!=i){if(i[a]===o&&1!==t[o])throw new Error("Can't squeeze axis "+o+" since its dim '"+t[o]+"' is not 1");(null==i[a]||i[a]>o)&&1===t[o]&&(n.push(t[o]),r.push(o)),i[a]<=o&&a++}1!==t[o]&&(n.push(t[o]),r.push(o))}return{newShape:n,keptDims:r}},e.getTypedArrayFromDType=function(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n},e.getArrayFromDType=function(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n},e.checkComputationForErrors=function(t,e,n){if("float32"===e)for(var r=0;r<t.length;r++){var i=t[r];if(isNaN(i)||!isFinite(i))throw Error("The result of the '"+n+"' is "+i+".")}},e.checkConversionForErrors=c,e.hasEncodingLoss=function(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)},e.isTypedArray=l,e.bytesPerElement=function(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)},e.bytesFromStringArray=function(t){if(null==t)return 0;var e=0;return t.forEach(function(t){return e+=2*t.length}),e},e.isString=f,e.isBoolean=h,e.isNumber=p,e.inferDtype=function t(e){return e instanceof Array?t(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":p(e)?"float32":f(e)?"string":h(e)?"bool":"float32"},e.isFunction=function(t){return!!(t&&t.constructor&&t.call&&t.apply)},e.nearestDivisor=function(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t},e.computeStrides=function(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n},e.toTypedArray=function(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=a(t)),n&&c(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){for(var r=new Uint8Array(t.length),i=0;i<r.length;++i)0!==Math.round(t[i])&&(r[i]=1);return r}throw new Error("Unknown data type "+e)},e.makeOnesTypedArray=function(t,e){for(var n=d(t,e),r=0;r<n.length;r++)n[r]=1;return n},e.makeZerosTypedArray=d,e.now=function(){if("undefined"!=typeof performance)return performance.now();if(void 0!==r){var t=r.hrtime();return 1e3*t[0]+t[1]/1e6}throw new Error("Cannot measure time in this environment. You should run tf.js in the browser or in Node.js")}});f(_);_.shuffle,_.clamp,_.nearestLargerEven,_.sum,_.randUniform,_.distSquared,_.assert,_.assertShapesMatch,_.assertNonNull,_.flatten,_.sizeFromShape,_.isScalarShape,_.arraysEqual,_.isInt,_.tanh,_.sizeToSquarishShape,_.createShuffledIndices,_.rightPad,_.repeatedTry,_.inferFromImplicitShape,_.parseAxisParam,_.squeezeShape,_.getTypedArrayFromDType,_.getArrayFromDType,_.checkComputationForErrors,_.checkConversionForErrors,_.hasEncodingLoss,_.isTypedArray,_.bytesPerElement,_.bytesFromStringArray,_.isString,_.isBoolean,_.isNumber,_.inferDtype,_.isFunction,_.nearestDivisor,_.computeStrides,_.toTypedArray,_.makeOnesTypedArray,_.makeZerosTypedArray,_.now;var x=h(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var n=7;function r(t,e){var r;return r=Array.isArray(t)?parseFloat(t[0].toFixed(n))+" + "+parseFloat(t[1].toFixed(n))+"j":_.isString(t)?"'"+t+"'":parseFloat(t.toFixed(n)).toString(),_.rightPad(r,e)}function i(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}e.tensorToString=function(t,e,n,a){var o=_.computeStrides(e),s=function(t,e,n,a){var o=_.sizeFromShape(e),s=a[a.length-1],u=new Array(s).fill(0),c=e.length,l="complex64"===n?i(t):t;if(c>1)for(var f=0;f<o/s;f++)for(var h=f*s,p=0;p<s;p++)u[p]=Math.max(u[p],r(l[h+p],0).length);return u}(t,e,n,o),u=e.length,c=function t(e,n,a,o,s,u){void 0===u&&(u=!0);var c="complex64"===a?2:1,l=n[0],f=n.length;if(0===f)return"complex64"===a?[r(i(e)[0],0)]:[e[0].toString()];if(1===f){if(l>20){var h=3*c,p=Array.from(e.slice(0,h)),d=Array.from(e.slice(l-3*c,l));return"complex64"===a&&(p=i(p),d=i(d)),["["+p.map(function(t,e){return r(t,s[e])}).join(", ")+", ..., "+d.map(function(t,e){return r(t,s[l-3+e])}).join(", ")+"]"]}return["["+("complex64"===a?i(e):Array.from(e)).map(function(t,e){return r(t,s[e])}).join(", ")+"]"]}var m=n.slice(1),g=o.slice(1),y=o[0]*c,v=[];if(l>20){for(var b=0;b<3;b++){var w=(_=b*y)+y;v.push.apply(v,t(e.slice(_,w),m,a,g,s,!1))}v.push("...");for(b=l-3;b<l;b++){w=(_=b*y)+y;v.push.apply(v,t(e.slice(_,w),m,a,g,s,b===l-1))}}else for(b=0;b<l;b++){var _;w=(_=b*y)+y;v.push.apply(v,t(e.slice(_,w),m,a,g,s,b===l-1))}var x=2===f?",":"";v[0]="["+v[0]+x;for(b=1;b<v.length-1;b++)v[b]=" "+v[b]+x;var E=",\n";for(b=2;b<f;b++)E+="\n";return v[v.length-1]=" "+v[v.length-1]+"]"+(u?"":E),v}(t,e,n,o,s),l=["Tensor"];return a&&(l.push("  dtype: "+n),l.push("  rank: "+u),l.push("  shape: ["+e+"]"),l.push("  values:")),l.push(c.map(function(t){return"    "+t}).join("\n")),l.join("\n")}});f(x);x.tensorToString;var E=h(function(t,e){var n,r=l&&l.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=l&&l.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},a=l&&l.__generator||function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=_,s=function(){function t(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=_.sizeFromShape(t),null!=n){var r=n.length;_.assert(r===this.size,"Length of values '"+r+"' does not match the size inferred by the shape '"+this.size+"'.")}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||_.getArrayFromDType(e,_.sizeFromShape(this.shape)),this.strides=o.computeStrides(t)}return t.prototype.set=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];0===e.length&&(e=[0]),_.assert(e.length===this.rank,"The number of provided coordinates ("+e.length+") must match the rank ("+this.rank+")");var r=this.locToIndex(e);this.values[r]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=t[t.length-1],r=0;r<t.length-1;++r)n+=this.strides[r]*t[r];return this.values[n]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return f.make(this.shape,{values:this.values},this.dtype)},t}();e.TensorBuffer=s;var u=null,c=null;e.setTensorTracker=function(t){u=t},e.setOpHandler=function(t){c=t};var f=function(){function t(t,e,n,r){this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=_.sizeFromShape(t),this.strides=o.computeStrides(t),this.dataId=null!=r?r:{},this.id=u().nextTensorId(),this.rankType=this.rank<5?this.rank.toString():"higher",u().registerTensor(this),null!=n&&u().write(this.dataId,n)}return t.make=function(e,n,r){return new t(e,r,n.values,n.dataId)},t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),_.assert(1===this.size,"The array must have only 1 element."),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,i){return this.throwIfDisposed(),this.reshape([t,e,n,r,i])},t.prototype.asType=function(t){return this.throwIfDisposed(),c.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];_.assert(t.length===this.rank,"Number of coordinates in get() must match the rank of the tensor"),_.assert("complex64"!==this.dtype,"Tensor.get() is not supported for complex64 tensors yet."),this.throwIfDisposed(),0===t.length&&(t=[0]);for(var n=t[t.length-1],r=0;r<t.length-1;++r)n+=this.strides[r]*t[r];return this.dataSync()[n]},t.prototype.buffer=function(){return c.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.data=function(){return i(this,void 0,void 0,function(){return a(this,function(t){return this.throwIfDisposed(),[2,u().read(this.dataId)]})})},t.prototype.dataSync=function(){return this.throwIfDisposed(),u().readSync(this.dataId)},t.prototype.dispose=function(){this.isDisposed||(u().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),c.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),c.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),c.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),c.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),c.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),c.clone(this)},t.prototype.toString=function(t){void 0===t&&(t=!1);var e=this.dataSync();return x.tensorToString(e,this.shape,this.dtype,t)},t.prototype.tile=function(t){return this.throwIfDisposed(),c.tile(this,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),c.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),c.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),c.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t="euclidean"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),c.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),c.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),c.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),c.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),c.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),c.stack([this,t],e)},t.prototype.unstack=function(t,e){return void 0===e&&(e=0),c.unstack(this,e)},t.prototype.pad=function(t,e){return void 0===e&&(e=0),c.pad(this,t,e)},t.prototype.batchNormalization=function(t,e,n,r,i){return void 0===n&&(n=.001),this.throwIfDisposed(),c.batchNormalization(this,t,e,n,r,i)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),c.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),c.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),c.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),c.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),c.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),c.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),c.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),c.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),c.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),c.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),c.cast(this,t)},t.prototype.add=function(t){return this.throwIfDisposed(),c.add(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),c.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),c.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),c.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),c.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),c.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),c.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),c.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),c.mulStrict(this,t)},t.prototype.div=function(t){return this.throwIfDisposed(),c.div(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),c.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),c.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),c.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),c.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),c.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),c.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),c.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),c.modStrict(this,t)},t.prototype.squaredDifference=function(t){return this.throwIfDisposed(),c.squaredDifference(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),c.squaredDifferenceStrict(this,t)},t.prototype.transpose=function(t){return this.throwIfDisposed(),c.transpose(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),c.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),c.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),c.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),c.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),c.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),c.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),c.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),c.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),c.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),c.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),c.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),c.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),c.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),c.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),c.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),c.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),c.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),c.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),c.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),c.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),c.sign(this)},t.prototype.exp=function(){return this.throwIfDisposed(),c.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),c.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),c.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),c.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),c.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),c.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),c.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),c.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),c.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),c.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),c.relu(this)},t.prototype.elu=function(){return this.throwIfDisposed(),c.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),c.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),c.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),c.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),c.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),c.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),c.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),c.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),c.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),c.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),c.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),c.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),c.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),c.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),c.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),c.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),c.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),c.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),c.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),c.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),c.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),c.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),c.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),c.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),c.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),c.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),c.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),c.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,i,a){return void 0===r&&(r="NWC"),void 0===i&&(i=1),this.throwIfDisposed(),c.conv1d(this,t,e,n,r,i,a)},t.prototype.conv2d=function(t,e,n,r,i,a){return void 0===r&&(r="NHWC"),void 0===i&&(i=[1,1]),this.throwIfDisposed(),c.conv2d(this,t,e,n,r,i,a)},t.prototype.conv2dTranspose=function(t,e,n,r,i){return this.throwIfDisposed(),c.conv2dTranspose(this,t,e,n,r,i)},t.prototype.depthwiseConv2D=function(t,e,n,r,i,a){return void 0===r&&(r="NHWC"),void 0===i&&(i=[1,1]),this.throwIfDisposed(),c.depthwiseConv2d(this,t,e,n,r,i,a)},t.prototype.separableConv2d=function(t,e,n,r,i,a){return void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC"),this.throwIfDisposed(),c.separableConv2d(this,t,e,n,r,i,a)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),c.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),c.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),c.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,i){return this.throwIfDisposed(),c.pool(this,t,e,n,r,i)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),h.variable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),c.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),c.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),c.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),c.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,i,a,o,s){return void 0===r&&(r=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===o&&(o=0),void 0===s&&(s=0),this.throwIfDisposed(),c.stridedSlice(this,t,e,n,r,i,a,o,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),c.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),c.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),c.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),c.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),c.spectral.irfft(this)},t}();e.Tensor=f,Object.defineProperty(f,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var h=function(t){function e(e,n,r){void 0===n&&(n=!0);var i=t.call(this,e.shape,e.dtype,null,e.dataId)||this;i.trainable=n,i.name=r,null==i.name&&(i.name=u().nextVariableId().toString());try{u().registerVariable(i)}catch(t){throw u().disposeTensor(i),t}return i}return r(e,t),e.variable=function(t,n,r,i){return void 0===n&&(n=!0),null!=i&&i!==t.dtype&&(t=t.asType(i)),new e(t,n,r)},e.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!_.arraysEqual(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");u().disposeTensor(this),this.dataId=t.dataId,u().registerTensor(this)},e}(f);e.Variable=h,Object.defineProperty(h,Symbol.hasInstance,{value:function(t){return t instanceof f&&null!=t.assign&&t.assign instanceof Function}});var p=h.variable;e.variable=p});f(E);E.TensorBuffer,E.setTensorTracker,E.setOpHandler,E.Tensor,E.Variable,E.variable;var S=h(function(t,e){var n,r,i,a;Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(e.Rank||(e.Rank={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(n||(n={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(r||(r={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(i||(i={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(a||(a={}));var o={float32:i,int32:n,bool:r,complex64:a};function s(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error("Can not upcast "+t+" with "+e)}return o[t][e]}e.upcastType=s,e.sumOutType=function(t){return s(t,"int32")}});f(S);S.Rank,S.upcastType,S.sumOutType;var N=h(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.makeTypesMatch=function(t,e){if(t.dtype===e.dtype)return[t,e];var n=S.upcastType(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]},e.assertTypesMatch=function(t,e){_.assert(t.dtype===e.dtype,"The dtypes of the first("+t.dtype+") and second("+e.dtype+") input must match")},e.isTensorInList=function(t,e){for(var n=0;n<e.length;n++)if(e[n].id===t.id)return!0;return!1},e.flattenNameArrayMap=function(t,e){var n=[];if(t instanceof E.Tensor)n.push(t);else for(var r=t,i=0;i<e.length;i++)n.push(r[e[i]]);return n},e.unflattenToNameArrayMap=function(t,e){if(t.length!==e.length)throw new Error("Cannot unflatten Tensor[], keys and arrays are not of same length.");for(var n={},r=0;r<t.length;r++)n[t[r]]=e[r];return n},e.getTensorsInContainer=function(t){var e=[];return function t(e,n,r){if(null!=e)if(e instanceof E.Tensor)n.push(e);else if(i=e,Array.isArray(i)||"object"==typeof i){var i,a=e;for(var o in a){var s=a[o];r.has(s)||(r.add(s),t(s,n,r))}}}(t,e,new Set),e}});f(N);N.makeTypesMatch,N.assertTypesMatch;var I=N.isTensorInList,O=(N.flattenNameArrayMap,N.unflattenToNameArrayMap,N.getTensorsInContainer);function k(t,e,n,r){if(void 0===n&&(n=new Map),void 0===r&&(r=new Set),null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);var i=e(t);if(i.recurse&&null!==i.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(i.recurse){if(T(t)){var a=Array.isArray(t)?[]:{};for(var o in r.add(t),t){var s=k(t[o],e,n,r);a[o]=s}return r.delete(t),a}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,i.value),i.value}function A(t,e){return void 0===e&&(e=C),function t(e,n,r){void 0===r&&(r=new Set);var i=e[0];if(r.has(i))throw new Error("Circular references are not supported.");var a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(T(i)){var o=Array.isArray(i)?[]:{};r.add(i);var s=function(i){var a=t(e.map(function(t){return t[i]}),n,r);o[i]=a};for(var u in i)s(u);return r.delete(i),o}throw new Error("Can't recurse into non-iterable type: "+i)}return a.value}(t,e)}function C(t){return null===t?null:T(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}function P(t,e){return u(this,void 0,void 0,function(){var n,r,i,a,o,s;return c(this,function(u){switch(u.label){case 0:n=new Map,k(t,e,n),r=0,i=Array.from(n.keys()),u.label=1;case 1:return r<i.length?(a=i[r],(o=n.get(a))instanceof Promise?[4,o]:[3,3]):[3,4];case 2:s=u.sent(),n.set(a,s),u.label=3;case 3:return r++,[3,1];case 4:return[2,k(t,e,n)]}})})}function T(t){return null!=t&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof a.o))}var R=function(){function t(t){if(this.capacity=t,this.begin=0,this.end=0,t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}return t.prototype.wrap=function(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity},t.prototype.get=function(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]},t.prototype.set=function(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e},t.prototype.length=function(){var t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t},t.prototype.isFull=function(){return this.length()===this.capacity},t.prototype.isEmpty=function(){return 0===this.length()},t.prototype.push=function(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)},t.prototype.pushAll=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e];this.push(r)}},t.prototype.pop=function(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);var t=this.get(this.end);return this.set(this.end,void 0),t},t.prototype.unshift=function(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)},t.prototype.shift=function(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");var t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t},t.prototype.shuffleExcise=function(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");var e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n},t}(),D=function(t){function e(){return t.call(this,e.INITIAL_CAPACITY)||this}return s(e,t),e.prototype.isFull=function(){return!1},e.prototype.push=function(e){t.prototype.isFull.call(this)&&this.expand(),t.prototype.push.call(this,e)},e.prototype.unshift=function(e){t.prototype.isFull.call(this)&&this.expand(),t.prototype.unshift.call(this,e)},e.prototype.expand=function(){for(var t=2*this.capacity,e=new Array(t),n=this.length(),r=0;r<n;r++)e[r]=this.get(this.wrap(this.begin+r));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n},e.INITIAL_CAPACITY=32,e}(R);function M(t){return new V(t)}function j(t){return new W(t)}function B(t,e){return new tt(t,e)}function L(t,e){return void 0===e&&(e=z.FAIL),new et(t,e)}var z,F,U=function(){function t(){}return t.prototype.collect=function(t,e){return void 0===t&&(t=1e3),void 0===e&&(e=100),u(this,void 0,void 0,function(){var n,r,i,a;return c(this,function(o){switch(o.label){case 0:return n=e>0?this.prefetch(e):this,r=[],i=0,[4,n.next()];case 1:a=o.sent(),o.label=2;case 2:return a.done?[3,4]:(r.push(a.value),++i>=t?[2,r]:[4,n.next()]);case 3:return a=o.sent(),[3,2];case 4:return[2,r]}})})},t.prototype.resolveFully=function(){return u(this,void 0,void 0,function(){var t;return c(this,function(e){switch(e.label){case 0:return[4,this.next()];case 1:t=e.sent(),e.label=2;case 2:return t.done?[3,4]:[4,this.next()];case 3:return t=e.sent(),[3,2];case 4:return[2]}})})},t.prototype.resolveWhile=function(t){return u(this,void 0,void 0,function(){var e,n;return c(this,function(r){switch(r.label){case 0:return[4,this.next()];case 1:e=r.sent(),n=t(e.value),r.label=2;case 2:return e.done||!n?[3,4]:[4,this.next()];case 3:return e=r.sent(),n=t(e.value),[3,2];case 4:return[2]}})})},t.prototype.handleErrors=function(t){return new Y(this,t)},t.prototype.filter=function(t){return new G(this,t)},t.prototype.map=function(t){return new X(this,t)},t.prototype.mapAsync=function(t){return new J(this,t)},t.prototype.serialMapAsync=function(t){return new J(this,t).serial()},t.prototype.flatmap=function(t){return new Q(this,t)},t.prototype.forEach=function(t){return u(this,void 0,void 0,function(){return c(this,function(e){return[2,this.map(t).resolveFully()]})})},t.prototype.serialForEach=function(t){return u(this,void 0,void 0,function(){return c(this,function(e){return[2,this.serialMapAsync(t).resolveWhile(function(t){return!0===t})]})})},t.prototype.rowMajorBatch=function(t,e){return void 0===e&&(e=!0),new K(this,t,e)},t.prototype.columnMajorBatch=function(t,e,n){return void 0===e&&(e=!0),void 0===n&&(n=C),this.rowMajorBatch(t,e).map(function(t){return A(t,n)})},t.prototype.concatenate=function(t,e){return new tt(M([this,t]),e)},t.prototype.take=function(t){return t<0||null==t?this:new H(this,t)},t.prototype.skip=function(t){return t<0||null==t?this:new $(this,t)},t.prototype.prefetch=function(t){return new nt(this,t)},t.prototype.shuffle=function(t,e){return new rt(this,t,e)},t.prototype.serial=function(){return new q(this)},t}(),V=function(t){function e(e){var n=t.call(this)||this;return n.items=e,n.trav=0,n}return s(e,t),e.prototype.summary=function(){return"Array of "+this.items.length+" items"},e.prototype.next=function(){return u(this,void 0,void 0,function(){var t,e;return c(this,function(n){return this.trav>=this.items.length?[2,{value:null,done:!0}]:(t=this.items[this.trav],e=t instanceof a.o?Object(a.R)(t):t,this.trav++,[2,{value:e,done:!1}])})})},e}(U),W=function(t){function e(e){var n=t.call(this)||this;return n.nextFn=e,n}return s(e,t),e.prototype.summary=function(){return"Function call"},e.prototype.next=function(){return u(this,void 0,void 0,function(){return c(this,function(t){try{return[2,this.nextFn()]}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}return[2]})})},e}(U),q=function(t){function e(e){var n=t.call(this)||this;return n.upstream=e,n.lastRead=Promise.resolve({value:null,done:!1}),n}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Serial"},e.prototype.next=function(){return u(this,void 0,void 0,function(){var t=this;return c(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return u(this,void 0,void 0,function(){return c(this,function(t){return[2,this.upstream.next()]})})},e}(U),$=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.maxCount=n,r.count=0,r.lastRead=Promise.resolve({value:null,done:!1}),r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Skip"},e.prototype.next=function(){return u(this,void 0,void 0,function(){var t=this;return c(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return u(this,void 0,void 0,function(){var t;return c(this,function(e){switch(e.label){case 0:return this.count++<this.maxCount?[4,this.upstream.next()]:[3,2];case 1:return(t=e.sent()).done?[2,t]:(Object(a.jb)(t.value),[3,0]);case 2:return[2,this.upstream.next()]}})})},e}(U),H=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.maxCount=n,r.count=0,r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Take"},e.prototype.next=function(){return u(this,void 0,void 0,function(){return c(this,function(t){return this.count++>=this.maxCount?[2,{value:null,done:!0}]:[2,this.upstream.next()]})})},e}(U),K=function(t){function e(e,n,r){void 0===r&&(r=!0);var i=t.call(this)||this;return i.upstream=e,i.batchSize=n,i.enableSmallLastBatch=r,i.lastRead=Promise.resolve({value:null,done:!1}),i}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> RowMajorBatch"},e.prototype.next=function(){return u(this,void 0,void 0,function(){var t=this;return c(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return u(this,void 0,void 0,function(){var t,e;return c(this,function(n){switch(n.label){case 0:t=[],n.label=1;case 1:return t.length<this.batchSize?[4,this.upstream.next()]:[3,3];case 2:return(e=n.sent()).done?this.enableSmallLastBatch&&t.length>0?[2,{value:t,done:!1}]:[2,{value:null,done:!0}]:(t.push(e.value),[3,1]);case 3:return[2,{value:t,done:!1}]}})})},e}(U),G=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.predicate=n,r.lastRead=Promise.resolve({value:null,done:!1}),r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Filter"},e.prototype.next=function(){return u(this,void 0,void 0,function(){var t=this;return c(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return u(this,void 0,void 0,function(){var t;return c(this,function(e){switch(e.label){case 0:return[4,this.upstream.next()];case 1:return(t=e.sent()).done||this.predicate(t.value)?[2,t]:(Object(a.jb)(t.value),[3,0]);case 2:return[2]}})})},e}(U),X=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.transform=n,r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Map"},e.prototype.next=function(){return u(this,void 0,void 0,function(){var t,e,n,r,i,a,o;return c(this,function(s){switch(s.label){case 0:return[4,this.upstream.next()];case 1:if((t=s.sent()).done)return[2,{value:null,done:!0}];for(e=O(t.value),n=this.transform(t.value),r=O(n),i=0,a=e;i<a.length;i++)o=a[i],I(o,r)||o.dispose();return[2,{value:n,done:!1}]}})})},e}(U),Y=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.handler=n,r.count=0,r.lastRead=Promise.resolve({value:null,done:!1}),r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> handleErrors"},e.prototype.next=function(){return u(this,void 0,void 0,function(){var t=this;return c(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return u(this,void 0,void 0,function(){var t;return c(this,function(e){switch(e.label){case 0:e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.upstream.next()];case 2:return[2,e.sent()];case 3:return t=e.sent(),this.handler(t)?[3,4]:[2,{value:null,done:!0}];case 4:return[3,0];case 5:return[2]}})})},e}(U),J=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.transform=n,r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> AsyncMap"},e.prototype.next=function(){return u(this,void 0,void 0,function(){var t,e,n,r,i,a,o;return c(this,function(s){switch(s.label){case 0:return[4,this.upstream.next()];case 1:return(t=s.sent()).done?[2,{value:null,done:!0}]:(e=O(t.value),[4,this.transform(t.value)]);case 2:for(n=s.sent(),r=O(n),i=0,a=e;i<a.length;i++)o=a[i],I(o,r)||o.dispose();return[2,{value:n,done:!1}]}})})},e}(U),Z=function(t){function e(){var e=t.call(this)||this;return e.outputQueue=new D,e.lastRead=Promise.resolve({value:null,done:!1}),e}return s(e,t),e.prototype.next=function(){return u(this,void 0,void 0,function(){var t=this;return c(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return u(this,void 0,void 0,function(){return c(this,function(t){switch(t.label){case 0:return 0!==this.outputQueue.length()?[3,2]:[4,this.pump()];case 1:return t.sent()?[3,0]:[2,{value:null,done:!0}];case 2:return[2,{value:this.outputQueue.shift(),done:!1}]}})})},e}(U),Q=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.transform=n,r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Flatmap"},e.prototype.pump=function(){return u(this,void 0,void 0,function(){var t,e,n,r,i,a,o;return c(this,function(s){switch(s.label){case 0:return[4,this.upstream.next()];case 1:if((t=s.sent()).done)return[2,!1];for(e=O(t.value),n=this.transform(t.value),r=O(n),this.outputQueue.pushAll(n),i=0,a=e;i<a.length;i++)o=a[i],I(o,r)||o.dispose();return[2,!0]}})})},e}(Z),tt=function(t){function e(e,n){var r=t.call(this)||this;return r.baseErrorHandler=n,r.lastRead=null,r.iterator=null,r.moreIterators=e,r}return s(e,t),e.prototype.summary=function(){return"TODO: fill in upstream of chained summaries -> Chained"},e.prototype.next=function(){return u(this,void 0,void 0,function(){return c(this,function(t){return this.lastRead=this.readFromChain(this.lastRead),[2,this.lastRead]})})},e.prototype.readFromChain=function(t){return u(this,void 0,void 0,function(){var e,n;return c(this,function(r){switch(r.label){case 0:return[4,t];case 1:return r.sent(),null!=this.iterator?[3,3]:[4,this.moreIterators.next()];case 2:if((e=r.sent()).done)return[2,{value:null,done:!0}];this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler)),r.label=3;case 3:return[4,this.iterator.next()];case 4:return(n=r.sent()).done?(this.iterator=null,[2,this.readFromChain(t)]):[2,n]}})})},e}(U);(F=z||(z={}))[F.FAIL=0]="FAIL",F[F.SHORTEST=1]="SHORTEST",F[F.LONGEST=2]="LONGEST";var et=function(t){function e(e,n){void 0===n&&(n=z.FAIL);var r=t.call(this)||this;return r.iterators=e,r.mismatchMode=n,r.count=0,r.currentPromise=null,r}return s(e,t),e.prototype.summary=function(){return"{TODO: fill in upstream of zip summaries} -> Zip"},e.prototype.nextState=function(t){return u(this,void 0,void 0,function(){function e(t){return t instanceof U?{value:t.next().then(function(t){return n++,t.done&&r++,t.value}),recurse:!1}:{value:null,recurse:!0}}var n,r,i;return c(this,function(a){switch(a.label){case 0:return[4,t];case 1:return a.sent(),n=0,r=0,[4,P(this.iterators,e)];case 2:if(i=a.sent(),n===r)return[2,{value:null,done:!0}];if(r>0)switch(this.mismatchMode){case z.FAIL:throw new Error("Zipped streams should have the same length. Mismatched at element "+this.count+".");case z.SHORTEST:return[2,{value:null,done:!0}];case z.LONGEST:}return this.count++,[2,{value:i,done:!1}]}})})},e.prototype.next=function(){return u(this,void 0,void 0,function(){return c(this,function(t){switch(t.label){case 0:return this.currentPromise=this.nextState(this.currentPromise),[4,this.currentPromise];case 1:return[2,t.sent()]}})})},e}(U),nt=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.bufferSize=n,r.buffer=new R(n),r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Prefetch"},e.prototype.refill=function(){for(;!this.buffer.isFull();){var t=this.upstream.next();this.buffer.push(t)}},e.prototype.next=function(){return this.refill(),this.buffer.shift()},e}(U),rt=function(t){function e(e,n,r){var i=t.call(this,e,n)||this;return i.upstream=e,i.windowSize=n,i.upstreamExhausted=!1,i.random=w(r||a.qe.now().toString()),i.lastRead=Promise.resolve({value:null,done:!1}),i}return s(e,t),e.prototype.next=function(){return u(this,void 0,void 0,function(){var t=this;return c(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.randomInt=function(t){return Math.floor(this.random()*t)},e.prototype.chooseIndex=function(){return this.randomInt(this.buffer.length())},e.prototype.serialNext=function(){return u(this,void 0,void 0,function(){var t,e;return c(this,function(n){switch(n.label){case 0:this.upstreamExhausted||this.refill(),n.label=1;case 1:return this.buffer.isEmpty()?[3,3]:(t=this.chooseIndex(),[4,this.buffer.shuffleExcise(t)]);case 2:return(e=n.sent()).done?(this.upstreamExhausted=!0,[3,1]):(this.refill(),[2,e]);case 3:return[2,{value:null,done:!0}]}})})},e}(nt),it=function(){function t(){}return t.prototype.filter=function(t){var e=this,n=this;return at(function(){return u(e,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().filter(function(e){return Object(a.ge)(function(){return t(e)})})]}})})})},t.prototype.map=function(t){var e=this,n=this;return at(function(){return u(e,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().map(function(e){return Object(a.ge)(function(){return t(e)})})]}})})})},t.prototype.mapAsync=function(t){var e=this,n=this;return at(function(){return u(e,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().mapAsync(t)]}})})})},t.prototype.batch=function(t,e){var n=this;void 0===e&&(e=!0);var r=this;return at(function(){return u(n,void 0,void 0,function(){return c(this,function(n){switch(n.label){case 0:return[4,r.iterator()];case 1:return[2,n.sent().columnMajorBatch(t,e,ut)]}})})})},t.prototype.concatenate=function(t){var e=this,n=this;return at(function(){return u(e,void 0,void 0,function(){var e,r;return c(this,function(i){switch(i.label){case 0:return[4,n.iterator()];case 1:return r=(e=i.sent()).concatenate,[4,t.iterator()];case 2:return[2,r.apply(e,[i.sent()])]}})})})},t.prototype.repeat=function(t){var e=this,n=this;return at(function(){return u(e,void 0,void 0,function(){var e=this;return c(this,function(r){return[2,B(j(function(){return u(e,void 0,void 0,function(){var t;return c(this,function(e){switch(e.label){case 0:return t={},[4,n.iterator()];case 1:return[2,(t.value=e.sent(),t.done=!1,t)]}})})}).take(t))]})})})},t.prototype.take=function(t){var e=this,n=this;return at(function(){return u(e,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().take(t)]}})})})},t.prototype.skip=function(t){var e=this,n=this;return at(function(){return u(e,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().skip(t)]}})})})},t.prototype.shuffle=function(t,e,n){var r=this;void 0===n&&(n=!0);var i=this,o=w(e||a.qe.now().toString());return at(function(){return u(r,void 0,void 0,function(){var e;return c(this,function(r){switch(r.label){case 0:return e=o.int32(),n&&(e+=o.int32()),[4,i.iterator()];case 1:return[2,r.sent().shuffle(t,e.toString())]}})})})},t.prototype.prefetch=function(t){var e=this,n=this;return at(function(){return u(e,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().prefetch(t)]}})})})},t.prototype.toArray=function(){return u(this,void 0,void 0,function(){return c(this,function(t){switch(t.label){case 0:return[4,this.iterator()];case 1:return[2,t.sent().collect()]}})})},t.prototype.forEach=function(t){return u(this,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return[4,this.iterator()];case 1:return[2,e.sent().forEach(t)]}})})},t}();function at(t){return new(function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return s(n,e),n.prototype.iterator=function(){return u(this,void 0,void 0,function(){return c(this,function(e){return[2,t()]})})},n}(it))}function ot(t){var e=this;return at(function(){return u(e,void 0,void 0,function(){return c(this,function(e){return[2,M(t)]})})})}function st(t){var e=this;if(!T(t))throw new Error("The argument to zip() must be an object or array.");return at(function(){return u(e,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return[4,P(t,function(t){if(t instanceof it)return{value:t.iterator(),recurse:!1};if(T(t))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})];case 1:return[2,L(e.sent(),z.SHORTEST)]}})})})}function ut(t){if(null===t)return null;var e=t[0];return"string"==typeof e?{value:t,recurse:!1}:T(e)?function(t){if(null==t)return!1;if(!Array.isArray(t))return!1;for(var e in t)if("number"!=typeof t[e])return!1;return!0}(e)?{value:ct(t),recurse:!1}:{value:null,recurse:!0}:{value:ct(t),recurse:!1}}function ct(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");if(t[0]instanceof a.o)return Object(a.Qd)(t);if(Array.isArray(t[0]))return function(t){for(var e=t[0].length,n=[t.length,t[0].length],r=new Float32Array(t.length*e),i=0,o=0,s=t;o<s.length;o++){var u=s[o];if(u.length!==e)throw new Error("Elements must have the same shape to be batched");r.set(u,i),i+=e}return a.o.make(n,{values:r})}(t);var e=t;return a.o.make([e.length],{values:new Float32Array(e)})}var lt=function(t){function e(e){var n=t.call(this)||this;return n.input=e,n}return s(e,t),e.prototype.iterator=function(){return u(this,void 0,void 0,function(){var t;return c(this,function(e){switch(e.label){case 0:return[4,this.input.iterator()];case 1:return t=e.sent(),[2,t.decodeUTF8().split("\n")]}})})},e}(it),ft=Symbol("out"),ht=Symbol("field"),pt=Symbol("quote"),dt=Symbol("quoteafterquote"),mt=Symbol("quoteinquote"),gt=function(t){function e(e,n){var r=t.call(this)||this;return r.input=e,r.hasHeader=!0,r.fullColumnNames=null,r.columnNamesValidated=!1,r.columnConfigs=null,r.configuredColumnsOnly=!1,r.delimiter=",",r.base=new lt(e),n||(n={}),r.hasHeader=!1!==n.hasHeader,r.fullColumnNames=n.columnNames,r.columnConfigs=n.columnConfigs,r.configuredColumnsOnly=n.configuredColumnsOnly,r.delimiter=n.delimiter?n.delimiter:",",r}return s(e,t),e.prototype.columnNames=function(){return u(this,void 0,void 0,function(){return c(this,function(t){switch(t.label){case 0:return this.columnNamesValidated?[3,2]:[4,this.setColumnNames()];case 1:t.sent(),t.label=2;case 2:return[2,this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames]}})})},e.prototype.setColumnNames=function(){return u(this,void 0,void 0,function(){var t,e,n,r,i,o;return c(this,function(s){switch(s.label){case 0:return[4,this.maybeReadHeaderLine()];case 1:if(t=s.sent(),!this.fullColumnNames&&!t)throw new Error("Column names must be provided if there is no header line.");if(this.fullColumnNames&&t&&a.qe.assert(t.length===this.fullColumnNames.length,"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+t.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=t),e=this.fullColumnNames.reduce(function(t,e){return t[e]=t[e]+1||1,t},{}),n=Object.keys(e).filter(function(t){return e[t]>1}),a.qe.assert(0===n.length,"Duplicate column names found: "+n.toString()),this.columnConfigs)for(r=0,i=Object.keys(this.columnConfigs);r<i.length;r++)if(o=i[r],-1===this.fullColumnNames.indexOf(o))throw new Error('The key "'+o+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");return this.columnNamesValidated=!0,[2]}})})},e.prototype.maybeReadHeaderLine=function(){return u(this,void 0,void 0,function(){var t;return c(this,function(e){switch(e.label){case 0:return this.hasHeader?[4,this.base.iterator()]:[3,3];case 1:return[4,e.sent().next()];case 2:if((t=e.sent()).done)throw new Error("No data was found for CSV parsing.");return[2,t.value.split(this.delimiter)];case 3:return[2,null]}})})},e.prototype.iterator=function(){return u(this,void 0,void 0,function(){var t,e=this;return c(this,function(n){switch(n.label){case 0:return this.columnNamesValidated?[3,2]:[4,this.setColumnNames()];case 1:n.sent(),n.label=2;case 2:return[4,this.base.iterator()];case 3:return t=n.sent(),this.hasHeader&&(t=t.skip(1)),[2,t.map(function(t){return e.makeDataElement(t)})]}})})},e.prototype.makeDataElement=function(t){for(var e=this.parseRow(t),n={},r={},i=0;i<this.fullColumnNames.length;i++){var a=this.fullColumnNames[i],o=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||o){var s=e[i],u=null;if(""===s)if(o&&void 0!==o.default)u=o.default;else{if(o&&(o.required||o.isLabel))throw new Error("Required column "+a+" is empty in this line: "+t);u=void 0}else{var c=Number(s);if(isNaN(c))u=o&&"bool"===o.dtype?this.getBoolean(s):s;else if(o&&o.dtype)switch(o.dtype){case"float32":u=c;break;case"int32":u=Math.floor(c);break;case"bool":u=this.getBoolean(s);break;default:u=c}else u=c}o&&o.isLabel?r[a]=u:n[a]=u}}return 0===Object.keys(r).length?n:[n,r]},e.prototype.getBoolean=function(t){return"1"===t||"true"===t.toLowerCase()?1:0},e.prototype.parseRow=function(t){for(var e=[],n=0,r=t.length,i=ht,a=0;a<r;a++)switch(i){case ft:switch(t.charAt(a)){case'"':n=a+1,i=pt;break;case this.delimiter:e.push(""),i=ft,n=a+1;break;default:i=ht,n=a}break;case ht:switch(t.charAt(a)){case this.delimiter:e.push(t.substring(n,a)),i=ft,n=a+1}break;case pt:switch(t.charAt(a)){case'"':i=dt}break;case dt:switch(t.charAt(a)){case this.delimiter:e.push(t.substring(n,a-1)),i=ft,n=a+1;break;case'"':i=pt;break;default:i=mt}break;case mt:switch(t.charAt(a)){case'"':i=pt}}return i===dt?e.push(t.substring(n,r-1)):e.push(t.substring(n)),e},e}(it),yt=function(){},vt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.split=function(t){return new bt(this,t)},e}(U),bt=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.impl=new wt(e,n),r}return s(e,t),e.prototype.summary=function(){return this.impl.summary()},e.prototype.next=function(){return u(this,void 0,void 0,function(){return c(this,function(t){return[2,this.impl.next()]})})},e}(vt),wt=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.separator=n,r.carryover="",r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Split('"+this.separator+"')"},e.prototype.pump=function(){return u(this,void 0,void 0,function(){var t,e,n,r,i;return c(this,function(a){switch(a.label){case 0:return[4,this.upstream.next()];case 1:if((t=a.sent()).done)return""===this.carryover?[2,!1]:(this.outputQueue.push(this.carryover),this.carryover="",[2,!0]);for((e=t.value.split(this.separator))[0]=this.carryover+e[0],n=0,r=e.slice(0,-1);n<r.length;n++)i=r[n],this.outputQueue.push(i);return this.carryover=e[e.length-1],[2,!0]}})})},e}(Z),_t=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.decodeUTF8=function(){return new xt(this)},e}(U),xt=function(t){function e(e){var n=t.call(this)||this;return n.upstream=e,n.impl=new Et(e),n}return s(e,t),e.prototype.summary=function(){return this.impl.summary()},e.prototype.next=function(){return u(this,void 0,void 0,function(){return c(this,function(t){return[2,this.impl.next()]})})},e}(vt),Et=function(t){function e(e){var r=t.call(this)||this;if(r.upstream=e,a.f.get("IS_BROWSER"))r.decoder=new TextDecoder("utf-8");else{var i=n(42).StringDecoder;r.decoder=new i("utf8")}return r}return s(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Utf8"},e.prototype.pump=function(){return u(this,void 0,void 0,function(){var t,e,n;return c(this,function(r){switch(r.label){case 0:return[4,this.upstream.next()];case 1:return(t=r.sent()).done?[2,!1]:(e=t.value,n=a.f.get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(i.from(e.buffer)),this.outputQueue.push(n),[2,!0])}})})},e}(Z),St=function(t){function e(e,n){void 0===n&&(n={});var r=t.call(this)||this;return r.file=e,r.options=n,a.qe.assert(e instanceof Uint8Array||!!a.f.get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),"FileChunkIterator only supports File, Blob and Uint8Array right now."),r.offset=n.offset||0,r.chunkSize=n.chunkSize||1048576,r}return s(e,t),e.prototype.summary=function(){return"FileChunks "+this.file},e.prototype.next=function(){return u(this,void 0,void 0,function(){var t,e,n=this;return c(this,function(r){switch(r.label){case 0:return this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size)?[2,{value:null,done:!0}]:(t=new Promise(function(t,e){var r=n.offset+n.chunkSize;if(n.file instanceof Uint8Array)t(new Uint8Array(n.file.slice(n.offset,r)));else{var i=new FileReader;i.onload=function(n){var r=i.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return e(new TypeError("FileReader returned unknown type."));t(r)},i.onabort=function(t){return e(new Error("Aborted"))},i.onerror=function(t){return e(new Error(t.type))};var a=n.file.slice(n.offset,r);i.readAsArrayBuffer(a)}n.offset=r}),e={},[4,t]);case 1:return[2,(e.value=r.sent(),e.done=!1,e)]}})})},e}(_t);function Nt(t,e){return void 0===e&&(e={}),u(this,void 0,void 0,function(){var r,i,o,s;return c(this,function(u){switch(u.label){case 0:return a.f.get("IS_BROWSER")?[4,fetch(t)]:[3,5];case 1:return(r=u.sent()).ok?[4,r.blob()]:[3,3];case 2:return i=u.sent(),[2,new St(i,e)];case 3:throw new Error(r.statusText);case 4:return[3,9];case 5:if(o=n(221),"string"!=typeof t)throw new Error("URL must be a string. Request objects are not supported in the node.js environment yet.");return[4,o(t)];case 6:return(r=u.sent()).ok?[4,r.buffer()]:[3,8];case 7:return s=u.sent(),[2,new St(s,e)];case 8:throw new Error(r.statusText);case 9:return[2]}})})}var It=function(t){function e(e,n){void 0===n&&(n={});var r=t.call(this)||this;return r.url=e,r.fileOptions=n,r}return s(e,t),e.prototype.iterator=function(){return u(this,void 0,void 0,function(){return c(this,function(t){return[2,Nt(this.url,this.fileOptions)]})})},e}(yt);function Ot(t,e){return void 0===e&&(e={}),new gt(new It(t),e)}function kt(t){var e=this,n=j(t);return at(function(){return u(e,void 0,void 0,function(){return c(this,function(t){return[2,n]})})})}var At=function(t){function e(e,n){void 0===n&&(n={});var r=t.call(this)||this;return r.input=e,r.options=n,r}return s(e,t),e.prototype.iterator=function(){return u(this,void 0,void 0,function(){return c(this,function(t){return[2,new St(this.input,this.options)]})})},e}(yt),Ct="0.1.7"}.call(this,n(11),n(14),n(4).Buffer)},,,function(t,e,n){"use strict";var r=n(2),i=n(86),a=n(3).Buffer,o=new Array(16);function s(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function u(t,e){return t<<e|t>>>32-e}function c(t,e,n,r,i,a,o){return u(t+(e&n|~e&r)+i+a|0,o)+e|0}function l(t,e,n,r,i,a,o){return u(t+(e&r|n&~r)+i+a|0,o)+e|0}function f(t,e,n,r,i,a,o){return u(t+(e^n^r)+i+a|0,o)+e|0}function h(t,e,n,r,i,a,o){return u(t+(n^(e|~r))+i+a|0,o)+e|0}r(s,i),s.prototype._update=function(){for(var t=o,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);var n=this._a,r=this._b,i=this._c,a=this._d;n=c(n,r,i,a,t[0],3614090360,7),a=c(a,n,r,i,t[1],3905402710,12),i=c(i,a,n,r,t[2],606105819,17),r=c(r,i,a,n,t[3],3250441966,22),n=c(n,r,i,a,t[4],4118548399,7),a=c(a,n,r,i,t[5],1200080426,12),i=c(i,a,n,r,t[6],2821735955,17),r=c(r,i,a,n,t[7],4249261313,22),n=c(n,r,i,a,t[8],1770035416,7),a=c(a,n,r,i,t[9],2336552879,12),i=c(i,a,n,r,t[10],4294925233,17),r=c(r,i,a,n,t[11],2304563134,22),n=c(n,r,i,a,t[12],1804603682,7),a=c(a,n,r,i,t[13],4254626195,12),i=c(i,a,n,r,t[14],2792965006,17),n=l(n,r=c(r,i,a,n,t[15],1236535329,22),i,a,t[1],4129170786,5),a=l(a,n,r,i,t[6],3225465664,9),i=l(i,a,n,r,t[11],643717713,14),r=l(r,i,a,n,t[0],3921069994,20),n=l(n,r,i,a,t[5],3593408605,5),a=l(a,n,r,i,t[10],38016083,9),i=l(i,a,n,r,t[15],3634488961,14),r=l(r,i,a,n,t[4],3889429448,20),n=l(n,r,i,a,t[9],568446438,5),a=l(a,n,r,i,t[14],3275163606,9),i=l(i,a,n,r,t[3],4107603335,14),r=l(r,i,a,n,t[8],1163531501,20),n=l(n,r,i,a,t[13],2850285829,5),a=l(a,n,r,i,t[2],4243563512,9),i=l(i,a,n,r,t[7],1735328473,14),n=f(n,r=l(r,i,a,n,t[12],2368359562,20),i,a,t[5],4294588738,4),a=f(a,n,r,i,t[8],2272392833,11),i=f(i,a,n,r,t[11],1839030562,16),r=f(r,i,a,n,t[14],4259657740,23),n=f(n,r,i,a,t[1],2763975236,4),a=f(a,n,r,i,t[4],1272893353,11),i=f(i,a,n,r,t[7],4139469664,16),r=f(r,i,a,n,t[10],3200236656,23),n=f(n,r,i,a,t[13],681279174,4),a=f(a,n,r,i,t[0],3936430074,11),i=f(i,a,n,r,t[3],3572445317,16),r=f(r,i,a,n,t[6],76029189,23),n=f(n,r,i,a,t[9],3654602809,4),a=f(a,n,r,i,t[12],3873151461,11),i=f(i,a,n,r,t[15],530742520,16),n=h(n,r=f(r,i,a,n,t[2],3299628645,23),i,a,t[0],4096336452,6),a=h(a,n,r,i,t[7],1126891415,10),i=h(i,a,n,r,t[14],2878612391,15),r=h(r,i,a,n,t[5],4237533241,21),n=h(n,r,i,a,t[12],1700485571,6),a=h(a,n,r,i,t[3],2399980690,10),i=h(i,a,n,r,t[10],4293915773,15),r=h(r,i,a,n,t[1],2240044497,21),n=h(n,r,i,a,t[8],1873313359,6),a=h(a,n,r,i,t[15],4264355552,10),i=h(i,a,n,r,t[6],2734768916,15),r=h(r,i,a,n,t[13],1309151649,21),n=h(n,r,i,a,t[4],4149444226,6),a=h(a,n,r,i,t[11],3174756917,10),i=h(i,a,n,r,t[2],718787259,15),r=h(r,i,a,n,t[9],3951481745,21),this._a=this._a+n|0,this._b=this._b+r|0,this._c=this._c+i|0,this._d=this._d+a|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=a.allocUnsafe(16);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t},t.exports=s},function(t,e,n){t.exports=i;var r=n(58).EventEmitter;function i(){r.call(this)}n(2)(i,r),i.Readable=n(59),i.Writable=n(144),i.Duplex=n(145),i.Transform=n(146),i.PassThrough=n(147),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function a(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",a),t._isStdio||e&&!1===e.end||(n.on("end",s),n.on("close",u));var o=!1;function s(){o||(o=!0,t.end())}function u(){o||(o=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(l(),0===r.listenerCount(this,"error"))throw t}function l(){n.removeListener("data",i),t.removeListener("drain",a),n.removeListener("end",s),n.removeListener("close",u),n.removeListener("error",c),t.removeListener("error",c),n.removeListener("end",l),n.removeListener("close",l),t.removeListener("close",l)}return n.on("error",c),t.on("error",c),n.on("end",l),n.on("close",l),t.on("close",l),t.emit("pipe",n),t}},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function a(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,o,s,u,c;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var l=new Error('Uncaught, unspecified "error" event. ('+e+")");throw l.context=e,l}if(a(n=this._events[t]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),n.apply(this,s)}else if(i(n))for(s=Array.prototype.slice.call(arguments,1),o=(c=n.slice()).length,u=0;u<o;u++)c[u].apply(this,s);return!0},n.prototype.addListener=function(t,e){var o;if(!r(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(o=a(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&o>0&&this._events[t].length>o&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){if(!r(e))throw TypeError("listener must be a function");var n=!1;function i(){this.removeListener(t,i),n||(n=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},n.prototype.removeListener=function(t,e){var n,a,o,s;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(o=(n=this._events[t]).length,a=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(s=o;s-- >0;)if(n[s]===e||n[s].listener&&n[s].listener===e){a=s;break}if(a<0)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(a,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[t]))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){return this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(r(e))return 1;if(e)return e.length}return 0},n.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,n){(e=t.exports=n(87)).Stream=e,e.Readable=e,e.Writable=n(60),e.Duplex=n(21),e.Transform=n(90),e.PassThrough=n(143)},function(t,e,n){"use strict";(function(e,r,i){var a=n(41);function o(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=v;var s,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:a.nextTick;v.WritableState=y;var c=n(31);c.inherits=n(2);var l={deprecate:n(142)},f=n(88),h=n(3).Buffer,p=i.Uint8Array||function(){};var d,m=n(89);function g(){}function y(t,e){s=s||n(21),t=t||{};var r=e instanceof s;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,c=t.writableHighWaterMark,l=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(c||0===c)?c:l,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===t.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(a.nextTick(i,r),a.nextTick(S,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),S(t,e))}(t,n,r,e,i);else{var o=x(n);o||n.corked||n.bufferProcessing||!n.bufferedRequest||_(t,n),r?u(w,t,n,o,i):w(t,n,o,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function v(t){if(s=s||n(21),!(d.call(v,this)||this instanceof s))return new v(t);this._writableState=new y(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),f.call(this)}function b(t,e,n,r,i,a,o){e.writelen=r,e.writecb=o,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,a,e.onwrite),e.sync=!1}function w(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),S(t,e)}function _(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),a=e.corkedRequestsFree;a.entry=n;for(var s=0,u=!0;n;)i[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;i.allBuffers=u,b(t,e,!0,e.length,i,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new o(e),e.bufferedRequestCount=0}else{for(;n;){var c=n.chunk,l=n.encoding,f=n.callback;if(b(t,e,!1,e.objectMode?1:c.length,c,l,f),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function x(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function E(t,e){t._final(function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),S(t,e)})}function S(t,e){var n=x(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,a.nextTick(E,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}c.inherits(v,f),y.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(y.prototype,"buffer",{get:l.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(d=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(t){return!!d.call(this,t)||this===v&&(t&&t._writableState instanceof y)}})):d=function(t){return t instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(t,e,n){var r,i=this._writableState,o=!1,s=!i.objectMode&&(r=t,h.isBuffer(r)||r instanceof p);return s&&!h.isBuffer(t)&&(t=function(t){return h.from(t)}(t)),"function"==typeof e&&(n=e,e=null),s?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof n&&(n=g),i.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),a.nextTick(e,n)}(this,n):(s||function(t,e,n,r){var i=!0,o=!1;return null===n?o=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(t.emit("error",o),a.nextTick(r,o),i=!1),i}(this,i,t,n))&&(i.pendingcb++,o=function(t,e,n,r,i,a){if(!n){var o=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=h.from(e,n));return e}(e,r,i);r!==o&&(n=!0,i="buffer",r=o)}var s=e.objectMode?1:r.length;e.length+=s;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:a,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else b(t,e,!1,s,r,i,a);return u}(this,i,s,t,e,n)),o},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||_(this,t))},v.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,S(t,e),n&&(e.finished?a.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),v.prototype.destroy=m.destroy,v.prototype._undestroy=m.undestroy,v.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(14),n(83).setImmediate,n(11))},function(t,e,n){"use strict";var r=n(4).Buffer,i=n(2),a=n(86),o=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],u=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],c=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],l=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],f=[0,1518500249,1859775393,2400959708,2840853838],h=[1352829926,1548603684,1836072691,2053994217,0];function p(){a.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function d(t,e){return t<<e|t>>>32-e}function m(t,e,n,r,i,a,o,s){return d(t+(e^n^r)+a+o|0,s)+i|0}function g(t,e,n,r,i,a,o,s){return d(t+(e&n|~e&r)+a+o|0,s)+i|0}function y(t,e,n,r,i,a,o,s){return d(t+((e|~n)^r)+a+o|0,s)+i|0}function v(t,e,n,r,i,a,o,s){return d(t+(e&r|n&~r)+a+o|0,s)+i|0}function b(t,e,n,r,i,a,o,s){return d(t+(e^(n|~r))+a+o|0,s)+i|0}i(p,a),p.prototype._update=function(){for(var t=o,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);for(var n=0|this._a,r=0|this._b,i=0|this._c,a=0|this._d,p=0|this._e,w=0|this._a,_=0|this._b,x=0|this._c,E=0|this._d,S=0|this._e,N=0;N<80;N+=1){var I,O;N<16?(I=m(n,r,i,a,p,t[s[N]],f[0],c[N]),O=b(w,_,x,E,S,t[u[N]],h[0],l[N])):N<32?(I=g(n,r,i,a,p,t[s[N]],f[1],c[N]),O=v(w,_,x,E,S,t[u[N]],h[1],l[N])):N<48?(I=y(n,r,i,a,p,t[s[N]],f[2],c[N]),O=y(w,_,x,E,S,t[u[N]],h[2],l[N])):N<64?(I=v(n,r,i,a,p,t[s[N]],f[3],c[N]),O=g(w,_,x,E,S,t[u[N]],h[3],l[N])):(I=b(n,r,i,a,p,t[s[N]],f[4],c[N]),O=m(w,_,x,E,S,t[u[N]],h[4],l[N])),n=p,p=a,a=d(i,10),i=r,r=I,w=S,S=E,E=d(x,10),x=_,_=O}var k=this._b+i+E|0;this._b=this._c+a+S|0,this._c=this._d+p+w|0,this._d=this._e+n+_|0,this._e=this._a+r+x|0,this._a=k},p.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=r.alloc?r.alloc(20):new r(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=p},function(t,e,n){(e=t.exports=function(t){t=t.toLowerCase();var n=e[t];if(!n)throw new Error(t+" is not supported (we accept pull requests)");return new n}).sha=n(148),e.sha1=n(149),e.sha224=n(150),e.sha256=n(91),e.sha384=n(151),e.sha512=n(92)},function(t,e,n){"use strict";e.utils=n(157),e.Cipher=n(158),e.DES=n(159),e.CBC=n(160),e.EDE=n(161)},function(t,e,n){var r=n(162),i=n(170),a=n(102);e.createCipher=e.Cipher=r.createCipher,e.createCipheriv=e.Cipheriv=r.createCipheriv,e.createDecipher=e.Decipher=i.createDecipher,e.createDecipheriv=e.Decipheriv=i.createDecipheriv,e.listCiphers=e.getCiphers=function(){return Object.keys(a)}},function(t,e,n){var r={ECB:n(163),CBC:n(164),CFB:n(165),CFB8:n(166),CFB1:n(167),OFB:n(168),CTR:n(100),GCM:n(100)},i=n(102);for(var a in i)i[a].module=r[i[a].mode];t.exports=i},function(t,e,n){(function(e){var r=n(5),i=n(22);function a(t,n){var i=function(t){var e=o(t);return{blinder:e.toRed(r.mont(t.modulus)).redPow(new r(t.publicExponent)).fromRed(),unblinder:e.invm(t.modulus)}}(n),a=n.modulus.byteLength(),s=(r.mont(n.modulus),new r(t).mul(i.blinder).umod(n.modulus)),u=s.toRed(r.mont(n.prime1)),c=s.toRed(r.mont(n.prime2)),l=n.coefficient,f=n.prime1,h=n.prime2,p=u.redPow(n.exponent1),d=c.redPow(n.exponent2);p=p.fromRed(),d=d.fromRed();var m=p.isub(d).imul(l).umod(f);return m.imul(h),d.iadd(m),new e(d.imul(i.unblinder).umod(n.modulus).toArray(!1,a))}function o(t){for(var e=t.modulus.byteLength(),n=new r(i(e));n.cmp(t.modulus)>=0||!n.umod(t.prime1)||!n.umod(t.prime2);)n=new r(i(e));return n}t.exports=a,a.getr=o}).call(this,n(4).Buffer)},function(t,e,n){var r=e;r.utils=n(15),r.common=n(33),r.sha=n(187),r.ripemd=n(191),r.hmac=n(192),r.sha1=r.sha.sha1,r.sha256=r.sha.sha256,r.sha224=r.sha.sha224,r.sha384=r.sha.sha384,r.sha512=r.sha.sha512,r.ripemd160=r.ripemd.ripemd160},,,,,,,,,,,,,,,,function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function a(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new a(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new a(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(136),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(11))},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";e.randomBytes=e.rng=e.pseudoRandomBytes=e.prng=n(22),e.createHash=e.Hash=n(30),e.createHmac=e.Hmac=n(93);var r=n(153),i=Object.keys(r),a=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(i);e.getHashes=function(){return a};var o=n(96);e.pbkdf2=o.pbkdf2,e.pbkdf2Sync=o.pbkdf2Sync;var s=n(155);e.Cipher=s.Cipher,e.createCipher=s.createCipher,e.Cipheriv=s.Cipheriv,e.createCipheriv=s.createCipheriv,e.Decipher=s.Decipher,e.createDecipher=s.createDecipher,e.Decipheriv=s.Decipheriv,e.createDecipheriv=s.createDecipheriv,e.getCiphers=s.getCiphers,e.listCiphers=s.listCiphers;var u=n(172);e.DiffieHellmanGroup=u.DiffieHellmanGroup,e.createDiffieHellmanGroup=u.createDiffieHellmanGroup,e.getDiffieHellman=u.getDiffieHellman,e.createDiffieHellman=u.createDiffieHellman,e.DiffieHellman=u.DiffieHellman;var c=n(178);e.createSign=c.createSign,e.Sign=c.Sign,e.createVerify=c.createVerify,e.Verify=c.Verify,e.createECDH=n(216);var l=n(217);e.publicEncrypt=l.publicEncrypt,e.privateEncrypt=l.privateEncrypt,e.publicDecrypt=l.publicDecrypt,e.privateDecrypt=l.privateDecrypt;var f=n(220);e.randomFill=f.randomFill,e.randomFillSync=f.randomFillSync,e.createCredentials=function(){throw new Error(["sorry, createCredentials is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))},e.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,RSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}},function(t,e,n){"use strict";var r=n(3).Buffer,i=n(57).Transform;function a(t){i.call(this),this._block=r.allocUnsafe(t),this._blockSize=t,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}n(2)(a,i),a.prototype._transform=function(t,e,n){var r=null;try{this.update(t,e)}catch(t){r=t}n(r)},a.prototype._flush=function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)},a.prototype.update=function(t,e){if(function(t,e){if(!r.isBuffer(t)&&"string"!=typeof t)throw new TypeError(e+" must be a string or a buffer")}(t,"Data"),this._finalized)throw new Error("Digest already called");r.isBuffer(t)||(t=r.from(t,e));for(var n=this._block,i=0;this._blockOffset+t.length-i>=this._blockSize;){for(var a=this._blockOffset;a<this._blockSize;)n[a++]=t[i++];this._update(),this._blockOffset=0}for(;i<t.length;)n[this._blockOffset++]=t[i++];for(var o=0,s=8*t.length;s>0;++o)this._length[o]+=s,(s=this._length[o]/4294967296|0)>0&&(this._length[o]-=4294967296*s);return this},a.prototype._update=function(){throw new Error("_update is not implemented")},a.prototype.digest=function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var e=this._digest();void 0!==t&&(e=e.toString(t)),this._block.fill(0),this._blockOffset=0;for(var n=0;n<4;++n)this._length[n]=0;return e},a.prototype._digest=function(){throw new Error("_digest is not implemented")},t.exports=a},function(t,e,n){"use strict";(function(e,r){var i=n(41);t.exports=b;var a,o=n(84);b.ReadableState=v;n(58).EventEmitter;var s=function(t,e){return t.listeners(e).length},u=n(88),c=n(3).Buffer,l=e.Uint8Array||function(){};var f=n(31);f.inherits=n(2);var h=n(139),p=void 0;p=h&&h.debuglog?h.debuglog("stream"):function(){};var d,m=n(140),g=n(89);f.inherits(b,u);var y=["error","close","destroy","pause","resume"];function v(t,e){t=t||{};var r=e instanceof(a=a||n(21));this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,o=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(o||0===o)?o:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(d||(d=n(42).StringDecoder),this.decoder=new d(t.encoding),this.encoding=t.encoding)}function b(t){if(a=a||n(21),!(this instanceof b))return new b(t);this._readableState=new v(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function w(t,e,n,r,i){var a,o=t._readableState;null===e?(o.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,S(t)}(t,o)):(i||(a=function(t,e){var n;r=e,c.isBuffer(r)||r instanceof l||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(o,e)),a?t.emit("error",a):o.objectMode||e&&e.length>0?("string"==typeof e||o.objectMode||Object.getPrototypeOf(e)===c.prototype||(e=function(t){return c.from(t)}(e)),r?o.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):_(t,o,e,!0):o.ended?t.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!n?(e=o.decoder.write(e),o.objectMode||0!==e.length?_(t,o,e,!1):I(t,o)):_(t,o,e,!1))):r||(o.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(o)}function _(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&S(t)),I(t,e)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(t,e){this.push(null),e(t)},b.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=c.from(t,e),e=""),n=!0),w(this,t,e,!1,n)},b.prototype.unshift=function(t){return w(this,t,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(t){return d||(d=n(42).StringDecoder),this._readableState.decoder=new d(t),this._readableState.encoding=t,this};var x=8388608;function E(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=x?t=x:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function S(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(p("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(N,t):N(t))}function N(t){p("emit readable"),t.emit("readable"),C(t)}function I(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(O,t,e))}function O(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(p("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function k(t){p("readable nexttick read 0"),t.read(0)}function A(t,e){e.reading||(p("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),C(t),e.flowing&&!e.reading&&t.read(0)}function C(t){var e=t._readableState;for(p("flow",e.flowing);e.flowing&&null!==t.read(););}function P(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var a=n.data,o=t>a.length?a.length:t;if(o===a.length?i+=a:i+=a.slice(0,t),0===(t-=o)){o===a.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=a.slice(o));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=c.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var a=r.data,o=t>a.length?a.length:t;if(a.copy(n,n.length-t,0,o),0===(t-=o)){o===a.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=a.slice(o));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function T(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(R,e,t))}function R(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function D(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}b.prototype.read=function(t){p("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return p("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?T(this):S(this),null;if(0===(t=E(t,e))&&e.ended)return 0===e.length&&T(this),null;var r,i=e.needReadable;return p("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&p("length less than watermark",i=!0),e.ended||e.reading?p("reading or ended",i=!1):i&&(p("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=E(n,e))),null===(r=t>0?P(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&T(this)),null!==r&&this.emit("data",r),r},b.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(t,e){var n=this,a=this._readableState;switch(a.pipesCount){case 0:a.pipes=t;break;case 1:a.pipes=[a.pipes,t];break;default:a.pipes.push(t)}a.pipesCount+=1,p("pipe count=%d opts=%j",a.pipesCount,e);var u=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?l:b;function c(e,r){p("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,p("cleanup"),t.removeListener("close",y),t.removeListener("finish",v),t.removeListener("drain",f),t.removeListener("error",g),t.removeListener("unpipe",c),n.removeListener("end",l),n.removeListener("end",b),n.removeListener("data",m),h=!0,!a.awaitDrain||t._writableState&&!t._writableState.needDrain||f())}function l(){p("onend"),t.end()}a.endEmitted?i.nextTick(u):n.once("end",u),t.on("unpipe",c);var f=function(t){return function(){var e=t._readableState;p("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,C(t))}}(n);t.on("drain",f);var h=!1;var d=!1;function m(e){p("ondata"),d=!1,!1!==t.write(e)||d||((1===a.pipesCount&&a.pipes===t||a.pipesCount>1&&-1!==D(a.pipes,t))&&!h&&(p("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,d=!0),n.pause())}function g(e){p("onerror",e),b(),t.removeListener("error",g),0===s(t,"error")&&t.emit("error",e)}function y(){t.removeListener("finish",v),b()}function v(){p("onfinish"),t.removeListener("close",y),b()}function b(){p("unpipe"),n.unpipe(t)}return n.on("data",m),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?o(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",g),t.once("close",y),t.once("finish",v),t.emit("pipe",n),a.flowing||(p("pipe resume"),n.resume()),t},b.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var a=0;a<i;a++)r[a].emit("unpipe",this,n);return this}var o=D(e.pipes,t);return-1===o?this:(e.pipes.splice(o,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},b.prototype.on=function(t,e){var n=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&S(this):i.nextTick(k,this))}return n},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var t=this._readableState;return t.flowing||(p("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(A,t,e))}(this,t)),this},b.prototype.pause=function(){return p("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(p("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",function(){if(p("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(p("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause()))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var a=0;a<y.length;a++)t.on(y[a],this.emit.bind(this,y[a]));return this._read=function(e){p("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(b.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),b._fromList=P}).call(this,n(11),n(14))},function(t,e,n){t.exports=n(58).EventEmitter},function(t,e,n){"use strict";var r=n(41);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,a=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return a||o?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";t.exports=o;var r=n(21),i=n(31);function a(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function o(t){if(!(this instanceof o))return new o(t);r.call(this,t),this._transformState={afterTransform:a.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",s)}function s(){var t=this;"function"==typeof this._flush?this._flush(function(e,n){u(t,e,n)}):u(this,null,null)}function u(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(2),i.inherits(o,r),o.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},o.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},o.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},o.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,function(t){e(t),n.emit("close")})}},function(t,e,n){var r=n(2),i=n(23),a=n(3).Buffer,o=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function u(){this.init(),this._w=s,i.call(this,64,56)}function c(t,e,n){return n^t&(e^n)}function l(t,e,n){return t&e|n&(t|e)}function f(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function h(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function p(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}r(u,i),u.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},u.prototype._update=function(t){for(var e,n=this._w,r=0|this._a,i=0|this._b,a=0|this._c,s=0|this._d,u=0|this._e,d=0|this._f,m=0|this._g,g=0|this._h,y=0;y<16;++y)n[y]=t.readInt32BE(4*y);for(;y<64;++y)n[y]=0|(((e=n[y-2])>>>17|e<<15)^(e>>>19|e<<13)^e>>>10)+n[y-7]+p(n[y-15])+n[y-16];for(var v=0;v<64;++v){var b=g+h(u)+c(u,d,m)+o[v]+n[v]|0,w=f(r)+l(r,i,a)|0;g=m,m=d,d=u,u=s+b|0,s=a,a=i,i=r,r=b+w|0}this._a=r+this._a|0,this._b=i+this._b|0,this._c=a+this._c|0,this._d=s+this._d|0,this._e=u+this._e|0,this._f=d+this._f|0,this._g=m+this._g|0,this._h=g+this._h|0},u.prototype._hash=function(){var t=a.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=u},function(t,e,n){var r=n(2),i=n(23),a=n(3).Buffer,o=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function u(){this.init(),this._w=s,i.call(this,128,112)}function c(t,e,n){return n^t&(e^n)}function l(t,e,n){return t&e|n&(t|e)}function f(t,e){return(t>>>28|e<<4)^(e>>>2|t<<30)^(e>>>7|t<<25)}function h(t,e){return(t>>>14|e<<18)^(t>>>18|e<<14)^(e>>>9|t<<23)}function p(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^t>>>7}function d(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^(t>>>7|e<<25)}function m(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^t>>>6}function g(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^(t>>>6|e<<26)}function y(t,e){return t>>>0<e>>>0?1:0}r(u,i),u.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},u.prototype._update=function(t){for(var e=this._w,n=0|this._ah,r=0|this._bh,i=0|this._ch,a=0|this._dh,s=0|this._eh,u=0|this._fh,v=0|this._gh,b=0|this._hh,w=0|this._al,_=0|this._bl,x=0|this._cl,E=0|this._dl,S=0|this._el,N=0|this._fl,I=0|this._gl,O=0|this._hl,k=0;k<32;k+=2)e[k]=t.readInt32BE(4*k),e[k+1]=t.readInt32BE(4*k+4);for(;k<160;k+=2){var A=e[k-30],C=e[k-30+1],P=p(A,C),T=d(C,A),R=m(A=e[k-4],C=e[k-4+1]),D=g(C,A),M=e[k-14],j=e[k-14+1],B=e[k-32],L=e[k-32+1],z=T+j|0,F=P+M+y(z,T)|0;F=(F=F+R+y(z=z+D|0,D)|0)+B+y(z=z+L|0,L)|0,e[k]=F,e[k+1]=z}for(var U=0;U<160;U+=2){F=e[U],z=e[U+1];var V=l(n,r,i),W=l(w,_,x),q=f(n,w),$=f(w,n),H=h(s,S),K=h(S,s),G=o[U],X=o[U+1],Y=c(s,u,v),J=c(S,N,I),Z=O+K|0,Q=b+H+y(Z,O)|0;Q=(Q=(Q=Q+Y+y(Z=Z+J|0,J)|0)+G+y(Z=Z+X|0,X)|0)+F+y(Z=Z+z|0,z)|0;var tt=$+W|0,et=q+V+y(tt,$)|0;b=v,O=I,v=u,I=N,u=s,N=S,s=a+Q+y(S=E+Z|0,E)|0,a=i,E=x,i=r,x=_,r=n,_=w,n=Q+et+y(w=Z+tt|0,Z)|0}this._al=this._al+w|0,this._bl=this._bl+_|0,this._cl=this._cl+x|0,this._dl=this._dl+E|0,this._el=this._el+S|0,this._fl=this._fl+N|0,this._gl=this._gl+I|0,this._hl=this._hl+O|0,this._ah=this._ah+n+y(this._al,w)|0,this._bh=this._bh+r+y(this._bl,_)|0,this._ch=this._ch+i+y(this._cl,x)|0,this._dh=this._dh+a+y(this._dl,E)|0,this._eh=this._eh+s+y(this._el,S)|0,this._fh=this._fh+u+y(this._fl,N)|0,this._gh=this._gh+v+y(this._gl,I)|0,this._hh=this._hh+b+y(this._hl,O)|0},u.prototype._hash=function(){var t=a.allocUnsafe(64);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),e(this._gh,this._gl,48),e(this._hh,this._hl,56),t},t.exports=u},function(t,e,n){"use strict";var r=n(2),i=n(152),a=n(18),o=n(3).Buffer,s=n(94),u=n(61),c=n(62),l=o.alloc(128);function f(t,e){a.call(this,"digest"),"string"==typeof e&&(e=o.from(e));var n="sha512"===t||"sha384"===t?128:64;(this._alg=t,this._key=e,e.length>n)?e=("rmd160"===t?new u:c(t)).update(e).digest():e.length<n&&(e=o.concat([e,l],n));for(var r=this._ipad=o.allocUnsafe(n),i=this._opad=o.allocUnsafe(n),s=0;s<n;s++)r[s]=54^e[s],i[s]=92^e[s];this._hash="rmd160"===t?new u:c(t),this._hash.update(r)}r(f,a),f.prototype._update=function(t){this._hash.update(t)},f.prototype._final=function(){var t=this._hash.digest();return("rmd160"===this._alg?new u:c(this._alg)).update(this._opad).update(t).digest()},t.exports=function(t,e){return"rmd160"===(t=t.toLowerCase())||"ripemd160"===t?new f("rmd160",e):"md5"===t?new i(s,e):new f(t,e)}},function(t,e,n){var r=n(56);t.exports=function(t){return(new r).update(t).digest()}},function(t){t.exports={sha224WithRSAEncryption:{sign:"rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},"RSA-SHA224":{sign:"ecdsa/rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},sha256WithRSAEncryption:{sign:"rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},"RSA-SHA256":{sign:"ecdsa/rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},sha384WithRSAEncryption:{sign:"rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},"RSA-SHA384":{sign:"ecdsa/rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},sha512WithRSAEncryption:{sign:"rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA512":{sign:"ecdsa/rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA1":{sign:"rsa",hash:"sha1",id:"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{sign:"ecdsa",hash:"sha1",id:""},sha256:{sign:"ecdsa",hash:"sha256",id:""},sha224:{sign:"ecdsa",hash:"sha224",id:""},sha384:{sign:"ecdsa",hash:"sha384",id:""},sha512:{sign:"ecdsa",hash:"sha512",id:""},"DSA-SHA":{sign:"dsa",hash:"sha1",id:""},"DSA-SHA1":{sign:"dsa",hash:"sha1",id:""},DSA:{sign:"dsa",hash:"sha1",id:""},"DSA-WITH-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-WITH-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-WITH-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-WITH-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-RIPEMD160":{sign:"dsa",hash:"rmd160",id:""},ripemd160WithRSA:{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},"RSA-RIPEMD160":{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},md5WithRSAEncryption:{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"},"RSA-MD5":{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"}}},function(t,e,n){e.pbkdf2=n(154),e.pbkdf2Sync=n(99)},function(t,e,n){(function(e){var n=Math.pow(2,30)-1;function r(t,n){if("string"!=typeof t&&!e.isBuffer(t))throw new TypeError(n+" must be a buffer or string")}t.exports=function(t,e,i,a){if(r(t,"Password"),r(e,"Salt"),"number"!=typeof i)throw new TypeError("Iterations not a number");if(i<0)throw new TypeError("Bad iterations");if("number"!=typeof a)throw new TypeError("Key length not a number");if(a<0||a>n||a!=a)throw new TypeError("Bad key length")}}).call(this,n(4).Buffer)},function(t,e,n){(function(e){var n;e.browser?n="utf-8":n=parseInt(e.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary";t.exports=n}).call(this,n(14))},function(t,e,n){var r=n(94),i=n(61),a=n(62),o=n(97),s=n(98),u=n(3).Buffer,c=u.alloc(128),l={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function f(t,e,n){var o=function(t){return"rmd160"===t||"ripemd160"===t?function(t){return(new i).update(t).digest()}:"md5"===t?r:function(e){return a(t).update(e).digest()}}(t),s="sha512"===t||"sha384"===t?128:64;e.length>s?e=o(e):e.length<s&&(e=u.concat([e,c],s));for(var f=u.allocUnsafe(s+l[t]),h=u.allocUnsafe(s+l[t]),p=0;p<s;p++)f[p]=54^e[p],h[p]=92^e[p];var d=u.allocUnsafe(s+n+4);f.copy(d,0,0,s),this.ipad1=d,this.ipad2=f,this.opad=h,this.alg=t,this.blocksize=s,this.hash=o,this.size=l[t]}f.prototype.run=function(t,e){return t.copy(e,this.blocksize),this.hash(e).copy(this.opad,this.blocksize),this.hash(this.opad)},t.exports=function(t,e,n,r,i){o(t,e,n,r),u.isBuffer(t)||(t=u.from(t,s)),u.isBuffer(e)||(e=u.from(e,s));var a=new f(i=i||"sha1",t,e.length),c=u.allocUnsafe(r),h=u.allocUnsafe(e.length+4);e.copy(h,0,0,e.length);for(var p=0,d=l[i],m=Math.ceil(r/d),g=1;g<=m;g++){h.writeUInt32BE(g,e.length);for(var y=a.run(h,a.ipad1),v=y,b=1;b<n;b++){v=a.run(v,a.ipad2);for(var w=0;w<d;w++)y[w]^=v[w]}y.copy(c,p),p+=d}return c}},function(t,e,n){var r=n(32),i=n(3).Buffer,a=n(101);function o(t){var e=t._cipher.encryptBlockRaw(t._prev);return a(t._prev),e}e.encrypt=function(t,e){var n=Math.ceil(e.length/16),a=t._cache.length;t._cache=i.concat([t._cache,i.allocUnsafe(16*n)]);for(var s=0;s<n;s++){var u=o(t),c=a+16*s;t._cache.writeUInt32BE(u[0],c+0),t._cache.writeUInt32BE(u[1],c+4),t._cache.writeUInt32BE(u[2],c+8),t._cache.writeUInt32BE(u[3],c+12)}var l=t._cache.slice(0,e.length);return t._cache=t._cache.slice(e.length),r(e,l)}},function(t,e){t.exports=function(t){for(var e,n=t.length;n--;){if(255!==(e=t.readUInt8(n))){e++,t.writeUInt8(e,n);break}t.writeUInt8(0,n)}}},function(t){t.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},function(t,e,n){var r=n(43),i=n(3).Buffer,a=n(18),o=n(2),s=n(169),u=n(32),c=n(101);function l(t,e,n,o){a.call(this);var u=i.alloc(4,0);this._cipher=new r.AES(e);var l=this._cipher.encryptBlock(u);this._ghash=new s(l),n=function(t,e,n){if(12===e.length)return t._finID=i.concat([e,i.from([0,0,0,1])]),i.concat([e,i.from([0,0,0,2])]);var r=new s(n),a=e.length,o=a%16;r.update(e),o&&(o=16-o,r.update(i.alloc(o,0))),r.update(i.alloc(8,0));var u=8*a,l=i.alloc(8);l.writeUIntBE(u,0,8),r.update(l),t._finID=r.state;var f=i.from(t._finID);return c(f),f}(this,n,l),this._prev=i.from(n),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=o,this._alen=0,this._len=0,this._mode=t,this._authTag=null,this._called=!1}o(l,a),l.prototype._update=function(t){if(!this._called&&this._alen){var e=16-this._alen%16;e<16&&(e=i.alloc(e,0),this._ghash.update(e))}this._called=!0;var n=this._mode.encrypt(this,t);return this._decrypt?this._ghash.update(t):this._ghash.update(n),this._len+=t.length,n},l.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var t=u(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(t,e){var n=0;t.length!==e.length&&n++;for(var r=Math.min(t.length,e.length),i=0;i<r;++i)n+=t[i]^e[i];return n}(t,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=t,this._cipher.scrub()},l.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},l.prototype.setAuthTag=function(t){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=t},l.prototype.setAAD=function(t){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(t),this._alen+=t.length},t.exports=l},function(t,e,n){var r=n(43),i=n(3).Buffer,a=n(18);function o(t,e,n,o){a.call(this),this._cipher=new r.AES(e),this._prev=i.from(n),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=o,this._mode=t}n(2)(o,a),o.prototype._update=function(t){return this._mode.encrypt(this,t,this._decrypt)},o.prototype._final=function(){this._cipher.scrub()},t.exports=o},function(t,e,n){var r=n(22);t.exports=v,v.simpleSieve=g,v.fermatTest=y;var i=n(5),a=new i(24),o=new(n(106)),s=new i(1),u=new i(2),c=new i(5),l=(new i(16),new i(8),new i(10)),f=new i(3),h=(new i(7),new i(11)),p=new i(4),d=(new i(12),null);function m(){if(null!==d)return d;var t=[];t[0]=2;for(var e=1,n=3;n<1048576;n+=2){for(var r=Math.ceil(Math.sqrt(n)),i=0;i<e&&t[i]<=r&&n%t[i]!=0;i++);e!==i&&t[i]<=r||(t[e++]=n)}return d=t,t}function g(t){for(var e=m(),n=0;n<e.length;n++)if(0===t.modn(e[n]))return 0===t.cmpn(e[n]);return!0}function y(t){var e=i.mont(t);return 0===u.toRed(e).redPow(t.subn(1)).fromRed().cmpn(1)}function v(t,e){if(t<16)return new i(2===e||5===e?[140,123]:[140,39]);var n,d;for(e=new i(e);;){for(n=new i(r(Math.ceil(t/8)));n.bitLength()>t;)n.ishrn(1);if(n.isEven()&&n.iadd(s),n.testn(1)||n.iadd(u),e.cmp(u)){if(!e.cmp(c))for(;n.mod(l).cmp(f);)n.iadd(p)}else for(;n.mod(a).cmp(h);)n.iadd(p);if(g(d=n.shrn(1))&&g(n)&&y(d)&&y(n)&&o.test(d)&&o.test(n))return n}}},function(t,e,n){var r=n(5),i=n(107);function a(t){this.rand=t||new i.Rand}t.exports=a,a.create=function(t){return new a(t)},a.prototype._randbelow=function(t){var e=t.bitLength(),n=Math.ceil(e/8);do{var i=new r(this.rand.generate(n))}while(i.cmp(t)>=0);return i},a.prototype._randrange=function(t,e){var n=e.sub(t);return t.add(this._randbelow(n))},a.prototype.test=function(t,e,n){var i=t.bitLength(),a=r.mont(t),o=new r(1).toRed(a);e||(e=Math.max(1,i/48|0));for(var s=t.subn(1),u=0;!s.testn(u);u++);for(var c=t.shrn(u),l=s.toRed(a);e>0;e--){var f=this._randrange(new r(2),s);n&&n(f);var h=f.toRed(a).redPow(c);if(0!==h.cmp(o)&&0!==h.cmp(l)){for(var p=1;p<u;p++){if(0===(h=h.redSqr()).cmp(o))return!1;if(0===h.cmp(l))break}if(p===u)return!1}}return!0},a.prototype.getDivisor=function(t,e){var n=t.bitLength(),i=r.mont(t),a=new r(1).toRed(i);e||(e=Math.max(1,n/48|0));for(var o=t.subn(1),s=0;!o.testn(s);s++);for(var u=t.shrn(s),c=o.toRed(i);e>0;e--){var l=this._randrange(new r(2),o),f=t.gcd(l);if(0!==f.cmpn(1))return f;var h=l.toRed(i).redPow(u);if(0!==h.cmp(a)&&0!==h.cmp(c)){for(var p=1;p<s;p++){if(0===(h=h.redSqr()).cmp(a))return h.fromRed().subn(1).gcd(t);if(0===h.cmp(c))break}if(p===s)return(h=h.redSqr()).fromRed().subn(1).gcd(t)}}return!1}},function(t,e,n){var r;function i(t){this.rand=t}if(t.exports=function(t){return r||(r=new i(null)),r.generate(t)},t.exports.Rand=i,i.prototype.generate=function(t){return this._rand(t)},i.prototype._rand=function(t){if(this.rand.getBytes)return this.rand.getBytes(t);for(var e=new Uint8Array(t),n=0;n<e.length;n++)e[n]=this.rand.getByte();return e},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?i.prototype._rand=function(t){var e=new Uint8Array(t);return self.crypto.getRandomValues(e),e}:self.msCrypto&&self.msCrypto.getRandomValues?i.prototype._rand=function(t){var e=new Uint8Array(t);return self.msCrypto.getRandomValues(e),e}:"object"==typeof window&&(i.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var a=n(175);if("function"!=typeof a.randomBytes)throw new Error("Not supported");i.prototype._rand=function(t){return a.randomBytes(t)}}catch(t){}},function(t,e,n){"use strict";var r=e;function i(t){return 1===t.length?"0"+t:t}function a(t){for(var e="",n=0;n<t.length;n++)e+=i(t[n].toString(16));return e}r.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var n=[];if("string"!=typeof t){for(var r=0;r<t.length;r++)n[r]=0|t[r];return n}if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),r=0;r<t.length;r+=2)n.push(parseInt(t[r]+t[r+1],16));else for(r=0;r<t.length;r++){var i=t.charCodeAt(r),a=i>>8,o=255&i;a?n.push(a,o):n.push(o)}return n},r.zero2=i,r.toHex=a,r.encode=function(t,e){return"hex"===e?a(t):t}},function(t,e,n){"use strict";var r=n(15).rotr32;function i(t,e,n){return t&e^~t&n}function a(t,e,n){return t&e^t&n^e&n}function o(t,e,n){return t^e^n}e.ft_1=function(t,e,n,r){return 0===t?i(e,n,r):1===t||3===t?o(e,n,r):2===t?a(e,n,r):void 0},e.ch32=i,e.maj32=a,e.p32=o,e.s0_256=function(t){return r(t,2)^r(t,13)^r(t,22)},e.s1_256=function(t){return r(t,6)^r(t,11)^r(t,25)},e.g0_256=function(t){return r(t,7)^r(t,18)^t>>>3},e.g1_256=function(t){return r(t,17)^r(t,19)^t>>>10}},function(t,e,n){"use strict";var r=n(15),i=n(33),a=n(109),o=n(12),s=r.sum32,u=r.sum32_4,c=r.sum32_5,l=a.ch32,f=a.maj32,h=a.s0_256,p=a.s1_256,d=a.g0_256,m=a.g1_256,g=i.BlockHash,y=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function v(){if(!(this instanceof v))return new v;g.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=y,this.W=new Array(64)}r.inherits(v,g),t.exports=v,v.blockSize=512,v.outSize=256,v.hmacStrength=192,v.padLength=64,v.prototype._update=function(t,e){for(var n=this.W,r=0;r<16;r++)n[r]=t[e+r];for(;r<n.length;r++)n[r]=u(m(n[r-2]),n[r-7],d(n[r-15]),n[r-16]);var i=this.h[0],a=this.h[1],g=this.h[2],y=this.h[3],v=this.h[4],b=this.h[5],w=this.h[6],_=this.h[7];for(o(this.k.length===n.length),r=0;r<n.length;r++){var x=c(_,p(v),l(v,b,w),this.k[r],n[r]),E=s(h(i),f(i,a,g));_=w,w=b,b=v,v=s(y,x),y=g,g=a,a=i,i=s(x,E)}this.h[0]=s(this.h[0],i),this.h[1]=s(this.h[1],a),this.h[2]=s(this.h[2],g),this.h[3]=s(this.h[3],y),this.h[4]=s(this.h[4],v),this.h[5]=s(this.h[5],b),this.h[6]=s(this.h[6],w),this.h[7]=s(this.h[7],_)},v.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},function(t,e,n){"use strict";var r=n(15),i=n(33),a=n(12),o=r.rotr64_hi,s=r.rotr64_lo,u=r.shr64_hi,c=r.shr64_lo,l=r.sum64,f=r.sum64_hi,h=r.sum64_lo,p=r.sum64_4_hi,d=r.sum64_4_lo,m=r.sum64_5_hi,g=r.sum64_5_lo,y=i.BlockHash,v=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function b(){if(!(this instanceof b))return new b;y.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=v,this.W=new Array(160)}function w(t,e,n,r,i){var a=t&n^~t&i;return a<0&&(a+=4294967296),a}function _(t,e,n,r,i,a){var o=e&r^~e&a;return o<0&&(o+=4294967296),o}function x(t,e,n,r,i){var a=t&n^t&i^n&i;return a<0&&(a+=4294967296),a}function E(t,e,n,r,i,a){var o=e&r^e&a^r&a;return o<0&&(o+=4294967296),o}function S(t,e){var n=o(t,e,28)^o(e,t,2)^o(e,t,7);return n<0&&(n+=4294967296),n}function N(t,e){var n=s(t,e,28)^s(e,t,2)^s(e,t,7);return n<0&&(n+=4294967296),n}function I(t,e){var n=o(t,e,14)^o(t,e,18)^o(e,t,9);return n<0&&(n+=4294967296),n}function O(t,e){var n=s(t,e,14)^s(t,e,18)^s(e,t,9);return n<0&&(n+=4294967296),n}function k(t,e){var n=o(t,e,1)^o(t,e,8)^u(t,e,7);return n<0&&(n+=4294967296),n}function A(t,e){var n=s(t,e,1)^s(t,e,8)^c(t,e,7);return n<0&&(n+=4294967296),n}function C(t,e){var n=o(t,e,19)^o(e,t,29)^u(t,e,6);return n<0&&(n+=4294967296),n}function P(t,e){var n=s(t,e,19)^s(e,t,29)^c(t,e,6);return n<0&&(n+=4294967296),n}r.inherits(b,y),t.exports=b,b.blockSize=1024,b.outSize=512,b.hmacStrength=192,b.padLength=128,b.prototype._prepareBlock=function(t,e){for(var n=this.W,r=0;r<32;r++)n[r]=t[e+r];for(;r<n.length;r+=2){var i=C(n[r-4],n[r-3]),a=P(n[r-4],n[r-3]),o=n[r-14],s=n[r-13],u=k(n[r-30],n[r-29]),c=A(n[r-30],n[r-29]),l=n[r-32],f=n[r-31];n[r]=p(i,a,o,s,u,c,l,f),n[r+1]=d(i,a,o,s,u,c,l,f)}},b.prototype._update=function(t,e){this._prepareBlock(t,e);var n=this.W,r=this.h[0],i=this.h[1],o=this.h[2],s=this.h[3],u=this.h[4],c=this.h[5],p=this.h[6],d=this.h[7],y=this.h[8],v=this.h[9],b=this.h[10],k=this.h[11],A=this.h[12],C=this.h[13],P=this.h[14],T=this.h[15];a(this.k.length===n.length);for(var R=0;R<n.length;R+=2){var D=P,M=T,j=I(y,v),B=O(y,v),L=w(y,v,b,k,A),z=_(y,v,b,k,A,C),F=this.k[R],U=this.k[R+1],V=n[R],W=n[R+1],q=m(D,M,j,B,L,z,F,U,V,W),$=g(D,M,j,B,L,z,F,U,V,W);D=S(r,i),M=N(r,i),j=x(r,i,o,s,u),B=E(r,i,o,s,u,c);var H=f(D,M,j,B),K=h(D,M,j,B);P=A,T=C,A=b,C=k,b=y,k=v,y=f(p,d,q,$),v=h(d,d,q,$),p=u,d=c,u=o,c=s,o=r,s=i,r=f(q,$,H,K),i=h(q,$,H,K)}l(this.h,0,r,i),l(this.h,2,o,s),l(this.h,4,u,c),l(this.h,6,p,d),l(this.h,8,y,v),l(this.h,10,b,k),l(this.h,12,A,C),l(this.h,14,P,T)},b.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},function(t,e,n){var r=n(2),i=n(35).Reporter,a=n(4).Buffer;function o(t,e){i.call(this,e),a.isBuffer(t)?(this.base=t,this.offset=0,this.length=t.length):this.error("Input not Buffer")}function s(t,e){if(Array.isArray(t))this.length=0,this.value=t.map(function(t){return t instanceof s||(t=new s(t,e)),this.length+=t.length,t},this);else if("number"==typeof t){if(!(0<=t&&t<=255))return e.error("non-byte EncoderBuffer value");this.value=t,this.length=1}else if("string"==typeof t)this.value=t,this.length=a.byteLength(t);else{if(!a.isBuffer(t))return e.error("Unsupported type: "+typeof t);this.value=t,this.length=t.length}}r(o,i),e.DecoderBuffer=o,o.prototype.save=function(){return{offset:this.offset,reporter:i.prototype.save.call(this)}},o.prototype.restore=function(t){var e=new o(this.base);return e.offset=t.offset,e.length=this.offset,this.offset=t.offset,i.prototype.restore.call(this,t.reporter),e},o.prototype.isEmpty=function(){return this.offset===this.length},o.prototype.readUInt8=function(t){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(t||"DecoderBuffer overrun")},o.prototype.skip=function(t,e){if(!(this.offset+t<=this.length))return this.error(e||"DecoderBuffer overrun");var n=new o(this.base);return n._reporterState=this._reporterState,n.offset=this.offset,n.length=this.offset+t,this.offset+=t,n},o.prototype.raw=function(t){return this.base.slice(t?t.offset:this.offset,this.length)},e.EncoderBuffer=s,s.prototype.join=function(t,e){return t||(t=new a(this.length)),e||(e=0),0===this.length?t:(Array.isArray(this.value)?this.value.forEach(function(n){n.join(t,e),e+=n.length}):("number"==typeof this.value?t[e]=this.value:"string"==typeof this.value?t.write(this.value,e):a.isBuffer(this.value)&&this.value.copy(t,e),e+=this.length),t)}},function(t,e,n){var r=e;r._reverse=function(t){var e={};return Object.keys(t).forEach(function(n){(0|n)==n&&(n|=0);var r=t[n];e[r]=n}),e},r.der=n(207)},function(t,e,n){var r=n(2),i=n(34),a=i.base,o=i.bignum,s=i.constants.der;function u(t){this.enc="der",this.name=t.name,this.entity=t,this.tree=new c,this.tree._init(t.body)}function c(t){a.Node.call(this,"der",t)}function l(t,e){var n=t.readUInt8(e);if(t.isError(n))return n;var r=s.tagClass[n>>6],i=0==(32&n);if(31==(31&n)){var a=n;for(n=0;128==(128&a);){if(a=t.readUInt8(e),t.isError(a))return a;n<<=7,n|=127&a}}else n&=31;return{cls:r,primitive:i,tag:n,tagStr:s.tag[n]}}function f(t,e,n){var r=t.readUInt8(n);if(t.isError(r))return r;if(!e&&128===r)return null;if(0==(128&r))return r;var i=127&r;if(i>4)return t.error("length octect is too long");r=0;for(var a=0;a<i;a++){r<<=8;var o=t.readUInt8(n);if(t.isError(o))return o;r|=o}return r}t.exports=u,u.prototype.decode=function(t,e){return t instanceof a.DecoderBuffer||(t=new a.DecoderBuffer(t,e)),this.tree._decode(t,e)},r(c,a.Node),c.prototype._peekTag=function(t,e,n){if(t.isEmpty())return!1;var r=t.save(),i=l(t,'Failed to peek tag: "'+e+'"');return t.isError(i)?i:(t.restore(r),i.tag===e||i.tagStr===e||i.tagStr+"of"===e||n)},c.prototype._decodeTag=function(t,e,n){var r=l(t,'Failed to decode tag of "'+e+'"');if(t.isError(r))return r;var i=f(t,r.primitive,'Failed to get length of "'+e+'"');if(t.isError(i))return i;if(!n&&r.tag!==e&&r.tagStr!==e&&r.tagStr+"of"!==e)return t.error('Failed to match tag: "'+e+'"');if(r.primitive||null!==i)return t.skip(i,'Failed to match body of: "'+e+'"');var a=t.save(),o=this._skipUntilEnd(t,'Failed to skip indefinite length body: "'+this.tag+'"');return t.isError(o)?o:(i=t.offset-a.offset,t.restore(a),t.skip(i,'Failed to match body of: "'+e+'"'))},c.prototype._skipUntilEnd=function(t,e){for(;;){var n=l(t,e);if(t.isError(n))return n;var r,i=f(t,n.primitive,e);if(t.isError(i))return i;if(r=n.primitive||null!==i?t.skip(i):this._skipUntilEnd(t,e),t.isError(r))return r;if("end"===n.tagStr)break}},c.prototype._decodeList=function(t,e,n,r){for(var i=[];!t.isEmpty();){var a=this._peekTag(t,"end");if(t.isError(a))return a;var o=n.decode(t,"der",r);if(t.isError(o)&&a)break;i.push(o)}return i},c.prototype._decodeStr=function(t,e){if("bitstr"===e){var n=t.readUInt8();return t.isError(n)?n:{unused:n,data:t.raw()}}if("bmpstr"===e){var r=t.raw();if(r.length%2==1)return t.error("Decoding of string type: bmpstr length mismatch");for(var i="",a=0;a<r.length/2;a++)i+=String.fromCharCode(r.readUInt16BE(2*a));return i}if("numstr"===e){var o=t.raw().toString("ascii");return this._isNumstr(o)?o:t.error("Decoding of string type: numstr unsupported characters")}if("octstr"===e)return t.raw();if("objDesc"===e)return t.raw();if("printstr"===e){var s=t.raw().toString("ascii");return this._isPrintstr(s)?s:t.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(e)?t.raw().toString():t.error("Decoding of string type: "+e+" unsupported")},c.prototype._decodeObjid=function(t,e,n){for(var r,i=[],a=0;!t.isEmpty();){var o=t.readUInt8();a<<=7,a|=127&o,0==(128&o)&&(i.push(a),a=0)}128&o&&i.push(a);var s=i[0]/40|0,u=i[0]%40;if(r=n?i:[s,u].concat(i.slice(1)),e){var c=e[r.join(" ")];void 0===c&&(c=e[r.join(".")]),void 0!==c&&(r=c)}return r},c.prototype._decodeTime=function(t,e){var n=t.raw().toString();if("gentime"===e)var r=0|n.slice(0,4),i=0|n.slice(4,6),a=0|n.slice(6,8),o=0|n.slice(8,10),s=0|n.slice(10,12),u=0|n.slice(12,14);else{if("utctime"!==e)return t.error("Decoding "+e+" time is not supported yet");r=0|n.slice(0,2),i=0|n.slice(2,4),a=0|n.slice(4,6),o=0|n.slice(6,8),s=0|n.slice(8,10),u=0|n.slice(10,12);r=r<70?2e3+r:1900+r}return Date.UTC(r,i-1,a,o,s,u,0)},c.prototype._decodeNull=function(t){return null},c.prototype._decodeBool=function(t){var e=t.readUInt8();return t.isError(e)?e:0!==e},c.prototype._decodeInt=function(t,e){var n=t.raw(),r=new o(n);return e&&(r=e[r.toString(10)]||r),r},c.prototype._use=function(t,e){return"function"==typeof t&&(t=t(e)),t._getDecoder("der").tree}},function(t,e,n){var r=n(2),i=n(4).Buffer,a=n(34),o=a.base,s=a.constants.der;function u(t){this.enc="der",this.name=t.name,this.entity=t,this.tree=new c,this.tree._init(t.body)}function c(t){o.Node.call(this,"der",t)}function l(t){return t<10?"0"+t:t}t.exports=u,u.prototype.encode=function(t,e){return this.tree._encode(t,e).join()},r(c,o.Node),c.prototype._encodeComposite=function(t,e,n,r){var a,o=function(t,e,n,r){var i;"seqof"===t?t="seq":"setof"===t&&(t="set");if(s.tagByName.hasOwnProperty(t))i=s.tagByName[t];else{if("number"!=typeof t||(0|t)!==t)return r.error("Unknown tag: "+t);i=t}if(i>=31)return r.error("Multi-octet tag encoding unsupported");e||(i|=32);return i|=s.tagClassByName[n||"universal"]<<6}(t,e,n,this.reporter);if(r.length<128)return(a=new i(2))[0]=o,a[1]=r.length,this._createEncoderBuffer([a,r]);for(var u=1,c=r.length;c>=256;c>>=8)u++;(a=new i(2+u))[0]=o,a[1]=128|u;c=1+u;for(var l=r.length;l>0;c--,l>>=8)a[c]=255&l;return this._createEncoderBuffer([a,r])},c.prototype._encodeStr=function(t,e){if("bitstr"===e)return this._createEncoderBuffer([0|t.unused,t.data]);if("bmpstr"===e){for(var n=new i(2*t.length),r=0;r<t.length;r++)n.writeUInt16BE(t.charCodeAt(r),2*r);return this._createEncoderBuffer(n)}return"numstr"===e?this._isNumstr(t)?this._createEncoderBuffer(t):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===e?this._isPrintstr(t)?this._createEncoderBuffer(t):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(e)?this._createEncoderBuffer(t):"objDesc"===e?this._createEncoderBuffer(t):this.reporter.error("Encoding of string type: "+e+" unsupported")},c.prototype._encodeObjid=function(t,e,n){if("string"==typeof t){if(!e)return this.reporter.error("string objid given, but no values map found");if(!e.hasOwnProperty(t))return this.reporter.error("objid not found in values map");t=e[t].split(/[\s\.]+/g);for(var r=0;r<t.length;r++)t[r]|=0}else if(Array.isArray(t)){t=t.slice();for(r=0;r<t.length;r++)t[r]|=0}if(!Array.isArray(t))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(t));if(!n){if(t[1]>=40)return this.reporter.error("Second objid identifier OOB");t.splice(0,2,40*t[0]+t[1])}var a=0;for(r=0;r<t.length;r++){var o=t[r];for(a++;o>=128;o>>=7)a++}var s=new i(a),u=s.length-1;for(r=t.length-1;r>=0;r--){o=t[r];for(s[u--]=127&o;(o>>=7)>0;)s[u--]=128|127&o}return this._createEncoderBuffer(s)},c.prototype._encodeTime=function(t,e){var n,r=new Date(t);return"gentime"===e?n=[l(r.getFullYear()),l(r.getUTCMonth()+1),l(r.getUTCDate()),l(r.getUTCHours()),l(r.getUTCMinutes()),l(r.getUTCSeconds()),"Z"].join(""):"utctime"===e?n=[l(r.getFullYear()%100),l(r.getUTCMonth()+1),l(r.getUTCDate()),l(r.getUTCHours()),l(r.getUTCMinutes()),l(r.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+e+" time is not supported yet"),this._encodeStr(n,"octstr")},c.prototype._encodeNull=function(){return this._createEncoderBuffer("")},c.prototype._encodeInt=function(t,e){if("string"==typeof t){if(!e)return this.reporter.error("String int or enum given, but no values map");if(!e.hasOwnProperty(t))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(t));t=e[t]}if("number"!=typeof t&&!i.isBuffer(t)){var n=t.toArray();!t.sign&&128&n[0]&&n.unshift(0),t=new i(n)}if(i.isBuffer(t)){var r=t.length;0===t.length&&r++;var a=new i(r);return t.copy(a),0===t.length&&(a[0]=0),this._createEncoderBuffer(a)}if(t<128)return this._createEncoderBuffer(t);if(t<256)return this._createEncoderBuffer([0,t]);r=1;for(var o=t;o>=256;o>>=8)r++;for(o=(a=new Array(r)).length-1;o>=0;o--)a[o]=255&t,t>>=8;return 128&a[0]&&a.unshift(0),this._createEncoderBuffer(new i(a))},c.prototype._encodeBool=function(t){return this._createEncoderBuffer(t?255:0)},c.prototype._use=function(t,e){return"function"==typeof t&&(t=t(e)),t._getEncoder("der").tree},c.prototype._skipDefault=function(t,e,n){var r,i=this._baseState;if(null===i.default)return!1;var a=t.join();if(void 0===i.defaultBuffer&&(i.defaultBuffer=this._encodeValue(i.default,e,n).join()),a.length!==i.defaultBuffer.length)return!1;for(r=0;r<a.length;r++)if(a[r]!==i.defaultBuffer[r])return!1;return!0}},function(t){t.exports={"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}},function(t,e,n){var r=n(30),i=n(3).Buffer;function a(t){var e=i.allocUnsafe(4);return e.writeUInt32BE(t,0),e}t.exports=function(t,e){for(var n,o=i.alloc(0),s=0;o.length<e;)n=a(s++),o=i.concat([o,r("sha1").update(t).update(n).digest()]);return o.slice(0,e)}},function(t,e){t.exports=function(t,e){for(var n=t.length,r=-1;++r<n;)t[r]^=e[r];return t}},function(t,e,n){var r=n(5),i=n(3).Buffer;t.exports=function(t,e){return i.from(t.toRed(r.mont(e.modulus)).redPow(new r(e.publicExponent)).fromRed().toArray())}},,,,,,,,,,,,,,,,function(t,e,n){var r,i,a;i=[e],void 0===(a="function"==typeof(r=function(t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=class{constructor(){var t=n(252);this.T=t}get CoreTensor(){return this.T}}})?r.apply(e,i):r)||(t.exports=a)},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,a,o,s,u=1,c={},l=!1,f=t.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(t);h=h&&h.setTimeout?h:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){d(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((a=new MessageChannel).port1.onmessage=function(t){d(t.data)},r=function(t){a.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){d(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(d,0,t)}:(o="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(o)&&d(+e.data.slice(o.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(o+e,"*")}),h.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return c[u]=i,r(u),u++},h.clearImmediate=p}function p(t){delete c[t]}function d(t){if(l)setTimeout(d,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{p(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(11),n(14))},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=c(t),r=n[0],o=n[1],s=new a(function(t,e,n){return 3*(e+n)/4-n}(0,r,o)),u=0,l=o>0?r-4:r,f=0;f<l;f+=4)e=i[t.charCodeAt(f)]<<18|i[t.charCodeAt(f+1)]<<12|i[t.charCodeAt(f+2)]<<6|i[t.charCodeAt(f+3)],s[u++]=e>>16&255,s[u++]=e>>8&255,s[u++]=255&e;2===o&&(e=i[t.charCodeAt(f)]<<2|i[t.charCodeAt(f+1)]>>4,s[u++]=255&e);1===o&&(e=i[t.charCodeAt(f)]<<10|i[t.charCodeAt(f+1)]<<4|i[t.charCodeAt(f+2)]>>2,s[u++]=e>>8&255,s[u++]=255&e);return s},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,a=[],o=0,s=n-i;o<s;o+=16383)a.push(l(t,o,o+16383>s?s:o+16383));1===i?(e=t[n-1],a.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],a.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return a.join("")};for(var r=[],i=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=o.length;s<u;++s)r[s]=o[s],i[o.charCodeAt(s)]=s;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var i,a,o=[],s=e;s<n;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),o.push(r[(a=i)>>18&63]+r[a>>12&63]+r[a>>6&63]+r[63&a]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var a,o,s=8*i-r-1,u=(1<<s)-1,c=u>>1,l=-7,f=n?i-1:0,h=n?-1:1,p=t[e+f];for(f+=h,a=p&(1<<-l)-1,p>>=-l,l+=s;l>0;a=256*a+t[e+f],f+=h,l-=8);for(o=a&(1<<-l)-1,a>>=-l,l+=r;l>0;o=256*o+t[e+f],f+=h,l-=8);if(0===a)a=1-c;else{if(a===u)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,r),a-=c}return(p?-1:1)*o*Math.pow(2,a-r)},e.write=function(t,e,n,r,i,a){var o,s,u,c=8*a-i-1,l=(1<<c)-1,f=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:a-1,d=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,o=l):(o=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-o))<1&&(o--,u*=2),(e+=o+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(o++,u/=2),o+f>=l?(s=0,o=l):o+f>=1?(s=(e*u-1)*Math.pow(2,i),o+=f):(s=e*Math.pow(2,f-1)*Math.pow(2,i),o=0));i>=8;t[n+p]=255&s,p+=d,s/=256,i-=8);for(o=o<<i|s,c+=i;c>0;t[n+p]=255&o,p+=d,o/=256,c-=8);t[n+p-d]|=128*m}},function(t,e){},function(t,e,n){"use strict";var r=n(3).Buffer,i=n(141);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e,n,i,a=r.allocUnsafe(t>>>0),o=this.head,s=0;o;)e=o.data,n=a,i=s,e.copy(n,i),s+=o.data.length,o=o.next;return a},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(11))},function(t,e,n){"use strict";t.exports=a;var r=n(90),i=n(31);function a(t){if(!(this instanceof a))return new a(t);r.call(this,t)}i.inherits=n(2),i.inherits(a,r),a.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(60)},function(t,e,n){t.exports=n(21)},function(t,e,n){t.exports=n(59).Transform},function(t,e,n){t.exports=n(59).PassThrough},function(t,e,n){var r=n(2),i=n(23),a=n(3).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function u(){this.init(),this._w=s,i.call(this,64,56)}function c(t){return t<<30|t>>>2}function l(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(u,i),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var e,n=this._w,r=0|this._a,i=0|this._b,a=0|this._c,s=0|this._d,u=0|this._e,f=0;f<16;++f)n[f]=t.readInt32BE(4*f);for(;f<80;++f)n[f]=n[f-3]^n[f-8]^n[f-14]^n[f-16];for(var h=0;h<80;++h){var p=~~(h/20),d=0|((e=r)<<5|e>>>27)+l(p,i,a,s)+u+n[h]+o[p];u=s,s=a,a=c(i),i=r,r=d}this._a=r+this._a|0,this._b=i+this._b|0,this._c=a+this._c|0,this._d=s+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=a.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},function(t,e,n){var r=n(2),i=n(23),a=n(3).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function u(){this.init(),this._w=s,i.call(this,64,56)}function c(t){return t<<5|t>>>27}function l(t){return t<<30|t>>>2}function f(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(u,i),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var e,n=this._w,r=0|this._a,i=0|this._b,a=0|this._c,s=0|this._d,u=0|this._e,h=0;h<16;++h)n[h]=t.readInt32BE(4*h);for(;h<80;++h)n[h]=(e=n[h-3]^n[h-8]^n[h-14]^n[h-16])<<1|e>>>31;for(var p=0;p<80;++p){var d=~~(p/20),m=c(r)+f(d,i,a,s)+u+n[p]+o[d]|0;u=s,s=a,a=l(i),i=r,r=m}this._a=r+this._a|0,this._b=i+this._b|0,this._c=a+this._c|0,this._d=s+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=a.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},function(t,e,n){var r=n(2),i=n(91),a=n(23),o=n(3).Buffer,s=new Array(64);function u(){this.init(),this._w=s,a.call(this,64,56)}r(u,i),u.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},u.prototype._hash=function(){var t=o.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=u},function(t,e,n){var r=n(2),i=n(92),a=n(23),o=n(3).Buffer,s=new Array(160);function u(){this.init(),this._w=s,a.call(this,128,112)}r(u,i),u.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},u.prototype._hash=function(){var t=o.allocUnsafe(48);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),t},t.exports=u},function(t,e,n){"use strict";var r=n(2),i=n(3).Buffer,a=n(18),o=i.alloc(128),s=64;function u(t,e){a.call(this,"digest"),"string"==typeof e&&(e=i.from(e)),this._alg=t,this._key=e,e.length>s?e=t(e):e.length<s&&(e=i.concat([e,o],s));for(var n=this._ipad=i.allocUnsafe(s),r=this._opad=i.allocUnsafe(s),u=0;u<s;u++)n[u]=54^e[u],r[u]=92^e[u];this._hash=[n]}r(u,a),u.prototype._update=function(t){this._hash.push(t)},u.prototype._final=function(){var t=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,t]))},t.exports=u},function(t,e,n){t.exports=n(95)},function(t,e,n){(function(e,r){var i,a=n(97),o=n(98),s=n(99),u=n(3).Buffer,c=e.crypto&&e.crypto.subtle,l={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},f=[];function h(t,e,n,r,i){return c.importKey("raw",t,{name:"PBKDF2"},!1,["deriveBits"]).then(function(t){return c.deriveBits({name:"PBKDF2",salt:e,iterations:n,hash:{name:i}},t,r<<3)}).then(function(t){return u.from(t)})}t.exports=function(t,n,p,d,m,g){"function"==typeof m&&(g=m,m=void 0);var y=l[(m=m||"sha1").toLowerCase()];if(!y||"function"!=typeof e.Promise)return r.nextTick(function(){var e;try{e=s(t,n,p,d,m)}catch(t){return g(t)}g(null,e)});if(a(t,n,p,d),"function"!=typeof g)throw new Error("No callback provided to pbkdf2");u.isBuffer(t)||(t=u.from(t,o)),u.isBuffer(n)||(n=u.from(n,o)),function(t,e){t.then(function(t){r.nextTick(function(){e(null,t)})},function(t){r.nextTick(function(){e(t)})})}(function(t){if(e.process&&!e.process.browser)return Promise.resolve(!1);if(!c||!c.importKey||!c.deriveBits)return Promise.resolve(!1);if(void 0!==f[t])return f[t];var n=h(i=i||u.alloc(8),i,10,128,t).then(function(){return!0}).catch(function(){return!1});return f[t]=n,n}(y).then(function(e){return e?h(t,n,p,d,y):s(t,n,p,d,m)}),g)}}).call(this,n(11),n(14))},function(t,e,n){var r=n(156),i=n(64),a=n(65),o=n(171),s=n(44);function u(t,e,n){if(t=t.toLowerCase(),a[t])return i.createCipheriv(t,e,n);if(o[t])return new r({key:e,iv:n,mode:t});throw new TypeError("invalid suite type")}function c(t,e,n){if(t=t.toLowerCase(),a[t])return i.createDecipheriv(t,e,n);if(o[t])return new r({key:e,iv:n,mode:t,decrypt:!0});throw new TypeError("invalid suite type")}e.createCipher=e.Cipher=function(t,e){var n,r;if(t=t.toLowerCase(),a[t])n=a[t].key,r=a[t].iv;else{if(!o[t])throw new TypeError("invalid suite type");n=8*o[t].key,r=o[t].iv}var i=s(e,!1,n,r);return u(t,i.key,i.iv)},e.createCipheriv=e.Cipheriv=u,e.createDecipher=e.Decipher=function(t,e){var n,r;if(t=t.toLowerCase(),a[t])n=a[t].key,r=a[t].iv;else{if(!o[t])throw new TypeError("invalid suite type");n=8*o[t].key,r=o[t].iv}var i=s(e,!1,n,r);return c(t,i.key,i.iv)},e.createDecipheriv=e.Decipheriv=c,e.listCiphers=e.getCiphers=function(){return Object.keys(o).concat(i.getCiphers())}},function(t,e,n){var r=n(18),i=n(63),a=n(2),o=n(3).Buffer,s={"des-ede3-cbc":i.CBC.instantiate(i.EDE),"des-ede3":i.EDE,"des-ede-cbc":i.CBC.instantiate(i.EDE),"des-ede":i.EDE,"des-cbc":i.CBC.instantiate(i.DES),"des-ecb":i.DES};function u(t){r.call(this);var e,n=t.mode.toLowerCase(),i=s[n];e=t.decrypt?"decrypt":"encrypt";var a=t.key;o.isBuffer(a)||(a=o.from(a)),"des-ede"!==n&&"des-ede-cbc"!==n||(a=o.concat([a,a.slice(0,8)]));var u=t.iv;o.isBuffer(u)||(u=o.from(u)),this._des=i.create({key:a,iv:u,type:e})}s.des=s["des-cbc"],s.des3=s["des-ede3-cbc"],t.exports=u,a(u,r),u.prototype._update=function(t){return o.from(this._des.update(t))},u.prototype._final=function(){return o.from(this._des.final())}},function(t,e,n){"use strict";e.readUInt32BE=function(t,e){return(t[0+e]<<24|t[1+e]<<16|t[2+e]<<8|t[3+e])>>>0},e.writeUInt32BE=function(t,e,n){t[0+n]=e>>>24,t[1+n]=e>>>16&255,t[2+n]=e>>>8&255,t[3+n]=255&e},e.ip=function(t,e,n,r){for(var i=0,a=0,o=6;o>=0;o-=2){for(var s=0;s<=24;s+=8)i<<=1,i|=e>>>s+o&1;for(s=0;s<=24;s+=8)i<<=1,i|=t>>>s+o&1}for(o=6;o>=0;o-=2){for(s=1;s<=25;s+=8)a<<=1,a|=e>>>s+o&1;for(s=1;s<=25;s+=8)a<<=1,a|=t>>>s+o&1}n[r+0]=i>>>0,n[r+1]=a>>>0},e.rip=function(t,e,n,r){for(var i=0,a=0,o=0;o<4;o++)for(var s=24;s>=0;s-=8)i<<=1,i|=e>>>s+o&1,i<<=1,i|=t>>>s+o&1;for(o=4;o<8;o++)for(s=24;s>=0;s-=8)a<<=1,a|=e>>>s+o&1,a<<=1,a|=t>>>s+o&1;n[r+0]=i>>>0,n[r+1]=a>>>0},e.pc1=function(t,e,n,r){for(var i=0,a=0,o=7;o>=5;o--){for(var s=0;s<=24;s+=8)i<<=1,i|=e>>s+o&1;for(s=0;s<=24;s+=8)i<<=1,i|=t>>s+o&1}for(s=0;s<=24;s+=8)i<<=1,i|=e>>s+o&1;for(o=1;o<=3;o++){for(s=0;s<=24;s+=8)a<<=1,a|=e>>s+o&1;for(s=0;s<=24;s+=8)a<<=1,a|=t>>s+o&1}for(s=0;s<=24;s+=8)a<<=1,a|=t>>s+o&1;n[r+0]=i>>>0,n[r+1]=a>>>0},e.r28shl=function(t,e){return t<<e&268435455|t>>>28-e};var r=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];e.pc2=function(t,e,n,i){for(var a=0,o=0,s=r.length>>>1,u=0;u<s;u++)a<<=1,a|=t>>>r[u]&1;for(u=s;u<r.length;u++)o<<=1,o|=e>>>r[u]&1;n[i+0]=a>>>0,n[i+1]=o>>>0},e.expand=function(t,e,n){var r=0,i=0;r=(1&t)<<5|t>>>27;for(var a=23;a>=15;a-=4)r<<=6,r|=t>>>a&63;for(a=11;a>=3;a-=4)i|=t>>>a&63,i<<=6;i|=(31&t)<<1|t>>>31,e[n+0]=r>>>0,e[n+1]=i>>>0};var i=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];e.substitute=function(t,e){for(var n=0,r=0;r<4;r++){n<<=4,n|=i[64*r+(t>>>18-6*r&63)]}for(r=0;r<4;r++){n<<=4,n|=i[256+64*r+(e>>>18-6*r&63)]}return n>>>0};var a=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];e.permute=function(t){for(var e=0,n=0;n<a.length;n++)e<<=1,e|=t>>>a[n]&1;return e>>>0},e.padSplit=function(t,e,n){for(var r=t.toString(2);r.length<e;)r="0"+r;for(var i=[],a=0;a<e;a+=n)i.push(r.slice(a,a+n));return i.join(" ")}},function(t,e,n){"use strict";var r=n(12);function i(t){this.options=t,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}t.exports=i,i.prototype._init=function(){},i.prototype.update=function(t){return 0===t.length?[]:"decrypt"===this.type?this._updateDecrypt(t):this._updateEncrypt(t)},i.prototype._buffer=function(t,e){for(var n=Math.min(this.buffer.length-this.bufferOff,t.length-e),r=0;r<n;r++)this.buffer[this.bufferOff+r]=t[e+r];return this.bufferOff+=n,n},i.prototype._flushBuffer=function(t,e){return this._update(this.buffer,0,t,e),this.bufferOff=0,this.blockSize},i.prototype._updateEncrypt=function(t){var e=0,n=0,r=(this.bufferOff+t.length)/this.blockSize|0,i=new Array(r*this.blockSize);0!==this.bufferOff&&(e+=this._buffer(t,e),this.bufferOff===this.buffer.length&&(n+=this._flushBuffer(i,n)));for(var a=t.length-(t.length-e)%this.blockSize;e<a;e+=this.blockSize)this._update(t,e,i,n),n+=this.blockSize;for(;e<t.length;e++,this.bufferOff++)this.buffer[this.bufferOff]=t[e];return i},i.prototype._updateDecrypt=function(t){for(var e=0,n=0,r=Math.ceil((this.bufferOff+t.length)/this.blockSize)-1,i=new Array(r*this.blockSize);r>0;r--)e+=this._buffer(t,e),n+=this._flushBuffer(i,n);return e+=this._buffer(t,e),i},i.prototype.final=function(t){var e,n;return t&&(e=this.update(t)),n="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),e?e.concat(n):n},i.prototype._pad=function(t,e){if(0===e)return!1;for(;e<t.length;)t[e++]=0;return!0},i.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var t=new Array(this.blockSize);return this._update(this.buffer,0,t,0),t},i.prototype._unpad=function(t){return t},i.prototype._finalDecrypt=function(){r.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var t=new Array(this.blockSize);return this._flushBuffer(t,0),this._unpad(t)}},function(t,e,n){"use strict";var r=n(12),i=n(2),a=n(63),o=a.utils,s=a.Cipher;function u(){this.tmp=new Array(2),this.keys=null}function c(t){s.call(this,t);var e=new u;this._desState=e,this.deriveKeys(e,t.key)}i(c,s),t.exports=c,c.create=function(t){return new c(t)};var l=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];c.prototype.deriveKeys=function(t,e){t.keys=new Array(32),r.equal(e.length,this.blockSize,"Invalid key length");var n=o.readUInt32BE(e,0),i=o.readUInt32BE(e,4);o.pc1(n,i,t.tmp,0),n=t.tmp[0],i=t.tmp[1];for(var a=0;a<t.keys.length;a+=2){var s=l[a>>>1];n=o.r28shl(n,s),i=o.r28shl(i,s),o.pc2(n,i,t.keys,a)}},c.prototype._update=function(t,e,n,r){var i=this._desState,a=o.readUInt32BE(t,e),s=o.readUInt32BE(t,e+4);o.ip(a,s,i.tmp,0),a=i.tmp[0],s=i.tmp[1],"encrypt"===this.type?this._encrypt(i,a,s,i.tmp,0):this._decrypt(i,a,s,i.tmp,0),a=i.tmp[0],s=i.tmp[1],o.writeUInt32BE(n,a,r),o.writeUInt32BE(n,s,r+4)},c.prototype._pad=function(t,e){for(var n=t.length-e,r=e;r<t.length;r++)t[r]=n;return!0},c.prototype._unpad=function(t){for(var e=t[t.length-1],n=t.length-e;n<t.length;n++)r.equal(t[n],e);return t.slice(0,t.length-e)},c.prototype._encrypt=function(t,e,n,r,i){for(var a=e,s=n,u=0;u<t.keys.length;u+=2){var c=t.keys[u],l=t.keys[u+1];o.expand(s,t.tmp,0),c^=t.tmp[0],l^=t.tmp[1];var f=o.substitute(c,l),h=s;s=(a^o.permute(f))>>>0,a=h}o.rip(s,a,r,i)},c.prototype._decrypt=function(t,e,n,r,i){for(var a=n,s=e,u=t.keys.length-2;u>=0;u-=2){var c=t.keys[u],l=t.keys[u+1];o.expand(a,t.tmp,0),c^=t.tmp[0],l^=t.tmp[1];var f=o.substitute(c,l),h=a;a=(s^o.permute(f))>>>0,s=h}o.rip(a,s,r,i)}},function(t,e,n){"use strict";var r=n(12),i=n(2),a={};function o(t){r.equal(t.length,8,"Invalid IV length"),this.iv=new Array(8);for(var e=0;e<this.iv.length;e++)this.iv[e]=t[e]}e.instantiate=function(t){function e(e){t.call(this,e),this._cbcInit()}i(e,t);for(var n=Object.keys(a),r=0;r<n.length;r++){var o=n[r];e.prototype[o]=a[o]}return e.create=function(t){return new e(t)},e},a._cbcInit=function(){var t=new o(this.options.iv);this._cbcState=t},a._update=function(t,e,n,r){var i=this._cbcState,a=this.constructor.super_.prototype,o=i.iv;if("encrypt"===this.type){for(var s=0;s<this.blockSize;s++)o[s]^=t[e+s];a._update.call(this,o,0,n,r);for(s=0;s<this.blockSize;s++)o[s]=n[r+s]}else{a._update.call(this,t,e,n,r);for(s=0;s<this.blockSize;s++)n[r+s]^=o[s];for(s=0;s<this.blockSize;s++)o[s]=t[e+s]}}},function(t,e,n){"use strict";var r=n(12),i=n(2),a=n(63),o=a.Cipher,s=a.DES;function u(t,e){r.equal(e.length,24,"Invalid key length");var n=e.slice(0,8),i=e.slice(8,16),a=e.slice(16,24);this.ciphers="encrypt"===t?[s.create({type:"encrypt",key:n}),s.create({type:"decrypt",key:i}),s.create({type:"encrypt",key:a})]:[s.create({type:"decrypt",key:a}),s.create({type:"encrypt",key:i}),s.create({type:"decrypt",key:n})]}function c(t){o.call(this,t);var e=new u(this.type,this.options.key);this._edeState=e}i(c,o),t.exports=c,c.create=function(t){return new c(t)},c.prototype._update=function(t,e,n,r){var i=this._edeState;i.ciphers[0]._update(t,e,n,r),i.ciphers[1]._update(n,r,n,r),i.ciphers[2]._update(n,r,n,r)},c.prototype._pad=s.prototype._pad,c.prototype._unpad=s.prototype._unpad},function(t,e,n){var r=n(65),i=n(103),a=n(3).Buffer,o=n(104),s=n(18),u=n(43),c=n(44);function l(t,e,n){s.call(this),this._cache=new h,this._cipher=new u.AES(e),this._prev=a.from(n),this._mode=t,this._autopadding=!0}n(2)(l,s),l.prototype._update=function(t){var e,n;this._cache.add(t);for(var r=[];e=this._cache.get();)n=this._mode.encrypt(this,e),r.push(n);return a.concat(r)};var f=a.alloc(16,16);function h(){this.cache=a.allocUnsafe(0)}function p(t,e,n){var s=r[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof e&&(e=a.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);if("string"==typeof n&&(n=a.from(n)),"GCM"!==s.mode&&n.length!==s.iv)throw new TypeError("invalid iv length "+n.length);return"stream"===s.type?new o(s.module,e,n):"auth"===s.type?new i(s.module,e,n):new l(s.module,e,n)}l.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return t=this._mode.encrypt(this,t),this._cipher.scrub(),t;if(!t.equals(f))throw this._cipher.scrub(),new Error("data not multiple of block length")},l.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},h.prototype.add=function(t){this.cache=a.concat([this.cache,t])},h.prototype.get=function(){if(this.cache.length>15){var t=this.cache.slice(0,16);return this.cache=this.cache.slice(16),t}return null},h.prototype.flush=function(){for(var t=16-this.cache.length,e=a.allocUnsafe(t),n=-1;++n<t;)e.writeUInt8(t,n);return a.concat([this.cache,e])},e.createCipheriv=p,e.createCipher=function(t,e){var n=r[t.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var i=c(e,!1,n.key,n.iv);return p(t,i.key,i.iv)}},function(t,e){e.encrypt=function(t,e){return t._cipher.encryptBlock(e)},e.decrypt=function(t,e){return t._cipher.decryptBlock(e)}},function(t,e,n){var r=n(32);e.encrypt=function(t,e){var n=r(e,t._prev);return t._prev=t._cipher.encryptBlock(n),t._prev},e.decrypt=function(t,e){var n=t._prev;t._prev=e;var i=t._cipher.decryptBlock(e);return r(i,n)}},function(t,e,n){var r=n(3).Buffer,i=n(32);function a(t,e,n){var a=e.length,o=i(e,t._cache);return t._cache=t._cache.slice(a),t._prev=r.concat([t._prev,n?e:o]),o}e.encrypt=function(t,e,n){for(var i,o=r.allocUnsafe(0);e.length;){if(0===t._cache.length&&(t._cache=t._cipher.encryptBlock(t._prev),t._prev=r.allocUnsafe(0)),!(t._cache.length<=e.length)){o=r.concat([o,a(t,e,n)]);break}i=t._cache.length,o=r.concat([o,a(t,e.slice(0,i),n)]),e=e.slice(i)}return o}},function(t,e,n){var r=n(3).Buffer;function i(t,e,n){var i=t._cipher.encryptBlock(t._prev)[0]^e;return t._prev=r.concat([t._prev.slice(1),r.from([n?e:i])]),i}e.encrypt=function(t,e,n){for(var a=e.length,o=r.allocUnsafe(a),s=-1;++s<a;)o[s]=i(t,e[s],n);return o}},function(t,e,n){var r=n(3).Buffer;function i(t,e,n){for(var r,i,o=-1,s=0;++o<8;)r=e&1<<7-o?128:0,s+=(128&(i=t._cipher.encryptBlock(t._prev)[0]^r))>>o%8,t._prev=a(t._prev,n?r:i);return s}function a(t,e){var n=t.length,i=-1,a=r.allocUnsafe(t.length);for(t=r.concat([t,r.from([e])]);++i<n;)a[i]=t[i]<<1|t[i+1]>>7;return a}e.encrypt=function(t,e,n){for(var a=e.length,o=r.allocUnsafe(a),s=-1;++s<a;)o[s]=i(t,e[s],n);return o}},function(t,e,n){(function(t){var r=n(32);function i(t){return t._prev=t._cipher.encryptBlock(t._prev),t._prev}e.encrypt=function(e,n){for(;e._cache.length<n.length;)e._cache=t.concat([e._cache,i(e)]);var a=e._cache.slice(0,n.length);return e._cache=e._cache.slice(n.length),r(n,a)}}).call(this,n(4).Buffer)},function(t,e,n){var r=n(3).Buffer,i=r.alloc(16,0);function a(t){var e=r.allocUnsafe(16);return e.writeUInt32BE(t[0]>>>0,0),e.writeUInt32BE(t[1]>>>0,4),e.writeUInt32BE(t[2]>>>0,8),e.writeUInt32BE(t[3]>>>0,12),e}function o(t){this.h=t,this.state=r.alloc(16,0),this.cache=r.allocUnsafe(0)}o.prototype.ghash=function(t){for(var e=-1;++e<t.length;)this.state[e]^=t[e];this._multiply()},o.prototype._multiply=function(){for(var t,e,n,r=[(t=this.h).readUInt32BE(0),t.readUInt32BE(4),t.readUInt32BE(8),t.readUInt32BE(12)],i=[0,0,0,0],o=-1;++o<128;){for(0!=(this.state[~~(o/8)]&1<<7-o%8)&&(i[0]^=r[0],i[1]^=r[1],i[2]^=r[2],i[3]^=r[3]),n=0!=(1&r[3]),e=3;e>0;e--)r[e]=r[e]>>>1|(1&r[e-1])<<31;r[0]=r[0]>>>1,n&&(r[0]=r[0]^225<<24)}this.state=a(i)},o.prototype.update=function(t){var e;for(this.cache=r.concat([this.cache,t]);this.cache.length>=16;)e=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(e)},o.prototype.final=function(t,e){return this.cache.length&&this.ghash(r.concat([this.cache,i],16)),this.ghash(a([0,t,0,e])),this.state},t.exports=o},function(t,e,n){var r=n(103),i=n(3).Buffer,a=n(65),o=n(104),s=n(18),u=n(43),c=n(44);function l(t,e,n){s.call(this),this._cache=new f,this._last=void 0,this._cipher=new u.AES(e),this._prev=i.from(n),this._mode=t,this._autopadding=!0}function f(){this.cache=i.allocUnsafe(0)}function h(t,e,n){var s=a[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof n&&(n=i.from(n)),"GCM"!==s.mode&&n.length!==s.iv)throw new TypeError("invalid iv length "+n.length);if("string"==typeof e&&(e=i.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);return"stream"===s.type?new o(s.module,e,n,!0):"auth"===s.type?new r(s.module,e,n,!0):new l(s.module,e,n)}n(2)(l,s),l.prototype._update=function(t){var e,n;this._cache.add(t);for(var r=[];e=this._cache.get(this._autopadding);)n=this._mode.decrypt(this,e),r.push(n);return i.concat(r)},l.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return function(t){var e=t[15];if(e<1||e>16)throw new Error("unable to decrypt data");var n=-1;for(;++n<e;)if(t[n+(16-e)]!==e)throw new Error("unable to decrypt data");if(16===e)return;return t.slice(0,16-e)}(this._mode.decrypt(this,t));if(t)throw new Error("data not multiple of block length")},l.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},f.prototype.add=function(t){this.cache=i.concat([this.cache,t])},f.prototype.get=function(t){var e;if(t){if(this.cache.length>16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e}else if(this.cache.length>=16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e;return null},f.prototype.flush=function(){if(this.cache.length)return this.cache},e.createDecipher=function(t,e){var n=a[t.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var r=c(e,!1,n.key,n.iv);return h(t,r.key,r.iv)},e.createDecipheriv=h},function(t,e){e["des-ecb"]={key:8,iv:0},e["des-cbc"]=e.des={key:8,iv:8},e["des-ede3-cbc"]=e.des3={key:24,iv:8},e["des-ede3"]={key:24,iv:0},e["des-ede-cbc"]={key:16,iv:8},e["des-ede"]={key:16,iv:0}},function(t,e,n){(function(t){var r=n(105),i=n(176),a=n(177);var o={binary:!0,hex:!0,base64:!0};e.DiffieHellmanGroup=e.createDiffieHellmanGroup=e.getDiffieHellman=function(e){var n=new t(i[e].prime,"hex"),r=new t(i[e].gen,"hex");return new a(n,r)},e.createDiffieHellman=e.DiffieHellman=function e(n,i,s,u){return t.isBuffer(i)||void 0===o[i]?e(n,"binary",i,s):(i=i||"binary",u=u||"binary",s=s||new t([2]),t.isBuffer(s)||(s=new t(s,u)),"number"==typeof n?new a(r(n,s),s,!0):(t.isBuffer(n)||(n=new t(n,i)),new a(n,s,!0)))}}).call(this,n(4).Buffer)},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){},function(t,e){},function(t){t.exports={modp1:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},modp2:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},modp5:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},modp14:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},modp15:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},modp16:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},modp17:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},modp18:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}},function(t,e,n){(function(e){var r=n(5),i=new(n(106)),a=new r(24),o=new r(11),s=new r(10),u=new r(3),c=new r(7),l=n(105),f=n(22);function h(t,n){return n=n||"utf8",e.isBuffer(t)||(t=new e(t,n)),this._pub=new r(t),this}function p(t,n){return n=n||"utf8",e.isBuffer(t)||(t=new e(t,n)),this._priv=new r(t),this}t.exports=m;var d={};function m(t,e,n){this.setGenerator(e),this.__prime=new r(t),this._prime=r.mont(this.__prime),this._primeLen=t.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,n?(this.setPublicKey=h,this.setPrivateKey=p):this._primeCode=8}function g(t,n){var r=new e(t.toArray());return n?r.toString(n):r}Object.defineProperty(m.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=function(t,e){var n=e.toString("hex"),r=[n,t.toString(16)].join("_");if(r in d)return d[r];var f,h=0;if(t.isEven()||!l.simpleSieve||!l.fermatTest(t)||!i.test(t))return h+=1,h+="02"===n||"05"===n?8:4,d[r]=h,h;switch(i.test(t.shrn(1))||(h+=2),n){case"02":t.mod(a).cmp(o)&&(h+=8);break;case"05":(f=t.mod(s)).cmp(u)&&f.cmp(c)&&(h+=8);break;default:h+=4}return d[r]=h,h}(this.__prime,this.__gen)),this._primeCode}}),m.prototype.generateKeys=function(){return this._priv||(this._priv=new r(f(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},m.prototype.computeSecret=function(t){var n=(t=(t=new r(t)).toRed(this._prime)).redPow(this._priv).fromRed(),i=new e(n.toArray()),a=this.getPrime();if(i.length<a.length){var o=new e(a.length-i.length);o.fill(0),i=e.concat([o,i])}return i},m.prototype.getPublicKey=function(t){return g(this._pub,t)},m.prototype.getPrivateKey=function(t){return g(this._priv,t)},m.prototype.getPrime=function(t){return g(this.__prime,t)},m.prototype.getGenerator=function(t){return g(this._gen,t)},m.prototype.setGenerator=function(t,n){return n=n||"utf8",e.isBuffer(t)||(t=new e(t,n)),this.__gen=t,this._gen=new r(t),this}}).call(this,n(4).Buffer)},function(t,e,n){(function(e){var r=n(30),i=n(57),a=n(2),o=n(179),s=n(215),u=n(95);function c(t){i.Writable.call(this);var e=u[t];if(!e)throw new Error("Unknown message digest");this._hashType=e.hash,this._hash=r(e.hash),this._tag=e.id,this._signType=e.sign}function l(t){i.Writable.call(this);var e=u[t];if(!e)throw new Error("Unknown message digest");this._hash=r(e.hash),this._tag=e.id,this._signType=e.sign}function f(t){return new c(t)}function h(t){return new l(t)}Object.keys(u).forEach(function(t){u[t].id=new e(u[t].id,"hex"),u[t.toLowerCase()]=u[t]}),a(c,i.Writable),c.prototype._write=function(t,e,n){this._hash.update(t),n()},c.prototype.update=function(t,n){return"string"==typeof t&&(t=new e(t,n)),this._hash.update(t),this},c.prototype.sign=function(t,e){this.end();var n=this._hash.digest(),r=o(n,t,this._hashType,this._signType,this._tag);return e?r.toString(e):r},a(l,i.Writable),l.prototype._write=function(t,e,n){this._hash.update(t),n()},l.prototype.update=function(t,n){return"string"==typeof t&&(t=new e(t,n)),this._hash.update(t),this},l.prototype.verify=function(t,n,r){"string"==typeof n&&(n=new e(n,r)),this.end();var i=this._hash.digest();return s(n,i,t,this._signType,this._tag)},t.exports={Sign:f,Verify:h,createSign:f,createVerify:h}}).call(this,n(4).Buffer)},function(t,e,n){(function(e){var r=n(93),i=n(66),a=n(8).ec,o=n(5),s=n(46),u=n(116);function c(t,n,i,a){if((t=new e(t.toArray())).length<n.byteLength()){var o=new e(n.byteLength()-t.length);o.fill(0),t=e.concat([o,t])}var s=i.length,u=function(t,n){t=(t=l(t,n)).mod(n);var r=new e(t.toArray());if(r.length<n.byteLength()){var i=new e(n.byteLength()-r.length);i.fill(0),r=e.concat([i,r])}return r}(i,n),c=new e(s);c.fill(1);var f=new e(s);return f.fill(0),f=r(a,f).update(c).update(new e([0])).update(t).update(u).digest(),c=r(a,f).update(c).digest(),{k:f=r(a,f).update(c).update(new e([1])).update(t).update(u).digest(),v:c=r(a,f).update(c).digest()}}function l(t,e){var n=new o(t),r=(t.length<<3)-e.bitLength();return r>0&&n.ishrn(r),n}function f(t,n,i){var a,o;do{for(a=new e(0);8*a.length<t.bitLength();)n.v=r(i,n.k).update(n.v).digest(),a=e.concat([a,n.v]);o=l(a,t),n.k=r(i,n.k).update(n.v).update(new e([0])).digest(),n.v=r(i,n.k).update(n.v).digest()}while(-1!==o.cmp(t));return o}function h(t,e,n,r){return t.toRed(o.mont(n)).redPow(e).fromRed().mod(r)}t.exports=function(t,n,r,p,d){var m=s(n);if(m.curve){if("ecdsa"!==p&&"ecdsa/rsa"!==p)throw new Error("wrong private key type");return function(t,n){var r=u[n.curve.join(".")];if(!r)throw new Error("unknown curve "+n.curve.join("."));var i=new a(r).keyFromPrivate(n.privateKey).sign(t);return new e(i.toDER())}(t,m)}if("dsa"===m.type){if("dsa"!==p)throw new Error("wrong private key type");return function(t,n,r){for(var i,a=n.params.priv_key,s=n.params.p,u=n.params.q,p=n.params.g,d=new o(0),m=l(t,u).mod(u),g=!1,y=c(a,u,t,r);!1===g;)i=f(u,y,r),d=h(p,i,s,u),0===(g=i.invm(u).imul(m.add(a.mul(d))).mod(u)).cmpn(0)&&(g=!1,d=new o(0));return function(t,n){t=t.toArray(),n=n.toArray(),128&t[0]&&(t=[0].concat(t)),128&n[0]&&(n=[0].concat(n));var r=[48,t.length+n.length+4,2,t.length];return r=r.concat(t,[2,n.length],n),new e(r)}(d,g)}(t,m,r)}if("rsa"!==p&&"ecdsa/rsa"!==p)throw new Error("wrong private key type");t=e.concat([d,t]);for(var g=m.modulus.byteLength(),y=[0,1];t.length+y.length+1<g;)y.push(255);y.push(0);for(var v=-1;++v<t.length;)y.push(t[v]);return i(y,m)},t.exports.getKey=c,t.exports.makeKey=f}).call(this,n(4).Buffer)},function(t){t.exports={name:"elliptic",version:"6.4.1",description:"EC cryptography",main:"lib/elliptic.js",files:["lib"],scripts:{jscs:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",jshint:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",lint:"npm run jscs && npm run jshint",unit:"istanbul test _mocha --reporter=spec test/index.js",test:"npm run lint && npm run unit",version:"grunt dist && git add dist/"},repository:{type:"git",url:"git@github.com:indutny/elliptic"},keywords:["EC","Elliptic","curve","Cryptography"],author:"Fedor Indutny <fedor@indutny.com>",license:"MIT",bugs:{url:"https://github.com/indutny/elliptic/issues"},homepage:"https://github.com/indutny/elliptic",devDependencies:{brfs:"^1.4.3",coveralls:"^2.11.3",grunt:"^0.4.5","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^8.6.2",istanbul:"^0.4.2",jscs:"^2.9.0",jshint:"^2.6.0",mocha:"^2.1.0"},dependencies:{"bn.js":"^4.4.0",brorand:"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0",inherits:"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"}}},function(t,e,n){"use strict";var r=e,i=n(5),a=n(12),o=n(108);r.assert=a,r.toArray=o.toArray,r.zero2=o.zero2,r.toHex=o.toHex,r.encode=o.encode,r.getNAF=function(t,e){for(var n=[],r=1<<e+1,i=t.clone();i.cmpn(1)>=0;){var a;if(i.isOdd()){var o=i.andln(r-1);a=o>(r>>1)-1?(r>>1)-o:o,i.isubn(a)}else a=0;n.push(a);for(var s=0!==i.cmpn(0)&&0===i.andln(r-1)?e+1:1,u=1;u<s;u++)n.push(0);i.iushrn(s)}return n},r.getJSF=function(t,e){var n=[[],[]];t=t.clone(),e=e.clone();for(var r=0,i=0;t.cmpn(-r)>0||e.cmpn(-i)>0;){var a,o,s,u=t.andln(3)+r&3,c=e.andln(3)+i&3;3===u&&(u=-1),3===c&&(c=-1),a=0==(1&u)?0:3!=(s=t.andln(7)+r&7)&&5!==s||2!==c?u:-u,n[0].push(a),o=0==(1&c)?0:3!=(s=e.andln(7)+i&7)&&5!==s||2!==u?c:-c,n[1].push(o),2*r===a+1&&(r=1-r),2*i===o+1&&(i=1-i),t.iushrn(1),e.iushrn(1)}return n},r.cachedProperty=function(t,e,n){var r="_"+e;t.prototype[e]=function(){return void 0!==this[r]?this[r]:this[r]=n.call(this)}},r.parseBytes=function(t){return"string"==typeof t?r.toArray(t,"hex"):t},r.intFromLE=function(t){return new i(t,"hex","le")}},function(t,e,n){"use strict";var r=n(5),i=n(8).utils,a=i.getNAF,o=i.getJSF,s=i.assert;function u(t,e){this.type=t,this.p=new r(e.p,16),this.red=e.prime?r.red(e.prime):r.mont(this.p),this.zero=new r(0).toRed(this.red),this.one=new r(1).toRed(this.red),this.two=new r(2).toRed(this.red),this.n=e.n&&new r(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var n=this.n&&this.p.div(this.n);!n||n.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function c(t,e){this.curve=t,this.type=e,this.precomputed=null}t.exports=u,u.prototype.point=function(){throw new Error("Not implemented")},u.prototype.validate=function(){throw new Error("Not implemented")},u.prototype._fixedNafMul=function(t,e){s(t.precomputed);var n=t._getDoubles(),r=a(e,1),i=(1<<n.step+1)-(n.step%2==0?2:1);i/=3;for(var o=[],u=0;u<r.length;u+=n.step){var c=0;for(e=u+n.step-1;e>=u;e--)c=(c<<1)+r[e];o.push(c)}for(var l=this.jpoint(null,null,null),f=this.jpoint(null,null,null),h=i;h>0;h--){for(u=0;u<o.length;u++){(c=o[u])===h?f=f.mixedAdd(n.points[u]):c===-h&&(f=f.mixedAdd(n.points[u].neg()))}l=l.add(f)}return l.toP()},u.prototype._wnafMul=function(t,e){var n=4,r=t._getNAFPoints(n);n=r.wnd;for(var i=r.points,o=a(e,n),u=this.jpoint(null,null,null),c=o.length-1;c>=0;c--){for(e=0;c>=0&&0===o[c];c--)e++;if(c>=0&&e++,u=u.dblp(e),c<0)break;var l=o[c];s(0!==l),u="affine"===t.type?l>0?u.mixedAdd(i[l-1>>1]):u.mixedAdd(i[-l-1>>1].neg()):l>0?u.add(i[l-1>>1]):u.add(i[-l-1>>1].neg())}return"affine"===t.type?u.toP():u},u.prototype._wnafMulAdd=function(t,e,n,r,i){for(var s=this._wnafT1,u=this._wnafT2,c=this._wnafT3,l=0,f=0;f<r;f++){var h=(N=e[f])._getNAFPoints(t);s[f]=h.wnd,u[f]=h.points}for(f=r-1;f>=1;f-=2){var p=f-1,d=f;if(1===s[p]&&1===s[d]){var m=[e[p],null,null,e[d]];0===e[p].y.cmp(e[d].y)?(m[1]=e[p].add(e[d]),m[2]=e[p].toJ().mixedAdd(e[d].neg())):0===e[p].y.cmp(e[d].y.redNeg())?(m[1]=e[p].toJ().mixedAdd(e[d]),m[2]=e[p].add(e[d].neg())):(m[1]=e[p].toJ().mixedAdd(e[d]),m[2]=e[p].toJ().mixedAdd(e[d].neg()));var g=[-3,-1,-5,-7,0,7,5,1,3],y=o(n[p],n[d]);l=Math.max(y[0].length,l),c[p]=new Array(l),c[d]=new Array(l);for(var v=0;v<l;v++){var b=0|y[0][v],w=0|y[1][v];c[p][v]=g[3*(b+1)+(w+1)],c[d][v]=0,u[p]=m}}else c[p]=a(n[p],s[p]),c[d]=a(n[d],s[d]),l=Math.max(c[p].length,l),l=Math.max(c[d].length,l)}var _=this.jpoint(null,null,null),x=this._wnafT4;for(f=l;f>=0;f--){for(var E=0;f>=0;){var S=!0;for(v=0;v<r;v++)x[v]=0|c[v][f],0!==x[v]&&(S=!1);if(!S)break;E++,f--}if(f>=0&&E++,_=_.dblp(E),f<0)break;for(v=0;v<r;v++){var N,I=x[v];0!==I&&(I>0?N=u[v][I-1>>1]:I<0&&(N=u[v][-I-1>>1].neg()),_="affine"===N.type?_.mixedAdd(N):_.add(N))}}for(f=0;f<r;f++)u[f]=null;return i?_:_.toP()},u.BasePoint=c,c.prototype.eq=function(){throw new Error("Not implemented")},c.prototype.validate=function(){return this.curve.validate(this)},u.prototype.decodePoint=function(t,e){t=i.toArray(t,e);var n=this.p.byteLength();if((4===t[0]||6===t[0]||7===t[0])&&t.length-1==2*n)return 6===t[0]?s(t[t.length-1]%2==0):7===t[0]&&s(t[t.length-1]%2==1),this.point(t.slice(1,1+n),t.slice(1+n,1+2*n));if((2===t[0]||3===t[0])&&t.length-1===n)return this.pointFromX(t.slice(1,1+n),3===t[0]);throw new Error("Unknown point format")},c.prototype.encodeCompressed=function(t){return this.encode(t,!0)},c.prototype._encode=function(t){var e=this.curve.p.byteLength(),n=this.getX().toArray("be",e);return t?[this.getY().isEven()?2:3].concat(n):[4].concat(n,this.getY().toArray("be",e))},c.prototype.encode=function(t,e){return i.encode(this._encode(e),t)},c.prototype.precompute=function(t){if(this.precomputed)return this;var e={doubles:null,naf:null,beta:null};return e.naf=this._getNAFPoints(8),e.doubles=this._getDoubles(4,t),e.beta=this._getBeta(),this.precomputed=e,this},c.prototype._hasDoubles=function(t){if(!this.precomputed)return!1;var e=this.precomputed.doubles;return!!e&&e.points.length>=Math.ceil((t.bitLength()+1)/e.step)},c.prototype._getDoubles=function(t,e){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var n=[this],r=this,i=0;i<e;i+=t){for(var a=0;a<t;a++)r=r.dbl();n.push(r)}return{step:t,points:n}},c.prototype._getNAFPoints=function(t){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var e=[this],n=(1<<t)-1,r=1===n?null:this.dbl(),i=1;i<n;i++)e[i]=e[i-1].add(r);return{wnd:t,points:e}},c.prototype._getBeta=function(){return null},c.prototype.dblp=function(t){for(var e=this,n=0;n<t;n++)e=e.dbl();return e}},function(t,e,n){"use strict";var r=n(45),i=n(8),a=n(5),o=n(2),s=r.base,u=i.utils.assert;function c(t){s.call(this,"short",t),this.a=new a(t.a,16).toRed(this.red),this.b=new a(t.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(t),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function l(t,e,n,r){s.BasePoint.call(this,t,"affine"),null===e&&null===n?(this.x=null,this.y=null,this.inf=!0):(this.x=new a(e,16),this.y=new a(n,16),r&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function f(t,e,n,r){s.BasePoint.call(this,t,"jacobian"),null===e&&null===n&&null===r?(this.x=this.curve.one,this.y=this.curve.one,this.z=new a(0)):(this.x=new a(e,16),this.y=new a(n,16),this.z=new a(r,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}o(c,s),t.exports=c,c.prototype._getEndomorphism=function(t){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var e,n;if(t.beta)e=new a(t.beta,16).toRed(this.red);else{var r=this._getEndoRoots(this.p);e=(e=r[0].cmp(r[1])<0?r[0]:r[1]).toRed(this.red)}if(t.lambda)n=new a(t.lambda,16);else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(e))?n=i[0]:(n=i[1],u(0===this.g.mul(n).x.cmp(this.g.x.redMul(e))))}return{beta:e,lambda:n,basis:t.basis?t.basis.map(function(t){return{a:new a(t.a,16),b:new a(t.b,16)}}):this._getEndoBasis(n)}}},c.prototype._getEndoRoots=function(t){var e=t===this.p?this.red:a.mont(t),n=new a(2).toRed(e).redInvm(),r=n.redNeg(),i=new a(3).toRed(e).redNeg().redSqrt().redMul(n);return[r.redAdd(i).fromRed(),r.redSub(i).fromRed()]},c.prototype._getEndoBasis=function(t){for(var e,n,r,i,o,s,u,c,l,f=this.n.ushrn(Math.floor(this.n.bitLength()/2)),h=t,p=this.n.clone(),d=new a(1),m=new a(0),g=new a(0),y=new a(1),v=0;0!==h.cmpn(0);){var b=p.div(h);c=p.sub(b.mul(h)),l=g.sub(b.mul(d));var w=y.sub(b.mul(m));if(!r&&c.cmp(f)<0)e=u.neg(),n=d,r=c.neg(),i=l;else if(r&&2==++v)break;u=c,p=h,h=c,g=d,d=l,y=m,m=w}o=c.neg(),s=l;var _=r.sqr().add(i.sqr());return o.sqr().add(s.sqr()).cmp(_)>=0&&(o=e,s=n),r.negative&&(r=r.neg(),i=i.neg()),o.negative&&(o=o.neg(),s=s.neg()),[{a:r,b:i},{a:o,b:s}]},c.prototype._endoSplit=function(t){var e=this.endo.basis,n=e[0],r=e[1],i=r.b.mul(t).divRound(this.n),a=n.b.neg().mul(t).divRound(this.n),o=i.mul(n.a),s=a.mul(r.a),u=i.mul(n.b),c=a.mul(r.b);return{k1:t.sub(o).sub(s),k2:u.add(c).neg()}},c.prototype.pointFromX=function(t,e){(t=new a(t,16)).red||(t=t.toRed(this.red));var n=t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b),r=n.redSqrt();if(0!==r.redSqr().redSub(n).cmp(this.zero))throw new Error("invalid point");var i=r.fromRed().isOdd();return(e&&!i||!e&&i)&&(r=r.redNeg()),this.point(t,r)},c.prototype.validate=function(t){if(t.inf)return!0;var e=t.x,n=t.y,r=this.a.redMul(e),i=e.redSqr().redMul(e).redIAdd(r).redIAdd(this.b);return 0===n.redSqr().redISub(i).cmpn(0)},c.prototype._endoWnafMulAdd=function(t,e,n){for(var r=this._endoWnafT1,i=this._endoWnafT2,a=0;a<t.length;a++){var o=this._endoSplit(e[a]),s=t[a],u=s._getBeta();o.k1.negative&&(o.k1.ineg(),s=s.neg(!0)),o.k2.negative&&(o.k2.ineg(),u=u.neg(!0)),r[2*a]=s,r[2*a+1]=u,i[2*a]=o.k1,i[2*a+1]=o.k2}for(var c=this._wnafMulAdd(1,r,i,2*a,n),l=0;l<2*a;l++)r[l]=null,i[l]=null;return c},o(l,s.BasePoint),c.prototype.point=function(t,e,n){return new l(this,t,e,n)},c.prototype.pointFromJSON=function(t,e){return l.fromJSON(this,t,e)},l.prototype._getBeta=function(){if(this.curve.endo){var t=this.precomputed;if(t&&t.beta)return t.beta;var e=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(t){var n=this.curve,r=function(t){return n.point(t.x.redMul(n.endo.beta),t.y)};t.beta=e,e.precomputed={beta:null,naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(r)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(r)}}}return e}},l.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},l.fromJSON=function(t,e,n){"string"==typeof e&&(e=JSON.parse(e));var r=t.point(e[0],e[1],n);if(!e[2])return r;function i(e){return t.point(e[0],e[1],n)}var a=e[2];return r.precomputed={beta:null,doubles:a.doubles&&{step:a.doubles.step,points:[r].concat(a.doubles.points.map(i))},naf:a.naf&&{wnd:a.naf.wnd,points:[r].concat(a.naf.points.map(i))}},r},l.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},l.prototype.isInfinity=function(){return this.inf},l.prototype.add=function(t){if(this.inf)return t;if(t.inf)return this;if(this.eq(t))return this.dbl();if(this.neg().eq(t))return this.curve.point(null,null);if(0===this.x.cmp(t.x))return this.curve.point(null,null);var e=this.y.redSub(t.y);0!==e.cmpn(0)&&(e=e.redMul(this.x.redSub(t.x).redInvm()));var n=e.redSqr().redISub(this.x).redISub(t.x),r=e.redMul(this.x.redSub(n)).redISub(this.y);return this.curve.point(n,r)},l.prototype.dbl=function(){if(this.inf)return this;var t=this.y.redAdd(this.y);if(0===t.cmpn(0))return this.curve.point(null,null);var e=this.curve.a,n=this.x.redSqr(),r=t.redInvm(),i=n.redAdd(n).redIAdd(n).redIAdd(e).redMul(r),a=i.redSqr().redISub(this.x.redAdd(this.x)),o=i.redMul(this.x.redSub(a)).redISub(this.y);return this.curve.point(a,o)},l.prototype.getX=function(){return this.x.fromRed()},l.prototype.getY=function(){return this.y.fromRed()},l.prototype.mul=function(t){return t=new a(t,16),this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve.endo?this.curve._endoWnafMulAdd([this],[t]):this.curve._wnafMul(this,t)},l.prototype.mulAdd=function(t,e,n){var r=[this,e],i=[t,n];return this.curve.endo?this.curve._endoWnafMulAdd(r,i):this.curve._wnafMulAdd(1,r,i,2)},l.prototype.jmulAdd=function(t,e,n){var r=[this,e],i=[t,n];return this.curve.endo?this.curve._endoWnafMulAdd(r,i,!0):this.curve._wnafMulAdd(1,r,i,2,!0)},l.prototype.eq=function(t){return this===t||this.inf===t.inf&&(this.inf||0===this.x.cmp(t.x)&&0===this.y.cmp(t.y))},l.prototype.neg=function(t){if(this.inf)return this;var e=this.curve.point(this.x,this.y.redNeg());if(t&&this.precomputed){var n=this.precomputed,r=function(t){return t.neg()};e.precomputed={naf:n.naf&&{wnd:n.naf.wnd,points:n.naf.points.map(r)},doubles:n.doubles&&{step:n.doubles.step,points:n.doubles.points.map(r)}}}return e},l.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},o(f,s.BasePoint),c.prototype.jpoint=function(t,e,n){return new f(this,t,e,n)},f.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var t=this.z.redInvm(),e=t.redSqr(),n=this.x.redMul(e),r=this.y.redMul(e).redMul(t);return this.curve.point(n,r)},f.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},f.prototype.add=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.z.redSqr(),n=this.z.redSqr(),r=this.x.redMul(e),i=t.x.redMul(n),a=this.y.redMul(e.redMul(t.z)),o=t.y.redMul(n.redMul(this.z)),s=r.redSub(i),u=a.redSub(o);if(0===s.cmpn(0))return 0!==u.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=s.redSqr(),l=c.redMul(s),f=r.redMul(c),h=u.redSqr().redIAdd(l).redISub(f).redISub(f),p=u.redMul(f.redISub(h)).redISub(a.redMul(l)),d=this.z.redMul(t.z).redMul(s);return this.curve.jpoint(h,p,d)},f.prototype.mixedAdd=function(t){if(this.isInfinity())return t.toJ();if(t.isInfinity())return this;var e=this.z.redSqr(),n=this.x,r=t.x.redMul(e),i=this.y,a=t.y.redMul(e).redMul(this.z),o=n.redSub(r),s=i.redSub(a);if(0===o.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=o.redSqr(),c=u.redMul(o),l=n.redMul(u),f=s.redSqr().redIAdd(c).redISub(l).redISub(l),h=s.redMul(l.redISub(f)).redISub(i.redMul(c)),p=this.z.redMul(o);return this.curve.jpoint(f,h,p)},f.prototype.dblp=function(t){if(0===t)return this;if(this.isInfinity())return this;if(!t)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var e=this,n=0;n<t;n++)e=e.dbl();return e}var r=this.curve.a,i=this.curve.tinv,a=this.x,o=this.y,s=this.z,u=s.redSqr().redSqr(),c=o.redAdd(o);for(n=0;n<t;n++){var l=a.redSqr(),f=c.redSqr(),h=f.redSqr(),p=l.redAdd(l).redIAdd(l).redIAdd(r.redMul(u)),d=a.redMul(f),m=p.redSqr().redISub(d.redAdd(d)),g=d.redISub(m),y=p.redMul(g);y=y.redIAdd(y).redISub(h);var v=c.redMul(s);n+1<t&&(u=u.redMul(h)),a=m,s=v,c=y}return this.curve.jpoint(a,c.redMul(i),s)},f.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},f.prototype._zeroDbl=function(){var t,e,n;if(this.zOne){var r=this.x.redSqr(),i=this.y.redSqr(),a=i.redSqr(),o=this.x.redAdd(i).redSqr().redISub(r).redISub(a);o=o.redIAdd(o);var s=r.redAdd(r).redIAdd(r),u=s.redSqr().redISub(o).redISub(o),c=a.redIAdd(a);c=(c=c.redIAdd(c)).redIAdd(c),t=u,e=s.redMul(o.redISub(u)).redISub(c),n=this.y.redAdd(this.y)}else{var l=this.x.redSqr(),f=this.y.redSqr(),h=f.redSqr(),p=this.x.redAdd(f).redSqr().redISub(l).redISub(h);p=p.redIAdd(p);var d=l.redAdd(l).redIAdd(l),m=d.redSqr(),g=h.redIAdd(h);g=(g=g.redIAdd(g)).redIAdd(g),t=m.redISub(p).redISub(p),e=d.redMul(p.redISub(t)).redISub(g),n=(n=this.y.redMul(this.z)).redIAdd(n)}return this.curve.jpoint(t,e,n)},f.prototype._threeDbl=function(){var t,e,n;if(this.zOne){var r=this.x.redSqr(),i=this.y.redSqr(),a=i.redSqr(),o=this.x.redAdd(i).redSqr().redISub(r).redISub(a);o=o.redIAdd(o);var s=r.redAdd(r).redIAdd(r).redIAdd(this.curve.a),u=s.redSqr().redISub(o).redISub(o);t=u;var c=a.redIAdd(a);c=(c=c.redIAdd(c)).redIAdd(c),e=s.redMul(o.redISub(u)).redISub(c),n=this.y.redAdd(this.y)}else{var l=this.z.redSqr(),f=this.y.redSqr(),h=this.x.redMul(f),p=this.x.redSub(l).redMul(this.x.redAdd(l));p=p.redAdd(p).redIAdd(p);var d=h.redIAdd(h),m=(d=d.redIAdd(d)).redAdd(d);t=p.redSqr().redISub(m),n=this.y.redAdd(this.z).redSqr().redISub(f).redISub(l);var g=f.redSqr();g=(g=(g=g.redIAdd(g)).redIAdd(g)).redIAdd(g),e=p.redMul(d.redISub(t)).redISub(g)}return this.curve.jpoint(t,e,n)},f.prototype._dbl=function(){var t=this.curve.a,e=this.x,n=this.y,r=this.z,i=r.redSqr().redSqr(),a=e.redSqr(),o=n.redSqr(),s=a.redAdd(a).redIAdd(a).redIAdd(t.redMul(i)),u=e.redAdd(e),c=(u=u.redIAdd(u)).redMul(o),l=s.redSqr().redISub(c.redAdd(c)),f=c.redISub(l),h=o.redSqr();h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var p=s.redMul(f).redISub(h),d=n.redAdd(n).redMul(r);return this.curve.jpoint(l,p,d)},f.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var t=this.x.redSqr(),e=this.y.redSqr(),n=this.z.redSqr(),r=e.redSqr(),i=t.redAdd(t).redIAdd(t),a=i.redSqr(),o=this.x.redAdd(e).redSqr().redISub(t).redISub(r),s=(o=(o=(o=o.redIAdd(o)).redAdd(o).redIAdd(o)).redISub(a)).redSqr(),u=r.redIAdd(r);u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var c=i.redIAdd(o).redSqr().redISub(a).redISub(s).redISub(u),l=e.redMul(c);l=(l=l.redIAdd(l)).redIAdd(l);var f=this.x.redMul(s).redISub(l);f=(f=f.redIAdd(f)).redIAdd(f);var h=this.y.redMul(c.redMul(u.redISub(c)).redISub(o.redMul(s)));h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var p=this.z.redAdd(o).redSqr().redISub(n).redISub(s);return this.curve.jpoint(f,h,p)},f.prototype.mul=function(t,e){return t=new a(t,e),this.curve._wnafMul(this,t)},f.prototype.eq=function(t){if("affine"===t.type)return this.eq(t.toJ());if(this===t)return!0;var e=this.z.redSqr(),n=t.z.redSqr();if(0!==this.x.redMul(n).redISub(t.x.redMul(e)).cmpn(0))return!1;var r=e.redMul(this.z),i=n.redMul(t.z);return 0===this.y.redMul(i).redISub(t.y.redMul(r)).cmpn(0)},f.prototype.eqXToP=function(t){var e=this.z.redSqr(),n=t.toRed(this.curve.red).redMul(e);if(0===this.x.cmp(n))return!0;for(var r=t.clone(),i=this.curve.redN.redMul(e);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(n.redIAdd(i),0===this.x.cmp(n))return!0}},f.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},f.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},function(t,e,n){"use strict";var r=n(45),i=n(5),a=n(2),o=r.base,s=n(8).utils;function u(t){o.call(this,"mont",t),this.a=new i(t.a,16).toRed(this.red),this.b=new i(t.b,16).toRed(this.red),this.i4=new i(4).toRed(this.red).redInvm(),this.two=new i(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function c(t,e,n){o.BasePoint.call(this,t,"projective"),null===e&&null===n?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new i(e,16),this.z=new i(n,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}a(u,o),t.exports=u,u.prototype.validate=function(t){var e=t.normalize().x,n=e.redSqr(),r=n.redMul(e).redAdd(n.redMul(this.a)).redAdd(e);return 0===r.redSqrt().redSqr().cmp(r)},a(c,o.BasePoint),u.prototype.decodePoint=function(t,e){return this.point(s.toArray(t,e),1)},u.prototype.point=function(t,e){return new c(this,t,e)},u.prototype.pointFromJSON=function(t){return c.fromJSON(this,t)},c.prototype.precompute=function(){},c.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},c.fromJSON=function(t,e){return new c(t,e[0],e[1]||t.one)},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},c.prototype.dbl=function(){var t=this.x.redAdd(this.z).redSqr(),e=this.x.redSub(this.z).redSqr(),n=t.redSub(e),r=t.redMul(e),i=n.redMul(e.redAdd(this.curve.a24.redMul(n)));return this.curve.point(r,i)},c.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.diffAdd=function(t,e){var n=this.x.redAdd(this.z),r=this.x.redSub(this.z),i=t.x.redAdd(t.z),a=t.x.redSub(t.z).redMul(n),o=i.redMul(r),s=e.z.redMul(a.redAdd(o).redSqr()),u=e.x.redMul(a.redISub(o).redSqr());return this.curve.point(s,u)},c.prototype.mul=function(t){for(var e=t.clone(),n=this,r=this.curve.point(null,null),i=[];0!==e.cmpn(0);e.iushrn(1))i.push(e.andln(1));for(var a=i.length-1;a>=0;a--)0===i[a]?(n=n.diffAdd(r,this),r=r.dbl()):(r=n.diffAdd(r,this),n=n.dbl());return r},c.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.eq=function(t){return 0===this.getX().cmp(t.getX())},c.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},c.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},function(t,e,n){"use strict";var r=n(45),i=n(8),a=n(5),o=n(2),s=r.base,u=i.utils.assert;function c(t){this.twisted=1!=(0|t.a),this.mOneA=this.twisted&&-1==(0|t.a),this.extended=this.mOneA,s.call(this,"edwards",t),this.a=new a(t.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new a(t.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new a(t.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),u(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|t.c)}function l(t,e,n,r,i){s.BasePoint.call(this,t,"projective"),null===e&&null===n&&null===r?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new a(e,16),this.y=new a(n,16),this.z=r?new a(r,16):this.curve.one,this.t=i&&new a(i,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}o(c,s),t.exports=c,c.prototype._mulA=function(t){return this.mOneA?t.redNeg():this.a.redMul(t)},c.prototype._mulC=function(t){return this.oneC?t:this.c.redMul(t)},c.prototype.jpoint=function(t,e,n,r){return this.point(t,e,n,r)},c.prototype.pointFromX=function(t,e){(t=new a(t,16)).red||(t=t.toRed(this.red));var n=t.redSqr(),r=this.c2.redSub(this.a.redMul(n)),i=this.one.redSub(this.c2.redMul(this.d).redMul(n)),o=r.redMul(i.redInvm()),s=o.redSqrt();if(0!==s.redSqr().redSub(o).cmp(this.zero))throw new Error("invalid point");var u=s.fromRed().isOdd();return(e&&!u||!e&&u)&&(s=s.redNeg()),this.point(t,s)},c.prototype.pointFromY=function(t,e){(t=new a(t,16)).red||(t=t.toRed(this.red));var n=t.redSqr(),r=n.redSub(this.c2),i=n.redMul(this.d).redMul(this.c2).redSub(this.a),o=r.redMul(i.redInvm());if(0===o.cmp(this.zero)){if(e)throw new Error("invalid point");return this.point(this.zero,t)}var s=o.redSqrt();if(0!==s.redSqr().redSub(o).cmp(this.zero))throw new Error("invalid point");return s.fromRed().isOdd()!==e&&(s=s.redNeg()),this.point(s,t)},c.prototype.validate=function(t){if(t.isInfinity())return!0;t.normalize();var e=t.x.redSqr(),n=t.y.redSqr(),r=e.redMul(this.a).redAdd(n),i=this.c2.redMul(this.one.redAdd(this.d.redMul(e).redMul(n)));return 0===r.cmp(i)},o(l,s.BasePoint),c.prototype.pointFromJSON=function(t){return l.fromJSON(this,t)},c.prototype.point=function(t,e,n,r){return new l(this,t,e,n,r)},l.fromJSON=function(t,e){return new l(t,e[0],e[1],e[2])},l.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},l.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},l.prototype._extDbl=function(){var t=this.x.redSqr(),e=this.y.redSqr(),n=this.z.redSqr();n=n.redIAdd(n);var r=this.curve._mulA(t),i=this.x.redAdd(this.y).redSqr().redISub(t).redISub(e),a=r.redAdd(e),o=a.redSub(n),s=r.redSub(e),u=i.redMul(o),c=a.redMul(s),l=i.redMul(s),f=o.redMul(a);return this.curve.point(u,c,f,l)},l.prototype._projDbl=function(){var t,e,n,r=this.x.redAdd(this.y).redSqr(),i=this.x.redSqr(),a=this.y.redSqr();if(this.curve.twisted){var o=(c=this.curve._mulA(i)).redAdd(a);if(this.zOne)t=r.redSub(i).redSub(a).redMul(o.redSub(this.curve.two)),e=o.redMul(c.redSub(a)),n=o.redSqr().redSub(o).redSub(o);else{var s=this.z.redSqr(),u=o.redSub(s).redISub(s);t=r.redSub(i).redISub(a).redMul(u),e=o.redMul(c.redSub(a)),n=o.redMul(u)}}else{var c=i.redAdd(a);s=this.curve._mulC(this.z).redSqr(),u=c.redSub(s).redSub(s);t=this.curve._mulC(r.redISub(c)).redMul(u),e=this.curve._mulC(c).redMul(i.redISub(a)),n=c.redMul(u)}return this.curve.point(t,e,n)},l.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},l.prototype._extAdd=function(t){var e=this.y.redSub(this.x).redMul(t.y.redSub(t.x)),n=this.y.redAdd(this.x).redMul(t.y.redAdd(t.x)),r=this.t.redMul(this.curve.dd).redMul(t.t),i=this.z.redMul(t.z.redAdd(t.z)),a=n.redSub(e),o=i.redSub(r),s=i.redAdd(r),u=n.redAdd(e),c=a.redMul(o),l=s.redMul(u),f=a.redMul(u),h=o.redMul(s);return this.curve.point(c,l,h,f)},l.prototype._projAdd=function(t){var e,n,r=this.z.redMul(t.z),i=r.redSqr(),a=this.x.redMul(t.x),o=this.y.redMul(t.y),s=this.curve.d.redMul(a).redMul(o),u=i.redSub(s),c=i.redAdd(s),l=this.x.redAdd(this.y).redMul(t.x.redAdd(t.y)).redISub(a).redISub(o),f=r.redMul(u).redMul(l);return this.curve.twisted?(e=r.redMul(c).redMul(o.redSub(this.curve._mulA(a))),n=u.redMul(c)):(e=r.redMul(c).redMul(o.redSub(a)),n=this.curve._mulC(u).redMul(c)),this.curve.point(f,e,n)},l.prototype.add=function(t){return this.isInfinity()?t:t.isInfinity()?this:this.curve.extended?this._extAdd(t):this._projAdd(t)},l.prototype.mul=function(t){return this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve._wnafMul(this,t)},l.prototype.mulAdd=function(t,e,n){return this.curve._wnafMulAdd(1,[this,e],[t,n],2,!1)},l.prototype.jmulAdd=function(t,e,n){return this.curve._wnafMulAdd(1,[this,e],[t,n],2,!0)},l.prototype.normalize=function(){if(this.zOne)return this;var t=this.z.redInvm();return this.x=this.x.redMul(t),this.y=this.y.redMul(t),this.t&&(this.t=this.t.redMul(t)),this.z=this.curve.one,this.zOne=!0,this},l.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},l.prototype.getX=function(){return this.normalize(),this.x.fromRed()},l.prototype.getY=function(){return this.normalize(),this.y.fromRed()},l.prototype.eq=function(t){return this===t||0===this.getX().cmp(t.getX())&&0===this.getY().cmp(t.getY())},l.prototype.eqXToP=function(t){var e=t.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(e))return!0;for(var n=t.clone(),r=this.curve.redN.redMul(this.z);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(e.redIAdd(r),0===this.x.cmp(e))return!0}},l.prototype.toP=l.prototype.normalize,l.prototype.mixedAdd=l.prototype.add},function(t,e,n){"use strict";var r,i=e,a=n(67),o=n(8),s=o.utils.assert;function u(t){"short"===t.type?this.curve=new o.curve.short(t):"edwards"===t.type?this.curve=new o.curve.edwards(t):this.curve=new o.curve.mont(t),this.g=this.curve.g,this.n=this.curve.n,this.hash=t.hash,s(this.g.validate(),"Invalid curve"),s(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function c(t,e){Object.defineProperty(i,t,{configurable:!0,enumerable:!0,get:function(){var n=new u(e);return Object.defineProperty(i,t,{configurable:!0,enumerable:!0,value:n}),n}})}i.PresetCurve=u,c("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:a.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),c("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:a.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),c("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:a.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),c("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:a.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),c("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:a.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),c("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:a.sha256,gRed:!1,g:["9"]}),c("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:a.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{r=n(193)}catch(t){r=void 0}c("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:a.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",r]})},function(t,e,n){"use strict";e.sha1=n(188),e.sha224=n(189),e.sha256=n(110),e.sha384=n(190),e.sha512=n(111)},function(t,e,n){"use strict";var r=n(15),i=n(33),a=n(109),o=r.rotl32,s=r.sum32,u=r.sum32_5,c=a.ft_1,l=i.BlockHash,f=[1518500249,1859775393,2400959708,3395469782];function h(){if(!(this instanceof h))return new h;l.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}r.inherits(h,l),t.exports=h,h.blockSize=512,h.outSize=160,h.hmacStrength=80,h.padLength=64,h.prototype._update=function(t,e){for(var n=this.W,r=0;r<16;r++)n[r]=t[e+r];for(;r<n.length;r++)n[r]=o(n[r-3]^n[r-8]^n[r-14]^n[r-16],1);var i=this.h[0],a=this.h[1],l=this.h[2],h=this.h[3],p=this.h[4];for(r=0;r<n.length;r++){var d=~~(r/20),m=u(o(i,5),c(d,a,l,h),p,n[r],f[d]);p=h,h=l,l=o(a,30),a=i,i=m}this.h[0]=s(this.h[0],i),this.h[1]=s(this.h[1],a),this.h[2]=s(this.h[2],l),this.h[3]=s(this.h[3],h),this.h[4]=s(this.h[4],p)},h.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},function(t,e,n){"use strict";var r=n(15),i=n(110);function a(){if(!(this instanceof a))return new a;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}r.inherits(a,i),t.exports=a,a.blockSize=512,a.outSize=224,a.hmacStrength=192,a.padLength=64,a.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h.slice(0,7),"big"):r.split32(this.h.slice(0,7),"big")}},function(t,e,n){"use strict";var r=n(15),i=n(111);function a(){if(!(this instanceof a))return new a;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}r.inherits(a,i),t.exports=a,a.blockSize=1024,a.outSize=384,a.hmacStrength=192,a.padLength=128,a.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h.slice(0,12),"big"):r.split32(this.h.slice(0,12),"big")}},function(t,e,n){"use strict";var r=n(15),i=n(33),a=r.rotl32,o=r.sum32,s=r.sum32_3,u=r.sum32_4,c=i.BlockHash;function l(){if(!(this instanceof l))return new l;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function f(t,e,n,r){return t<=15?e^n^r:t<=31?e&n|~e&r:t<=47?(e|~n)^r:t<=63?e&r|n&~r:e^(n|~r)}function h(t){return t<=15?0:t<=31?1518500249:t<=47?1859775393:t<=63?2400959708:2840853838}function p(t){return t<=15?1352829926:t<=31?1548603684:t<=47?1836072691:t<=63?2053994217:0}r.inherits(l,c),e.ripemd160=l,l.blockSize=512,l.outSize=160,l.hmacStrength=192,l.padLength=64,l.prototype._update=function(t,e){for(var n=this.h[0],r=this.h[1],i=this.h[2],c=this.h[3],l=this.h[4],v=n,b=r,w=i,_=c,x=l,E=0;E<80;E++){var S=o(a(u(n,f(E,r,i,c),t[d[E]+e],h(E)),g[E]),l);n=l,l=c,c=a(i,10),i=r,r=S,S=o(a(u(v,f(79-E,b,w,_),t[m[E]+e],p(E)),y[E]),x),v=x,x=_,_=a(w,10),w=b,b=S}S=s(this.h[1],i,_),this.h[1]=s(this.h[2],c,x),this.h[2]=s(this.h[3],l,v),this.h[3]=s(this.h[4],n,b),this.h[4]=s(this.h[0],r,w),this.h[0]=S},l.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"little"):r.split32(this.h,"little")};var d=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],m=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],g=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],y=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(t,e,n){"use strict";var r=n(15),i=n(12);function a(t,e,n){if(!(this instanceof a))return new a(t,e,n);this.Hash=t,this.blockSize=t.blockSize/8,this.outSize=t.outSize/8,this.inner=null,this.outer=null,this._init(r.toArray(e,n))}t.exports=a,a.prototype._init=function(t){t.length>this.blockSize&&(t=(new this.Hash).update(t).digest()),i(t.length<=this.blockSize);for(var e=t.length;e<this.blockSize;e++)t.push(0);for(e=0;e<t.length;e++)t[e]^=54;for(this.inner=(new this.Hash).update(t),e=0;e<t.length;e++)t[e]^=106;this.outer=(new this.Hash).update(t)},a.prototype.update=function(t,e){return this.inner.update(t,e),this},a.prototype.digest=function(t){return this.outer.update(this.inner.digest()),this.outer.digest(t)}},function(t,e){t.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},function(t,e,n){"use strict";var r=n(5),i=n(195),a=n(8),o=a.utils.assert,s=n(196),u=n(197);function c(t){if(!(this instanceof c))return new c(t);"string"==typeof t&&(o(a.curves.hasOwnProperty(t),"Unknown curve "+t),t=a.curves[t]),t instanceof a.curves.PresetCurve&&(t={curve:t}),this.curve=t.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=t.curve.g,this.g.precompute(t.curve.n.bitLength()+1),this.hash=t.hash||t.curve.hash}t.exports=c,c.prototype.keyPair=function(t){return new s(this,t)},c.prototype.keyFromPrivate=function(t,e){return s.fromPrivate(this,t,e)},c.prototype.keyFromPublic=function(t,e){return s.fromPublic(this,t,e)},c.prototype.genKeyPair=function(t){t||(t={});for(var e=new i({hash:this.hash,pers:t.pers,persEnc:t.persEnc||"utf8",entropy:t.entropy||a.rand(this.hash.hmacStrength),entropyEnc:t.entropy&&t.entropyEnc||"utf8",nonce:this.n.toArray()}),n=this.n.byteLength(),o=this.n.sub(new r(2));;){var s=new r(e.generate(n));if(!(s.cmp(o)>0))return s.iaddn(1),this.keyFromPrivate(s)}},c.prototype._truncateToN=function(t,e){var n=8*t.byteLength()-this.n.bitLength();return n>0&&(t=t.ushrn(n)),!e&&t.cmp(this.n)>=0?t.sub(this.n):t},c.prototype.sign=function(t,e,n,a){"object"==typeof n&&(a=n,n=null),a||(a={}),e=this.keyFromPrivate(e,n),t=this._truncateToN(new r(t,16));for(var o=this.n.byteLength(),s=e.getPrivate().toArray("be",o),c=t.toArray("be",o),l=new i({hash:this.hash,entropy:s,nonce:c,pers:a.pers,persEnc:a.persEnc||"utf8"}),f=this.n.sub(new r(1)),h=0;;h++){var p=a.k?a.k(h):new r(l.generate(this.n.byteLength()));if(!((p=this._truncateToN(p,!0)).cmpn(1)<=0||p.cmp(f)>=0)){var d=this.g.mul(p);if(!d.isInfinity()){var m=d.getX(),g=m.umod(this.n);if(0!==g.cmpn(0)){var y=p.invm(this.n).mul(g.mul(e.getPrivate()).iadd(t));if(0!==(y=y.umod(this.n)).cmpn(0)){var v=(d.getY().isOdd()?1:0)|(0!==m.cmp(g)?2:0);return a.canonical&&y.cmp(this.nh)>0&&(y=this.n.sub(y),v^=1),new u({r:g,s:y,recoveryParam:v})}}}}}},c.prototype.verify=function(t,e,n,i){t=this._truncateToN(new r(t,16)),n=this.keyFromPublic(n,i);var a=(e=new u(e,"hex")).r,o=e.s;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;var s,c=o.invm(this.n),l=c.mul(t).umod(this.n),f=c.mul(a).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(l,n.getPublic(),f)).isInfinity()&&s.eqXToP(a):!(s=this.g.mulAdd(l,n.getPublic(),f)).isInfinity()&&0===s.getX().umod(this.n).cmp(a)},c.prototype.recoverPubKey=function(t,e,n,i){o((3&n)===n,"The recovery param is more than two bits"),e=new u(e,i);var a=this.n,s=new r(t),c=e.r,l=e.s,f=1&n,h=n>>1;if(c.cmp(this.curve.p.umod(this.curve.n))>=0&&h)throw new Error("Unable to find sencond key candinate");c=h?this.curve.pointFromX(c.add(this.curve.n),f):this.curve.pointFromX(c,f);var p=e.r.invm(a),d=a.sub(s).mul(p).umod(a),m=l.mul(p).umod(a);return this.g.mulAdd(d,c,m)},c.prototype.getKeyRecoveryParam=function(t,e,n,r){if(null!==(e=new u(e,r)).recoveryParam)return e.recoveryParam;for(var i=0;i<4;i++){var a;try{a=this.recoverPubKey(t,e,i)}catch(t){continue}if(a.eq(n))return i}throw new Error("Unable to find valid recovery factor")}},function(t,e,n){"use strict";var r=n(67),i=n(108),a=n(12);function o(t){if(!(this instanceof o))return new o(t);this.hash=t.hash,this.predResist=!!t.predResist,this.outLen=this.hash.outSize,this.minEntropy=t.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=i.toArray(t.entropy,t.entropyEnc||"hex"),n=i.toArray(t.nonce,t.nonceEnc||"hex"),r=i.toArray(t.pers,t.persEnc||"hex");a(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,n,r)}t.exports=o,o.prototype._init=function(t,e,n){var r=t.concat(e).concat(n);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(r),this._reseed=1,this.reseedInterval=281474976710656},o.prototype._hmac=function(){return new r.hmac(this.hash,this.K)},o.prototype._update=function(t){var e=this._hmac().update(this.V).update([0]);t&&(e=e.update(t)),this.K=e.digest(),this.V=this._hmac().update(this.V).digest(),t&&(this.K=this._hmac().update(this.V).update([1]).update(t).digest(),this.V=this._hmac().update(this.V).digest())},o.prototype.reseed=function(t,e,n,r){"string"!=typeof e&&(r=n,n=e,e=null),t=i.toArray(t,e),n=i.toArray(n,r),a(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(t.concat(n||[])),this._reseed=1},o.prototype.generate=function(t,e,n,r){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof e&&(r=n,n=e,e=null),n&&(n=i.toArray(n,r||"hex"),this._update(n));for(var a=[];a.length<t;)this.V=this._hmac().update(this.V).digest(),a=a.concat(this.V);var o=a.slice(0,t);return this._update(n),this._reseed++,i.encode(o,e)}},function(t,e,n){"use strict";var r=n(5),i=n(8).utils.assert;function a(t,e){this.ec=t,this.priv=null,this.pub=null,e.priv&&this._importPrivate(e.priv,e.privEnc),e.pub&&this._importPublic(e.pub,e.pubEnc)}t.exports=a,a.fromPublic=function(t,e,n){return e instanceof a?e:new a(t,{pub:e,pubEnc:n})},a.fromPrivate=function(t,e,n){return e instanceof a?e:new a(t,{priv:e,privEnc:n})},a.prototype.validate=function(){var t=this.getPublic();return t.isInfinity()?{result:!1,reason:"Invalid public key"}:t.validate()?t.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},a.prototype.getPublic=function(t,e){return"string"==typeof t&&(e=t,t=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),e?this.pub.encode(e,t):this.pub},a.prototype.getPrivate=function(t){return"hex"===t?this.priv.toString(16,2):this.priv},a.prototype._importPrivate=function(t,e){this.priv=new r(t,e||16),this.priv=this.priv.umod(this.ec.curve.n)},a.prototype._importPublic=function(t,e){if(t.x||t.y)return"mont"===this.ec.curve.type?i(t.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||i(t.x&&t.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(t.x,t.y));this.pub=this.ec.curve.decodePoint(t,e)},a.prototype.derive=function(t){return t.mul(this.priv).getX()},a.prototype.sign=function(t,e,n){return this.ec.sign(t,this,e,n)},a.prototype.verify=function(t,e){return this.ec.verify(t,e,this)},a.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},function(t,e,n){"use strict";var r=n(5),i=n(8).utils,a=i.assert;function o(t,e){if(t instanceof o)return t;this._importDER(t,e)||(a(t.r&&t.s,"Signature without r or s"),this.r=new r(t.r,16),this.s=new r(t.s,16),void 0===t.recoveryParam?this.recoveryParam=null:this.recoveryParam=t.recoveryParam)}function s(){this.place=0}function u(t,e){var n=t[e.place++];if(!(128&n))return n;for(var r=15&n,i=0,a=0,o=e.place;a<r;a++,o++)i<<=8,i|=t[o];return e.place=o,i}function c(t){for(var e=0,n=t.length-1;!t[e]&&!(128&t[e+1])&&e<n;)e++;return 0===e?t:t.slice(e)}function l(t,e){if(e<128)t.push(e);else{var n=1+(Math.log(e)/Math.LN2>>>3);for(t.push(128|n);--n;)t.push(e>>>(n<<3)&255);t.push(e)}}t.exports=o,o.prototype._importDER=function(t,e){t=i.toArray(t,e);var n=new s;if(48!==t[n.place++])return!1;if(u(t,n)+n.place!==t.length)return!1;if(2!==t[n.place++])return!1;var a=u(t,n),o=t.slice(n.place,a+n.place);if(n.place+=a,2!==t[n.place++])return!1;var c=u(t,n);if(t.length!==c+n.place)return!1;var l=t.slice(n.place,c+n.place);return 0===o[0]&&128&o[1]&&(o=o.slice(1)),0===l[0]&&128&l[1]&&(l=l.slice(1)),this.r=new r(o),this.s=new r(l),this.recoveryParam=null,!0},o.prototype.toDER=function(t){var e=this.r.toArray(),n=this.s.toArray();for(128&e[0]&&(e=[0].concat(e)),128&n[0]&&(n=[0].concat(n)),e=c(e),n=c(n);!(n[0]||128&n[1]);)n=n.slice(1);var r=[2];l(r,e.length),(r=r.concat(e)).push(2),l(r,n.length);var a=r.concat(n),o=[48];return l(o,a.length),o=o.concat(a),i.encode(o,t)}},function(t,e,n){"use strict";var r=n(67),i=n(8),a=i.utils,o=a.assert,s=a.parseBytes,u=n(199),c=n(200);function l(t){if(o("ed25519"===t,"only tested with ed25519 so far"),!(this instanceof l))return new l(t);t=i.curves[t].curve;this.curve=t,this.g=t.g,this.g.precompute(t.n.bitLength()+1),this.pointClass=t.point().constructor,this.encodingLength=Math.ceil(t.n.bitLength()/8),this.hash=r.sha512}t.exports=l,l.prototype.sign=function(t,e){t=s(t);var n=this.keyFromSecret(e),r=this.hashInt(n.messagePrefix(),t),i=this.g.mul(r),a=this.encodePoint(i),o=this.hashInt(a,n.pubBytes(),t).mul(n.priv()),u=r.add(o).umod(this.curve.n);return this.makeSignature({R:i,S:u,Rencoded:a})},l.prototype.verify=function(t,e,n){t=s(t),e=this.makeSignature(e);var r=this.keyFromPublic(n),i=this.hashInt(e.Rencoded(),r.pubBytes(),t),a=this.g.mul(e.S());return e.R().add(r.pub().mul(i)).eq(a)},l.prototype.hashInt=function(){for(var t=this.hash(),e=0;e<arguments.length;e++)t.update(arguments[e]);return a.intFromLE(t.digest()).umod(this.curve.n)},l.prototype.keyFromPublic=function(t){return u.fromPublic(this,t)},l.prototype.keyFromSecret=function(t){return u.fromSecret(this,t)},l.prototype.makeSignature=function(t){return t instanceof c?t:new c(this,t)},l.prototype.encodePoint=function(t){var e=t.getY().toArray("le",this.encodingLength);return e[this.encodingLength-1]|=t.getX().isOdd()?128:0,e},l.prototype.decodePoint=function(t){var e=(t=a.parseBytes(t)).length-1,n=t.slice(0,e).concat(-129&t[e]),r=0!=(128&t[e]),i=a.intFromLE(n);return this.curve.pointFromY(i,r)},l.prototype.encodeInt=function(t){return t.toArray("le",this.encodingLength)},l.prototype.decodeInt=function(t){return a.intFromLE(t)},l.prototype.isPoint=function(t){return t instanceof this.pointClass}},function(t,e,n){"use strict";var r=n(8).utils,i=r.assert,a=r.parseBytes,o=r.cachedProperty;function s(t,e){this.eddsa=t,this._secret=a(e.secret),t.isPoint(e.pub)?this._pub=e.pub:this._pubBytes=a(e.pub)}s.fromPublic=function(t,e){return e instanceof s?e:new s(t,{pub:e})},s.fromSecret=function(t,e){return e instanceof s?e:new s(t,{secret:e})},s.prototype.secret=function(){return this._secret},o(s,"pubBytes",function(){return this.eddsa.encodePoint(this.pub())}),o(s,"pub",function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())}),o(s,"privBytes",function(){var t=this.eddsa,e=this.hash(),n=t.encodingLength-1,r=e.slice(0,t.encodingLength);return r[0]&=248,r[n]&=127,r[n]|=64,r}),o(s,"priv",function(){return this.eddsa.decodeInt(this.privBytes())}),o(s,"hash",function(){return this.eddsa.hash().update(this.secret()).digest()}),o(s,"messagePrefix",function(){return this.hash().slice(this.eddsa.encodingLength)}),s.prototype.sign=function(t){return i(this._secret,"KeyPair can only verify"),this.eddsa.sign(t,this)},s.prototype.verify=function(t,e){return this.eddsa.verify(t,e,this)},s.prototype.getSecret=function(t){return i(this._secret,"KeyPair is public only"),r.encode(this.secret(),t)},s.prototype.getPublic=function(t){return r.encode(this.pubBytes(),t)},t.exports=s},function(t,e,n){"use strict";var r=n(5),i=n(8).utils,a=i.assert,o=i.cachedProperty,s=i.parseBytes;function u(t,e){this.eddsa=t,"object"!=typeof e&&(e=s(e)),Array.isArray(e)&&(e={R:e.slice(0,t.encodingLength),S:e.slice(t.encodingLength)}),a(e.R&&e.S,"Signature without R or S"),t.isPoint(e.R)&&(this._R=e.R),e.S instanceof r&&(this._S=e.S),this._Rencoded=Array.isArray(e.R)?e.R:e.Rencoded,this._Sencoded=Array.isArray(e.S)?e.S:e.Sencoded}o(u,"S",function(){return this.eddsa.decodeInt(this.Sencoded())}),o(u,"R",function(){return this.eddsa.decodePoint(this.Rencoded())}),o(u,"Rencoded",function(){return this.eddsa.encodePoint(this.R())}),o(u,"Sencoded",function(){return this.eddsa.encodeInt(this.S())}),u.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},u.prototype.toHex=function(){return i.encode(this.toBytes(),"hex").toUpperCase()},t.exports=u},function(t,e,n){"use strict";var r=n(34);e.certificate=n(212);var i=r.define("RSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())});e.RSAPrivateKey=i;var a=r.define("RSAPublicKey",function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())});e.RSAPublicKey=a;var o=r.define("SubjectPublicKeyInfo",function(){this.seq().obj(this.key("algorithm").use(s),this.key("subjectPublicKey").bitstr())});e.PublicKey=o;var s=r.define("AlgorithmIdentifier",function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())}),u=r.define("PrivateKeyInfo",function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(s),this.key("subjectPrivateKey").octstr())});e.PrivateKey=u;var c=r.define("EncryptedPrivateKeyInfo",function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())});e.EncryptedPrivateKey=c;var l=r.define("DSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())});e.DSAPrivateKey=l,e.DSAparam=r.define("DSAparam",function(){this.int()});var f=r.define("ECPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(h),this.key("publicKey").optional().explicit(1).bitstr())});e.ECPrivateKey=f;var h=r.define("ECParameters",function(){this.choice({namedCurve:this.objid()})});e.signature=r.define("signature",function(){this.seq().obj(this.key("r").int(),this.key("s").int())})},function(t,e,n){var r=n(34),i=n(2);function a(t,e){this.name=t,this.body=e,this.decoders={},this.encoders={}}e.define=function(t,e){return new a(t,e)},a.prototype._createNamed=function(t){var e;try{e=n(203).runInThisContext("(function "+this.name+"(entity) {\n  this._initNamed(entity);\n})")}catch(t){e=function(t){this._initNamed(t)}}return i(e,t),e.prototype._initNamed=function(e){t.call(this,e)},new e(this)},a.prototype._getDecoder=function(t){return t=t||"der",this.decoders.hasOwnProperty(t)||(this.decoders[t]=this._createNamed(r.decoders[t])),this.decoders[t]},a.prototype.decode=function(t,e,n){return this._getDecoder(e).decode(t,n)},a.prototype._getEncoder=function(t){return t=t||"der",this.encoders.hasOwnProperty(t)||(this.encoders[t]=this._createNamed(r.encoders[t])),this.encoders[t]},a.prototype.encode=function(t,e,n){return this._getEncoder(e).encode(t,n)}},function(module,exports,__webpack_require__){var indexOf=__webpack_require__(204),Object_keys=function(t){if(Object.keys)return Object.keys(t);var e=[];for(var n in t)e.push(n);return e},forEach=function(t,e){if(t.forEach)return t.forEach(e);for(var n=0;n<t.length;n++)e(t[n],n,t)},defineProp=function(){try{return Object.defineProperty({},"_",{}),function(t,e,n){Object.defineProperty(t,e,{writable:!0,enumerable:!1,configurable:!0,value:n})}}catch(t){return function(t,e,n){t[e]=n}}}(),globals=["Array","Boolean","Date","Error","EvalError","Function","Infinity","JSON","Math","NaN","Number","Object","RangeError","ReferenceError","RegExp","String","SyntaxError","TypeError","URIError","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","eval","isFinite","isNaN","parseFloat","parseInt","undefined","unescape"];function Context(){}Context.prototype={};var Script=exports.Script=function(t){if(!(this instanceof Script))return new Script(t);this.code=t};Script.prototype.runInContext=function(t){if(!(t instanceof Context))throw new TypeError("needs a 'context' argument.");var e=document.createElement("iframe");e.style||(e.style={}),e.style.display="none",document.body.appendChild(e);var n=e.contentWindow,r=n.eval,i=n.execScript;!r&&i&&(i.call(n,"null"),r=n.eval),forEach(Object_keys(t),function(e){n[e]=t[e]}),forEach(globals,function(e){t[e]&&(n[e]=t[e])});var a=Object_keys(n),o=r.call(n,this.code);return forEach(Object_keys(n),function(e){(e in t||-1===indexOf(a,e))&&(t[e]=n[e])}),forEach(globals,function(e){e in t||defineProp(t,e,n[e])}),document.body.removeChild(e),o},Script.prototype.runInThisContext=function(){return eval(this.code)},Script.prototype.runInNewContext=function(t){var e=Script.createContext(t),n=this.runInContext(e);return forEach(Object_keys(e),function(n){t[n]=e[n]}),n},forEach(Object_keys(Script.prototype),function(t){exports[t]=Script[t]=function(e){var n=Script(e);return n[t].apply(n,[].slice.call(arguments,1))}}),exports.createScript=function(t){return exports.Script(t)},exports.createContext=Script.createContext=function(t){var e=new Context;return"object"==typeof t&&forEach(Object_keys(t),function(n){e[n]=t[n]}),e}},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e,n){var r=n(2);function i(t){this._reporterState={obj:null,path:[],options:t||{},errors:[]}}function a(t,e){this.path=t,this.rethrow(e)}e.Reporter=i,i.prototype.isError=function(t){return t instanceof a},i.prototype.save=function(){var t=this._reporterState;return{obj:t.obj,pathLen:t.path.length}},i.prototype.restore=function(t){var e=this._reporterState;e.obj=t.obj,e.path=e.path.slice(0,t.pathLen)},i.prototype.enterKey=function(t){return this._reporterState.path.push(t)},i.prototype.exitKey=function(t){var e=this._reporterState;e.path=e.path.slice(0,t-1)},i.prototype.leaveKey=function(t,e,n){var r=this._reporterState;this.exitKey(t),null!==r.obj&&(r.obj[e]=n)},i.prototype.path=function(){return this._reporterState.path.join("/")},i.prototype.enterObject=function(){var t=this._reporterState,e=t.obj;return t.obj={},e},i.prototype.leaveObject=function(t){var e=this._reporterState,n=e.obj;return e.obj=t,n},i.prototype.error=function(t){var e,n=this._reporterState,r=t instanceof a;if(e=r?t:new a(n.path.map(function(t){return"["+JSON.stringify(t)+"]"}).join(""),t.message||t,t.stack),!n.options.partial)throw e;return r||n.errors.push(e),e},i.prototype.wrapResult=function(t){var e=this._reporterState;return e.options.partial?{result:this.isError(t)?null:t,errors:e.errors}:t},r(a,Error),a.prototype.rethrow=function(t){if(this.message=t+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,a),!this.stack)try{throw new Error(this.message)}catch(t){this.stack=t.stack}return this}},function(t,e,n){var r=n(35).Reporter,i=n(35).EncoderBuffer,a=n(35).DecoderBuffer,o=n(12),s=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],u=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(s);function c(t,e){var n={};this._baseState=n,n.enc=t,n.parent=e||null,n.children=null,n.tag=null,n.args=null,n.reverseArgs=null,n.choice=null,n.optional=!1,n.any=!1,n.obj=!1,n.use=null,n.useDecoder=null,n.key=null,n.default=null,n.explicit=null,n.implicit=null,n.contains=null,n.parent||(n.children=[],this._wrap())}t.exports=c;var l=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];c.prototype.clone=function(){var t=this._baseState,e={};l.forEach(function(n){e[n]=t[n]});var n=new this.constructor(e.parent);return n._baseState=e,n},c.prototype._wrap=function(){var t=this._baseState;u.forEach(function(e){this[e]=function(){var n=new this.constructor(this);return t.children.push(n),n[e].apply(n,arguments)}},this)},c.prototype._init=function(t){var e=this._baseState;o(null===e.parent),t.call(this),e.children=e.children.filter(function(t){return t._baseState.parent===this},this),o.equal(e.children.length,1,"Root node can have only one child")},c.prototype._useArgs=function(t){var e=this._baseState,n=t.filter(function(t){return t instanceof this.constructor},this);t=t.filter(function(t){return!(t instanceof this.constructor)},this),0!==n.length&&(o(null===e.children),e.children=n,n.forEach(function(t){t._baseState.parent=this},this)),0!==t.length&&(o(null===e.args),e.args=t,e.reverseArgs=t.map(function(t){if("object"!=typeof t||t.constructor!==Object)return t;var e={};return Object.keys(t).forEach(function(n){n==(0|n)&&(n|=0);var r=t[n];e[r]=n}),e}))},["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"].forEach(function(t){c.prototype[t]=function(){var e=this._baseState;throw new Error(t+" not implemented for encoding: "+e.enc)}}),s.forEach(function(t){c.prototype[t]=function(){var e=this._baseState,n=Array.prototype.slice.call(arguments);return o(null===e.tag),e.tag=t,this._useArgs(n),this}}),c.prototype.use=function(t){o(t);var e=this._baseState;return o(null===e.use),e.use=t,this},c.prototype.optional=function(){return this._baseState.optional=!0,this},c.prototype.def=function(t){var e=this._baseState;return o(null===e.default),e.default=t,e.optional=!0,this},c.prototype.explicit=function(t){var e=this._baseState;return o(null===e.explicit&&null===e.implicit),e.explicit=t,this},c.prototype.implicit=function(t){var e=this._baseState;return o(null===e.explicit&&null===e.implicit),e.implicit=t,this},c.prototype.obj=function(){var t=this._baseState,e=Array.prototype.slice.call(arguments);return t.obj=!0,0!==e.length&&this._useArgs(e),this},c.prototype.key=function(t){var e=this._baseState;return o(null===e.key),e.key=t,this},c.prototype.any=function(){return this._baseState.any=!0,this},c.prototype.choice=function(t){var e=this._baseState;return o(null===e.choice),e.choice=t,this._useArgs(Object.keys(t).map(function(e){return t[e]})),this},c.prototype.contains=function(t){var e=this._baseState;return o(null===e.use),e.contains=t,this},c.prototype._decode=function(t,e){var n=this._baseState;if(null===n.parent)return t.wrapResult(n.children[0]._decode(t,e));var r,i=n.default,o=!0,s=null;if(null!==n.key&&(s=t.enterKey(n.key)),n.optional){var u=null;if(null!==n.explicit?u=n.explicit:null!==n.implicit?u=n.implicit:null!==n.tag&&(u=n.tag),null!==u||n.any){if(o=this._peekTag(t,u,n.any),t.isError(o))return o}else{var c=t.save();try{null===n.choice?this._decodeGeneric(n.tag,t,e):this._decodeChoice(t,e),o=!0}catch(t){o=!1}t.restore(c)}}if(n.obj&&o&&(r=t.enterObject()),o){if(null!==n.explicit){var l=this._decodeTag(t,n.explicit);if(t.isError(l))return l;t=l}var f=t.offset;if(null===n.use&&null===n.choice){if(n.any)c=t.save();var h=this._decodeTag(t,null!==n.implicit?n.implicit:n.tag,n.any);if(t.isError(h))return h;n.any?i=t.raw(c):t=h}if(e&&e.track&&null!==n.tag&&e.track(t.path(),f,t.length,"tagged"),e&&e.track&&null!==n.tag&&e.track(t.path(),t.offset,t.length,"content"),i=n.any?i:null===n.choice?this._decodeGeneric(n.tag,t,e):this._decodeChoice(t,e),t.isError(i))return i;if(n.any||null!==n.choice||null===n.children||n.children.forEach(function(n){n._decode(t,e)}),n.contains&&("octstr"===n.tag||"bitstr"===n.tag)){var p=new a(i);i=this._getUse(n.contains,t._reporterState.obj)._decode(p,e)}}return n.obj&&o&&(i=t.leaveObject(r)),null===n.key||null===i&&!0!==o?null!==s&&t.exitKey(s):t.leaveKey(s,n.key,i),i},c.prototype._decodeGeneric=function(t,e,n){var r=this._baseState;return"seq"===t||"set"===t?null:"seqof"===t||"setof"===t?this._decodeList(e,t,r.args[0],n):/str$/.test(t)?this._decodeStr(e,t,n):"objid"===t&&r.args?this._decodeObjid(e,r.args[0],r.args[1],n):"objid"===t?this._decodeObjid(e,null,null,n):"gentime"===t||"utctime"===t?this._decodeTime(e,t,n):"null_"===t?this._decodeNull(e,n):"bool"===t?this._decodeBool(e,n):"objDesc"===t?this._decodeStr(e,t,n):"int"===t||"enum"===t?this._decodeInt(e,r.args&&r.args[0],n):null!==r.use?this._getUse(r.use,e._reporterState.obj)._decode(e,n):e.error("unknown tag: "+t)},c.prototype._getUse=function(t,e){var n=this._baseState;return n.useDecoder=this._use(t,e),o(null===n.useDecoder._baseState.parent),n.useDecoder=n.useDecoder._baseState.children[0],n.implicit!==n.useDecoder._baseState.implicit&&(n.useDecoder=n.useDecoder.clone(),n.useDecoder._baseState.implicit=n.implicit),n.useDecoder},c.prototype._decodeChoice=function(t,e){var n=this._baseState,r=null,i=!1;return Object.keys(n.choice).some(function(a){var o=t.save(),s=n.choice[a];try{var u=s._decode(t,e);if(t.isError(u))return!1;r={type:a,value:u},i=!0}catch(e){return t.restore(o),!1}return!0},this),i?r:t.error("Choice not matched")},c.prototype._createEncoderBuffer=function(t){return new i(t,this.reporter)},c.prototype._encode=function(t,e,n){var r=this._baseState;if(null===r.default||r.default!==t){var i=this._encodeValue(t,e,n);if(void 0!==i&&!this._skipDefault(i,e,n))return i}},c.prototype._encodeValue=function(t,e,n){var i=this._baseState;if(null===i.parent)return i.children[0]._encode(t,e||new r);var a=null;if(this.reporter=e,i.optional&&void 0===t){if(null===i.default)return;t=i.default}var o=null,s=!1;if(i.any)a=this._createEncoderBuffer(t);else if(i.choice)a=this._encodeChoice(t,e);else if(i.contains)o=this._getUse(i.contains,n)._encode(t,e),s=!0;else if(i.children)o=i.children.map(function(n){if("null_"===n._baseState.tag)return n._encode(null,e,t);if(null===n._baseState.key)return e.error("Child should have a key");var r=e.enterKey(n._baseState.key);if("object"!=typeof t)return e.error("Child expected, but input is not object");var i=n._encode(t[n._baseState.key],e,t);return e.leaveKey(r),i},this).filter(function(t){return t}),o=this._createEncoderBuffer(o);else if("seqof"===i.tag||"setof"===i.tag){if(!i.args||1!==i.args.length)return e.error("Too many args for : "+i.tag);if(!Array.isArray(t))return e.error("seqof/setof, but data is not Array");var u=this.clone();u._baseState.implicit=null,o=this._createEncoderBuffer(t.map(function(n){var r=this._baseState;return this._getUse(r.args[0],t)._encode(n,e)},u))}else null!==i.use?a=this._getUse(i.use,n)._encode(t,e):(o=this._encodePrimitive(i.tag,t),s=!0);if(!i.any&&null===i.choice){var c=null!==i.implicit?i.implicit:i.tag,l=null===i.implicit?"universal":"context";null===c?null===i.use&&e.error("Tag could be omitted only for .use()"):null===i.use&&(a=this._encodeComposite(c,s,l,o))}return null!==i.explicit&&(a=this._encodeComposite(i.explicit,!1,"context",a)),a},c.prototype._encodeChoice=function(t,e){var n=this._baseState,r=n.choice[t.type];return r||o(!1,t.type+" not found in "+JSON.stringify(Object.keys(n.choice))),r._encode(t.value,e)},c.prototype._encodePrimitive=function(t,e){var n=this._baseState;if(/str$/.test(t))return this._encodeStr(e,t);if("objid"===t&&n.args)return this._encodeObjid(e,n.reverseArgs[0],n.args[1]);if("objid"===t)return this._encodeObjid(e,null,null);if("gentime"===t||"utctime"===t)return this._encodeTime(e,t);if("null_"===t)return this._encodeNull();if("int"===t||"enum"===t)return this._encodeInt(e,n.args&&n.reverseArgs[0]);if("bool"===t)return this._encodeBool(e);if("objDesc"===t)return this._encodeStr(e,t);throw new Error("Unsupported tag: "+t)},c.prototype._isNumstr=function(t){return/^[0-9 ]*$/.test(t)},c.prototype._isPrintstr=function(t){return/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(t)}},function(t,e,n){var r=n(113);e.tagClass={0:"universal",1:"application",2:"context",3:"private"},e.tagClassByName=r._reverse(e.tagClass),e.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},e.tagByName=r._reverse(e.tag)},function(t,e,n){var r=e;r.der=n(114),r.pem=n(209)},function(t,e,n){var r=n(2),i=n(4).Buffer,a=n(114);function o(t){a.call(this,t),this.enc="pem"}r(o,a),t.exports=o,o.prototype.decode=function(t,e){for(var n=t.toString().split(/[\r\n]+/g),r=e.label.toUpperCase(),o=/^-----(BEGIN|END) ([^-]+)-----$/,s=-1,u=-1,c=0;c<n.length;c++){var l=n[c].match(o);if(null!==l&&l[2]===r){if(-1!==s){if("END"!==l[1])break;u=c;break}if("BEGIN"!==l[1])break;s=c}}if(-1===s||-1===u)throw new Error("PEM section not found for: "+r);var f=n.slice(s+1,u).join("");f.replace(/[^a-z0-9\+\/=]+/gi,"");var h=new i(f,"base64");return a.prototype.decode.call(this,h,e)}},function(t,e,n){var r=e;r.der=n(115),r.pem=n(211)},function(t,e,n){var r=n(2),i=n(115);function a(t){i.call(this,t),this.enc="pem"}r(a,i),t.exports=a,a.prototype.encode=function(t,e){for(var n=i.prototype.encode.call(this,t).toString("base64"),r=["-----BEGIN "+e.label+"-----"],a=0;a<n.length;a+=64)r.push(n.slice(a,a+64));return r.push("-----END "+e.label+"-----"),r.join("\n")}},function(t,e,n){"use strict";var r=n(34),i=r.define("Time",function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})}),a=r.define("AttributeTypeValue",function(){this.seq().obj(this.key("type").objid(),this.key("value").any())}),o=r.define("AlgorithmIdentifier",function(){this.seq().obj(this.key("algorithm").objid(),this.key("parameters").optional())}),s=r.define("SubjectPublicKeyInfo",function(){this.seq().obj(this.key("algorithm").use(o),this.key("subjectPublicKey").bitstr())}),u=r.define("RelativeDistinguishedName",function(){this.setof(a)}),c=r.define("RDNSequence",function(){this.seqof(u)}),l=r.define("Name",function(){this.choice({rdnSequence:this.use(c)})}),f=r.define("Validity",function(){this.seq().obj(this.key("notBefore").use(i),this.key("notAfter").use(i))}),h=r.define("Extension",function(){this.seq().obj(this.key("extnID").objid(),this.key("critical").bool().def(!1),this.key("extnValue").octstr())}),p=r.define("TBSCertificate",function(){this.seq().obj(this.key("version").explicit(0).int(),this.key("serialNumber").int(),this.key("signature").use(o),this.key("issuer").use(l),this.key("validity").use(f),this.key("subject").use(l),this.key("subjectPublicKeyInfo").use(s),this.key("issuerUniqueID").implicit(1).bitstr().optional(),this.key("subjectUniqueID").implicit(2).bitstr().optional(),this.key("extensions").explicit(3).seqof(h).optional())}),d=r.define("X509Certificate",function(){this.seq().obj(this.key("tbsCertificate").use(p),this.key("signatureAlgorithm").use(o),this.key("signatureValue").bitstr())});t.exports=d},function(t){t.exports={"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}},function(t,e,n){(function(e){var r=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,i=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m,a=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,o=n(44),s=n(64);t.exports=function(t,n){var u,c=t.toString(),l=c.match(r);if(l){var f="aes"+l[1],h=new e(l[2],"hex"),p=new e(l[3].replace(/[\r\n]/g,""),"base64"),d=o(n,h.slice(0,8),parseInt(l[1],10)).key,m=[],g=s.createDecipheriv(f,d,h);m.push(g.update(p)),m.push(g.final()),u=e.concat(m)}else{var y=c.match(a);u=new e(y[2].replace(/[\r\n]/g,""),"base64")}return{tag:c.match(i)[1],data:u}}}).call(this,n(4).Buffer)},function(t,e,n){(function(e){var r=n(5),i=n(8).ec,a=n(46),o=n(116);function s(t,e){if(t.cmpn(0)<=0)throw new Error("invalid sig");if(t.cmp(e)>=e)throw new Error("invalid sig")}t.exports=function(t,n,u,c,l){var f=a(u);if("ec"===f.type){if("ecdsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");return function(t,e,n){var r=o[n.data.algorithm.curve.join(".")];if(!r)throw new Error("unknown curve "+n.data.algorithm.curve.join("."));var a=new i(r),s=n.data.subjectPrivateKey.data;return a.verify(e,t,s)}(t,n,f)}if("dsa"===f.type){if("dsa"!==c)throw new Error("wrong public key type");return function(t,e,n){var i=n.data.p,o=n.data.q,u=n.data.g,c=n.data.pub_key,l=a.signature.decode(t,"der"),f=l.s,h=l.r;s(f,o),s(h,o);var p=r.mont(i),d=f.invm(o);return 0===u.toRed(p).redPow(new r(e).mul(d).mod(o)).fromRed().mul(c.toRed(p).redPow(h.mul(d).mod(o)).fromRed()).mod(i).mod(o).cmp(h)}(t,n,f)}if("rsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");n=e.concat([l,n]);for(var h=f.modulus.byteLength(),p=[1],d=0;n.length+p.length+2<h;)p.push(255),d++;p.push(0);for(var m=-1;++m<n.length;)p.push(n[m]);p=new e(p);var g=r.mont(f.modulus);t=(t=new r(t).toRed(g)).redPow(new r(f.publicExponent)),t=new e(t.fromRed().toArray());var y=d<8?1:0;for(h=Math.min(t.length,p.length),t.length!==p.length&&(y=1),m=-1;++m<h;)y|=t[m]^p[m];return 0===y}}).call(this,n(4).Buffer)},function(t,e,n){(function(e){var r=n(8),i=n(5);t.exports=function(t){return new o(t)};var a={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};function o(t){this.curveType=a[t],this.curveType||(this.curveType={name:t}),this.curve=new r.ec(this.curveType.name),this.keys=void 0}function s(t,n,r){Array.isArray(t)||(t=t.toArray());var i=new e(t);if(r&&i.length<r){var a=new e(r-i.length);a.fill(0),i=e.concat([a,i])}return n?i.toString(n):i}a.p224=a.secp224r1,a.p256=a.secp256r1=a.prime256v1,a.p192=a.secp192r1=a.prime192v1,a.p384=a.secp384r1,a.p521=a.secp521r1,o.prototype.generateKeys=function(t,e){return this.keys=this.curve.genKeyPair(),this.getPublicKey(t,e)},o.prototype.computeSecret=function(t,n,r){return n=n||"utf8",e.isBuffer(t)||(t=new e(t,n)),s(this.curve.keyFromPublic(t).getPublic().mul(this.keys.getPrivate()).getX(),r,this.curveType.byteLength)},o.prototype.getPublicKey=function(t,e){var n=this.keys.getPublic("compressed"===e,!0);return"hybrid"===e&&(n[n.length-1]%2?n[0]=7:n[0]=6),s(n,t)},o.prototype.getPrivateKey=function(t){return s(this.keys.getPrivate(),t)},o.prototype.setPublicKey=function(t,n){return n=n||"utf8",e.isBuffer(t)||(t=new e(t,n)),this.keys._importPublic(t),this},o.prototype.setPrivateKey=function(t,n){n=n||"utf8",e.isBuffer(t)||(t=new e(t,n));var r=new i(t);return r=r.toString(16),this.keys=this.curve.genKeyPair(),this.keys._importPrivate(r),this}}).call(this,n(4).Buffer)},function(t,e,n){e.publicEncrypt=n(218),e.privateDecrypt=n(219),e.privateEncrypt=function(t,n){return e.publicEncrypt(t,n,!0)},e.publicDecrypt=function(t,n){return e.privateDecrypt(t,n,!0)}},function(t,e,n){var r=n(46),i=n(22),a=n(30),o=n(117),s=n(118),u=n(5),c=n(119),l=n(66),f=n(3).Buffer;t.exports=function(t,e,n){var h;h=t.padding?t.padding:n?1:4;var p,d=r(t);if(4===h)p=function(t,e){var n=t.modulus.byteLength(),r=e.length,c=a("sha1").update(f.alloc(0)).digest(),l=c.length,h=2*l;if(r>n-h-2)throw new Error("message too long");var p=f.alloc(n-r-h-2),d=n-l-1,m=i(l),g=s(f.concat([c,p,f.alloc(1,1),e],d),o(m,d)),y=s(m,o(g,l));return new u(f.concat([f.alloc(1),y,g],n))}(d,e);else if(1===h)p=function(t,e,n){var r,a=e.length,o=t.modulus.byteLength();if(a>o-11)throw new Error("message too long");r=n?f.alloc(o-a-3,255):function(t){var e,n=f.allocUnsafe(t),r=0,a=i(2*t),o=0;for(;r<t;)o===a.length&&(a=i(2*t),o=0),(e=a[o++])&&(n[r++]=e);return n}(o-a-3);return new u(f.concat([f.from([0,n?1:2]),r,f.alloc(1),e],o))}(d,e,n);else{if(3!==h)throw new Error("unknown padding");if((p=new u(e)).cmp(d.modulus)>=0)throw new Error("data too long for modulus")}return n?l(p,d):c(p,d)}},function(t,e,n){var r=n(46),i=n(117),a=n(118),o=n(5),s=n(66),u=n(30),c=n(119),l=n(3).Buffer;t.exports=function(t,e,n){var f;f=t.padding?t.padding:n?1:4;var h,p=r(t),d=p.modulus.byteLength();if(e.length>d||new o(e).cmp(p.modulus)>=0)throw new Error("decryption error");h=n?c(new o(e),p):s(e,p);var m=l.alloc(d-h.length);if(h=l.concat([m,h],d),4===f)return function(t,e){var n=t.modulus.byteLength(),r=u("sha1").update(l.alloc(0)).digest(),o=r.length;if(0!==e[0])throw new Error("decryption error");var s=e.slice(1,o+1),c=e.slice(o+1),f=a(s,i(c,o)),h=a(c,i(f,n-o-1));if(function(t,e){t=l.from(t),e=l.from(e);var n=0,r=t.length;t.length!==e.length&&(n++,r=Math.min(t.length,e.length));var i=-1;for(;++i<r;)n+=t[i]^e[i];return n}(r,h.slice(0,o)))throw new Error("decryption error");var p=o;for(;0===h[p];)p++;if(1!==h[p++])throw new Error("decryption error");return h.slice(p)}(p,h);if(1===f)return function(t,e,n){var r=e.slice(0,2),i=2,a=0;for(;0!==e[i++];)if(i>=e.length){a++;break}var o=e.slice(2,i-1);("0002"!==r.toString("hex")&&!n||"0001"!==r.toString("hex")&&n)&&a++;o.length<8&&a++;if(a)throw new Error("decryption error");return e.slice(i)}(0,h,n);if(3===f)return h;throw new Error("unknown padding")}},function(t,e,n){"use strict";(function(t,r){function i(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var a=n(3),o=n(22),s=a.Buffer,u=a.kMaxLength,c=t.crypto||t.msCrypto,l=Math.pow(2,32)-1;function f(t,e){if("number"!=typeof t||t!=t)throw new TypeError("offset must be a number");if(t>l||t<0)throw new TypeError("offset must be a uint32");if(t>u||t>e)throw new RangeError("offset out of range")}function h(t,e,n){if("number"!=typeof t||t!=t)throw new TypeError("size must be a number");if(t>l||t<0)throw new TypeError("size must be a uint32");if(t+e>n||t>u)throw new RangeError("buffer too small")}function p(t,e,n,i){if(r.browser){var a=t.buffer,s=new Uint8Array(a,e,n);return c.getRandomValues(s),i?void r.nextTick(function(){i(null,t)}):t}if(!i)return o(n).copy(t,e),t;o(n,function(n,r){if(n)return i(n);r.copy(t,e),i(null,t)})}c&&c.getRandomValues||!r.browser?(e.randomFill=function(e,n,r,i){if(!(s.isBuffer(e)||e instanceof t.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof n)i=n,n=0,r=e.length;else if("function"==typeof r)i=r,r=e.length-n;else if("function"!=typeof i)throw new TypeError('"cb" argument must be a function');return f(n,e.length),h(r,n,e.length),p(e,n,r,i)},e.randomFillSync=function(e,n,r){void 0===n&&(n=0);if(!(s.isBuffer(e)||e instanceof t.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');f(n,e.length),void 0===r&&(r=e.length-n);return h(r,n,e.length),p(e,n,r)}):(e.randomFill=i,e.randomFillSync=i)}).call(this,n(11),n(14))},function(t,e){t.exports=e=window.fetch,e.default=window.fetch.bind(window),e.Headers=window.Headers,e.Request=window.Request,e.Response=window.Response},function(t,e,n){var r,i,a;i=[e,n(251)],void 0===(a="function"==typeof(r=function(t,e){"use strict";var r=n(223);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,e=r(e),t.default=class{constructor(){this.R=e}get CoreFunction(){return this.R}getIn(t,n,r){return e.pathOr(r,t,n)}setIn(t,n,r){return e.assocPath(t,n,r)}vstack(...t){}hstack(...t){}vsplit(t){}hsplit(t){return null}hsplitEvery(t,e){return console.log({vlen:t.length,splitSize:e}),this.R.splitEvery(e,t)}vsplitEvery(t,e){return null}zip(t,e){this.R.zip(t,e)}unzip(){}}})?r.apply(e,i):r)||(t.exports=a)},function(t,e){t.exports=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e);var r=function(){return!1},i=function(){return!0},a={"@@functional/placeholder":!0};function o(t){return null!=t&&"object"==typeof t&&!0===t["@@functional/placeholder"]}function s(t){return function e(n){return 0===arguments.length||o(n)?e:t.apply(this,arguments)}}function u(t){return function e(n,r){switch(arguments.length){case 0:return e;case 1:return o(n)?e:s(function(e){return t(n,e)});default:return o(n)&&o(r)?e:o(n)?s(function(e){return t(e,r)}):o(r)?s(function(e){return t(n,e)}):t(n,r)}}}var c=u(function(t,e){return Number(t)+Number(e)});function l(t,e){var n;e=e||[];var r=(t=t||[]).length,i=e.length,a=[];for(n=0;n<r;)a[a.length]=t[n],n+=1;for(n=0;n<i;)a[a.length]=e[n],n+=1;return a}function f(t,e){switch(t){case 0:return function(){return e.apply(this,arguments)};case 1:return function(t){return e.apply(this,arguments)};case 2:return function(t,n){return e.apply(this,arguments)};case 3:return function(t,n,r){return e.apply(this,arguments)};case 4:return function(t,n,r,i){return e.apply(this,arguments)};case 5:return function(t,n,r,i,a){return e.apply(this,arguments)};case 6:return function(t,n,r,i,a,o){return e.apply(this,arguments)};case 7:return function(t,n,r,i,a,o,s){return e.apply(this,arguments)};case 8:return function(t,n,r,i,a,o,s,u){return e.apply(this,arguments)};case 9:return function(t,n,r,i,a,o,s,u,c){return e.apply(this,arguments)};case 10:return function(t,n,r,i,a,o,s,u,c,l){return e.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}function h(t,e,n){return function(){for(var r=[],i=0,a=t,s=0;s<e.length||i<arguments.length;){var u;s<e.length&&(!o(e[s])||i>=arguments.length)?u=e[s]:(u=arguments[i],i+=1),r[s]=u,o(u)||(a-=1),s+=1}return a<=0?n.apply(this,r):f(a,h(t,r,n))}}var p=u(function(t,e){return 1===t?s(e):f(t,h(t,[],e))}),d=s(function(t){return p(t.length,function(){var e=0,n=arguments[0],r=arguments[arguments.length-1],i=Array.prototype.slice.call(arguments,0);return i[0]=function(){var t=n.apply(this,l(arguments,[e,r]));return e+=1,t},t.apply(this,i)})});function m(t){return function e(n,r,i){switch(arguments.length){case 0:return e;case 1:return o(n)?e:u(function(e,r){return t(n,e,r)});case 2:return o(n)&&o(r)?e:o(n)?u(function(e,n){return t(e,r,n)}):o(r)?u(function(e,r){return t(n,e,r)}):s(function(e){return t(n,r,e)});default:return o(n)&&o(r)&&o(i)?e:o(n)&&o(r)?u(function(e,n){return t(e,n,i)}):o(n)&&o(i)?u(function(e,n){return t(e,r,n)}):o(r)&&o(i)?u(function(e,r){return t(n,e,r)}):o(n)?s(function(e){return t(e,r,i)}):o(r)?s(function(e){return t(n,e,i)}):o(i)?s(function(e){return t(n,r,e)}):t(n,r,i)}}}var g=m(function(t,e,n){if(t>=n.length||t<-n.length)return n;var r=(t<0?n.length:0)+t,i=l(n);return i[r]=e(n[r]),i}),y=Array.isArray||function(t){return null!=t&&t.length>=0&&"[object Array]"===Object.prototype.toString.call(t)};function v(t){return null!=t&&"function"==typeof t["@@transducer/step"]}function b(t,e,n){return function(){if(0===arguments.length)return n();var r=Array.prototype.slice.call(arguments,0),i=r.pop();if(!y(i)){for(var a=0;a<t.length;){if("function"==typeof i[t[a]])return i[t[a]].apply(i,r);a+=1}if(v(i))return e.apply(null,r)(i)}return n.apply(this,arguments)}}function w(t){return t&&t["@@transducer/reduced"]?t:{"@@transducer/value":t,"@@transducer/reduced":!0}}var _={init:function(){return this.xf["@@transducer/init"]()},result:function(t){return this.xf["@@transducer/result"](t)}},x=function(){function t(t,e){this.xf=e,this.f=t,this.all=!0}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){return this.all&&(t=this.xf["@@transducer/step"](t,!0)),this.xf["@@transducer/result"](t)},t.prototype["@@transducer/step"]=function(t,e){return this.f(e)||(this.all=!1,t=w(this.xf["@@transducer/step"](t,!1))),t},t}(),E=u(b(["all"],u(function(t,e){return new x(t,e)}),function(t,e){for(var n=0;n<e.length;){if(!t(e[n]))return!1;n+=1}return!0})),S=u(function(t,e){return e>t?e:t});function N(t,e){for(var n=0,r=e.length,i=Array(r);n<r;)i[n]=t(e[n]),n+=1;return i}function I(t){return"[object String]"===Object.prototype.toString.call(t)}var O=s(function(t){return!!y(t)||!!t&&("object"==typeof t&&(!I(t)&&(1===t.nodeType?!!t.length:0===t.length||t.length>0&&(t.hasOwnProperty(0)&&t.hasOwnProperty(t.length-1)))))}),k=function(){function t(t){this.f=t}return t.prototype["@@transducer/init"]=function(){throw new Error("init not implemented on XWrap")},t.prototype["@@transducer/result"]=function(t){return t},t.prototype["@@transducer/step"]=function(t,e){return this.f(t,e)},t}();function A(t){return new k(t)}var C=u(function(t,e){return f(t.length,function(){return t.apply(e,arguments)})});function P(t,e,n){for(var r=n.next();!r.done;){if((e=t["@@transducer/step"](e,r.value))&&e["@@transducer/reduced"]){e=e["@@transducer/value"];break}r=n.next()}return t["@@transducer/result"](e)}function T(t,e,n,r){return t["@@transducer/result"](n[r](C(t["@@transducer/step"],t),e))}var R="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator";function D(t,e,n){if("function"==typeof t&&(t=A(t)),O(n))return function(t,e,n){for(var r=0,i=n.length;r<i;){if((e=t["@@transducer/step"](e,n[r]))&&e["@@transducer/reduced"]){e=e["@@transducer/value"];break}r+=1}return t["@@transducer/result"](e)}(t,e,n);if("function"==typeof n["fantasy-land/reduce"])return T(t,e,n,"fantasy-land/reduce");if(null!=n[R])return P(t,e,n[R]());if("function"==typeof n.next)return P(t,e,n);if("function"==typeof n.reduce)return T(t,e,n,"reduce");throw new TypeError("reduce: list must be array or iterable")}var M=function(){function t(t,e){this.xf=e,this.f=t}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=_.result,t.prototype["@@transducer/step"]=function(t,e){return this.xf["@@transducer/step"](t,this.f(e))},t}(),j=u(function(t,e){return new M(t,e)});function B(t,e){return Object.prototype.hasOwnProperty.call(e,t)}var L=Object.prototype.toString,z=function(){return"[object Arguments]"===L.call(arguments)?function(t){return"[object Arguments]"===L.call(t)}:function(t){return B("callee",t)}}(),F=!{toString:null}.propertyIsEnumerable("toString"),U=["constructor","valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],V=function(){return arguments.propertyIsEnumerable("length")}(),W=function(t,e){for(var n=0;n<t.length;){if(t[n]===e)return!0;n+=1}return!1},q="function"!=typeof Object.keys||V?s(function(t){if(Object(t)!==t)return[];var e,n,r=[],i=V&&z(t);for(e in t)!B(e,t)||i&&"length"===e||(r[r.length]=e);if(F)for(n=U.length-1;n>=0;)B(e=U[n],t)&&!W(r,e)&&(r[r.length]=e),n-=1;return r}):s(function(t){return Object(t)!==t?[]:Object.keys(t)}),$=u(b(["fantasy-land/map","map"],j,function(t,e){switch(Object.prototype.toString.call(e)){case"[object Function]":return p(e.length,function(){return t.call(this,e.apply(this,arguments))});case"[object Object]":return D(function(n,r){return n[r]=t(e[r]),n},{},q(e));default:return N(t,e)}})),H=u(function(t,e){for(var n=e,r=0;r<t.length;){if(null==n)return;n=n[t[r]],r+=1}return n}),K=u(function(t,e){return H([t],e)}),G=u(function(t,e){return $(K(t),e)}),X=m(D),Y=s(function(t){return p(X(S,0,G("length",t)),function(){for(var e=0,n=t.length;e<n;){if(!t[e].apply(this,arguments))return!1;e+=1}return!0})}),J=s(function(t){return function(){return t}}),Z=u(function(t,e){return t&&e}),Q=function(){function t(t,e){this.xf=e,this.f=t,this.any=!1}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){return this.any||(t=this.xf["@@transducer/step"](t,!1)),this.xf["@@transducer/result"](t)},t.prototype["@@transducer/step"]=function(t,e){return this.f(e)&&(this.any=!0,t=w(this.xf["@@transducer/step"](t,!0))),t},t}(),tt=u(b(["any"],u(function(t,e){return new Q(t,e)}),function(t,e){for(var n=0;n<e.length;){if(t(e[n]))return!0;n+=1}return!1})),et=s(function(t){return p(X(S,0,G("length",t)),function(){for(var e=0,n=t.length;e<n;){if(t[e].apply(this,arguments))return!0;e+=1}return!1})}),nt=u(function(t,e){return"function"==typeof e["fantasy-land/ap"]?e["fantasy-land/ap"](t):"function"==typeof t.ap?t.ap(e):"function"==typeof t?function(n){return t(n)(e(n))}:D(function(t,n){return l(t,$(n,e))},[],t)});function rt(t,e){for(var n=0,r=e.length-(t-1),i=new Array(r>=0?r:0);n<r;)i[n]=Array.prototype.slice.call(e,n,n+t),n+=1;return i}var it=function(){function t(t,e){this.xf=e,this.pos=0,this.full=!1,this.acc=new Array(t)}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){return this.acc=null,this.xf["@@transducer/result"](t)},t.prototype["@@transducer/step"]=function(t,e){return this.store(e),this.full?this.xf["@@transducer/step"](t,this.getCopy()):t},t.prototype.store=function(t){this.acc[this.pos]=t,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},t.prototype.getCopy=function(){return l(Array.prototype.slice.call(this.acc,this.pos),Array.prototype.slice.call(this.acc,0,this.pos))},t}(),at=u(b([],u(function(t,e){return new it(t,e)}),rt)),ot=u(function(t,e){return l(e,[t])}),st=u(function(t,e){return t.apply(this,e)}),ut=s(function(t){for(var e=q(t),n=e.length,r=[],i=0;i<n;)r[i]=t[e[i]],i+=1;return r});function ct(t,e){return q(e).reduce(function(n,r){return n[r]=t(e[r]),n},{})}var lt=s(function t(e){return e=ct(function(e){return"function"==typeof e?e:t(e)},e),p(X(S,0,G("length",ut(e))),function(){var t=arguments;return ct(function(e){return st(e,t)},e)})}),ft=u(function(t,e){return e(t)}),ht=m(function(t,e,n){var r=t(e),i=t(n);return r<i?-1:r>i?1:0}),pt=m(function(t,e,n){var r={};for(var i in n)r[i]=n[i];return r[t]=e,r}),dt=Number.isInteger||function(t){return t<<0===t},mt=s(function(t){return null==t}),gt=m(function t(e,n,r){if(0===e.length)return n;var i=e[0];if(e.length>1){var a=!mt(r)&&B(i,r)?r[i]:dt(e[1])?[]:{};n=t(Array.prototype.slice.call(e,1),n,a)}if(dt(i)&&y(r)){var o=[].concat(r);return o[i]=n,o}return pt(i,n,r)}),yt=u(function(t,e){switch(t){case 0:return function(){return e.call(this)};case 1:return function(t){return e.call(this,t)};case 2:return function(t,n){return e.call(this,t,n)};case 3:return function(t,n,r){return e.call(this,t,n,r)};case 4:return function(t,n,r,i){return e.call(this,t,n,r,i)};case 5:return function(t,n,r,i,a){return e.call(this,t,n,r,i,a)};case 6:return function(t,n,r,i,a,o){return e.call(this,t,n,r,i,a,o)};case 7:return function(t,n,r,i,a,o,s){return e.call(this,t,n,r,i,a,o,s)};case 8:return function(t,n,r,i,a,o,s,u){return e.call(this,t,n,r,i,a,o,s,u)};case 9:return function(t,n,r,i,a,o,s,u,c){return e.call(this,t,n,r,i,a,o,s,u,c)};case 10:return function(t,n,r,i,a,o,s,u,c,l){return e.call(this,t,n,r,i,a,o,s,u,c,l)};default:throw new Error("First argument to nAry must be a non-negative integer no greater than ten")}}),vt=s(function(t){return yt(2,t)});function bt(t){return"[object Function]"===Object.prototype.toString.call(t)}var wt=u(function(t,e){var n=p(t,e);return p(t,function(){return D(nt,$(n,arguments[0]),Array.prototype.slice.call(arguments,1))})}),_t=s(function(t){return wt(t.length,t)}),xt=u(function(t,e){return bt(t)?function(){return t.apply(this,arguments)&&e.apply(this,arguments)}:_t(Z)(t,e)}),Et=s(function(t){return p(t.length,t)}),St=Et(function(t){return t.apply(this,Array.prototype.slice.call(arguments,1))});function Nt(t){return function e(n){for(var r,i,a,o=[],s=0,u=n.length;s<u;){if(O(n[s]))for(a=0,i=(r=t?e(n[s]):n[s]).length;a<i;)o[o.length]=r[a],a+=1;else o[o.length]=n[s];s+=1}return o}}var It=function(t){var e=function(t){return{"@@transducer/init":_.init,"@@transducer/result":function(e){return t["@@transducer/result"](e)},"@@transducer/step":function(e,n){var r=t["@@transducer/step"](e,n);return r["@@transducer/reduced"]?{"@@transducer/value":r,"@@transducer/reduced":!0}:r}}}(t);return{"@@transducer/init":_.init,"@@transducer/result":function(t){return e["@@transducer/result"](t)},"@@transducer/step":function(t,n){return O(n)?D(e,t,n):D(e,t,[n])}}},Ot=u(b(["fantasy-land/chain","chain"],u(function(t,e){return $(t,It(e))}),function(t,e){return"function"==typeof e?function(n){return t(e(n))(n)}:Nt(!1)($(t,e))})),kt=m(function(t,e,n){if(t>e)throw new Error("min must not be greater than max in clamp(min, max, value)");return n<t?t:n>e?e:n});function At(t){return new RegExp(t.source,(t.global?"g":"")+(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.sticky?"y":"")+(t.unicode?"u":""))}var Ct=s(function(t){return null===t?"Null":void 0===t?"Undefined":Object.prototype.toString.call(t).slice(8,-1)});function Pt(t,e,n,r){var i=function(i){for(var a=e.length,o=0;o<a;){if(t===e[o])return n[o];o+=1}for(var s in e[o+1]=t,n[o+1]=i,t)i[s]=r?Pt(t[s],e,n,!0):t[s];return i};switch(Ct(t)){case"Object":return i({});case"Array":return i([]);case"Date":return new Date(t.valueOf());case"RegExp":return At(t);default:return t}}var Tt=s(function(t){return null!=t&&"function"==typeof t.clone?t.clone():Pt(t,[],[],!0)}),Rt=s(function(t){return function(e,n){return t(e,n)?-1:t(n,e)?1:0}}),Dt=s(function(t){return!t}),Mt=_t(Dt);function jt(t,e){return function(){return e.call(this,t.apply(this,arguments))}}function Bt(t,e){return function(){var n=arguments.length;if(0===n)return e();var r=arguments[n-1];return y(r)||"function"!=typeof r[t]?e.apply(this,arguments):r[t].apply(r,Array.prototype.slice.call(arguments,0,n-1))}}var Lt=m(Bt("slice",function(t,e,n){return Array.prototype.slice.call(n,t,e)})),zt=s(Bt("tail",Lt(1,1/0)));function Ft(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return f(arguments[0].length,X(jt,arguments[0],zt(arguments)))}var Ut=s(function(t){return I(t)?t.split("").reverse().join(""):Array.prototype.slice.call(t,0).reverse()});function Vt(){if(0===arguments.length)throw new Error("compose requires at least one argument");return Ft.apply(this,Ut(arguments))}function Wt(){if(0===arguments.length)throw new Error("composeK requires at least one argument");var t=Array.prototype.slice.call(arguments),e=t.pop();return Vt(Vt.apply(this,$(Ot,t)),e)}function qt(t,e){return function(){var n=this;return t.apply(n,arguments).then(function(t){return e.call(n,t)})}}function $t(){if(0===arguments.length)throw new Error("pipeP requires at least one argument");return f(arguments[0].length,X(qt,arguments[0],zt(arguments)))}function Ht(){if(0===arguments.length)throw new Error("composeP requires at least one argument");return $t.apply(this,Ut(arguments))}var Kt=u(function(t,e){var n=t<0?e.length+t:t;return I(e)?e.charAt(n):e[n]}),Gt=Kt(0);function Xt(t){return t}var Yt=s(Xt),Jt=u(function(t,e){if(e.length<=0)return Yt;var n=Gt(e),r=zt(e);return f(n.length,function(){return D(function(e,n){return t.call(this,n,e)},n.apply(this,arguments),r)})}),Zt=u(function(t,e){return Jt.apply(this,[t,Ut(e)])});function Qt(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}function te(t,e,n){for(var r=0,i=n.length;r<i;){if(t(e,n[r]))return!0;r+=1}return!1}var ee="function"==typeof Object.is?Object.is:function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e};function ne(t,e,n,r){var i=Qt(t);function a(t,e){return re(t,e,n.slice(),r.slice())}return!te(function(t,e){return!te(a,e,t)},Qt(e),i)}function re(t,e,n,r){if(ee(t,e))return!0;var i,a,o=Ct(t);if(o!==Ct(e))return!1;if(null==t||null==e)return!1;if("function"==typeof t["fantasy-land/equals"]||"function"==typeof e["fantasy-land/equals"])return"function"==typeof t["fantasy-land/equals"]&&t["fantasy-land/equals"](e)&&"function"==typeof e["fantasy-land/equals"]&&e["fantasy-land/equals"](t);if("function"==typeof t.equals||"function"==typeof e.equals)return"function"==typeof t.equals&&t.equals(e)&&"function"==typeof e.equals&&e.equals(t);switch(o){case"Arguments":case"Array":case"Object":if("function"==typeof t.constructor&&"Promise"===(i=t.constructor,null==(a=String(i).match(/^function (\w*)/))?"":a[1]))return t===e;break;case"Boolean":case"Number":case"String":if(typeof t!=typeof e||!ee(t.valueOf(),e.valueOf()))return!1;break;case"Date":if(!ee(t.valueOf(),e.valueOf()))return!1;break;case"Error":return t.name===e.name&&t.message===e.message;case"RegExp":if(t.source!==e.source||t.global!==e.global||t.ignoreCase!==e.ignoreCase||t.multiline!==e.multiline||t.sticky!==e.sticky||t.unicode!==e.unicode)return!1}for(var s=n.length-1;s>=0;){if(n[s]===t)return r[s]===e;s-=1}switch(o){case"Map":return t.size===e.size&&ne(t.entries(),e.entries(),n.concat([t]),r.concat([e]));case"Set":return t.size===e.size&&ne(t.values(),e.values(),n.concat([t]),r.concat([e]));case"Arguments":case"Array":case"Object":case"Boolean":case"Number":case"String":case"Date":case"Error":case"RegExp":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"ArrayBuffer":break;default:return!1}var u=q(t);if(u.length!==q(e).length)return!1;var c=n.concat([t]),l=r.concat([e]);for(s=u.length-1;s>=0;){var f=u[s];if(!B(f,e)||!re(e[f],t[f],c,l))return!1;s-=1}return!0}var ie=u(function(t,e){return re(t,e,[],[])});function ae(t,e,n){var r,i;if("function"==typeof t.indexOf)switch(typeof e){case"number":if(0===e){for(r=1/e;n<t.length;){if(0===(i=t[n])&&1/i===r)return n;n+=1}return-1}if(e!=e){for(;n<t.length;){if("number"==typeof(i=t[n])&&i!=i)return n;n+=1}return-1}return t.indexOf(e,n);case"string":case"boolean":case"function":case"undefined":return t.indexOf(e,n);case"object":if(null===e)return t.indexOf(e,n)}for(;n<t.length;){if(ie(t[n],e))return n;n+=1}return-1}function oe(t,e){return ae(e,t,0)>=0}function se(t){return'"'+t.replace(/\\/g,"\\\\").replace(/[\b]/g,"\\b").replace(/\f/g,"\\f").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t").replace(/\v/g,"\\v").replace(/\0/g,"\\0").replace(/"/g,'\\"')+'"'}var ue=function(t){return(t<10?"0":"")+t},ce="function"==typeof Date.prototype.toISOString?function(t){return t.toISOString()}:function(t){return t.getUTCFullYear()+"-"+ue(t.getUTCMonth()+1)+"-"+ue(t.getUTCDate())+"T"+ue(t.getUTCHours())+":"+ue(t.getUTCMinutes())+":"+ue(t.getUTCSeconds())+"."+(t.getUTCMilliseconds()/1e3).toFixed(3).slice(2,5)+"Z"};function le(t){return function(){return!t.apply(this,arguments)}}function fe(t,e){for(var n=0,r=e.length,i=[];n<r;)t(e[n])&&(i[i.length]=e[n]),n+=1;return i}function he(t){return"[object Object]"===Object.prototype.toString.call(t)}var pe=function(){function t(t,e){this.xf=e,this.f=t}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=_.result,t.prototype["@@transducer/step"]=function(t,e){return this.f(e)?this.xf["@@transducer/step"](t,e):t},t}(),de=u(b(["filter"],u(function(t,e){return new pe(t,e)}),function(t,e){return he(e)?D(function(n,r){return t(e[r])&&(n[r]=e[r]),n},{},q(e)):fe(t,e)})),me=u(function(t,e){return de(le(t),e)});function ge(t,e){var n=function(n){var r=e.concat([t]);return oe(n,r)?"<Circular>":ge(n,r)},r=function(t,e){return N(function(e){return se(e)+": "+n(t[e])},e.slice().sort())};switch(Object.prototype.toString.call(t)){case"[object Arguments]":return"(function() { return arguments; }("+N(n,t).join(", ")+"))";case"[object Array]":return"["+N(n,t).concat(r(t,me(function(t){return/^\d+$/.test(t)},q(t)))).join(", ")+"]";case"[object Boolean]":return"object"==typeof t?"new Boolean("+n(t.valueOf())+")":t.toString();case"[object Date]":return"new Date("+(isNaN(t.valueOf())?n(NaN):se(ce(t)))+")";case"[object Null]":return"null";case"[object Number]":return"object"==typeof t?"new Number("+n(t.valueOf())+")":1/t==-1/0?"-0":t.toString(10);case"[object String]":return"object"==typeof t?"new String("+n(t.valueOf())+")":se(t);case"[object Undefined]":return"undefined";default:if("function"==typeof t.toString){var i=t.toString();if("[object Object]"!==i)return i}return"{"+r(t,q(t)).join(", ")+"}"}}var ye=s(function(t){return ge(t,[])}),ve=u(function(t,e){if(y(t)){if(y(e))return t.concat(e);throw new TypeError(ye(e)+" is not an array")}if(I(t)){if(I(e))return t+e;throw new TypeError(ye(e)+" is not a string")}if(null!=t&&bt(t["fantasy-land/concat"]))return t["fantasy-land/concat"](e);if(null!=t&&bt(t.concat))return t.concat(e);throw new TypeError(ye(t)+' does not have a method named "concat" or "fantasy-land/concat"')}),be=s(function(t){return f(X(S,0,$(function(t){return t[0].length},t)),function(){for(var e=0;e<t.length;){if(t[e][0].apply(this,arguments))return t[e][1].apply(this,arguments);e+=1}})}),we=u(function(t,e){if(t>10)throw new Error("Constructor with greater than ten arguments");return 0===t?function(){return new e}:Et(yt(t,function(t,n,r,i,a,o,s,u,c,l){switch(arguments.length){case 1:return new e(t);case 2:return new e(t,n);case 3:return new e(t,n,r);case 4:return new e(t,n,r,i);case 5:return new e(t,n,r,i,a);case 6:return new e(t,n,r,i,a,o);case 7:return new e(t,n,r,i,a,o,s);case 8:return new e(t,n,r,i,a,o,s,u);case 9:return new e(t,n,r,i,a,o,s,u,c);case 10:return new e(t,n,r,i,a,o,s,u,c,l)}}))}),_e=s(function(t){return we(t.length,t)}),xe=u(oe),Ee=u(function(t,e){return p(X(S,0,G("length",e)),function(){var n=arguments,r=this;return t.apply(r,N(function(t){return t.apply(r,n)},e))})}),Se=function(){function t(t,e,n,r){this.valueFn=t,this.valueAcc=e,this.keyFn=n,this.xf=r,this.inputs={}}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){var e;for(e in this.inputs)if(B(e,this.inputs)&&(t=this.xf["@@transducer/step"](t,this.inputs[e]))["@@transducer/reduced"]){t=t["@@transducer/value"];break}return this.inputs=null,this.xf["@@transducer/result"](t)},t.prototype["@@transducer/step"]=function(t,e){var n=this.keyFn(e);return this.inputs[n]=this.inputs[n]||[n,this.valueAcc],this.inputs[n][1]=this.valueFn(this.inputs[n][1],e),t},t}(),Ne=h(4,[],b([],h(4,[],function(t,e,n,r){return new Se(t,e,n,r)}),function(t,e,n,r){return D(function(r,i){var a=n(i);return r[a]=t(B(a,r)?r[a]:e,i),r},{},r)})),Ie=Ne(function(t,e){return t+1},0),Oe=c(-1),ke=u(function(t,e){return null==e||e!=e?t:e}),Ae=m(function(t,e,n){var r=t(e),i=t(n);return r>i?-1:r<i?1:0});function Ce(t,e,n){var r,i=typeof t;switch(i){case"string":case"number":return 0===t&&1/t==-1/0?!!n._items["-0"]||(e&&(n._items["-0"]=!0),!1):null!==n._nativeSet?e?(r=n._nativeSet.size,n._nativeSet.add(t),n._nativeSet.size===r):n._nativeSet.has(t):i in n._items?t in n._items[i]||(e&&(n._items[i][t]=!0),!1):(e&&(n._items[i]={},n._items[i][t]=!0),!1);case"boolean":if(i in n._items){var a=t?1:0;return!!n._items[i][a]||(e&&(n._items[i][a]=!0),!1)}return e&&(n._items[i]=t?[!1,!0]:[!0,!1]),!1;case"function":return null!==n._nativeSet?e?(r=n._nativeSet.size,n._nativeSet.add(t),n._nativeSet.size===r):n._nativeSet.has(t):i in n._items?!!oe(t,n._items[i])||(e&&n._items[i].push(t),!1):(e&&(n._items[i]=[t]),!1);case"undefined":return!!n._items[i]||(e&&(n._items[i]=!0),!1);case"object":if(null===t)return!!n._items.null||(e&&(n._items.null=!0),!1);default:return(i=Object.prototype.toString.call(t))in n._items?!!oe(t,n._items[i])||(e&&n._items[i].push(t),!1):(e&&(n._items[i]=[t]),!1)}}var Pe=function(){function t(){this._nativeSet="function"==typeof Set?new Set:null,this._items={}}return t.prototype.add=function(t){return!Ce(t,!0,this)},t.prototype.has=function(t){return Ce(t,!1,this)},t}(),Te=u(function(t,e){for(var n=[],r=0,i=t.length,a=e.length,o=new Pe,s=0;s<a;s+=1)o.add(e[s]);for(;r<i;)o.add(t[r])&&(n[n.length]=t[r]),r+=1;return n}),Re=m(function(t,e,n){for(var r=[],i=0,a=e.length;i<a;)te(t,e[i],n)||te(t,e[i],r)||r.push(e[i]),i+=1;return r}),De=u(function(t,e){var n={};for(var r in e)n[r]=e[r];return delete n[t],n}),Me=m(function(t,e,n){var r=Array.prototype.slice.call(n,0);return r.splice(t,e),r}),je=m(function(t,e,n){return g(t,J(e),n)}),Be=u(function t(e,n){switch(e.length){case 0:return n;case 1:return dt(e[0])&&y(n)?Me(e[0],1,n):De(e[0],n);default:var r=e[0],i=Array.prototype.slice.call(e,1);return null==n[r]?n:dt(r)&&y(n)?je(r,t(i,n[r]),n):pt(r,t(i,n[r]),n)}}),Le=u(function(t,e){return t/e}),ze=function(){function t(t,e){this.xf=e,this.n=t}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=_.result,t.prototype["@@transducer/step"]=function(t,e){return this.n>0?(this.n-=1,t):this.xf["@@transducer/step"](t,e)},t}(),Fe=u(b(["drop"],u(function(t,e){return new ze(t,e)}),function(t,e){return Lt(Math.max(0,t),1/0,e)})),Ue=function(){function t(t,e){this.xf=e,this.n=t,this.i=0}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=_.result,t.prototype["@@transducer/step"]=function(t,e){this.i+=1;var n=0===this.n?t:this.xf["@@transducer/step"](t,e);return this.n>=0&&this.i>=this.n?w(n):n},t}(),Ve=u(b(["take"],u(function(t,e){return new Ue(t,e)}),function(t,e){return Lt(0,t<0?1/0:t,e)}));function We(t,e){return Ve(t<e.length?e.length-t:0,e)}var qe=function(){function t(t,e){this.xf=e,this.pos=0,this.full=!1,this.acc=new Array(t)}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){return this.acc=null,this.xf["@@transducer/result"](t)},t.prototype["@@transducer/step"]=function(t,e){return this.full&&(t=this.xf["@@transducer/step"](t,this.acc[this.pos])),this.store(e),t},t.prototype.store=function(t){this.acc[this.pos]=t,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},t}(),$e=u(b([],u(function(t,e){return new qe(t,e)}),We));function He(t,e){for(var n=e.length-1;n>=0&&t(e[n]);)n-=1;return Lt(0,n+1,e)}var Ke=function(){function t(t,e){this.f=t,this.retained=[],this.xf=e}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){return this.retained=null,this.xf["@@transducer/result"](t)},t.prototype["@@transducer/step"]=function(t,e){return this.f(e)?this.retain(t,e):this.flush(t,e)},t.prototype.flush=function(t,e){return t=D(this.xf["@@transducer/step"],t,this.retained),this.retained=[],this.xf["@@transducer/step"](t,e)},t.prototype.retain=function(t,e){return this.retained.push(e),t},t}(),Ge=u(b([],u(function(t,e){return new Ke(t,e)}),He)),Xe=function(){function t(t,e){this.xf=e,this.pred=t,this.lastValue=void 0,this.seenFirstValue=!1}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=_.result,t.prototype["@@transducer/step"]=function(t,e){var n=!1;return this.seenFirstValue?this.pred(this.lastValue,e)&&(n=!0):this.seenFirstValue=!0,this.lastValue=e,n?t:this.xf["@@transducer/step"](t,e)},t}(),Ye=u(function(t,e){return new Xe(t,e)}),Je=Kt(-1),Ze=u(b([],Ye,function(t,e){var n=[],r=1,i=e.length;if(0!==i)for(n[0]=e[0];r<i;)t(Je(n),e[r])||(n[n.length]=e[r]),r+=1;return n})),Qe=s(b([],Ye(ie),Ze(ie))),tn=function(){function t(t,e){this.xf=e,this.f=t}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=_.result,t.prototype["@@transducer/step"]=function(t,e){if(this.f){if(this.f(e))return t;this.f=null}return this.xf["@@transducer/step"](t,e)},t}(),en=u(b(["dropWhile"],u(function(t,e){return new tn(t,e)}),function(t,e){for(var n=0,r=e.length;n<r&&t(e[n]);)n+=1;return Lt(n,1/0,e)})),nn=u(function(t,e){return t||e}),rn=u(function(t,e){return bt(t)?function(){return t.apply(this,arguments)||e.apply(this,arguments)}:_t(nn)(t,e)}),an=s(function(t){return null!=t&&"function"==typeof t["fantasy-land/empty"]?t["fantasy-land/empty"]():null!=t&&null!=t.constructor&&"function"==typeof t.constructor["fantasy-land/empty"]?t.constructor["fantasy-land/empty"]():null!=t&&"function"==typeof t.empty?t.empty():null!=t&&null!=t.constructor&&"function"==typeof t.constructor.empty?t.constructor.empty():y(t)?[]:I(t)?"":he(t)?{}:z(t)?function(){return arguments}():void 0}),on=u(function(t,e){return Fe(t>=0?e.length-t:0,e)}),sn=u(function(t,e){return ie(on(t.length,e),t)}),un=m(function(t,e,n){return ie(t(e),t(n))}),cn=m(function(t,e,n){return ie(e[t],n[t])}),ln=u(function t(e,n){var r,i,a,o=n instanceof Array?[]:{};for(i in n)a=typeof(r=e[i]),o[i]="function"===a?r(n[i]):r&&"object"===a?t(r,n[i]):n[i];return o}),fn=function(){function t(t,e){this.xf=e,this.f=t,this.found=!1}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){return this.found||(t=this.xf["@@transducer/step"](t,void 0)),this.xf["@@transducer/result"](t)},t.prototype["@@transducer/step"]=function(t,e){return this.f(e)&&(this.found=!0,t=w(this.xf["@@transducer/step"](t,e))),t},t}(),hn=u(b(["find"],u(function(t,e){return new fn(t,e)}),function(t,e){for(var n=0,r=e.length;n<r;){if(t(e[n]))return e[n];n+=1}})),pn=function(){function t(t,e){this.xf=e,this.f=t,this.idx=-1,this.found=!1}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){return this.found||(t=this.xf["@@transducer/step"](t,-1)),this.xf["@@transducer/result"](t)},t.prototype["@@transducer/step"]=function(t,e){return this.idx+=1,this.f(e)&&(this.found=!0,t=w(this.xf["@@transducer/step"](t,this.idx))),t},t}(),dn=u(b([],u(function(t,e){return new pn(t,e)}),function(t,e){for(var n=0,r=e.length;n<r;){if(t(e[n]))return n;n+=1}return-1})),mn=function(){function t(t,e){this.xf=e,this.f=t}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){return this.xf["@@transducer/result"](this.xf["@@transducer/step"](t,this.last))},t.prototype["@@transducer/step"]=function(t,e){return this.f(e)&&(this.last=e),t},t}(),gn=u(b([],u(function(t,e){return new mn(t,e)}),function(t,e){for(var n=e.length-1;n>=0;){if(t(e[n]))return e[n];n-=1}})),yn=function(){function t(t,e){this.xf=e,this.f=t,this.idx=-1,this.lastIdx=-1}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=function(t){return this.xf["@@transducer/result"](this.xf["@@transducer/step"](t,this.lastIdx))},t.prototype["@@transducer/step"]=function(t,e){return this.idx+=1,this.f(e)&&(this.lastIdx=this.idx),t},t}(),vn=u(b([],u(function(t,e){return new yn(t,e)}),function(t,e){for(var n=e.length-1;n>=0;){if(t(e[n]))return n;n-=1}return-1})),bn=s(Nt(!0)),wn=s(function(t){return p(t.length,function(e,n){var r=Array.prototype.slice.call(arguments,0);return r[0]=n,r[1]=e,t.apply(this,r)})}),_n=u(Bt("forEach",function(t,e){for(var n=e.length,r=0;r<n;)t(e[r]),r+=1;return e})),xn=u(function(t,e){for(var n=q(e),r=0;r<n.length;){var i=n[r];t(e[i],i,e),r+=1}return e}),En=s(function(t){for(var e={},n=0;n<t.length;)e[t[n][0]]=t[n][1],n+=1;return e}),Sn=u(Bt("groupBy",Ne(function(t,e){return null==t&&(t=[]),t.push(e),t},null))),Nn=u(function(t,e){for(var n=[],r=0,i=e.length;r<i;){for(var a=r+1;a<i&&t(e[a-1],e[a]);)a+=1;n.push(e.slice(r,a)),r=a}return n}),In=u(function(t,e){return t>e}),On=u(function(t,e){return t>=e}),kn=u(function(t,e){if(0===t.length)return!1;for(var n=e,r=0;r<t.length;){if(!B(t[r],n))return!1;n=n[t[r]],r+=1}return!0}),An=u(function(t,e){return kn([t],e)}),Cn=u(function(t,e){return t in e}),Pn=u(ee),Tn=m(function(t,e,n){return p(Math.max(t.length,e.length,n.length),function(){return t.apply(this,arguments)?e.apply(this,arguments):n.apply(this,arguments)})}),Rn=c(1),Dn=u(oe),Mn=Ne(function(t,e){return e},null),jn=u(function(t,e){return"function"!=typeof e.indexOf||y(e)?ae(e,t,0):e.indexOf(t)}),Bn=Lt(0,-1),Ln=m(function(t,e,n){return fe(function(e){return te(t,e,n)},e)}),zn=m(function(t,e,n){t=t<n.length&&t>=0?t:n.length;var r=Array.prototype.slice.call(n,0);return r.splice(t,0,e),r}),Fn=m(function(t,e,n){return t=t<n.length&&t>=0?t:n.length,[].concat(Array.prototype.slice.call(n,0,t),e,Array.prototype.slice.call(n,t))}),Un=u(function(t,e){for(var n,r,i=new Pe,a=[],o=0;o<e.length;)n=t(r=e[o]),i.add(n)&&a.push(r),o+=1;return a}),Vn=Un(Yt),Wn=u(function(t,e){var n,r;return t.length>e.length?(n=t,r=e):(n=e,r=t),Vn(fe(wn(oe)(n),r))}),qn=u(Bt("intersperse",function(t,e){for(var n=[],r=0,i=e.length;r<i;)r===i-1?n.push(e[r]):n.push(e[r],t),r+=1;return n}));var $n="function"==typeof Object.assign?Object.assign:function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1,r=arguments.length;n<r;){var i=arguments[n];if(null!=i)for(var a in i)B(a,i)&&(e[a]=i[a]);n+=1}return e},Hn=u(function(t,e){var n={};return n[t]=e,n}),Kn={"@@transducer/init":Array,"@@transducer/step":function(t,e){return t.push(e),t},"@@transducer/result":Xt},Gn={"@@transducer/init":String,"@@transducer/step":function(t,e){return t+e},"@@transducer/result":Xt},Xn={"@@transducer/init":Object,"@@transducer/step":function(t,e){return $n(t,O(e)?Hn(e[0],e[1]):e)},"@@transducer/result":Xt};var Yn=m(function(t,e,n){return v(t)?D(e(t),t["@@transducer/init"](),n):D(e(function(t){if(v(t))return t;if(O(t))return Kn;if("string"==typeof t)return Gn;if("object"==typeof t)return Xn;throw new Error("Cannot create transformer for "+t)}(t)),Pt(t,[],[],!1),n)}),Jn=s(function(t){for(var e=q(t),n=e.length,r=0,i={};r<n;){var a=e[r],o=t[a],s=B(o,i)?i[o]:i[o]=[];s[s.length]=a,r+=1}return i}),Zn=s(function(t){for(var e=q(t),n=e.length,r=0,i={};r<n;){var a=e[r];i[t[a]]=a,r+=1}return i}),Qn=u(function(t,e){return p(t+1,function(){var n=arguments[t];if(null!=n&&bt(n[e]))return n[e].apply(n,Array.prototype.slice.call(arguments,0,t));throw new TypeError(ye(n)+' does not have a method named "'+e+'"')})}),tr=u(function(t,e){return null!=e&&e.constructor===t||e instanceof t}),er=s(function(t){return null!=t&&ie(t,an(t))}),nr=Qn(1,"join"),rr=s(function(t){return Ee(function(){return Array.prototype.slice.call(arguments,0)},t)}),ir=s(function(t){var e,n=[];for(e in t)n[n.length]=e;return n}),ar=u(function(t,e){if("function"!=typeof e.lastIndexOf||y(e)){for(var n=e.length-1;n>=0;){if(ie(e[n],t))return n;n-=1}return-1}return e.lastIndexOf(t)});function or(t){return"[object Number]"===Object.prototype.toString.call(t)}var sr=s(function(t){return null!=t&&or(t.length)?t.length:NaN}),ur=u(function(t,e){return function(n){return function(r){return $(function(t){return e(t,r)},n(t(r)))}}}),cr=s(function(t){return ur(Kt(t),je(t))}),lr=s(function(t){return ur(H(t),gt(t))}),fr=s(function(t){return ur(K(t),pt(t))}),hr=u(function(t,e){return t<e}),pr=u(function(t,e){return t<=e}),dr=m(function(t,e,n){for(var r=0,i=n.length,a=[],o=[e];r<i;)o=t(o[0],n[r]),a[r]=o[1],r+=1;return[o[0],a]}),mr=m(function(t,e,n){for(var r=n.length-1,i=[],a=[e];r>=0;)a=t(a[0],n[r]),i[r]=a[1],r-=1;return[a[0],i]}),gr=u(function(t,e){return D(function(n,r){return n[r]=t(e[r],r,e),n},{},q(e))}),yr=u(function(t,e){return e.match(t)||[]}),vr=u(function(t,e){return dt(t)?!dt(e)||e<1?NaN:(t%e+e)%e:NaN}),br=m(function(t,e,n){return t(n)>t(e)?n:e}),wr=X(c,0),_r=s(function(t){return wr(t)/t.length}),xr=s(function(t){var e=t.length;if(0===e)return NaN;var n=2-e%2,r=(e-n)/2;return _r(Array.prototype.slice.call(t,0).sort(function(t,e){return t<e?-1:t>e?1:0}).slice(r,r+n))}),Er=u(function(t,e){var n={};return f(e.length,function(){var r=t.apply(this,arguments);return B(r,n)||(n[r]=e.apply(this,arguments)),n[r]})}),Sr=u(function(t,e){return $n({},t,e)}),Nr=s(function(t){return $n.apply(null,[{}].concat(t))}),Ir=m(function(t,e,n){var r,i={};for(r in e)B(r,e)&&(i[r]=B(r,n)?t(r,e[r],n[r]):e[r]);for(r in n)B(r,n)&&!B(r,i)&&(i[r]=n[r]);return i}),Or=m(function t(e,n,r){return Ir(function(n,r,i){return he(r)&&he(i)?t(e,r,i):e(n,r,i)},n,r)}),kr=u(function(t,e){return Or(function(t,e,n){return e},t,e)}),Ar=u(function(t,e){return Or(function(t,e,n){return n},t,e)}),Cr=m(function(t,e,n){return Or(function(e,n,r){return t(n,r)},e,n)}),Pr=u(function(t,e){return $n({},e,t)}),Tr=u(function(t,e){return $n({},t,e)}),Rr=m(function(t,e,n){return Ir(function(e,n,r){return t(n,r)},e,n)}),Dr=u(function(t,e){return e<t?e:t}),Mr=m(function(t,e,n){return t(n)<t(e)?n:e}),jr=u(function(t,e){return t%e}),Br=m(function(t,e,n){var r=n.length,i=n.slice(),a=t<0?r+t:t,o=e<0?r+e:e,s=i.splice(a,1);return a<0||a>=n.length||o<0||o>=n.length?n:[].concat(i.slice(0,o)).concat(s).concat(i.slice(o,n.length))}),Lr=u(function(t,e){return t*e}),zr=s(function(t){return-t}),Fr=u(function(t,e){return E(le(t),e)}),Ur=s(function(t){return p(t<0?1:t+1,function(){return Kt(t,arguments)})}),Vr=m(function(t,e,n){return t(e(n))});function Wr(t){return[t]}var qr=s(Wr),$r=u(function(t,e){for(var n={},r={},i=0,a=t.length;i<a;)r[t[i]]=1,i+=1;for(var o in e)r.hasOwnProperty(o)||(n[o]=e[o]);return n}),Hr=s(function(t){var e,n=!1;return f(t.length,function(){return n?e:(n=!0,e=t.apply(this,arguments))})});function Kr(t,e){if(null==e||!bt(e.then))throw new TypeError("`"+t+"` expected a Promise, received "+ge(e,[]))}var Gr=u(function(t,e){return Kr("otherwise",e),e.then(null,t)}),Xr=function(t){return{value:t,map:function(e){return Xr(e(t))}}},Yr=m(function(t,e,n){return t(function(t){return Xr(e(t))})(n).value}),Jr=u(function(t,e){return[t,e]});function Zr(t){return u(function(e,n){return f(Math.max(0,e.length-n.length),function(){return e.apply(this,t(n,arguments))})})}var Qr=Zr(l),ti=Zr(wn(l)),ei=rr([de,me]),ni=m(function(t,e,n){return ie(H(t,n),e)}),ri=m(function(t,e,n){return ke(t,H(e,n))}),ii=m(function(t,e,n){return e.length>0&&t(H(e,n))}),ai=u(function(t,e){for(var n={},r=0;r<t.length;)t[r]in e&&(n[t[r]]=e[t[r]]),r+=1;return n}),oi=u(function(t,e){for(var n={},r=0,i=t.length;r<i;){var a=t[r];n[a]=e[a],r+=1}return n}),si=u(function(t,e){var n={};for(var r in e)t(e[r],r,e)&&(n[r]=e[r]);return n});function ui(){if(0===arguments.length)throw new Error("pipeK requires at least one argument");return Wt.apply(this,Ut(arguments))}var ci=u(function(t,e){return l([t],e)}),li=X(Lr,1),fi=u(function(t,e){return p(e.length,function(){for(var n=[],r=0;r<e.length;)n.push(e[r].call(this,arguments[r])),r+=1;return t.apply(this,n.concat(Array.prototype.slice.call(arguments,e.length)))})}),hi=fi(N,[oi,Yt]),pi=m(function(t,e,n){return ie(e,n[t])}),di=m(function(t,e,n){return tr(t,n[e])}),mi=m(function(t,e,n){return ri(t,[e],n)}),gi=m(function(t,e,n){return t(n[e])}),yi=u(function(t,e){for(var n=t.length,r=[],i=0;i<n;)r[i]=e[t[i]],i+=1;return r}),vi=u(function(t,e){if(!or(t)||!or(e))throw new TypeError("Both arguments to range must be numbers");for(var n=[],r=t;r<e;)n.push(r),r+=1;return n}),bi=m(function(t,e,n){for(var r=n.length-1;r>=0;)e=t(n[r],e),r-=1;return e}),wi=h(4,[],function(t,e,n,r){return D(function(n,r){return t(n,r)?e(n,r):w(n)},n,r)}),_i=s(w),xi=u(function(t,e){var n,r=Number(e),i=0;if(r<0||isNaN(r))throw new RangeError("n must be a non-negative number");for(n=new Array(r);i<r;)n[i]=t(i),i+=1;return n}),Ei=u(function(t,e){return xi(J(t),e)}),Si=m(function(t,e,n){return n.replace(t,e)}),Ni=m(function(t,e,n){for(var r=0,i=n.length,a=[e];r<i;)e=t(e,n[r]),a[r+1]=e,r+=1;return a}),Ii=u(function(t,e){return"function"==typeof e.sequence?e.sequence(t):bi(function(t,e){return nt($(ci,t),e)},t([]),e)}),Oi=m(function(t,e,n){return Yr(t,J(e),n)}),ki=u(function(t,e){return Array.prototype.slice.call(e,0).sort(t)}),Ai=u(function(t,e){return Array.prototype.slice.call(e,0).sort(function(e,n){var r=t(e),i=t(n);return r<i?-1:r>i?1:0})}),Ci=u(function(t,e){return Array.prototype.slice.call(e,0).sort(function(e,n){for(var r=0,i=0;0===r&&i<t.length;)r=t[i](e,n),i+=1;return r})}),Pi=Qn(1,"split"),Ti=u(function(t,e){return[Lt(0,t,e),Lt(t,sr(e),e)]}),Ri=u(function(t,e){if(t<=0)throw new Error("First argument to splitEvery must be a positive integer");for(var n=[],r=0;r<e.length;)n.push(Lt(r,r+=t,e));return n}),Di=u(function(t,e){for(var n=0,r=e.length,i=[];n<r&&!t(e[n]);)i.push(e[n]),n+=1;return[i,Array.prototype.slice.call(e,n)]}),Mi=u(function(t,e){return ie(Ve(t.length,e),t)}),ji=u(function(t,e){return Number(t)-Number(e)}),Bi=u(function(t,e){return ve(Te(t,e),Te(e,t))}),Li=m(function(t,e,n){return ve(Re(t,e,n),Re(t,n,e))}),zi=u(function(t,e){for(var n=e.length-1;n>=0&&t(e[n]);)n-=1;return Lt(n+1,1/0,e)}),Fi=function(){function t(t,e){this.xf=e,this.f=t}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=_.result,t.prototype["@@transducer/step"]=function(t,e){return this.f(e)?this.xf["@@transducer/step"](t,e):w(t)},t}(),Ui=u(b(["takeWhile"],u(function(t,e){return new Fi(t,e)}),function(t,e){for(var n=0,r=e.length;n<r&&t(e[n]);)n+=1;return Lt(0,n,e)})),Vi=function(){function t(t,e){this.xf=e,this.f=t}return t.prototype["@@transducer/init"]=_.init,t.prototype["@@transducer/result"]=_.result,t.prototype["@@transducer/step"]=function(t,e){return this.f(e),this.xf["@@transducer/step"](t,e)},t}(),Wi=u(b([],u(function(t,e){return new Vi(t,e)}),function(t,e){return t(e),e}));var qi=u(function(t,e){if(n=t,"[object RegExp]"!==Object.prototype.toString.call(n))throw new TypeError("‘test’ requires a value of type RegExp as its first argument; received "+ye(t));var n;return At(t).test(e)}),$i=u(function(t,e){return Kr("then",e),e.then(t)}),Hi=Qn(0,"toLowerCase"),Ki=s(function(t){var e=[];for(var n in t)B(n,t)&&(e[e.length]=[n,t[n]]);return e}),Gi=s(function(t){var e=[];for(var n in t)e[e.length]=[n,t[n]];return e}),Xi=Qn(0,"toUpperCase"),Yi=p(4,function(t,e,n,r){return D(t("function"==typeof e?A(e):e),n,r)}),Ji=s(function(t){for(var e=0,n=[];e<t.length;){for(var r=t[e],i=0;i<r.length;)void 0===n[i]&&(n[i]=[]),n[i].push(r[i]),i+=1;e+=1}return n}),Zi=m(function(t,e,n){return"function"==typeof n["fantasy-land/traverse"]?n["fantasy-land/traverse"](e,t):Ii(t,$(e,n))}),Qi="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff",ta=s("function"==typeof String.prototype.trim&&!Qi.trim()&&"​".trim()?function(t){return t.trim()}:function(t){var e=new RegExp("^["+Qi+"]["+Qi+"]*"),n=new RegExp("["+Qi+"]["+Qi+"]*$");return t.replace(e,"").replace(n,"")}),ea=u(function(t,e){return f(t.length,function(){try{return t.apply(this,arguments)}catch(t){return e.apply(this,l([t],arguments))}})}),na=s(function(t){return function(){return t(Array.prototype.slice.call(arguments,0))}}),ra=s(function(t){return yt(1,t)}),ia=u(function(t,e){return p(t,function(){for(var n,r=1,i=e,a=0;r<=t&&"function"==typeof i;)n=r===t?arguments.length:a+i.length,i=i.apply(this,Array.prototype.slice.call(arguments,a,n)),r+=1,a=n;return i})}),aa=u(function(t,e){for(var n=t(e),r=[];n&&n.length;)r[r.length]=n[0],n=t(n[1]);return r}),oa=u(Vt(Vn,l)),sa=u(function(t,e){for(var n,r=0,i=e.length,a=[];r<i;)te(t,n=e[r],a)||(a[a.length]=n),r+=1;return a}),ua=m(function(t,e,n){return sa(t,l(e,n))}),ca=m(function(t,e,n){return t(n)?n:e(n)}),la=Ot(Xt),fa=m(function(t,e,n){for(var r=n;!t(r);)r=e(r);return r}),ha=s(function(t){var e,n=[];for(e in t)n[n.length]=t[e];return n}),pa=function(t){return{value:t,"fantasy-land/map":function(){return this}}},da=u(function(t,e){return t(pa)(e).value}),ma=m(function(t,e,n){return t(n)?e(n):n}),ga=u(function(t,e){for(var n in t)if(B(n,t)&&!t[n](e[n]))return!1;return!0}),ya=u(function(t,e){return ga($(ie,t),e)}),va=u(function(t,e){return me(wn(oe)(t),e)}),ba=u(function(t,e){for(var n,r=0,i=t.length,a=e.length,o=[];r<i;){for(n=0;n<a;)o[o.length]=[t[r],e[n]],n+=1;r+=1}return o}),wa=u(function(t,e){for(var n=[],r=0,i=Math.min(t.length,e.length);r<i;)n[r]=[t[r],e[r]],r+=1;return n}),_a=u(function(t,e){for(var n=0,r=Math.min(t.length,e.length),i={};n<r;)i[t[n]]=e[n],n+=1;return i}),xa=m(function(t,e,n){for(var r=[],i=0,a=Math.min(e.length,n.length);i<a;)r[i]=t(e[i],n[i]),i+=1;return r}),Ea=s(function(t){return p(t.length,function(){var e=arguments;return function(){return t.apply(this,e)}})});n.d(e,"F",function(){return r}),n.d(e,"T",function(){return i}),n.d(e,"__",function(){return a}),n.d(e,"add",function(){return c}),n.d(e,"addIndex",function(){return d}),n.d(e,"adjust",function(){return g}),n.d(e,"all",function(){return E}),n.d(e,"allPass",function(){return Y}),n.d(e,"always",function(){return J}),n.d(e,"and",function(){return Z}),n.d(e,"any",function(){return tt}),n.d(e,"anyPass",function(){return et}),n.d(e,"ap",function(){return nt}),n.d(e,"aperture",function(){return at}),n.d(e,"append",function(){return ot}),n.d(e,"apply",function(){return st}),n.d(e,"applySpec",function(){return lt}),n.d(e,"applyTo",function(){return ft}),n.d(e,"ascend",function(){return ht}),n.d(e,"assoc",function(){return pt}),n.d(e,"assocPath",function(){return gt}),n.d(e,"binary",function(){return vt}),n.d(e,"bind",function(){return C}),n.d(e,"both",function(){return xt}),n.d(e,"call",function(){return St}),n.d(e,"chain",function(){return Ot}),n.d(e,"clamp",function(){return kt}),n.d(e,"clone",function(){return Tt}),n.d(e,"comparator",function(){return Rt}),n.d(e,"complement",function(){return Mt}),n.d(e,"compose",function(){return Vt}),n.d(e,"composeK",function(){return Wt}),n.d(e,"composeP",function(){return Ht}),n.d(e,"composeWith",function(){return Zt}),n.d(e,"concat",function(){return ve}),n.d(e,"cond",function(){return be}),n.d(e,"construct",function(){return _e}),n.d(e,"constructN",function(){return we}),n.d(e,"contains",function(){return xe}),n.d(e,"converge",function(){return Ee}),n.d(e,"countBy",function(){return Ie}),n.d(e,"curry",function(){return Et}),n.d(e,"curryN",function(){return p}),n.d(e,"dec",function(){return Oe}),n.d(e,"defaultTo",function(){return ke}),n.d(e,"descend",function(){return Ae}),n.d(e,"difference",function(){return Te}),n.d(e,"differenceWith",function(){return Re}),n.d(e,"dissoc",function(){return De}),n.d(e,"dissocPath",function(){return Be}),n.d(e,"divide",function(){return Le}),n.d(e,"drop",function(){return Fe}),n.d(e,"dropLast",function(){return $e}),n.d(e,"dropLastWhile",function(){return Ge}),n.d(e,"dropRepeats",function(){return Qe}),n.d(e,"dropRepeatsWith",function(){return Ze}),n.d(e,"dropWhile",function(){return en}),n.d(e,"either",function(){return rn}),n.d(e,"empty",function(){return an}),n.d(e,"endsWith",function(){return sn}),n.d(e,"eqBy",function(){return un}),n.d(e,"eqProps",function(){return cn}),n.d(e,"equals",function(){return ie}),n.d(e,"evolve",function(){return ln}),n.d(e,"filter",function(){return de}),n.d(e,"find",function(){return hn}),n.d(e,"findIndex",function(){return dn}),n.d(e,"findLast",function(){return gn}),n.d(e,"findLastIndex",function(){return vn}),n.d(e,"flatten",function(){return bn}),n.d(e,"flip",function(){return wn}),n.d(e,"forEach",function(){return _n}),n.d(e,"forEachObjIndexed",function(){return xn}),n.d(e,"fromPairs",function(){return En}),n.d(e,"groupBy",function(){return Sn}),n.d(e,"groupWith",function(){return Nn}),n.d(e,"gt",function(){return In}),n.d(e,"gte",function(){return On}),n.d(e,"has",function(){return An}),n.d(e,"hasIn",function(){return Cn}),n.d(e,"hasPath",function(){return kn}),n.d(e,"head",function(){return Gt}),n.d(e,"identical",function(){return Pn}),n.d(e,"identity",function(){return Yt}),n.d(e,"ifElse",function(){return Tn}),n.d(e,"inc",function(){return Rn}),n.d(e,"includes",function(){return Dn}),n.d(e,"indexBy",function(){return Mn}),n.d(e,"indexOf",function(){return jn}),n.d(e,"init",function(){return Bn}),n.d(e,"innerJoin",function(){return Ln}),n.d(e,"insert",function(){return zn}),n.d(e,"insertAll",function(){return Fn}),n.d(e,"intersection",function(){return Wn}),n.d(e,"intersperse",function(){return qn}),n.d(e,"into",function(){return Yn}),n.d(e,"invert",function(){return Jn}),n.d(e,"invertObj",function(){return Zn}),n.d(e,"invoker",function(){return Qn}),n.d(e,"is",function(){return tr}),n.d(e,"isEmpty",function(){return er}),n.d(e,"isNil",function(){return mt}),n.d(e,"join",function(){return nr}),n.d(e,"juxt",function(){return rr}),n.d(e,"keys",function(){return q}),n.d(e,"keysIn",function(){return ir}),n.d(e,"last",function(){return Je}),n.d(e,"lastIndexOf",function(){return ar}),n.d(e,"length",function(){return sr}),n.d(e,"lens",function(){return ur}),n.d(e,"lensIndex",function(){return cr}),n.d(e,"lensPath",function(){return lr}),n.d(e,"lensProp",function(){return fr}),n.d(e,"lift",function(){return _t}),n.d(e,"liftN",function(){return wt}),n.d(e,"lt",function(){return hr}),n.d(e,"lte",function(){return pr}),n.d(e,"map",function(){return $}),n.d(e,"mapAccum",function(){return dr}),n.d(e,"mapAccumRight",function(){return mr}),n.d(e,"mapObjIndexed",function(){return gr}),n.d(e,"match",function(){return yr}),n.d(e,"mathMod",function(){return vr}),n.d(e,"max",function(){return S}),n.d(e,"maxBy",function(){return br}),n.d(e,"mean",function(){return _r}),n.d(e,"median",function(){return xr}),n.d(e,"memoizeWith",function(){return Er}),n.d(e,"merge",function(){return Sr}),n.d(e,"mergeAll",function(){return Nr}),n.d(e,"mergeDeepLeft",function(){return kr}),n.d(e,"mergeDeepRight",function(){return Ar}),n.d(e,"mergeDeepWith",function(){return Cr}),n.d(e,"mergeDeepWithKey",function(){return Or}),n.d(e,"mergeLeft",function(){return Pr}),n.d(e,"mergeRight",function(){return Tr}),n.d(e,"mergeWith",function(){return Rr}),n.d(e,"mergeWithKey",function(){return Ir}),n.d(e,"min",function(){return Dr}),n.d(e,"minBy",function(){return Mr}),n.d(e,"modulo",function(){return jr}),n.d(e,"move",function(){return Br}),n.d(e,"multiply",function(){return Lr}),n.d(e,"nAry",function(){return yt}),n.d(e,"negate",function(){return zr}),n.d(e,"none",function(){return Fr}),n.d(e,"not",function(){return Dt}),n.d(e,"nth",function(){return Kt}),n.d(e,"nthArg",function(){return Ur}),n.d(e,"o",function(){return Vr}),n.d(e,"objOf",function(){return Hn}),n.d(e,"of",function(){return qr}),n.d(e,"omit",function(){return $r}),n.d(e,"once",function(){return Hr}),n.d(e,"or",function(){return nn}),n.d(e,"otherwise",function(){return Gr}),n.d(e,"over",function(){return Yr}),n.d(e,"pair",function(){return Jr}),n.d(e,"partial",function(){return Qr}),n.d(e,"partialRight",function(){return ti}),n.d(e,"partition",function(){return ei}),n.d(e,"path",function(){return H}),n.d(e,"pathEq",function(){return ni}),n.d(e,"pathOr",function(){return ri}),n.d(e,"pathSatisfies",function(){return ii}),n.d(e,"pick",function(){return ai}),n.d(e,"pickAll",function(){return oi}),n.d(e,"pickBy",function(){return si}),n.d(e,"pipe",function(){return Ft}),n.d(e,"pipeK",function(){return ui}),n.d(e,"pipeP",function(){return $t}),n.d(e,"pipeWith",function(){return Jt}),n.d(e,"pluck",function(){return G}),n.d(e,"prepend",function(){return ci}),n.d(e,"product",function(){return li}),n.d(e,"project",function(){return hi}),n.d(e,"prop",function(){return K}),n.d(e,"propEq",function(){return pi}),n.d(e,"propIs",function(){return di}),n.d(e,"propOr",function(){return mi}),n.d(e,"propSatisfies",function(){return gi}),n.d(e,"props",function(){return yi}),n.d(e,"range",function(){return vi}),n.d(e,"reduce",function(){return X}),n.d(e,"reduceBy",function(){return Ne}),n.d(e,"reduceRight",function(){return bi}),n.d(e,"reduceWhile",function(){return wi}),n.d(e,"reduced",function(){return _i}),n.d(e,"reject",function(){return me}),n.d(e,"remove",function(){return Me}),n.d(e,"repeat",function(){return Ei}),n.d(e,"replace",function(){return Si}),n.d(e,"reverse",function(){return Ut}),n.d(e,"scan",function(){return Ni}),n.d(e,"sequence",function(){return Ii}),n.d(e,"set",function(){return Oi}),n.d(e,"slice",function(){return Lt}),n.d(e,"sort",function(){return ki}),n.d(e,"sortBy",function(){return Ai}),n.d(e,"sortWith",function(){return Ci}),n.d(e,"split",function(){return Pi}),n.d(e,"splitAt",function(){return Ti}),n.d(e,"splitEvery",function(){return Ri}),n.d(e,"splitWhen",function(){return Di}),n.d(e,"startsWith",function(){return Mi}),n.d(e,"subtract",function(){return ji}),n.d(e,"sum",function(){return wr}),n.d(e,"symmetricDifference",function(){return Bi}),n.d(e,"symmetricDifferenceWith",function(){return Li}),n.d(e,"tail",function(){return zt}),n.d(e,"take",function(){return Ve}),n.d(e,"takeLast",function(){return on}),n.d(e,"takeLastWhile",function(){return zi}),n.d(e,"takeWhile",function(){return Ui}),n.d(e,"tap",function(){return Wi}),n.d(e,"test",function(){return qi}),n.d(e,"then",function(){return $i}),n.d(e,"times",function(){return xi}),n.d(e,"toLower",function(){return Hi}),n.d(e,"toPairs",function(){return Ki}),n.d(e,"toPairsIn",function(){return Gi}),n.d(e,"toString",function(){return ye}),n.d(e,"toUpper",function(){return Xi}),n.d(e,"transduce",function(){return Yi}),n.d(e,"transpose",function(){return Ji}),n.d(e,"traverse",function(){return Zi}),n.d(e,"trim",function(){return ta}),n.d(e,"tryCatch",function(){return ea}),n.d(e,"type",function(){return Ct}),n.d(e,"unapply",function(){return na}),n.d(e,"unary",function(){return ra}),n.d(e,"uncurryN",function(){return ia}),n.d(e,"unfold",function(){return aa}),n.d(e,"union",function(){return oa}),n.d(e,"unionWith",function(){return ua}),n.d(e,"uniq",function(){return Vn}),n.d(e,"uniqBy",function(){return Un}),n.d(e,"uniqWith",function(){return sa}),n.d(e,"unless",function(){return ca}),n.d(e,"unnest",function(){return la}),n.d(e,"until",function(){return fa}),n.d(e,"update",function(){return je}),n.d(e,"useWith",function(){return fi}),n.d(e,"values",function(){return ut}),n.d(e,"valuesIn",function(){return ha}),n.d(e,"view",function(){return da}),n.d(e,"when",function(){return ma}),n.d(e,"where",function(){return ga}),n.d(e,"whereEq",function(){return ya}),n.d(e,"without",function(){return va}),n.d(e,"xprod",function(){return ba}),n.d(e,"zip",function(){return wa}),n.d(e,"zipObj",function(){return _a}),n.d(e,"zipWith",function(){return xa}),n.d(e,"thunkify",function(){return Ea})},function(t,e,n){"use strict";n.r(e);var r=n(0),i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function a(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o,s=function(){return(s=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function u(t,e,n,r){return new(n||(n=Promise))(function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})}function c(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}function l(){return null==o&&(o=r.f.get("EPSILON")),o}var f=0;function h(){return f++}var p={};function d(t){return void 0===t&&(t=""),t in p||(p[t]=0),p[t]+=1,t+p[t].toString()}var m={float32:{},int32:{}},g="float32";function y(t,e){return void 0===e&&(e=g),null==m[e][t]&&(m[e][t]=Object(r.pd)(t,e),Object(r.Rb)(m[e][t])),m[e][t]}var v=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error),b=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error),w=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error),_=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error),x=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error);!function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}a(e,t)}(Error);function E(t,e){if(Array.isArray(t)){for(var n=[],r=0;r<e;r++)n=n.concat(t);return n}return(n=new Array(e)).fill(t),n}function S(t,e){if(!t)throw new x(e)}function N(t,e){for(var n=0,r=0,i=t;r<i.length;r++)i[r]===e&&n++;return n}function I(t){return 1===t.length?t[0]:t}function O(t){return Array.isArray(t)?t:[t]}function k(t){var e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function A(t){return t.length<=1?t:-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,function(t,e){return e.toUpperCase()})}var C={};function P(t){return null==t?null:{className:t.getClassName(),config:t.getConfig()}}function T(t,e,n,r,i){if(void 0===e&&(e={}),void 0===n&&(n={}),void 0===r&&(r="object"),void 0===i&&(i=!1),"string"==typeof t){var a=t,o=void 0;if(a in n)o=n[a];else if(a in C)o=C[a];else if(null==(o=e[a]))throw new w("Unknown "+r+": "+t+". This may be due to one of the following reasons:\n1. The "+r+" is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom "+r+" is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");return o}var u=t;if(null==u.className||null==u.config)throw new w(r+": Improper config format: "+JSON.stringify(u)+".\n'className' and 'config' must set.");var c,l,f,h=u.className,p=void 0,d=void 0;if(h in n?(p=(c=n.get(h))[0],d=c[1]):h in C?(p=(l=C.className)[0],d=l[1]):h in e&&(p=(f=e[h])[0],d=f[1]),null==p)throw new w("Unknown "+r+": "+h+". This may be due to one of the following reasons:\n1. The "+r+" is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom "+r+" is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");if(null!=d){for(var m={},g=0,y=Object.keys(C);g<y.length;g++)m[S=y[g]]=C[S];for(var v=0,b=Object.keys(n);v<b.length;v++)m[S=b[v]]=n[S];u.config.customObjects=m;for(var _=s({},C),x=0,E=Object.keys(n);x<E.length;x++){var S=E[x];C[S]=n[S]}var N=d(p,u.config,n,i);return C=s({},_),N}_=s({},C);for(var I=0,O=Object.keys(n);I<O.length;I++)S=O[I],C[S]=n[S];return N=new p(u.config),C=s({},_),N}function R(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function D(t){if(null==t)return t;for(var e=[],n=0,r=t;n<r.length;n++){var i=r[n];-1===e.indexOf(i)&&e.push(i)}return e}function M(t){if(null==t)throw new w("Invalid value in obj: "+JSON.stringify(t));for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function j(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new w(n+" is not a valid "+e+".  Valid values are "+t+" or null/undefined.")}function B(t,e,n,r){return void 0===n&&(n=0),void 0===r&&(r=1/0),S(n>=0),S(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every(function(t){return typeof t===e})}function L(t,e){return Object(r.ge)(function(){return Object(r.Ld)(Object(r.Vd)(Object(r.Ac)(t,t),e,!0))})}var z=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.getConfig=function(){return{}},e}(r.td.Serializable),F=function(t){function e(e){var n=t.call(this)||this;return n.defaultMaxValue=2,n.defaultAxis=0,n.maxValue=null!=e.maxValue?e.maxValue:n.defaultMaxValue,n.axis=null!=e.axis?e.axis:n.defaultAxis,n}return a(e,t),e.prototype.apply=function(t){var e=this;return Object(r.ge)(function(){var n=L(t,e.axis),i=Object(r.Q)(n,0,e.maxValue);return Object(r.zc)(t,Object(r.lb)(i,Object(r.u)(y(l()),n)))})},e.prototype.getConfig=function(){return{maxValue:this.maxValue,axis:this.axis}},e.className="MaxNorm",e}(z);r.td.registerClass(F);var U=function(t){function e(e){var n=t.call(this)||this;return n.defaultAxis=0,n.axis=null!=e.axis?e.axis:n.defaultAxis,n}return a(e,t),e.prototype.apply=function(t){var e=this;return Object(r.ge)(function(){return Object(r.lb)(t,Object(r.u)(y(l()),L(t,e.axis)))})},e.prototype.getConfig=function(){return{axis:this.axis}},e.className="UnitNorm",e}(z);r.td.registerClass(U);var V=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.fd)(t)},e.className="NonNeg",e}(z);r.td.registerClass(V);var W=function(t){function e(e){var n=t.call(this)||this;return n.defaultMinValue=0,n.defaultMaxValue=1,n.defaultRate=1,n.defaultAxis=0,n.minValue=null!=e.minValue?e.minValue:n.defaultMinValue,n.maxValue=null!=e.maxValue?e.maxValue:n.defaultMaxValue,n.rate=null!=e.rate?e.rate:n.defaultRate,n.axis=null!=e.axis?e.axis:n.defaultAxis,n}return a(e,t),e.prototype.apply=function(t){var e=this;return Object(r.ge)(function(){var n=L(t,e.axis),i=Object(r.u)(Object(r.zc)(y(e.rate),Object(r.Q)(n,e.minValue,e.maxValue)),Object(r.zc)(y(1-e.rate),n));return Object(r.zc)(t,Object(r.lb)(i,Object(r.u)(y(l()),n)))})},e.prototype.getConfig=function(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}},e.className="MinMaxNorm",e}(z);r.td.registerClass(W);var q={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function $(t){return P(t)}function H(t,e){return void 0===e&&(e={}),T(t,r.td.SerializationMap.getMap().classNameMap,e,"constraint")}function K(t){return null==t?null:"string"==typeof t?H({className:t in q?q[t]:t,config:{}}):t instanceof z?t:H(t)}var G=Object.freeze({maxNorm:function(t){return new F(t)},unitNorm:function(t){return new U(t)},nonNeg:function(){return new V},minMaxNorm:function(t){return new W(t)}}),X=new Map,Y=["channelsFirst","channelsLast"];function J(t){j(Y,"DataFormat",t)}var Z=["valid","same","causal"];function Q(t){j(Z,"PaddingMode",t)}var tt=["max","avg"];var et=[],nt="/";function rt(t,e){et.push(t);try{var n=e();return et.pop(),n}catch(t){throw et.pop(),t}}function it(t){if(!st(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===et.length?"":et.join(nt)+nt)+t}function at(t){if(!st(t))throw new Error("Not a valid tensor name: '"+t+"'");X.has(t)||X.set(t,0);var e=X.get(t);if(X.set(t,X.get(t)+1),e>0){var n=t+"_"+e;return X.set(n,1),n}return t}var ot=new RegExp(/^[A-Za-z][-A-Za-z0-9\._\/]*$/);function st(t){return!!t.match(ot)}function ut(t){return t===parseInt(t.toString(),10)}function ct(t,e,n){null==e&&(e=0),null==n&&(n=t.length);for(var r=1,i=e;i<n;++i)r*=t[i];return r}function lt(t){return t=Array.isArray(t)?new Float32Array(t):t,Object(r.Zd)(t)}function ft(t){return Object(r.sc)(lt(t)).dataSync()[0]}function ht(t){return Object(r.mc)(lt(t)).dataSync()[0]}function pt(t,e){if(e<t)throw new w("end ("+e+") < begin ("+t+") is forbidden.");for(var n=[],r=t;r<e;++r)n.push(r);return n}function dt(t,e){return t.asType(e)}function mt(t,e){void 0===e&&(e=-1);var n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function gt(t,e,n){return Object(r.ge)(function(){switch(t.rank){case 1:return Object(r.Bd)(t,e,n);case 2:return Object(r.Cd)(t,[e,0],[n,t.shape[1]]);case 3:return Object(r.Dd)(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return Object(r.Ed)(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);default:throw new w("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function yt(t,e,n){return Object(r.ge)(function(){switch(t.rank){case 1:return Object(r.Bd)(t,e,n);case 2:return Object(r.Cd)(t,[0,e],[t.shape[0],n]);case 3:return Object(r.Dd)(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return Object(r.Ed)(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new w("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function vt(t,e,n,i){return Object(r.ge)(function(){switch(t.rank){case 1:return Object(r.Bd)(t,e,n);case 2:switch(i){case 1:return gt(t,e,n);case 2:return yt(t,e,n);default:throw new w("The axis is not within the rank of the tensor "+i)}case 3:switch(i){case 1:return gt(t,e,n);case 2:return Object(r.Dd)(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return yt(t,e,n);default:throw new w("The axis is not within the rank of the tensor "+i)}case 4:switch(i){case 1:return gt(t,e,n);case 2:return Object(r.Ed)(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return Object(r.Ed)(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return yt(t,e,n);default:throw new w("The axis is not within the rank of the tensor "+i)}default:throw new w("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function bt(t,e){var n;return void 0===e&&(e=-1),e<0&&(e=0!==(n=t[0].rank)?n:0),e===t[0].rank&&(e=-1),Object(r.T)(t,e)}function wt(t,e){switch(t.rank){case 1:return Object(r.U)([t,e]);case 2:return Object(r.V)([t,e],0);case 3:return Object(r.W)([t,e],0);case 4:return Object(r.X)([t,e],0);default:throw new w("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function _t(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new w("The length of input n ("+e.length+") does not match the number of dimensions in input x ("+t.rank+")");return Object(r.he)(t,e)}function xt(t,e,n,i,a){return void 0===e&&(e=0),void 0===n&&(n=1),Object(r.ad)(t,e,n,i,a)}function Et(t,e){if(t.rank<2||e.rank<2)throw new _("dot requires both inputs to be rank >= 2 but got x shape = "+t.shape+" and y shape = "+e.shape);if(e.rank>=3&&(i=t.shape.slice(-1)[0])!==(s=e.shape.slice(-2)[0]))throw new _("If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = "+t.shape+" and  y shape = "+e.shape);if(2===t.rank&&2===e.rank)return Object(r.kc)(t,e);var n=t.shape.slice(),i=n.pop();t=t.reshape([-1,i]);var a=e.shape.slice(),o=a.pop(),s=a.pop(),u=a.concat([o]),c=Array.from({length:e.rank},function(t,n){return 0===n?e.rank-2:n<=e.rank-2?n-1:n});e=e.transpose(c).reshape([s,-1]);var l=n.concat(u);return Object(r.kc)(t,e).reshape(l)}function St(t,e,n){return Object(r.ge)(function(){return e=Array.isArray(e)?Object(r.Zd)(e,"int32"):e.toInt(),Object(r.Db)(t,e,n)})}function Nt(t){return Object(r.Ac)(t,t)}function It(t,e,n){return Object(r.ge)(function(){if(null==n&&(n="channelsLast"),J(n),1!==e.rank&&e.rank!==t.rank)throw new w("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t.rank);var r,i=e.shape;if(5===t.rank)"channelsFirst"===n?r=1===i.length?t.add(e.reshape([1,i[0],1,1,1])):t.add(e.reshape([1,i[3],i[0],i[1],i[2]])):"channelsLast"===n&&(r=1===i.length?t.add(e.reshape([1,1,1,1,i[0]])):t.add(e.reshape([1].concat(i))));else if(4===t.rank)"channelsFirst"===n?r=1===i.length?t.add(e.reshape([1,i[0],1,1])):t.add(e.reshape([1,i[2],i[0],i[1]])):"channelsLast"===n&&(r=1===i.length?t.add(e.reshape([1,1,1,i[0]])):t.add(e.reshape([1].concat(i))));else if(3===t.rank)"channelsFirst"===n?r=1===i.length?t.add(e.reshape([1,i[0],1])):t.add(e.reshape([1,i[1],i[0]])):"channelsLast"===n&&(r=1===i.length?t.add(e.reshape([1,1,i[0]])):t.add(e.reshape([1].concat(i))));else{if(!(t.rank<3))throw new w("Unsupported input rank by biasAdd: "+t.rank);r=t.add(e)}return r})}function Ot(t,e,n,i){return Object(r.ge)(function(){if(null!=n&&!r.qe.arraysEqual(t.shape,n))throw new _("Non-default noise shape is not implemented yet: "+JSON.stringify(n));if(null!=i)throw new _("seed is not implemented for dropout yet.");var a=Object(r.Rd)(Object(r.u)(Object(r.Dc)(e),Object(r.bd)(t.shape,0,1,"float32")));return a=Object(r.zc)(Object(r.lb)(y(1),Object(r.Td)(y(1),e)),a),Object(r.zc)(t,a)})}function kt(t,e,n){return void 0===n&&(n=!1),n?t():e()}var At=["fanIn","fanOut","fanAvg"];var Ct=["normal","uniform"];var Pt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.fromConfigUsesCustomObjects=function(){return!1},e.prototype.getConfig=function(){return{}},e}(r.td.Serializable),Tt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){return Object(r.ze)(t,e)},e.className="Zeros",e}(Pt);r.td.registerClass(Tt);var Rt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){return Object(r.Jc)(t,e)},e.className="Ones",e}(Pt);r.td.registerClass(Rt);var Dt=function(t){function e(e){var n=t.call(this)||this;if("object"!=typeof e)throw new w("Expected argument of type ConstantConfig but got "+e);if(void 0===e.value)throw new w("config must have value set but got "+e);return n.value=e.value,n}return a(e,t),e.prototype.apply=function(t,e){var n=this;return Object(r.ge)(function(){return Object(r.zc)(Object(r.pd)(n.value),Object(r.Jc)(t,e))})},e.prototype.getConfig=function(){return{value:this.value}},e.className="Constant",e}(Pt);r.td.registerClass(Dt);var Mt=function(t){function e(e){var n=t.call(this)||this;return n.DEFAULT_MINVAL=-.05,n.DEFAULT_MAXVAL=.05,n.minval=e.minval||n.DEFAULT_MINVAL,n.maxval=e.maxval||n.DEFAULT_MAXVAL,n.seed=e.seed,n}return a(e,t),e.prototype.apply=function(t,e){return Object(r.bd)(t,this.minval,this.maxval,e)},e.prototype.getConfig=function(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}},e.className="RandomUniform",e}(Pt);r.td.registerClass(Mt);var jt=function(t){function e(e){var n=t.call(this)||this;return n.DEFAULT_MEAN=0,n.DEFAULT_STDDEV=.05,n.mean=e.mean||n.DEFAULT_MEAN,n.stddev=e.stddev||n.DEFAULT_STDDEV,n.seed=e.seed,n}return a(e,t),e.prototype.apply=function(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new _("randomNormal does not support dType "+e+".");return xt(t,this.mean,this.stddev,e,this.seed)},e.prototype.getConfig=function(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}},e.className="RandomNormal",e}(Pt);r.td.registerClass(jt);var Bt=function(t){function e(e){var n=t.call(this)||this;return n.DEFAULT_MEAN=0,n.DEFAULT_STDDEV=.05,n.mean=e.mean||n.DEFAULT_MEAN,n.stddev=e.stddev||n.DEFAULT_STDDEV,n.seed=e.seed,n}return a(e,t),e.prototype.apply=function(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new _("truncatedNormal does not support dType "+e+".");return Object(r.ne)(t,this.mean,this.stddev,e,this.seed)},e.prototype.getConfig=function(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}},e.className="TruncatedNormal",e}(Pt);r.td.registerClass(Bt);var Lt=function(t){function e(e){var n=t.call(this)||this;return n.gain=null!=e.gain?Object(r.pd)(e.gain):y(1),n}return a(e,t),e.prototype.apply=function(t,e){var n=this;return Object(r.ge)(function(){if(2!==t.length||t[0]!==t[1])throw new w("Identity matrix initializer can only be used for 2D square matrices.");return Object(r.zc)(n.gain,Object(r.xb)(t[0]))})},e.prototype.getConfig=function(){return{gain:this.gain.get()}},e.className="Identity",e}(Pt);r.td.registerClass(Lt);var zt=function(t){function e(e){var n=t.call(this)||this;if(e.scale<0)throw new w("scale must be a positive float. Got: "+e.scale);return n.scale=null==e.scale?1:e.scale,n.mode=e.mode,function(t){j(At,"FanMode",t)}(n.mode),n.distribution=e.distribution,function(t){j(Ct,"Distribution",t)}(n.distribution),n.seed=e.seed,n}return a(e,t),e.prototype.apply=function(t,e){var n=function(t,e){var n,r;if(void 0===e&&(e="channelsLast"),J(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length))if("channelsFirst"===e){var i=ct(t,2);n=t[1]*i,r=t[0]*i}else"channelsLast"===e&&(i=ct(t,0,t.length-2),n=t[t.length-2]*i,r=t[t.length-1]*i);else{var a=ct(t);n=Math.sqrt(a),r=Math.sqrt(a)}return[n,r]}(t),i=n[0],a=n[1],o=this.scale;if("fanIn"===this.mode?o/=Math.max(1,i):"fanOut"===this.mode?o/=Math.max(1,a):o/=Math.max(1,(i+a)/2),"normal"===this.distribution){var s=Math.sqrt(o);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new _(this.getClassName()+" does not support dType "+e+".");return Object(r.ne)(t,0,s,e,this.seed)}var u=Math.sqrt(3*o);return Object(r.bd)(t,-u,u,e)},e.prototype.getConfig=function(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}},e.className="VarianceScaling",e}(Pt);r.td.registerClass(zt);var Ft=function(t){function e(e){return t.call(this,{scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="GlorotUniform",e}(zt);r.td.registerClass(Ft);var Ut=function(t){function e(e){return t.call(this,{scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="GlorotNormal",e}(zt);r.td.registerClass(Ut);var Vt=function(t){function e(e){return t.call(this,{scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="HeNormal",e}(zt);r.td.registerClass(Vt);var Wt=function(t){function e(e){return t.call(this,{scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="LeCunNormal",e}(zt);r.td.registerClass(Wt);var qt=function(t){function e(e){var n=t.call(this)||this;if(n.DEFAULT_GAIN=1,n.gain=null==e.gain?n.DEFAULT_GAIN:e.gain,n.seed=e.seed,null!=n.seed)throw new _("Random seed is not implemented for Orthogonal Initializer yet.");return n}return a(e,t),e.prototype.apply=function(t,e){var n=this;return Object(r.ge)(function(){if(2!==t.length)throw new _("The Orthogonal Initializer does not support non-2D shapes yet.");t[0]*t[1]>2e3&&console.warn("Orthogonal initializer is being called on a matrix with more than 2000 ("+t[0]*t[1]+") elements: Slowness may result.");var e=xt(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32"),i=r.Xb.gramSchmidt(e);return t[0]>t[1]&&(i=i.transpose()),Object(r.zc)(y(n.gain),i)})},e.prototype.getConfig=function(){return{gain:this.gain,seed:this.seed}},e.className="Orthogonal",e}(Pt);r.td.registerClass(qt);var $t={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",identity:"Identity",leCunNormal:"LeCunNormal",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Ht(t,e){return void 0===e&&(e={}),T(t,r.td.SerializationMap.getMap().classNameMap,e,"initializer")}function Kt(t){return P(t)}function Gt(t){if("string"==typeof t){var e=t in $t?$t[t]:t;return"GlorotUniform"===e?new Ft:"GlorotNormal"===e?new Ut:"HeNormal"===e?new Vt:"LeCunNormal"===e?new Wt:Ht({className:e,config:{}})}return t instanceof Pt?t:Ht(t)}var Xt=Object.freeze({zeros:function(){return new Tt},ones:function(){return new Rt},constant:function(t){return new Dt(t)},randomUniform:function(t){return new Mt(t)},randomNormal:function(t){return new jt(t)},truncatedNormal:function(t){return new Bt(t)},identity:function(t){return new Lt(t)},varianceScaling:function(t){return new zt(t)},glorotUniform:function(t){return new Ft(t)},glorotNormal:function(t){return new Ut(t)},heNormal:function(t){return new Vt(t)},leCunNormal:function(t){return new Wt(t)},orthogonal:function(t){return new qt(t)}});function Yt(t){return Array.isArray(t)&&Array.isArray(t[0])}function Jt(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function Zt(t){var e;if(Array.isArray(t)){if(1!==t.length)throw new w("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function Qt(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new w("Expected exactly 1 Shape; got "+t.length)}return t}function te(t){for(var e=0,n=0,r=t;n<r.length;n++){var i=r[n];0===i.shape.length?e+=1:e+=i.shape.reduce(function(t,e){return t*e})}return e}var ee="Variable",ne=function(){function t(t,e,n,i,a){void 0===e&&(e="float32"),void 0===n&&(n=ee),void 0===i&&(i=!0),void 0===a&&(a=null),this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=h(),n=null==n?ee:n,this.originalName=it(n),this.name=at(this.originalName),this.trainable=i,this.constraint=a,this.val=Object(r.te)(t,this.trainable,this.name,this.dtype)}return t.prototype.read=function(){return this.assertNotDisposed(),this.val},t.prototype.write=function(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this},t.prototype.dispose=function(){this.assertNotDisposed(),this.val.dispose()},t.prototype.assertNotDisposed=function(){if(this.val.isDisposed)throw new Error("LayersVariable "+this.name+" is already disposed.")},t}();function re(t){return t.map(function(t){return t.read()})}function ie(t){t.map(function(t){t[0].write(t[1])})}var ae=function(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}},oe=function(t,e,n,r,i,a,o){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=i,this.outputTensorIndex=o,this.id=h(),null!=a&&(this.originalName=it(a),this.name=at(this.originalName)),this.rank=e.length},se=0,ue=function(){function t(t,e){this.callArgs=e,this.id=se++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(var n=0,r=t.inboundLayers;n<r.length;n++){var i=r[n];null!=i&&i.outboundNodes.push(this)}t.outboundLayer.inboundNodes.push(this)}return t.prototype.getConfig=function(){for(var t=[],e=0,n=this.inboundLayers;e<n.length;e++){var r=n[e];null!=r?t.push(r.name):t.push(null)}return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}},t}(),ce=0,le=function(t){function e(e){var n=t.call(this)||this;n._callHook=null,n._addedWeightNames=[],n._stateful=!1,n.id=ce++,n.activityRegularizer=null,n.inputSpec=null,n.supportsMasking=!1,n._trainableWeights=[],n._nonTrainableWeights=[],n._losses=[],n._updates=[],n._built=!1,n.inboundNodes=[],n.outboundNodes=[];var r=e.name;if(!r){var i=n.getClassName();r=k(i)+"_"+d(i)}if(n.name=r,n.trainable=null==e.trainable||e.trainable,n.updatable=null==e.updatable||e.updatable,null!=e.inputShape||null!=e.batchInputShape){var a=void 0;if(null!=e.batchInputShape)a=e.batchInputShape;else if(null!=e.inputShape){var o=null;null!=e.batchSize&&(o=e.batchSize),a=[o].concat(e.inputShape)}n.batchInputShape=a;var s=e.dtype;null==s&&(s=e.inputDType),null==s&&(s="float32"),n.dtype=s}return null!=e.weights?n.initialWeights=e.weights:n.initialWeights=null,n._refCount=null,n.fastWeightInitDuringBuild=!1,n}return a(e,t),e.nodeKey=function(t,e){return t.name+"_ib-"+e.toString()},e.prototype.getNodeAtIndex=function(t,e){if(0===this.inboundNodes.length)throw new b("The layer has never been called and thus has no defined "+e+".");if(this.inboundNodes.length<=t)throw new w("Asked to get "+e+" at node "+t+", but the layer has only "+this.inboundNodes.length+" inbound nodes.");return this.inboundNodes[t]},e.prototype.getInputAt=function(t){return I(this.getNodeAtIndex(t,"input").inputTensors)},e.prototype.getOutputAt=function(t){return I(this.getNodeAtIndex(t,"output").outputTensors)},Object.defineProperty(e.prototype,"input",{get:function(){if(this.inboundNodes.length>1)throw new v("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new v("Layer "+this.name+" is not connected, no input to return.");return I(this.getNodeAtIndex(0,"input").inputTensors)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"output",{get:function(){if(0===this.inboundNodes.length)throw new v("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new v("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return I(this.getNodeAtIndex(0,"output").outputTensors)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"losses",{get:function(){return this._losses},enumerable:!0,configurable:!0}),e.prototype.calculateLosses=function(){return this.losses.map(function(t){return t()})},Object.defineProperty(e.prototype,"updates",{get:function(){return this._updates},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"built",{get:function(){return this._built},set:function(t){this._built=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.trainable?this._trainableWeights:[]},set:function(t){this._trainableWeights=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.trainable?this._nonTrainableWeights:this._trainableWeights.concat(this._nonTrainableWeights)},set:function(t){this._nonTrainableWeights=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"weights",{get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"stateful",{get:function(){return this._stateful},enumerable:!0,configurable:!0}),e.prototype.resetStates=function(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")},e.prototype.assertInputCompatibility=function(t){if(t=O(t),null!=this.inputSpec&&0!==this.inputSpec.length){var e=O(this.inputSpec);if(t.length!==e.length)throw new w("Layer "+this.name+" expects "+e.length+" inputs, but it received "+t.length+" input tensors. Input received: "+t);for(var n=0;n<t.length;n++){var r=t[n],i=e[n];if(null!=i){var a=r.rank;if(null!=i.ndim&&a!==i.ndim)throw new w("Input "+n+" is incompatible with layer "+this.name+": expected ndim="+i.ndim+", found ndim="+a);if(null!=i.maxNDim&&a>i.maxNDim)throw new w("Input "+n+" is incompatible with layer "+this.name+": expected max_ndim="+i.maxNDim+", found ndim="+a);if(null!=i.minNDim&&a<i.minNDim)throw new w("Input "+n+" is incompatible with layer "+this.name+": expected min_ndim="+i.minNDim+", found ndim="+a+".");if(null!=i.dtype&&r.dtype!==i.dtype)throw new w("Input "+n+" is incompatible with layer "+this.name+" : expected dtype="+i.dtype+", found dtype="+r.dtype+".");if(i.axes){var o=r.shape;for(var s in i.axes){var u=Number(s),c=i.axes[s],l=u>=0?o[u]:o[o.length+u];if(null!=c&&-1===[c,null].indexOf(l))throw new w("Input "+n+" is incompatible with layer "+this.name+": expected axis "+u+" of input shape to have value "+c+" but got shape "+o+".")}}if(null!=i.shape)for(var f=0;f<i.shape.length;++f){var h=i.shape[f],p=r.shape[f];if(null!=h&&null!=p&&h!==p)throw new w("Input "+n+" is incompatible with layer "+this.name+": expected shape="+i.shape+", found shape=${xShape}.")}}}}},e.prototype.call=function(t,e){return t},e.prototype.invokeCallHook=function(t,e){null!=this._callHook&&this._callHook(t,e)},e.prototype.setCallHook=function(t){this._callHook=t},e.prototype.clearCallHook=function(){this._callHook=null},e.prototype.apply=function(t,e){var n=this;e=e||{},this.assertNotDisposed();for(var r=O(t),i=!0,a=0,o=r;a<o.length;a++)if(!(o[a]instanceof oe)){i=!1;break}for(var s=!0,u=0,c=r;u<c.length;u++)if(c[u]instanceof oe){s=!1;break}if(i===s)throw new w("Arguments to apply() must be all SymbolicTensors or all Tensors");return rt(this.name,function(){if(!n.built){n.assertInputCompatibility(t);for(var i=[],a=0,o=O(t);a<o.length;a++){var u=o[a];i.push(u.shape)}n.build(I(i)),n.built=!0,n.initialWeights&&n.setWeights(n.initialWeights),null===n._refCount&&s&&(n._refCount=1)}if(n.assertInputCompatibility(t),s){for(var c=[],l=0,f=O(m=n.call(t,e));l<f.length;l++){var h=f[l];-1!==r.indexOf(h)&&(h=h.clone()),c.push(h)}if(m=I(c),null!=n.activityRegularizer)throw new _("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return m}var p=function(t){for(var e=[],n=0,r=t=O(t);n<r.length;n++){var i=r[n];e.push(i.shape)}return I(e)}(t),d=n.computeOutputShape(p),m=void 0,g="float32";if(n.warnOnIncompatibleInputShape(Array.isArray(t)?p[0]:p),m=null!=d&&d.length>0&&Array.isArray(d[0])?d.map(function(r,i){return new oe(g,r,n,O(t),e,n.name,i)}):new oe(g,d,n,O(t),e,n.name),n.addInboundNode(t,m,null,null,p,d,e),n._refCount++,null!=n.activityRegularizer)throw new _("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return m})},e.prototype.warnOnIncompatibleInputShape=function(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the batchInputShape ("+JSON.stringify(this.batchInputShape)+") of the layer "+this.name);else{var e=!1;this.batchInputShape.forEach(function(n,r){null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)}),e&&console.warn("The shape of the input tensor ("+JSON.stringify(t)+") does not match the expectation of layer "+this.name+": "+JSON.stringify(this.batchInputShape))}},Object.defineProperty(e.prototype,"outputShape",{get:function(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new v("The layer "+this.name+" has never been called and thus has no defined output shape.");for(var t=[],e=0,n=this.inboundNodes;e<n.length;e++){var r=n[e],i=JSON.stringify(r.outputShapes);-1===t.indexOf(i)&&t.push(i)}if(1===t.length){var a=this.inboundNodes[0].outputShapes;return Array.isArray(a)&&Array.isArray(a[0])&&1===a.length?a[0]:a}throw new v("The layer "+this.name+' has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.')},enumerable:!0,configurable:!0}),e.prototype.countParams=function(){if(!this.built)throw new b("You tried to call countParams() on "+this.name+", but the layer is not built yet. Build it first by calling build(batchInputShape).");return te(this.weights)},e.prototype.build=function(t){this.built=!0},e.prototype.getWeights=function(t){return void 0===t&&(t=!1),re(t?this.trainableWeights:this.weights)},e.prototype.setWeights=function(t){var e=this;Object(r.ge)(function(){var n=e.weights;if(n.length!==t.length)throw new w('You called setWeights(weights) on layer "'+e.name+'" with a weight list of length '+t.length+", but the layer was expecting "+n.length+" weights. Provided weights: "+t+"...");if(0!==n.length){for(var i=[],a=re(n),o=0;o<a.length;++o){var s=a[o],u=n[o],c=t[o];if(!r.qe.arraysEqual(s.shape,c.shape))throw new w("Layer weight shape "+s.shape+" not compatible with provided weight shape "+c.shape);i.push([u,c])}ie(i)}})},e.prototype.addWeight=function(t,e,n,r,i,a,o){if(-1!==this._addedWeightNames.indexOf(t))throw new w("Duplicate weight name "+t+" for layer "+this.name);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=Gt("zeros"));var s=r.apply(e,n),u=new ne(s,n,t,a,o);return s.dispose(),null!=i&&this.addLoss(function(){return i.apply(u.read())}),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u},e.prototype.setFastWeightInitDuringBuild=function(t){this.fastWeightInitDuringBuild=t},e.prototype.addLoss=function(t){var e;null==t||Array.isArray(t)&&0===t.length||(t=O(t),void 0!==this._losses&&null!==this._losses&&(e=this.losses).push.apply(e,t))},e.prototype.computeOutputShape=function(t){return t},e.prototype.computeMask=function(t,e){var n=this;if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError("Layer "+this.name+" does not support masking, but was passed an inputMask.");e.forEach(function(t){if(null!=t)throw new TypeError("Layer "+n.name+" does not support masking, but was passed an inputMask.")})}return null}return e},e.prototype.addInboundNode=function(t,e,n,r,i,a,o){void 0===o&&(o=null);var s=O(t);e=O(e),n=O(n),r=O(r),i=Jt(i),a=Jt(a);for(var u=[],c=[],l=[],f=0,h=s;f<h.length;f++){var p=h[f];u.push(p.sourceLayer),c.push(p.nodeIndex),l.push(p.tensorIndex)}new ue({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:l,inputTensors:s,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:i,outputShapes:a},o);for(var d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d},e.prototype.getConfig=function(){var t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t},e.prototype.disposeWeights=function(){return this.weights.forEach(function(t){return t.dispose()}),this.weights.length},e.prototype.assertNotDisposed=function(){if(0===this._refCount)throw new Error("Layer '"+this.name+"' is already disposed.")},e.prototype.dispose=function(){if(!this.built)throw new Error("Cannot dispose Layer "+this.name+" because it has not been built yet.");if(null===this._refCount)throw new Error("Cannot dispose Layer "+this.name+" because it has not been used yet.");this.assertNotDisposed();var t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}},e}(r.td.Serializable);var fe,he,pe=function(t){function e(e){var n=t.call(this,{dtype:e.dtype,name:null!=e.name?e.name:d("input").toString()})||this;if(null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),n.trainable=!1,n.built=!0,n.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new w("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");var r=e.batchInputShape;if(null==r){if(null==e.inputShape)throw new w("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");r=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new w("Cannot specify batchSize if batchInputShape isspecified when creating an InputLayer.");var i=e.dtype||"float32";n.batchInputShape=r,n.dtype=i,n.inputSpec=[{shape:r}];var a=new oe(n.dtype,n.batchInputShape,n,[],{},n.name);return a.nodeIndex=0,a.tensorIndex=0,new ue({outboundLayer:n,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[a],outputTensors:[a],inputMasks:[null],outputMasks:[null],inputShapes:[r],outputShapes:[r]}),n}return a(e,t),e.prototype.apply=function(t,e){throw new w("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)},e.prototype.dispose=function(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}},e.prototype.getConfig=function(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}},e.className="InputLayer",e}(le);function de(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new w("Please provide either a `shape` or `batchShape` argument to Input, but not both.");var e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));var n=t.dtype;return null==n&&(n="float32"),new pe({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}function me(t){return u(this,void 0,void 0,function(){var e,n,i,a,o,s,u,l;return c(this,function(c){switch(c.label){case 0:if(null==t)return[2];for(a in e=[],n=[],i=[],t)"number"!=typeof(o=t[a])&&(s=o,e.push(s.data()),n.push(a),i.push(s));return[4,Promise.all(e)];case 1:for(u=c.sent(),l=0;l<u.length;++l)t[n[l]]=u[l][0];return Object(r.jb)(i),[2]}})})}function ge(t){if(null!=t)for(var e in t){var n=t[e];"number"!=typeof n&&n.dispose()}}r.td.registerClass(pe),(he=fe||(fe={}))[he.SILENT=0]="SILENT",he[he.VERBOSE=1]="VERBOSE";var ye=function(){function t(){this.validationData=null}return t.prototype.setParams=function(t){this.params=t},t.prototype.onEpochBegin=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(t){return[2]})})},t.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(t){return[2]})})},t.prototype.onBatchBegin=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(t){return[2]})})},t.prototype.onBatchEnd=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(t){return[2]})})},t.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,function(){return c(this,function(t){return[2]})})},t.prototype.onTrainEnd=function(t){return u(this,void 0,void 0,function(){return c(this,function(t){return[2]})})},t.prototype.setModel=function(t){},t}(),ve=function(){function t(t,e){void 0===e&&(e=10),null==t&&(t=[]),this.callbacks=t,this.queueLength=e}return t.prototype.append=function(t){this.callbacks.push(t)},t.prototype.setParams=function(t){for(var e=0,n=this.callbacks;e<n.length;e++)n[e].setParams(t)},t.prototype.setModel=function(t){for(var e=0,n=this.callbacks;e<n.length;e++)n[e].setModel(t)},t.prototype.onEpochBegin=function(t,e){return u(this,void 0,void 0,function(){var n,r;return c(this,function(i){switch(i.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onEpochBegin(t,e)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return[2]}})})},t.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,function(){var n,r;return c(this,function(i){switch(i.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onEpochEnd(t,e)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return[2]}})})},t.prototype.onBatchBegin=function(t,e){return u(this,void 0,void 0,function(){var n,r;return c(this,function(i){switch(i.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onBatchBegin(t,e)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return[2]}})})},t.prototype.onBatchEnd=function(t,e){return u(this,void 0,void 0,function(){var n,r;return c(this,function(i){switch(i.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onBatchEnd(t,e)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return[2]}})})},t.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,function(){var e,n;return c(this,function(r){switch(r.label){case 0:null==t&&(t={}),e=0,n=this.callbacks,r.label=1;case 1:return e<n.length?[4,n[e].onTrainBegin(t)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}})})},t.prototype.onTrainEnd=function(t){return u(this,void 0,void 0,function(){var e,n;return c(this,function(r){switch(r.label){case 0:null==t&&(t={}),e=0,n=this.callbacks,r.label=1;case 1:return e<n.length?[4,n[e].onTrainEnd(t)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}})})},t}(),be=function(){function t(t){this.yieldEvery=t,this.batchCount=0,this.batchDurationsMillis=[],this.autoYieldEveryBatches=null,this.batchStartMillis=r.qe.now()}return t.prototype.resolveOneTensorInLogs=function(t){return u(this,void 0,void 0,function(){var e,n,r,i,a;return c(this,function(o){switch(o.label){case 0:for(n in e=[],t)e.push(n);r=0,o.label=1;case 1:return r<e.length?(i=e[r],"number"==typeof(a=t[i])?[3,3]:[4,a.data()]):[3,4];case 2:return o.sent(),[3,4];case 3:return r++,[3,1];case 4:return[2]}})})},t.prototype.maybeYieldOnBatch=function(e){return u(this,void 0,void 0,function(){var n,i;return c(this,function(a){switch(a.label){case 0:return"auto"!==this.yieldEvery?[3,7]:(this.batchCount++,null!=this.autoYieldEveryBatches?[3,3]:[4,this.resolveOneTensorInLogs(e)]);case 1:return a.sent(),n=r.qe.now(),[4,Object(r.Ec)()];case 2:return a.sent(),this.batchCount>t.SKIP_FIRST_BATCHES&&(this.batchDurationsMillis.push(n-this.batchStartMillis),this.batchDurationsMillis.length>=t.DECISION_BATCH_COUNT&&(i=this.batchDurationsMillis.reduce(function(t,e){return t+e})/this.batchDurationsMillis.length,this.autoYieldEveryBatches=Math.round(t.THRESHOLD_MILLIS/i),this.autoYieldEveryBatches<1&&(this.autoYieldEveryBatches=1))),this.batchStartMillis=r.qe.now(),this.lastYieldBatchCount=this.batchCount,[3,6];case 3:return this.batchCount-this.lastYieldBatchCount>=this.autoYieldEveryBatches?[4,Object(r.Ec)()]:[3,6];case 4:return a.sent(),[4,this.resolveOneTensorInLogs(e)];case 5:a.sent(),this.lastYieldBatchCount=this.batchCount,a.label=6;case 6:return[3,9];case 7:return"batch"!==this.yieldEvery?[3,9]:[4,Object(r.Ec)()];case 8:a.sent(),a.label=9;case 9:return[2]}})})},t.prototype.maybeYieldOnEpoch=function(){return u(this,void 0,void 0,function(){return c(this,function(t){switch(t.label){case 0:return"epoch"!==this.yieldEvery?[3,2]:[4,Object(r.Ec)()];case 1:t.sent(),t.label=2;case 2:return[2]}})})},t.SKIP_FIRST_BATCHES=1,t.DECISION_BATCH_COUNT=2,t.THRESHOLD_MILLIS=16,t}(),we=function(t){function e(e){var n=t.call(this)||this;return n.yieldEvery=e||"auto",n}return a(e,t),e.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,function(){return c(this,function(t){return this.autoYielder=new be(this.yieldEvery),[2]})})},e.prototype.onEpochBegin=function(t){return u(this,void 0,void 0,function(){return c(this,function(t){return this.seen=0,this.totals={},[2]})})},e.prototype.onBatchEnd=function(t,e){return u(this,void 0,void 0,function(){var t,n,i,a,o=this;return c(this,function(s){switch(s.label){case 0:return[4,this.autoYielder.maybeYieldOnBatch(e)];case 1:for(a in s.sent(),null==e&&(e={}),t=null==e.size?0:e.size,this.seen+=t,n=function(n){var a=e[n];if("number"==typeof a)i.totals.hasOwnProperty(n)||(i.totals[n]=0),i.totals[n]=i.totals[n]+a*t;else{var s=void 0;n in i.totals?s=i.totals[n]:i.totals[n]=y(0),i.totals[n]=Object(r.ge)(function(){return Object(r.u)(o.totals[n],Object(r.zc)(a,y(t)))}),null!=s&&s.dispose()}},i=this,e)n(a);return[2]}})})},e.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,function(){var t,n,i,a,o,s=this;return c(this,function(u){switch(u.label){case 0:return[4,this.autoYielder.maybeYieldOnEpoch()];case 1:if(u.sent(),null!=e)for(t=function(t){if(null==n.totals[t])return"continue";"number"==typeof n.totals[t]?e[t]=n.totals[t]/n.seen:Object(r.ge)(function(){e[t]=Object(r.zc)(Object(r.lb)(y(1),y(s.seen)),s.totals[t]),s.totals[t].dispose(),Object(r.Rb)(e[t])})},n=this,i=0,a=this.params.metrics;i<a.length;i++)o=a[i],t(o);return[2]}})})},e}(ye),_e=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,function(){return c(this,function(t){return this.epoch=[],this.history={},[2]})})},e.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,function(){var n;return c(this,function(r){for(n in null==e&&(e={}),this.epoch.push(t),e)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(e[n]);return[2]})})},e.prototype.syncData=function(){return u(this,void 0,void 0,function(){var t,e,n,r,i,a,o,s,u;return c(this,function(c){switch(c.label){case 0:for(r in t=[],e=[],n=[],this.history)for(i=this.history[r],a=0;a<i.length;++a)"number"!=typeof i[a]&&(o=i[a],t.push(o.data()),e.push(r),n.push(a));return[4,Promise.all(t)];case 1:for(s=c.sent(),u=0;u<s.length;++u)this.history[e[u]][n[u]].dispose(),this.history[e[u]][n[u]]=s[u][0];return[2]}})})},e}(ye),xe=function(t){function e(e){var n=t.call(this)||this;return n.trainBegin=e.onTrainBegin,n.trainEnd=e.onTrainEnd,n.epochBegin=e.onEpochBegin,n.epochEnd=e.onEpochEnd,n.batchBegin=e.onBatchBegin,n.batchEnd=e.onBatchEnd,n}return a(e,t),e.prototype.onEpochBegin=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(n){switch(n.label){case 0:return null==this.epochBegin?[3,3]:[4,me(e)];case 1:return n.sent(),[4,this.epochBegin(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}})})},e.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(n){switch(n.label){case 0:return null==this.epochEnd?[3,3]:[4,me(e)];case 1:return n.sent(),[4,this.epochEnd(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}})})},e.prototype.onBatchBegin=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(n){switch(n.label){case 0:return null==this.batchBegin?[3,3]:[4,me(e)];case 1:return n.sent(),[4,this.batchBegin(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}})})},e.prototype.onBatchEnd=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(n){switch(n.label){case 0:return null==this.batchEnd?[3,3]:[4,me(e)];case 1:return n.sent(),[4,this.batchEnd(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}})})},e.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return null==this.trainBegin?[3,3]:[4,me(t)];case 1:return e.sent(),[4,this.trainBegin(t)];case 2:e.sent(),e.label=3;case 3:return[2]}})})},e.prototype.onTrainEnd=function(t){return u(this,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:return null==this.trainEnd?[3,3]:[4,me(t)];case 1:return e.sent(),[4,this.trainEnd(t)];case 2:e.sent(),e.label=3;case 3:return[2]}})})},e}(ye);function Ee(t){return null==t?null:t instanceof ye?[t]:Array.isArray(t)&&t[0]instanceof ye?t:O(t).map(function(t){return new xe(t)})}var Se=function(){function t(){}return t.registerCallbackConstructor=function(e,n){r.qe.assert(e>=0&&Number.isInteger(e),"Verbosity level is expected to be an integer >= 0, but got "+e),t.checkForDuplicate(n),null==t.constructors[e]&&(t.constructors[e]=[]),t.constructors[e].push(n)},t.checkForDuplicate=function(e){for(var n in t.constructors)t.constructors[+n].forEach(function(t){if(t===e)throw new w("Duplicate callback constructor.")})},t.clear=function(){t.constructors={}},t.createCallbacks=function(e){var n=[];for(var r in t.constructors){var i=+r;e>=i&&n.push.apply(n,t.constructors[i])}return n.map(function(t){return new t})},t.constructors={},t}();function Ne(t,e,n,r,i,a,o,s,u,c){var l=new _e,f=[new we(e)].concat(Se.createCallbacks(n));null!=t&&f.push.apply(f,t),f.push(l);var h=new ve(f);return h.setParams({epochs:r,initialEpoch:i,samples:a,steps:o,batchSize:s,verbose:n,doValidation:u,metrics:c}),{callbackList:h,history:l}}function Ie(t,e){return Object(r.ge)(function(){var n=Object(r.Vd)(Nt(t),e,!0),i=Object(r.zc)(Object(r.pd)(l()),Object(r.Kc)(t)),a=Object(r.Ld)(Object(r.oc)(n,i));return Object(r.lb)(t,a)})}function Oe(t,e){return Object(r.ge)(function(){return Object(r.qc)(Nt(Object(r.Td)(e,t)),-1)})}function ke(t,e){return Object(r.ge)(function(){return Object(r.qc)(Object(r.r)(Object(r.Td)(e,t)),-1)})}function Ae(t,e){return Object(r.ge)(function(){var n=Object(r.Td)(t,e),i=Object(r.Q)(Object(r.r)(t),l(),Number.MAX_VALUE),a=Object(r.r)(Object(r.lb)(n,i));return Object(r.zc)(y(100),Object(r.qc)(a,-1))})}function Ce(t,e){return Object(r.ge)(function(){var n=y(1),i=Object(r.Q)(e,l(),Number.MAX_VALUE),a=Object(r.ac)(Object(r.u)(n,i)),o=Object(r.Q)(t,l(),Number.MAX_VALUE),s=Object(r.ac)(Object(r.u)(n,o));return Object(r.qc)(Nt(Object(r.Td)(a,s)),-1)})}function Pe(t,e){return Object(r.ge)(function(){var n=y(0),i=y(1),a=Object(r.oc)(n,Object(r.Td)(i,Object(r.zc)(t,e)));return Object(r.qc)(Nt(a),-1)})}function Te(t,e){return Object(r.ge)(function(){var n=y(0),i=y(1),a=Object(r.oc)(n,Object(r.Td)(i,Object(r.zc)(t,e)));return Object(r.qc)(a,-1)})}function Re(t,e){return Object(r.ge)(function(){var n=y(0),i=y(1),a=Object(r.Vd)(Object(r.zc)(t,e),-1),o=Object(r.mc)(Object(r.zc)(Object(r.Td)(i,t),e),-1);return Object(r.oc)(n,Object(r.u)(i,Object(r.Td)(o,a)))})}function De(t,e){return Object(r.ge)(function(){var n=y(Math.log(2)),i=Object(r.Td)(e,t),a=Object(r.Td)(Object(r.u)(i,Object(r.Gd)(Object(r.zc)(y(-2),i))),n);return Object(r.qc)(a,-1)})}function Me(t,e,n){return void 0===n&&(n=!1),Object(r.ge)(function(){if(n)e=Object(r.Fd)(e);else{var i=Object(r.Vd)(e,e.shape.length-1,!0);e=Object(r.lb)(e,i)}return e=Object(r.Q)(e,l(),1-l()),Object(r.Dc)(Object(r.Vd)(Object(r.zc)(t.toFloat(),Object(r.ac)(e)),e.shape.length-1))})}function je(t,e){return Object(r.ge)(function(){var n=Object(r.Ab)(function(t){var e=[ct(t.shape)];return t.reshape(e)}(t)).toInt(),i=(e=Object(r.Q)(e,l(),1-l())).shape;return Me(Object(r.Ic)(n,i[i.length-1]).reshape(i),e,!1)})}function Be(t,e){return Object(r.ge)(function(){var n;return n=Object(r.Q)(e,l(),1-l()),n=Object(r.ac)(Object(r.lb)(n,Object(r.Td)(y(1),n))),Object(r.qc)(function(t,e){if(!r.qe.arraysEqual(t.shape,e.shape))throw new w("logits and labels must have the same shape, but got shapes "+JSON.stringify(t.shape)+" and "+JSON.stringify(e.shape));return Object(r.ge)(function(){var n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())})}(t,n),-1)})}function Le(t,e){return Object(r.ge)(function(){var n=Object(r.Q)(t,l(),1),i=Object(r.Q)(e,l(),1);return Object(r.Vd)(Object(r.zc)(t,Object(r.ac)(Object(r.lb)(n,i))),-1)})}function ze(t,e){return Object(r.ge)(function(){var n=Object(r.ac)(Object(r.u)(y(l()),e));return Object(r.qc)(Object(r.Td)(e,Object(r.zc)(t,n)),-1)})}function Fe(t,e){return Object(r.ge)(function(){var n=Ie(t,-1),i=Ie(e,-1),a=Object(r.zc)(n,i);return Object(r.Dc)(Object(r.Vd)(a,-1))})}function Ue(t){var e={meanSquaredError:Oe,meanAbsoluteError:ke,meanAbsolutePercentageError:Ae,meanSquaredLogarithmicError:Ce,squaredHinge:Pe,hinge:Te,categoricalHinge:Re,logcosh:De,categoricalCrossentropy:Me,sparseCategoricalCrossentropy:je,binaryCrossentropy:Be,kullbackLeiblerDivergence:Le,poisson:ze,cosineProximity:Fe};if("string"==typeof t){if(t in e)return e[t];var n="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(n="Unknown loss "+t+'. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy'),new w(n)}return t}function Ve(t,e){return Object(r.ge)(function(){var n=Object(r.zc)(y(.5),Object(r.Kc)(e)),i=dt(Object(r.Ib)(e,n),t.dtype);return Object(r.qc)(Object(r.rb)(t,i),-1)})}function We(t,e){return Object(r.ge)(function(){return dt(Object(r.rb)(Object(r.z)(t,-1),Object(r.z)(e,-1)),"float32")})}function qe(t,e){return Object(r.ge)(function(){var n=y(1);return Object(r.fc)(t.equal(n),e.equal(n)).sum().cast("float32")})}function $e(t,e){return Object(r.ge)(function(){var n=y(0),i=qe(t,e),a=function(t,e){return Object(r.ge)(function(){var n=y(1),i=y(0);return Object(r.fc)(t.equal(i),e.equal(n)).sum().cast("float32")})}(t,e),o=i.add(a);return Object(r.xe)(Object(r.Ib)(o,n),i.div(o),n).cast("float32")})}function He(t,e){return Object(r.ge)(function(){var n=y(0),i=qe(t,e),a=function(t,e){return Object(r.ge)(function(){var n=y(1),i=y(0);return Object(r.fc)(t.equal(n),e.equal(i)).sum().cast("float32")})}(t,e),o=i.add(a);return Object(r.xe)(Object(r.Ib)(o,n),i.div(o),n).cast("float32")})}function Ke(t,e){return Be(t,e)}function Ge(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),Object(r.rb)(t,e).asType("float32")}var Xe=Oe,Ye=Oe,Je=ke,Ze=ke,Qe=Ae,tn=Ae,en=Me,nn=Fe,rn=je;function an(t,e,n,r){void 0===r&&(r=console.log);var i,a=function(t){var e=!0,n=[],r=[];for(var i in t.nodesByDepth)n.push(t.nodesByDepth[i]);for(var a=0,o=n;a<o.length;a++){var s=o[a];if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){e=!1;break}r.push.apply(r,s)}if(e)for(var u=0,c=t.layers;u<c.length;u++){for(var l=!1,f=0,h=c[u].inboundNodes;f<h.length;f++){var p=h[f];if(-1!==r.indexOf(p)){if(l){e=!1;break}l=!0}}if(!e)break}return e}(t),o=["Layer (type)","Output shape","Param #"];if(a?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(function(t){return Math.floor(e*t)})),!a)for(var s in o.push("Receives inputs"),i=[],t.nodesByDepth)i.push.apply(i,t.nodesByDepth[s]);r("_".repeat(e)),on(o,n,r),r("=".repeat(e));for(var u=t.layers,c=0;c<u.length;++c)a?sn(u[c],n,r):un(u[c],n,i,r),r((c===u.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();var l=function(t){return null!=t.collectedTrainableWeights?te(t.collectedTrainableWeights):te(t.trainableWeights)}(t),f=te(t.nonTrainableWeights);r("Total params: "+(l+f)),r("Trainable params: "+l),r("Non-trainable params: "+f),r("_".repeat(e))}function on(t,e,n){void 0===n&&(n=console.log);for(var r="",i=0;i<t.length;++i)i>0&&(r=r.slice(0,r.length-1)+" "),r=(r+=t[i]).slice(0,e[i]),r+=" ".repeat(e[i]-r.length);n(r)}function sn(t,e,n){var r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}on([t.name+" ("+t.getClassName()+")",r,t.countParams().toString()],e,n)}function un(t,e,n,r){var i;try{i=JSON.stringify(t.outputShape)}catch(t){i="multiple"}for(var a=[],o=0,s=t.inboundNodes;o<s.length;o++){var u=s[o];if(!(null!=n&&n.length>0&&-1===n.indexOf(u)))for(var c=0;c<u.inboundLayers.length;++c){var l=u.inboundLayers[c].name,f=u.nodeIndices[c],h=u.tensorIndices[c];a.push(l+"["+f+"]["+h+"]")}}var p=t.name,d=t.getClassName(),m=0===a.length?"":a[0];for(on([p+" ("+d+")",i,t.countParams().toString(),m],e,r),c=1;c<a.length;++c)on(["","","",a[c]],e,r)}function cn(t,e,n){return void 0===e&&(e={}),void 0===n&&(n=!1),T(t,r.td.SerializationMap.getMap().classNameMap,e,"layer",n)}function ln(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function fn(t,e){if(null===t)return null;if("string"==typeof t)return A(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){for(var n=[],r=t.length,i=0;i<r;++i){var a=t[i];ln(e,i,a)?n.push(a):n.push(fn(a,e))}return n}for(var o={},s=0,u=Object.keys(t);s<u.length;s++){var c=u[s],l=t[c];if("name"===c&&"string"==typeof l)o[c]=l;else{var f=A(c);o[f]=fn(l,f)}}return o}var hn=function(){function t(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof t)for(var n in e.id2Value)this.id2Value[n]=e.id2Value[n],n in e.id2Mask&&(this.id2Mask[n]=e.id2Mask[n]);else{if(null==e)return;for(var r=0,i=e;r<i.length;r++){var a=i[r];this.add(a.key,a.value)}}}return t.prototype.add=function(t,e,n){if(null!=this.id2Value[t.id])throw new w("Duplicate key: name="+t.name+", id="+t.id);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Object(r.O)(e,t.dtype)}catch(n){throw new w("The dtype of the feed ("+e.dtype+") can not be cast to the dtype of the key '"+t.name+"' ("+t.dtype+").")}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this},t.prototype.addFeed=function(t){this.add(t.key,t.value)},t.prototype.hasKey=function(t){return null!=this.id2Value[t.id]},t.prototype.names=function(){return Object.keys(this.name2Id)},t.prototype.getValue=function(t){if(t instanceof oe){if(null==this.id2Value[t.id])throw new w("Nonexistent key: "+t.name);return this.id2Value[t.id]}var e=this.name2Id[t];if(null==e)throw new w("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]},t.prototype.getMask=function(t){if(t instanceof oe){if(null==this.id2Value[t.id])throw new w("Nonexistent key: "+t.name);return this.id2Mask[t.id]}var e=this.name2Id[t];if(null==e)throw new w("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]},t.prototype.disposeMasks=function(){null!=this.id2Mask&&Object(r.jb)(this.id2Mask)},t}(),pn={},dn={};function mn(t,e,n,i){for(var a=null!=n&&n.training,o=Array.isArray(t),s=o?t:[t],u=s.map(function(t){return t.name}),c=[],l=e.names(),f=0,h=u;f<h.length;f++){var p=h[f];-1!==l.indexOf(p)?c.push(e.getValue(p)):c.push(null)}null!=i&&(i.maxNumTensors=-1/0,i.minNumTensors=1/0);var d,m,g=u.join(",")+"|"+e.names().join(",");if(null==pn[g]){var y=function(t,e){r.qe.assert(null!=t&&t.length>0,"Exepcted at least one fetch, got none");var n=[],i={};if(1===t.length){var a=yn(t[0],e);n=a.sorted,i=a.recipientMap}else for(var o=new Set,s=0,u=t;s<u.length;s++){for(var c=yn(u[s],e),l=c.sorted,f=c.recipientMap,h=0,p=l;h<p.length;h++){var d=p[h];o.has(d.name)||(n.push(d),o.add(d.name))}var m=function(t){null==i[t]&&(i[t]=new Set),f[t].forEach(function(e){return i[t].add(e)})};for(var g in f)m(g)}return{sorted:n,recipientCounts:gn(i)}}(s,e);d=y.sorted,m=y.recipientCounts,pn[g]=d,dn[g]=m}d=pn[g],m={},a||Object.assign(m,dn[g]);for(var v=new hn(e),b=0;b<d.length;++b){if(null!=i){var w=Object(r.rc)().numTensors;w>i.maxNumTensors&&(i.maxNumTensors=w),w<i.minNumTensors&&(i.minNumTensors=w)}var _=d[b],x=_.sourceLayer;if(!(x instanceof pe)){for(var E=[],S=[],N=[],I=!1,k=0,A=_.inputs;k<A.length;k++){var C=A[k],P=v.getValue(C),T=v.getMask(C);E.push(P),S.push(T),null!=T&&(I=!0),a||(m[C.name]--,0!==m[C.name]||e.hasKey(C)||-1!==u.indexOf(C.name)||P.isDisposed||N.push(P))}I&&((n=n||{}).mask=S[0]);var R=O(x.apply(E,n)),D=null;x.supportsMasking&&(D=x.computeMask(E,S));for(var M=vn(_),j=Array.isArray(M)?M:[M],B=0;B<j.length;++B){v.hasKey(j[B])||v.add(j[B],R[B],Array.isArray(D)?D[0]:D);var L=u.indexOf(j[B].name);-1!==L&&(c[L]=R[B])}a||Object(r.jb)(N)}}return v.disposeMasks(),o?c:c[0]}function gn(t){var e={};for(var n in t)e[n]=t[n].size;return e}function yn(t,e){for(var n=new Set,r=[],i={},a=0,o=e.names();a<o.length;a++){var s=o[a];n.add(s)}var u=[],c=[];for(u.push(t);u.length>0;){var l=u[u.length-1];if(n.has(l.name))u.pop();else{var f=c[c.length-1]===u.length-1;if(0===l.inputs.length||f)u.pop(),r.push(l),n.add(l.name),f&&c.pop();else{c.push(u.length-1);for(var h=0,p=l.inputs;h<p.length;h++){var d=p[h];null==i[d.name]&&(i[d.name]=new Set),i[d.name].add(l.name),n.has(d.name)||u.push(d)}}}}return{sorted:r,recipientMap:i}}function vn(t){var e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{for(var n=null,r=0;r<t.sourceLayer.inboundNodes.length;++r)for(var i=0,a=t.sourceLayer.inboundNodes[r].outputTensors;i<a.length;i++)if(a[i].id===t.id){n=r;break}e=t.sourceLayer.getOutputAt(n)}return e}function bn(t,e,n,r){if(!n.startsWith("2."))throw new w("Unsupported Keras version in weights being loaded: "+n);return e}function wn(t,e,n){var i=function(t){switch(t){case"float32":return"float32";default:throw new w("Invalid dtype: "+t)}}(t);return r.o.make(e,{values:0===e.length?n:r.qe.flatten(n)},i)}var _n=function(t){function e(n){var r=t.call(this,{})||this;if(r.containerNodes=new Set,r.name=n.name,null==r.name){var i=r.getClassName().toLowerCase();r.name=d(i)}if(r.supportsMasking=!1,r.trainable=!0,r.updatable=!0,Array.isArray(n.inputs)?r.inputs=n.inputs.slice():r.inputs=[n.inputs],Array.isArray(n.outputs)?r.outputs=n.outputs.slice():r.outputs=[n.outputs],D(r.inputs).length!==r.inputs.length)throw new w("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+r.inputs.map(function(t){return t.name}));D(r.outputs).length!==r.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+r.outputs.map(function(t){return t.name})),r.inputLayers=[],r.inputLayersNodeIndices=[],r.inputLayersTensorIndices=[],r.outputLayers=[],r.outputLayersNodeIndices=[],r.outputLayersTensorIndices=[],r.layers=[];for(var a=0,o=r.outputs;a<o.length;a++){var s=(C=o[a]).sourceLayer,u=C.nodeIndex,c=C.tensorIndex;r.outputLayers.push(s),r.outputLayersNodeIndices.push(u),r.outputLayersTensorIndices.push(c)}for(var l=0,f=r.inputs;l<f.length;l++)s=(C=f[l]).sourceLayer,u=C.nodeIndex,c=C.tensorIndex,S(0===u,"input layer has >1 nodes"),S(0===c,"input layer has >1 tensors"),r.inputLayers.push(s),r.inputLayersNodeIndices.push(u),r.inputLayersTensorIndices.push(c);r.inputNames=[],r.outputNames=[],r.feedInputShapes=[],r.feedInputNames=[],r.feedOutputNames=[];for(var h=0;h<r.inputLayers.length;h++){if(!((s=r.inputLayers[h])instanceof pe))throw new TypeError("Input layers to a Model must be InputLayer objects. Received inputs: "+n.inputs+". Input "+h+" (0-based) originates from layer type "+s.getClassName()+".");r.inputNames.push(s.name),r.feedInputShapes.push(s.batchInputShape),r.feedInputNames.push(s.name)}for(var p=0,m=r.outputLayers;p<m.length;p++)s=m[p],r.outputNames.push(s.name);r.internalInputShapes=r.inputs.map(function(t){return t.shape}),r.internalOutputShapes=r.outputs.map(function(t){return t.shape});for(var g={},y={},v={},_={},x={},E=[],N=function(t,n,i,a,o,s){null!=a&&null!=o&&null!=s||(a=t.sourceLayer,o=t.nodeIndex,s=t.tensorIndex);var u=a.inboundNodes[o];if(-1!==i.indexOf(u))throw new b("The tensor "+t.name+' at layer "'+a.name+'" is part of a cycle.');if(-1===n.indexOf(u)){r.containerNodes.add(e.nodeKey(a,o)),a.id in x||(x[a.id]=Object.keys(x).length),-1===i.indexOf(u)&&i.push(u);for(var c=u.inboundLayers.length,l=0;l<c;l++){var f=u.inputTensors[l],h=u.inboundLayers[l],p=u.nodeIndices[l],d=u.tensorIndices[l];N(f,n,i,h,p,d)}for(n.push(u);i.indexOf(u)>=0;)i.splice(i.indexOf(u),1);E.push(u)}},I=[],O=[],k=0,A=r.outputs;k<A.length;k++){var C=A[k];N(C,I,O)}for(var P=0,T=E.slice().reverse();P<T.length;P++){y[(nt=T[P]).id]=nt,nt.id in g||(g[nt.id]=0);var M=g[nt.id],j=null==v[nt.outboundLayer.id]?0:v[nt.outboundLayer.id];for(M=Math.max(M,j),v[nt.outboundLayer.id]=M,_[nt.outboundLayer.id]=nt.outboundLayer,g[nt.id]=M,h=0;h<nt.inboundLayers.length;h++){var B=nt.inboundLayers[h],L=(u=nt.nodeIndices[h],B.inboundNodes[u]),z=null==g[L.id]?0:g[L.id];g[L.id]=Math.max(M+1,z),y[L.id]=L}}var F={};for(var U in g)(M=g[U])in F||(F[M]=[]),F[M].push(y[U]);var V={};for(var W in v)(M=v[W])in V||(V[M]=[]),V[M].push(_[W]);var q=Object.keys(V).map(function(t){return parseInt(t,10)}).sort(R);r.layers=[];for(var $=0,H=q;$<H.length;$++){var K=V[M=H[$]];K.sort(function(t,e){var n=x[t.id],r=x[e.id];return n<r?-1:n>r?1:0});for(var G=0,X=K;G<X.length;G++)s=X[G],r.layers.push(s)}r.layersByDepth=V,q=Object.keys(F).map(function(t){return parseInt(t,10)}).sort(R);for(var Y=r.inputs.slice(),J=[],Z=0,Q=q;Z<Q.length;Z++)for(var tt=0,et=F[M=Q[Z]];tt<et.length;tt++){var nt;if(null!=(s=(nt=et[tt]).outboundLayer)){for(var rt=0,it=nt.inputTensors;rt<it.length;rt++)if(C=it[rt],-1===Y.indexOf(C))throw new b("Graph disconnected: cannot obtain value for tensor "+C+' at layer "'+s.name+'". The following previous layers were accessed without issue: '+J);for(var at=0,ot=nt.outputTensors;at<ot.length;at++)C=ot[at],Y.push(C);J.push(s.name)}}r.nodesByDepth=F;for(var st=r.layers.map(function(t){return t.name}),ut=function(t){var e=st.filter(function(e){return e===t}).length;if(1!==e)throw new b('The name "'+t+'" is used '+e+" times in the model. All layer names should be unique. Layer names: "+JSON.stringify(st))},ct=0,lt=st;ct<lt.length;ct++)ut(lt[ct]);return r.outboundNodes=[],r.inboundNodes=[],new ue({outboundLayer:r,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:r.inputs,outputTensors:r.outputs,inputMasks:r.inputs.map(function(t){return null}),outputMasks:r.outputs.map(function(t){return null}),inputShapes:r.inputs.map(function(t){return t.shape}),outputShapes:r.outputs.map(function(t){return t.shape})}),r.built=!0,r._refCount=1,r}return a(e,t),e.prototype.assertNotDisposed=function(){if(0===this._refCount)throw new Error("Container '"+this.name+"' is already disposed.")},e.prototype.dispose=function(){this.assertNotDisposed();var t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount)for(var e=0,n=this.layers;e<n.length;e++){var r=n[e];t.numDisposedVariables+=r.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){if(this._trainableWeights.length>0)throw new w("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];for(var t=[],e=0,n=this.layers;e<n.length;e++){var r=n[e];t=t.concat(r.trainableWeights)}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){for(var t=[],e=0,n=this.layers;e<n.length;e++){var r=n[e];t.push.apply(t,r.nonTrainableWeights)}if(!this.trainable){for(var i=[],a=0,o=this.layers;a<o.length;a++)r=o[a],i.push.apply(i,r.trainableWeights);return i.concat(t)}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"weights",{get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)},enumerable:!0,configurable:!0}),e.prototype.loadWeights=function(t,e,n,i){void 0===e&&(e=!1),void 0===n&&(n=!1),void 0===i&&(i=!0),n?function(t,e,n){void 0===n&&(n=!0);for(var r={},i=0,a=0,o=e;a<o.length;a++)for(var s=0,u=o[a].weights;s<u.length;s++){var c=u[s];if(null!=r[c.originalName])throw new w("Duplicate weight name: "+c.originalName);r[c.originalName]=c,i++}var l=[];for(var f in t){if(null!=r[f])l.push([r[f],t[f]]);else if(n)throw new w("Provided weight data has no target variable: "+f);delete r[f]}if(n){var h=[];for(var p in r)h.push(p);if(h.length>0)throw new w(h.length+" of "+i+" weights are not set: "+h)}ie(l)}(t,this.layers,i):function(t,e,n){void 0===n&&(n=!1);for(var i=t.keras_version,a=(t.backend,e.map(function(t){return t.name})),o={},s=0,u=e;s<u.length;s++)null!=(b=u[s]).name&&(null==o[b.name]&&(o[b.name]=[]),o[b.name].push(b));for(var c=t.weights,l=[],f=0;f<a.length;++f){var h=a[f],p=c[h];null==p&&(p=[]);for(var d=[],m=0;m<p.length;++m){var g=p[m];d.push(new ne(wn(g.dtype,g.shape,g.value)))}for(var y=0,v=o[h];y<v.length;y++){var b,_=(b=v[y]).weights;if((d=bn(0,d,i)).length!==_.length){if(!n)throw new w("Layer #"+f+' (named "'+b.name+'") expects '+_.length+" weight(s), but the saved weights have "+d.length+" element(s).");console.warn("Skipping loading of weights of layer "+b.name+" due to mismatch in number of weights: ("+d.length+" vs "+_.length+").")}for(var x=0;x<d.length;++x)!n||r.qe.arraysEqual(_[x].shape,d[x].shape)?l.push([_[x],d[x].read()]):console.warn("Skipping loading of weights for layer "+b.name+" due to mismatch in shape ("+_[x].shape+" vs "+d[x].shape+")")}}ie(l)}(t,this.layers,e)},e.prototype.updatedConfig=function(){var t=this.getConfig();return{className:this.getClassName(),config:t,kerasVersion:"tfjs-layers 0.9.2",backend:"TensorFlow.js"}},e.prototype.toJSON=function(t,e){void 0===e&&(e=!0);var n=function t(e,n){if(null==e)return null;if("string"==typeof e)return k(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){for(var r=[],i=e.length,a=0;a<i;++a){var o=e[a];ln(n,a,o)?r.push(o):r.push(t(o,n))}return r}for(var s={},u=0,c=Object.keys(e);u<c.length;u++){var l=c[u],f=e[l];s[k(l)]="name"!==l&&"className"!==l||"string"!=typeof f?t(f,l):f}return s}(this.updatedConfig());return e?JSON.stringify(n):n},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){t=O(t);for(var r=new hn,i=0;i<n.inputs.length;++i)r.add(n.inputs[i],t[i]);return mn(n.outputs,r,e)})},e.prototype.computeMask=function(t,e){var n=this;return Object(r.ge)(function(){var r;return t=O(t),r=null==e?E(null,t.length):O(e),n.runInternalGraph(t,r)[1]})},e.prototype.computeOutputShape=function(t){var e=Jt(t);if(e.length!==this.inputLayers.length)throw new w("Invalid inputShape argument "+t+": model has "+this.inputLayers.length+" tensor inputs.");for(var n={},r=0;r<e.length;r++){var i=this.inputLayers[r],a=e[r];n[N=i.name+"_0_0"]=a}var o=Object.keys(this.nodesByDepth).map(function(t){return parseInt(t,10)}).sort(R);if(o.length>1)for(var s=0,u=o;s<u.length;s++)for(var c=u[s],l=0,f=this.nodesByDepth[c];l<f.length;l++){var h=f[l];if(i=h.outboundLayer,-1===this.inputLayers.map(function(t){return t.id}).indexOf(i.id)){for(var p=[],d=0;d<h.inboundLayers.length;d++){var m=h.inboundLayers[d],g=h.nodeIndices[d],y=h.tensorIndices[d],v=n[N=m.name+"_"+g+"_"+y];p.push(v)}var b=Jt(i.computeOutputShape(I(p))),_=i.inboundNodes.indexOf(h);for(d=0;d<b.length;d++)n[N=i.name+"_"+_+"_"+d]=b[d]}}var x=[],E=[];for(r=0;r<this.outputLayers.length;r++){i=this.outputLayers[r],_=this.outputLayersNodeIndices[r],y=this.outputLayersTensorIndices[r];var N=i.name+"_"+_+"_"+y;E.push(N)}for(r=0;r<E.length;r++){var O=E[r];S(O in n),x.push(n[O])}return I(x)},e.prototype.runInternalGraph=function(t,e){null==e&&(e=E(null,t.length));for(var n={},r=0;r<this.inputs.length;++r){var i=this.inputs[r],a=t[r],o=e[r];n[i.id]=[a,o]}for(var s=0,u=Object.keys(this.nodesByDepth).map(function(t){return parseInt(t,10)}).sort(R);s<u.length;s++)for(var c=u[s],l=0,f=this.nodesByDepth[c];l<f.length;l++){for(var h=f[l],p=h.outboundLayer,d=h.inputTensors,m=h.outputTensors,g=new Array,y=0,v=d;y<v.length;y++)(i=v[y]).id in n&&g.push(n[i.id]);if(g.length===d.length){var b={},w=void 0,x=void 0,N=void 0,I=void 0;if(null!=h.callArgs&&(b=h.callArgs),1===g.length){var k=g[0],A=k[0],C=k[1];null==b.mask&&(b.mask=C),N=O(p.call(A,b)),I=O(p.computeMask(A,C)),w=[A],x=[C]}else w=g.map(function(t){return t[0]}),x=g.map(function(t){return t[1]}),null==b.mask&&(b.mask=x),N=O(p.call(w,b)),I=O(p.computeMask(w,x));if(p.activityRegularizer)throw new _("Model invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(r=0;r<m.length;++r)i=m[r],a=N[r],o=I[r],n[i.id]=[a,o]}}for(var P=[],T=[],D=[],M=0,j=this.outputs;M<j.length;M++){S((i=j[M]).id in n,"Could not compute output "+i.name+" : "+i.id);var B=n[i.id],L=B[0];o=B[1],D.push(L.shape),P.push(L),T.push(o)}return[P,T,D]},e.prototype.buildNodeConversionMap=function(t){for(var n,r={},i=0,a=this.layers;i<a.length;i++){var o=a[i];n=o instanceof e?1:0;for(var s=0;s<o.inboundNodes.length;s++){var u=e.nodeKey(o,s);this.containerNodes.has(u)&&(r[u]=n,n+=1)}}return r},e.prototype.getLayer=function(t,e){if(null!=e){if(this.layers.length<=e)throw new w("Was asked to retrieve layer at index "+e+", but model only has "+this.layers.length+" layer(s).");return this.layers[e]}if(null==t)throw new w("Provide either a layer name or layer index");for(var n=0,r=this.layers;n<r.length;n++){var i=r[n];if(i.name===t)return i}throw new w("No such layer: "+t)},e.prototype.calculateLosses=function(){var t=this;return Object(r.ge)(function(){for(var n=[],r=0,i=t.layers;r<i.length;r++)for(var a=i[r],o=0;o<a.inboundNodes.length;++o){var s=e.nodeKey(a,o);t.containerNodes.has(s)&&n.push.apply(n,a.calculateLosses())}return n})},e.prototype.getConfig=function(){for(var t={name:this.name},n=this.buildNodeConversionMap(this.layers),r=[],i=0,a=this.layers;i<a.length;i++){for(var o=(b=a[i]).getClassName(),s=b.getConfig(),u=[],c=0;c<b.inboundNodes.length;c++){var l=b.inboundNodes[c],f=e.nodeKey(b,c),h={};if(this.containerNodes.has(f)){if(l.callArgs)try{JSON.stringify(l.callArgs),h=l.callArgs}catch(t){console.warn("Layer "+b.name+" was passed non-serializable keyword arguments: "+l.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),h={}}if(l.inboundLayers.length>0){for(var p=[],d=0;d<l.inboundLayers.length;d++){var m=l.inboundLayers[d],g=l.nodeIndices[d],y=l.tensorIndices[d];null==(_=n[e.nodeKey(m,g)])&&(_=0),p.push([m.name,_,y,h])}u.push(p)}}}r.push({name:b.name,className:o,config:s,inboundNodes:u})}t.layers=r;var v=[];for(d=0;d<this.inputLayers.length;d++){var b=this.inputLayers[d];g=this.inputLayersNodeIndices[d],f=e.nodeKey(b,g),this.containerNodes.has(f)&&(null!==(_=n[f])&&void 0!==_||(_=0),y=this.inputLayersTensorIndices[d],v.push([b.name,_,y]))}t.inputLayers=v;var w=[];for(d=0;d<this.outputLayers.length;d++){var _;if(b=this.outputLayers[d],g=this.outputLayersNodeIndices[d],f=e.nodeKey(b,g),this.containerNodes.has(f))null!==(_=n[f])&&void 0!==_||(_=0),y=this.outputLayersTensorIndices[d],w.push([b.name,_,y])}return t.outputLayers=w,t},e.fromConfig=function(t,e,n,r){void 0===n&&(n={}),void 0===r&&(r=!1);var i={},a={};function o(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function s(t,e){for(var n,r=[],a=0,s=e;a<s.length;a++){var u=s[a],c=u[0],l=u[1],f=u[2];if(3===u.length)n={};else{if(4!==u.length)throw new w("Improperly formatted model config for layer "+JSON.stringify(t)+": "+JSON.stringify(u));n=u[3]}if(!(c in i))return void o(t,e);var h=i[c];if(h.inboundNodes.length<=l)return void o(t,e);var p=h.inboundNodes[l];r.push(p.outputTensors[f])}r.length>0&&t.apply(I(r),n)}function u(t){var n=t.name,a=cn(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),i[n]=a;for(var s=0,u=t.inboundNodes;s<u.length;s++){var c=u[s];if(!(c instanceof Array))throw new w("Corrupted configuration, expected array for nodeData: "+c);o(a,c)}}for(var c=e.name,l=e.layers,f=0,h=l;f<h.length;f++)u(m=h[f]);for(;!M(a);)for(var p=0,d=l;p<d.length;p++){var m=d[p];if((T=i[m.name]).name in a){var g=a[T.name];delete a[T.name];for(var y=0,v=g;y<v.length;y++)s(T,v[y])}}for(var b=[],_=[],x=0,E=e.inputLayers;x<E.length;x++){var N=(m=E[x])[0],O=m[1],k=m[2];S(N in i);var A=(T=i[N]).inboundNodes[O].outputTensors;b.push(A[k])}for(var C=0,P=e.outputLayers;C<P.length;C++){var T;N=(m=P[C])[0],O=m[1],k=m[2],S(N in i),A=(T=i[N]).inboundNodes[O].outputTensors,_.push(A[k])}return new t({inputs:b,outputs:_,name:c})},Object.defineProperty(e.prototype,"stateful",{get:function(){if(this._stateful)throw new w("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(var t=0,e=this.layers;t<e.length;t++)if(e[t].stateful)return!0;return!1},enumerable:!0,configurable:!0}),e.prototype.resetStates=function(){var t=this;Object(r.ge)(function(){t.layers.forEach(function(t){t.stateful&&t.resetStates()})})},e}(le),xn=32;function En(t,e){if(t.outputs.length>1)throw new _("Support for training a model with multiple output tensors with a dataset object is not implemented yet.");r.qe.assert(Array.isArray(e)&&2===e.length,"Dataset iterator for fitDataset() is expected to generate an Array of length 2: `[xs, ys]`, but instead generates "+e);var n=(e=e)[1],i=e[0];if(i instanceof r.o)return r.qe.assert(1===t.inputs.length,"Model has multiple "+t.inputs.length+" inputs, hence it expects the input dataset to generate a dictionary of tensors  (with keys "+JSON.stringify(t.inputNames)+", but received a single tensor."),r.qe.assert(i.shape[0]===n.shape[0],"Mismatch in batch size between x and y tensors ("+i.shape[0]+" vs. "+n.shape[0]+")"),[i,n];var a=void 0;i=i;for(var o=[],s=0,u=t.inputNames;s<u.length;s++){var c=u[s];if(null==i[c])throw new w("The feature data generated by the dataset lacks the required input key '"+c+"'.");o.push(i[c]),null==a?a=i[c].shape[0]:r.qe.assert(i[c].shape[0]===a,"Mismatch in batch size between x and y tensors ("+i[c].shape[0]+" vs. "+n.shape[0]+")")}return o.concat(n)}function Sn(t,e,n){return u(this,void 0,void 0,function(){var i,a,o,s,u,l,f,h,p,d,m,g,y,v,b,w,x,E,S,N,I,k,A,C,P,T;return c(this,function(c){switch(c.label){case 0:if(i=null!=n.batchesPerEpoch,r.qe.assert(null!=t.optimizer,"You must compile a model before training/testing. Use Model.compile(modelCompileConfig)."),r.qe.assert(null!=n,"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),r.qe.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),r.qe.assert(!i||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),r.qe.assert(null==n.validationSplit,"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0,c.label=1;case 1:return c.trys.push([1,,22,23]),a=null!=n.validationData,o=void 0,s=void 0,a&&(Nn(n.validationData)?r.qe.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches):(u=function(t){if(3===t.length)throw new _("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData),o=u.xs,s=u.ys)),l=t.makeTrainFunction(),f=t.getDedupedMetricsNames(),void 0,h=a?f.slice().concat(f.map(function(t){return"val_"+t})):f.slice(),p=Ee(n.callbacks),d=Ne(p,n.yieldEvery,n.verbose,n.epochs,null,null,n.batchesPerEpoch,null,a,h),m=d.callbackList,g=d.history,m.setModel(t),t.history=g,[4,m.onTrainBegin()];case 2:return c.sent(),t.stopTraining_=!1,y=null==n.initialEpoch?0:n.initialEpoch,[4,e.iterator()];case 3:v=c.sent(),c.label=4;case 4:return y<n.epochs?(b={},[4,m.onEpochBegin(y)]):[3,19];case 5:return c.sent(),w=0,x=0,i?[3,7]:[4,e.iterator()];case 6:v=c.sent(),c.label=7;case 7:return!i||w<n.batchesPerEpoch?[4,v.next()]:[3,17];case 8:return E=c.sent(),i&&E.done?(console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+w+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset."),[3,17]):null==E.value?[3,11]:(S=En(t,E.value),(N={}).batch=x,N.size=S[0].shape[0],[4,m.onBatchBegin(x,N)]);case 9:for(c.sent(),I=l(S),Object(r.jb)(S),T=0;T<f.length;++T)k=f[T],A=I[T],N[k]=A,Object(r.Rb)(A);return[4,m.onBatchEnd(x,N)];case 10:c.sent(),ge(N),x++,w++,c.label=11;case 11:return(i?w>=n.batchesPerEpoch:E.done)?a?(C=void 0,Nn(n.validationData)?(P=O,[4,t.evaluateDataset(n.validationData,{batches:n.validationBatches})]):[3,13]):[3,15]:[3,16];case 12:return C=P.apply(void 0,[c.sent()]),[3,14];case 13:C=O(t.evaluate(o,s,{batchSize:null==n.validationBatchSize?xn:n.validationBatchSize,verbose:0})),c.label=14;case 14:for(T=0;T<t.metricsNames.length;++T)b["val_"+t.metricsNames[T]]=C[T];c.label=15;case 15:return[3,17];case 16:return t.stopTraining_?[3,17]:[3,7];case 17:return[4,m.onEpochEnd(y,b)];case 18:return c.sent(),y++,t.stopTraining_?[3,19]:[3,4];case 19:return[4,m.onTrainEnd()];case 20:return c.sent(),[4,t.history.syncData()];case 21:return c.sent(),[2,t.history];case 22:return t.isTraining=!1,[7];case 23:return[2]}})})}function Nn(t){return"function"==typeof t.iterator}function In(t,e,n){return u(this,void 0,void 0,function(){var i,a,o,s,u,l,f,h,p,d;return c(this,function(m){switch(m.label){case 0:if(i=null!=n.batches,a=t.testFunction,o=[],n.verbose>0)throw new _("Verbose mode is not implemented yet.");return r.qe.assert(!i||n.batches>0&&Number.isInteger(n.batches),"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches)),function(t){return"function"==typeof t.next}(e)?(u=e,[3,3]):[3,1];case 1:return[4,e.iterator()];case 2:u=m.sent(),m.label=3;case 3:s=u,l=0,f=0,h=function(){var e,u,h,p,d,m;return c(this,function(c){switch(c.label){case 0:return[4,s.next()];case 1:if((e=c.sent()).value){if(u=En(t,e.value),h=Object(r.ge)(function(){return a(u)}),Object(r.jb)(u),0===f)for(m=0;m<h.length;++m)o.push(y(0));for(p=u[0].shape[0],d=function(t){var e=h[t],n=o[t];o[t]=Object(r.ge)(function(){return Object(r.u)(o[t],Object(r.zc)(y(p),e))}),f>0&&Object(r.jb)(n)},m=0;m<h.length;++m)d(m);Object(r.jb)(h),l+=p,++f}return e.done?(i&&console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` batches (in this case, "+n.batches+" batches). You may need to use the repeat() function when building your dataset."),[2,"break"]):[2]}})},m.label=4;case 4:return!i||f<n.batches?[5,h()]:[3,6];case 5:return"break"===m.sent()?[3,6]:[3,4];case 6:for(p=function(t){var e=o[t];o[t]=Object(r.ge)(function(){return Object(r.lb)(o[t],y(l))}),Object(r.jb)(e)},d=0;d<o.length;++d)p(d);return[2,I(o)]}})})}function On(t){r.qe.assert(t>0&&Number.isInteger(t),"batchSize is required to be a positive integer, but got "+t)}function kn(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(function(t){return gt(t,e,n-e)}):gt(t,e,n-e)}function An(t,e){return Object(r.ge)(function(){return null==t?null:Array.isArray(t)?t.map(function(t){return An(t,e)}):St(t,"int32"===e.dtype?e:e.toInt())})}function Cn(t,e){for(var n=[],r=0,i=null;r<t;)(i=r+e)>=t&&(i=t),n.push([r,i]),r=i;return n}function Pn(t,e,n,i,a,o,s,l,f,h,p,d,m,g,y,v){return u(this,void 0,void 0,function(){var u,b,x,E,S,N,I,O;return c(this,function(k){switch(k.label){case 0:if(null==a&&(a=32),null==o&&(o=1),null==p&&(p=!0),null==m&&(m=0),u=!1,null!=f&&null!=h&&(u=!0),null!=y&&(u=!0,null==g))throw new w("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");return null!=(b=t.checkNumSamples(n,a,g,"steps_per_epoch"))&&(x=pt(0,b)),null==s&&(s=1),E=Ne(l,v,s,o,m,b,g,a,u,d),S=E.callbackList,N=E.history,S.setModel(t),t.history=N,[4,S.onTrainBegin()];case 1:k.sent(),t.stopTraining_=!1,I=function(o){var s,l,d,m,y;return c(this,function(v){switch(v.label){case 0:return[4,S.onEpochBegin(o)];case 1:if(v.sent(),s={},null==g)return[3,2];throw new _("stepsPerEpoch mode is not implemented yet.");case 2:if("batch"===p)throw new _("batch shuffling is not implemneted yet");p&&r.qe.shuffle(x),l=Object(r.Zd)(x),d=Cn(b,a),m=function(o){var p;return c(this,function(c){switch(c.label){case 0:return p={},[4,S.onBatchBegin(o,p)];case 1:return c.sent(),Object(r.ge)(function(){var c=d[o][0],m=d[o][1],g=gt(l,c,m-c);p.batch=o,p.size=m-c;for(var y=An(n,g),v=e(y),b=0;b<i.length;++b){var w=i[b],_=v[b];p[w]=_,Object(r.Rb)(_)}if(o===d.length-1&&u){var x=t.testLoop(f,h,a);for(b=0;b<i.length;++b)w=i[b],_=x[b],Object(r.Rb)(_),s["val_"+w]=_}}),[4,S.onBatchEnd(o,p)];case 2:return c.sent(),ge(p),t.stopTraining_?[2,"break"]:[2]}})},y=0,v.label=3;case 3:return y<d.length?[5,m(y)]:[3,6];case 4:if("break"===v.sent())return[3,6];v.label=5;case 5:return++y,[3,3];case 6:l.dispose(),v.label=7;case 7:return[4,S.onEpochEnd(o,s)];case 8:return v.sent(),t.stopTraining_?[2,"break"]:[2]}})},O=m,k.label=2;case 2:return O<o?[5,I(O)]:[3,5];case 3:if("break"===k.sent())return[3,5];k.label=4;case 4:return++O,[3,2];case 5:return[4,S.onTrainEnd()];case 6:return k.sent(),[4,t.history.syncData()];case 7:return k.sent(),[2,t.history]}})})}function Tn(t,e,n,r){return void 0===r&&(r={}),u(this,void 0,void 0,function(){var i,a,o,s,u,l,f,h,p,d,m,g,y,v,b,x,E,S,N;return c(this,function(c){switch(c.label){case 0:if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0,c.label=1;case 1:if(c.trys.push([1,,3,4]),On(f=null==r.batchSize?32:r.batchSize),h=t.standardizeUserData(e,n,!1,f),i=h[0],a=h[1],p=!1,d=void 0,null!=r.validationData&&r.validationData.length>0){if(p=!0,2!==r.validationData.length)throw 3===r.validationData.length?new _("validationData including sample weights is not supported yet."):new w("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");o=r.validationData[0],s=r.validationData[1],m=t.standardizeUserData(o,s,!0,f),u=m[0],l=m[1],d=u.concat(l)}else null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1?(p=!0,g=Math.floor(i[0].shape[0]*(1-r.validationSplit)),y=i[0].shape[0],u=kn(i,g,y),i=kn(i,0,g),l=kn(a,g,y),a=kn(a,0,g),d=u.concat(l)):null!=r.validationSteps&&(p=!0);return v=i.concat(a),t.checkTrainableWeightsConsistency(),b=t.makeTrainFunction(),x=t.getDedupedMetricsNames(),E=void 0,S=void 0,p?(t.makeTestFunction(),E=t.testFunction,S=x.slice().concat(x.map(function(t){return"val_"+t}))):(E=null,d=[],S=x.slice()),N=Ee(r.callbacks),[4,Pn(t,b,v,x,f,r.epochs,r.verbose,N,E,d,r.shuffle,S,r.initialEpoch,null,null,r.yieldEvery)];case 2:return[2,c.sent()];case 3:return t.isTraining=!1,Dn(i,e),Dn(a,n),Dn(u,o),Dn(l,s),[7];case 4:return[2]}})})}function Rn(t){var e=[];t instanceof r.o&&(t=[t]);for(var n=0;n<t.length;++n){var i=t[n];if(1===i.rank)e.push(mt(i,1));else{if(0===i.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(i)}}return e}function Dn(t,e){if(null!=t){var n=[];if(e instanceof r.o)n.push(e.id);else if(Array.isArray(e))e.forEach(function(t){return n.push(t.id)});else if(null!=e)for(var i in e){var a=e[i];n.push(a.id)}var o=[];if(t instanceof r.o)-1===n.indexOf(t.id)&&o.push(t);else if(Array.isArray(t))t.forEach(function(t){-1===n.indexOf(t.id)&&o.push(t)});else if(null!=t)for(var s in t){var u=t[s];-1===n.indexOf(u.id)&&o.push(u)}o.forEach(function(t){t.isDisposed||t.dispose()})}}function Mn(t){return Array.isArray(t)}function jn(t){return!function(t){return t instanceof r.o}(t)&&!Mn(t)}function Bn(t,e,n,r,i){if(void 0===r&&(r=!0),void 0===i&&(i=""),null==e||0===e.length){if(null!=t){var a=!1;if(Mn(t)&&t.length>0)a=!0;else if(jn(t)){for(var o in t)if(t.hasOwnProperty(o)){a=!0;break}}else a=!0;if(a)throw new w("Error when checking model "+i+" expected no data, but got "+t)}return[]}if(null==t)return e.map(function(t){return null});var s;if(jn(t)){t=t,s=[];for(var u=0,c=e;u<c.length;u++){var l=c[u];if(null==t[l])throw new w('No data provided for "'+l+'". Need data for each key in: '+e);s.push(t[l])}}else if(Mn(t)){if((t=t).length!==e.length)throw new w("Error when checking model "+i+": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see "+e.length+" Tensor(s), but instead got the following list of Tensor(s): "+t);s=t}else{if(t=t,e.length>1)throw new w("The model "+i+" expects "+e.length+" Tensor(s), but only received one Tensor. Found: Tensor with shape "+t.shape);s=[t]}if(s=Rn(s),null!=n)for(var f=0;f<e.length;++f)if(null!=n[f]){var h=s[f];if(h.shape.length!==n[f].length)throw new w("Error when checking "+i+": expected "+e[f]+" to have "+n[f].length+" dimension(s). but got array with shape "+h.shape);for(var p=0;p<n[f].length;++p)if(0!==p||r){var d=h.shape[p],m=n[f][p];if(null!=m&&m>=0&&d!==m)throw new w("Error when checking "+i+": expected "+e[f]+" to have shape ["+n[f]+"], but got array with shape ["+h.shape+"].")}}return s}function Ln(t,e,n,r,i){var a;if(void 0===r&&(r=!0),void 0===i&&(i=""),Array.isArray(t)){if(t.length!==e.length)throw new w("Error when checking model "+i+": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see "+e.length+" Tensor(s), but instead got "+t.length+" Tensors(s).");a=t}else{if(e.length>1)throw new w("The model expects "+e.length+" "+i+" Tensors, but only received one Tensor. Found: array with shape "+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(var o=0;o<e.length;++o)if(null!=n[o]){var s=a[o];if(s.shape.length!==n[o].length)throw new w("Error when checking "+i+": expected "+e[o]+" to have "+n[o].length+" dimension(s), but got array with shape "+JSON.stringify(s.shape));for(var u=0;u<n[o].length;++u)if(0!==u||r){var c=s.shape[u],l=n[o][u];if(null!=l&&l!==c)throw new w("Error when checking "+i+": expected "+e[o]+" to have shape "+JSON.stringify(n[o])+" but got array with shape "+JSON.stringify(s.shape)+".")}}}var zn=function(t){function e(e){var n=t.call(this,e)||this;return n.isTraining=!1,n}return a(e,t),e.prototype.summary=function(t,e,n){if(void 0===n&&(n=console.log),!this.built)throw new w("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");an(this,t,e,n)},e.prototype.compile=function(t){var e=this;if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer=function(t){var e={Adagrad:function(){return r.le.adagrad(.01)},Adadelta:function(){return r.le.adadelta(1,.95,l())},Adam:function(){return r.le.adam(.001,.9,.999,l())},Adamax:function(){return r.le.adamax(.002,.9,.999,l(),0)},RMSProp:function(){return r.le.rmsprop(.001,.9,0,l())},SGD:function(){return r.le.sgd(.01)}};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new w("Unknown Optimizer "+t)}(t.optimizer);else{if(!(t.optimizer instanceof r.j))throw new w("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer=t.optimizer}var n=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new w("When passing an Array as loss, it should have one entry per model output. The model has "+this.outputs.length+" output(s), but you passed loss="+t.loss+".");var i=t.loss;n=i.map(function(t){return Ue(t)})}else{var a=Ue(t.loss);this.outputs.map(function(t){n.push(a)})}else{for(var o in t.loss=t.loss,t.loss)if(-1===this.outputNames.indexOf(o))throw new w('Unknown entry in loss dictionary: "'+o+'". Only expected the following keys: '+this.outputNames);for(var s=0,u=this.outputNames;s<u.length;s++){var c=u[s];null==t.loss[c]&&console.warn('Output "'+c+'" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to '+c+" during training"),n.push(Ue(t.loss[c]))}}this.lossFunctions=n,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(var f=0;f<this.outputs.length;++f){var h=this.internalOutputShapes[f],p=this.outputNames[f];this.feedOutputNames.push(p),this.feedOutputShapes.push(h),this.feedLossFns.push(this.lossFunctions[f])}var d=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],rt("loss",function(){for(var t=0;t<e.outputs.length;++t)if(-1===d.indexOf(t)){var n=e.lossFunctions[t];e.outputs.length>1&&(e.metricsTensors.push([n,t]),e.metricsNames.push(e.outputNames[t]+"_loss"))}});var m=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(function(t){return[]});if(Array.isArray(t))return e.map(function(e){return t});if(null!=t){for(var n=[],r=0,i=e;r<i.length;r++){var a=i[r],o=t.hasOwnProperty(a)?t[a]:[];Array.isArray(o)||(o=[o]),n.push(o)}return n}throw new TypeError("Type of metrics argument not understood. Expected an Array or Object, found: "+t)}(t.metrics,this.outputNames);rt("metric",function(){for(var t=function(t){if(-1!==d.indexOf(t))return"continue";!function(n){for(var r,i,a,o=function(n){if(-1!==["accuracy","acc","crossentropy","ce"].indexOf(n)){var o=e.internalOutputShapes[t];1===o[o.length-1]||e.lossFunctions[t]===Be?-1!==["accuracy","acc"].indexOf(n)?i=Ve:-1!==["crossentropy","ce"].indexOf(n)&&(i=Ke):e.lossFunctions[t]===je?-1!==["accuracy","acc"].indexOf(n)?i=Ge:-1!==["crossentropy","ce"].indexOf(n)&&(i=rn):-1!==["accuracy","acc"].indexOf(n)?i=We:-1!==["crossentropy","ce"].indexOf(n)&&(i=en);var s=void 0;-1!==["accuracy","acc"].indexOf(n)?s="acc":-1!==["crossentropy","ce"].indexOf(n)&&(s="ce"),a=i,r=""+s}else{var u=function(t){var e={binaryAccuracy:Ve,categoricalAccuracy:We,precision:$e,categoricalCrossentropy:en,sparseCategoricalCrossentropy:rn,mse:Xe,MSE:Ye,mae:Je,MAE:Ze,mape:Qe,MAPE:tn,cosine:nn};if("string"==typeof t&&t in e)return e[t];if("string"!=typeof t&&null!=t)return t;throw new w("Unknown metric "+t)}(n);a=u,r=""+n}var c;rt(r,function(){c=a}),function(t,n,r){e.outputNames.length>1&&(n=e.outputNames[t]+"_"+n),e.metricsNames.push(n),e.metricsTensors.push([r,t])}(t,r,c)},s=0,u=m[t];s<u.length;s++)o(u[s])}()},n=0;n<e.outputs.length;++n)t(n)}),this.collectedTrainableWeights=this.trainableWeights},e.prototype.checkTrainableWeightsConsistency=function(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")},e.prototype.evaluate=function(t,e,n){void 0===n&&(n={});var r=null==n.batchSize?32:n.batchSize;On(r);var i=this.standardizeUserData(t,e,!0,r);try{var a=i[0].concat(i[1]);this.makeTestFunction();var o=this.testFunction;return I(this.testLoop(o,a,r,n.verbose,n.steps))}finally{Dn(i[0],t),Dn(i[1],e)}},e.prototype.evaluateDataset=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(n){return this.makeTestFunction(),[2,In(this,t,e)]})})},e.prototype.checkNumSamples=function(t,e,n,r){var i;if(void 0===r&&(r="steps"),null!=n){if(i=null,null!=e)throw new w("If "+r+" is set, batchSize must be null or undefined.Got batchSize = "+e)}else{if(null==t)throw new w("Either the input data should have a defined shape, or "+r+" shoud be specified.");i=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return i},e.prototype.execute=function(t,e){if(Array.isArray(e)&&0===e.length)throw new w("`outputs` is an empty Array, which is not allowed.");var n=Array.isArray(e),i=n?e:[e],a=this.retrieveSymbolicTensors(i),o=new hn;if(t instanceof r.o&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new w("The number of inputs provided ("+t.length+") does not match the number of inputs of this model ("+this.inputs.length+").");for(var s=0;s<this.inputs.length;++s)o.add(this.inputs[s],t[s])}else for(var u=0,c=this.inputs;u<c.length;u++){var l=c[u],f=t[l.name];if(null==f)throw new w("No value is provided for the model's input "+l.name);o.add(l,f)}var h=mn(a,o);return n?h:h[0]},e.prototype.retrieveSymbolicTensors=function(t){for(var e=E(null,t.length),n=t.length,r=0,i=this.layers;r<i.length;r++){for(var a=i[r],o=Array.isArray(a.output)?a.output:[a.output],s=o.map(function(t){return t.name}),u=0;u<t.length;++u){var c=s.indexOf(t[u]);if(-1!==c&&(e[u]=o[c],n--),0===n)break}if(0===n)break}if(n>0){var l=[];throw e.forEach(function(e,n){null==e&&l.push(t[n])}),new w("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(l))}return e},e.prototype.predictLoop=function(t,e,n){var i=this;return void 0===e&&(e=32),void 0===n&&(n=!1),Object(r.ge)(function(){var a=i.checkNumSamples(t);if(n)throw new _("Verbose predictLoop() is not implemented yet.");for(var o=Cn(a,e),s=[],u=function(e){var n=Object(r.ge)(function(){var n=o[e][0],r=o[e][1],a=kn(t,n,r),s=[];if(Array.isArray(a))for(var u=0;u<a.length;++u)s.push({key:i.inputs[u],value:a[u]});else s.push({key:i.inputs[0],value:a});var c=new hn(s);return mn(i.outputs,c)});if(0===e)for(var a=0,u=n;a<u.length;a++){var c=u[a];s.push(c)}else for(var l=0;l<n.length;++l)s[l]=wt(s[l],n[l])},c=0;c<o.length;++c)u(c);return I(s)})},e.prototype.predict=function(t,e){void 0===e&&(e={});var n=Rn(t);Ln(n,this.inputNames,this.feedInputShapes,!1);try{var r=null==e.batchSize?32:e.batchSize;return On(r),this.predictLoop(n,r)}finally{Dn(n,t)}},e.prototype.predictOnBatch=function(t){return Ln(t,this.inputNames,this.feedInputShapes,!0),this.predictLoop(t,t.shape[0])},e.prototype.standardizeUserData=function(t,e,n,i){if(void 0===n&&(n=!0),null==this.optimizer)throw new b("You must compile a model before training/testing. Use Model.compile(modelCompileArgs).");for(var a=[],o=0;o<this.feedOutputShapes.length;++o){var s=this.feedOutputShapes[o];this.feedLossFns[o]===je?a.push(s.slice(0,s.length-1).concat([1])):a.push(s)}if(function(t,e,n){var i=D(t.map(function(t){return t.shape[0]}));i.sort();var a=D(e.map(function(t){return t.shape[0]}));if(a.sort(),i.length>1)throw new w("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(function(t){return t.shape})));if(a.length>1)throw new w("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(function(t){return t.shape})));if(i.length>0&&a.length>0&&!r.qe.arraysEqual(i,a))throw new w("Input Tensors should have the same number of samples as target Tensors. Found "+i[0]+" input sample(s) and "+a[0]+" target sample(s).")}(t=Bn(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Bn(e,this.feedOutputNames,a,!1,"target")),function(t,e,n){for(var r=[Oe,Be,Me],i=0;i<t.length;++i){var a=t[i],o=e[i],s=n[i];if(null!=o){if(o===Me&&1===a.shape[a.shape.length-1])throw new w("You are passing a target array of shape "+a.shape+" while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");if(-1!==r.indexOf(o))for(var u=a.shape.slice(1),c=s.slice(1),l=0;l<u.length;++l){var f=u[l],h=c[l];if(null!=h&&f!==h)throw new w("A target Tensor with shape "+a.shape+" was passed for an output of shape "+s+", while using a loss function that expects targets to have the same shape as the output.")}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=i&&i>0&&t[0].shape[0]%i!=0)throw new w("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size "+i+". Found: "+t[0].shape[0]+" sample(s).");return[t,e,null]},e.prototype.testLoop=function(t,e,n,i,a){var o=this;return void 0===i&&(i=0),Object(r.ge)(function(){var s=o.checkNumSamples(e,n,a,"steps"),u=[];if(i>0)throw new _("Verbose mode is not implemented yet.");if(null!=a)throw new _("steps mode in testLoop() is not implemented yet");for(var c=Cn(s,n),l=Object(r.Zd)(pt(0,s)),f=0;f<c.length;++f){var h=c[f][0],p=c[f][1],d=gt(l,h,p-h),m=An(e,d),g=t(m);if(0===f)for(var v=0;v<g.length;++v)u.push(y(0));for(v=0;v<g.length;++v){var b=g[v];u[v]=Object(r.u)(u[v],Object(r.zc)(y(p-h),b))}}for(v=0;v<u.length;++v)u[v]=Object(r.lb)(u[v],y(s));return u})},e.prototype.getDedupedMetricsNames=function(){for(var t=this.metricsNames,e=[],n=0;n<t.length;++n){var r=t[n],i=r;N(t,r)>1&&(i+="_"+N(t.slice(0,n),r)),e.push(i)}return e},e.prototype.makeTrainFunction=function(){var t=this;return function(e){var n=e.slice(0,t.inputs.length),i=e.slice(t.inputs.length,t.inputs.length+t.outputs.length),a=[],o=t.collectedTrainableWeights.map(function(t){return t.read()});return[t.optimizer.minimize(function(){for(var e=[],o=0;o<t.inputs.length;++o)e.push({key:t.inputs[o],value:n[o]});var s,u=new hn(e),c=mn(t.outputs,u,{training:!0});for(o=0;o<t.lossFunctions.length;++o){var l=(0,t.lossFunctions[o])(i[o],c[o]);Object(r.qc)(l),s=0===o?l:Object(r.u)(s,l)}for(o=0;o<t.metricsTensors.length;++o){var f=t.metricsTensors[o][0],h=t.metricsTensors[o][1],p=Object(r.qc)(f(i[h],c[h]));Object(r.Rb)(p),a.push(p)}return s=Object(r.qc)(s),t.calculateLosses().forEach(function(t){s=Object(r.u)(s,t)}),s},!0,o)].concat(a)}},e.prototype.makeTestFunction=function(){var t=this;this.testFunction=function(e){return Object(r.ge)(function(){for(var n,i=[],a=e.slice(0,t.inputs.length),o=e.slice(t.inputs.length,t.inputs.length+t.outputs.length),s=[],u=0;u<t.inputs.length;++u)s.push({key:t.inputs[u],value:a[u]});var c=new hn(s),l=mn(t.outputs,c);for(u=0;u<t.lossFunctions.length;++u){var f=t.lossFunctions[u],h=Object(r.qc)(f(o[u],l[u]));n=0===u?h:Object(r.u)(n,h),i.push(n)}for(u=0;u<t.metricsTensors.length;++u){var p=t.metricsTensors[u][0],d=t.metricsTensors[u][1],m=Object(r.qc)(p(o[d],l[d]));i.push(m)}return i})}},e.prototype.fit=function(t,e,n){return void 0===n&&(n={}),u(this,void 0,void 0,function(){return c(this,function(r){return[2,Tn(this,t,e,n)]})})},e.prototype.fitDataset=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(n){return[2,Sn(this,t,e)]})})},e.prototype.trainOnBatch=function(t,e){return u(this,void 0,void 0,function(){var n,i,a,o,s,u,l,f,h,p,d;return c(this,function(c){switch(c.label){case 0:n=this.standardizeUserData(t,e),i=n[0],a=n[1],o=this.makeTrainFunction(),s=o(i.concat(a)),u=[],l=0,f=s,c.label=1;case 1:return l<f.length?(h=f[l],d=(p=u).push,[4,h.data()]):[3,4];case 2:d.apply(p,[c.sent()[0]]),c.label=3;case 3:return l++,[3,1];case 4:return Object(r.jb)(s),[2,I(u)]}})})},e.prototype.getNamedWeights=function(t){for(var e={},n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,i=this.getWeights(n),a=0;a<r.length;++a)n&&!r[a].trainable||(e[r[a].originalName]=i[a]);return e},Object.defineProperty(e.prototype,"stopTraining",{set:function(t){this.stopTraining_=t},enumerable:!0,configurable:!0}),e.prototype.save=function(t,e){return u(this,void 0,void 0,function(){var n,i,a;return c(this,function(o){switch(o.label){case 0:if("string"==typeof t){if(0===(n=r.Pb.getSaveHandlers(t)).length)throw new w("Cannot find any save handlers for URL '"+t+"'");if(n.length>1)throw new w("Found more than one ("+n.length+") save handlers for URL '"+t+"'");t=n[0]}if(null==t.save)throw new w("Model.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return[4,r.Pb.encodeWeights(this.getNamedWeights(e))];case 1:return i=o.sent(),!1,null,a=this.toJSON(null,!1),[2,t.save({modelTopology:a,weightData:i.data,weightSpecs:i.specs})]}})})},e.className="Model",e}(_n);function Fn(t,e,n){return void 0===n&&(n=!0),u(this,void 0,void 0,function(){var i,a,o,s;return c(this,function(u){switch(u.label){case 0:if(null==t.load)throw new w("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return[4,t.load()];case 1:if(i=u.sent(),null!=(a=i.modelTopology).model_config&&(a=a.model_config),o=null!=i.weightData&&null!=i.weightSpecs&&n,s=cn(fn(a),e,o),null!=i.weightData){if(null==i.weightSpecs)throw new w("Model artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");!1,!0,s.loadWeights(r.Pb.decodeWeights(i.weightData,i.weightSpecs),!1,!0,n)}return[2,s]}})})}r.td.registerClass(zn);var Un=function(t){function e(e){var n=t.call(this,{inputs:[],outputs:[]})||this;if(e=e||{},n.trainable=!0,n._updatable=!0,n.built=!1,n.name=null!=e.name?e.name:d("sequential_"),null!=e.layers)for(var r=0,i=e.layers;r<i.length;r++){var a=i[r];n.add(a)}return n}return a(e,t),e.prototype.checkShape=function(t){if(t.inboundNodes[0].outputTensors[0].shape.some(function(t){return t<0}))throw new w("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")},e.prototype.add=function(t){var n,r=t instanceof e||t instanceof zn;if(r){if(1!==(n=t).outputs.length)throw new w("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new w("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new w("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");var i=de({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(i)}if(r)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new w("A layer added to a Sequential model must not already be connected somewhere else. Model received layer "+t.name+" which has "+t.inboundNodes.length+" pre-existing inbound connections.");if(1!==t.inboundNodes[0].outputTensors.length)throw new w("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,r){if((null==n||null!=r&&r>0)&&(n=e.sourceLayer,r=e.nodeIndex),0===n.inboundNodes.length)return[e];var i=n.inboundNodes[r];if(0===i.inboundLayers.length)return i.inputTensors;for(var a=[],o=0;o<i.inboundLayers.length;o++)for(var s=0,u=t(i.inputTensors[o],i.inboundLayers[o],i.nodeIndices[o]);s<u.length;s++){var c=u[s];-1===a.indexOf(c)&&a.push(c)}return a}(this.outputs[0])}this.inboundNodes=[],new ue({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:E(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(function(t){return t.shape}),outputShapes:this.outputs[0].shape})}else{var a=t.apply(this.outputs[0]);if(Array.isArray(a))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[a],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1},e.prototype.pop=function(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{var t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}},e.prototype.call=function(t,e){return null==this.model&&this.build(),this.model.call(t,e)},e.prototype.build=function(t){if(Qt(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new zn({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.model.updatable=this.updatable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0},e.prototype.countParams=function(){return this.built||this.build(),t.prototype.countParams.call(this)},e.prototype.summary=function(e,n,r){void 0===r&&(r=console.log),this.built||this.build(),t.prototype.summary.call(this,e,n,r)},e.prototype.setWeights=function(t){null==this.model&&this.build(),this.model.setWeights(t)},Object.defineProperty(e.prototype,"updatable",{get:function(){return this._updatable},set:function(t){this.built&&(this.model.updatable=t),this._updatable=t},enumerable:!0,configurable:!0}),e.prototype.evaluate=function(t,e,n){if(void 0===n&&(n={}),!this.built)throw new b("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)},e.prototype.evaluateDataset=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(n){if(!this.built)throw new b("The model needs to be compiled before being used.");return[2,this.model.evaluateDataset(t,e)]})})},e.prototype.predict=function(t,e){return void 0===e&&(e={}),null==this.model&&this.build(),this.model.predict(t,e)},e.prototype.predictOnBatch=function(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)},e.prototype.compile=function(t){this.build(),this.model.compile(t),this.optimizer=this.model.optimizer,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames},e.prototype.fit=function(t,e,n){return void 0===n&&(n={}),u(this,void 0,void 0,function(){return c(this,function(r){if(!this.built)throw new b("The model needs to be compiled before being used.");return[2,this.model.fit(t,e,n)]})})},e.prototype.fitDataset=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(n){if(!this.built)throw new b("The model needs to be compiled before being used.");return[2,this.model.fitDataset(t,e)]})})},e.prototype.trainOnBatch=function(t,e){return u(this,void 0,void 0,function(){return c(this,function(n){return[2,this.model.trainOnBatch(t,e)]})})},e.fromConfig=function(t,n,i,a){var o;void 0===i&&(i={}),void 0===a&&(a=!1);var s={};if(n instanceof Array){if(null==n[0].className||"Merge"===n[0].className)throw new w("Legacy serialization format not supported yet.");o=n}else r.qe.assert(null!=n.layers,"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),o=n.layers,delete n.layers,s=n;var u=new t(s);if(!(u instanceof e))throw new _("Sequential.fromConfig called on non-Sequential input: "+u);for(var c=0,l=o;c<l.length;c++){var f=cn(l[c],void 0,a);a&&f.setFastWeightInitDuringBuild(!0),u.add(f)}return u},Object.defineProperty(e.prototype,"stopTraining",{set:function(t){this.model.stopTraining=t},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){for(var t=[],e=0,n=this.layers;e<n.length;e++){var r=n[e];t.push({className:r.getClassName(),config:r.getConfig()})}return t},e.className="Sequential",e}(zn);function Vn(t){return new zn(t)}function Wn(t){return new Un(t)}function qn(t,e){return void 0===e&&(e=!0),function(t,e){return void 0===e&&(e=!0),u(this,void 0,void 0,function(){var n;return c(this,function(i){if("string"==typeof t){if(0===(n=r.Pb.getLoadHandlers(t)).length)n.push(r.Pb.browserHTTPRequest(t));else if(n.length>1)throw new w("Found more than one ("+n.length+") load handlers for URL '"+t+"'");t=n[0]}return[2,Fn(t,void 0,e)]})})}(t,e)}function $n(t){return de(t)}function Hn(t,e){Se.registerCallbackConstructor(t,e)}r.td.registerClass(Un);var Kn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.getConfig=function(){return{}},e}(r.td.Serializable),Gn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){return void 0===e&&(e=1),function(t,e){if(void 0===e&&(e=1),1!==e)throw new _("Support for alpha values other than 1 ("+e+") is not implemented yet.");return Object(r.ob)(t)}(t,e)},e.className="elu",e}(Kn);r.td.registerClass(Gn);var Xn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.rd)(t)},e.className="selu",e}(Kn);r.td.registerClass(Xn);var Yn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.fd)(t)},e.className="relu",e}(Kn);r.td.registerClass(Yn);var Jn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.ge)(function(){return Object(r.tc)(y(6),Object(r.fd)(t))})},e.className="relu6",e}(Kn);r.td.registerClass(Jn);var Zn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return t},e.className="linear",e}(Kn);r.td.registerClass(Zn);var Qn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.wd)(t)},e.className="sigmoid",e}(Kn);r.td.registerClass(Qn);var tr=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return function(t){return Object(r.ge)(function(){var e=Object(r.u)(y(.5),Object(r.zc)(y(.2),t));return Object(r.Q)(e,0,1)})}(t)},e.className="hardSigmoid",e}(Kn);r.td.registerClass(tr);var er=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.Gd)(t)},e.className="softplus",e}(Kn);r.td.registerClass(er);var nr=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return function(t){return Object(r.ge)(function(){return Object(r.lb)(t,Object(r.u)(y(1),Object(r.r)(t)))})}(t)},e.className="softsign",e}(Kn);r.td.registerClass(nr);var rr=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.Xd)(t)},e.className="tanh",e}(Kn);r.td.registerClass(rr);var ir=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){return void 0===e&&(e=-1),Object(r.Fd)(t,e)},e.className="softmax",e}(Kn);function ar(t){return t.getClassName()}function or(t,e){return void 0===e&&(e={}),T(t,r.td.SerializationMap.getMap().classNameMap,e,"activation")}function sr(t){return null==t?or({className:"linear",config:{}}):"string"==typeof t?or({className:t,config:{}}):t instanceof Kn?t:or(t)}r.td.registerClass(ir);var ur=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e}(r.td.Serializable),cr=function(t){function e(e){var n=t.call(this)||this,r=null==e||null==e.l1?.01:e.l1,i=null==e||null==e.l2?.01:e.l2;return n.hasL1=0!==r,n.hasL2=0!==i,n.l1=y(r),n.l2=y(i),n}return a(e,t),e.prototype.apply=function(t){var e=this;return Object(r.ge)(function(){var n=Object(r.ze)([1]);return e.hasL1&&(n=Object(r.u)(n,Object(r.Vd)(Object(r.zc)(e.l1,Object(r.r)(t))))),e.hasL2&&(n=Object(r.u)(n,Object(r.Vd)(Object(r.zc)(e.l2,Nt(t))))),n.asScalar()})},e.prototype.getConfig=function(){return{l1:this.l1.dataSync()[0],l2:this.l2.dataSync()[0]}},e.fromConfig=function(t,e){return new t({l1:e.l1,l2:e.l2})},e.className="L1L2",e}(ur);r.td.registerClass(cr);var lr={l1l2:"L1L2"};function fr(t){return P(t)}function hr(t,e){return void 0===e&&(e={}),T(t,r.td.SerializationMap.getMap().classNameMap,e,"regularizer")}function pr(t){return null==t?null:"string"==typeof t?hr({className:t in lr?lr[t]:t,config:{}}):t instanceof ur?t:hr(t)}var dr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.supportsMasking=!0,null!=e&&(n.maxValue=e.maxValue),n}return a(e,t),e.prototype.call=function(t,e){t=Zt(t);var n=Object(r.fd)(t);return null!=this.maxValue&&(n=Object(r.Q)(n,0,this.maxValue)),n},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={maxValue:this.maxValue},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ReLU",e}(le);r.td.registerClass(dr);var mr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.DEFAULT_ALPHA=.3,null==e&&(e={}),n.alpha=null==e.alpha?n.DEFAULT_ALPHA:e.alpha,n}return a(e,t),e.prototype.call=function(t,e){var n=Zt(t);return Object(r.Sb)(n,this.alpha)},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={alpha:this.alpha},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="LeakyReLU",e}(le);r.td.registerClass(mr);var gr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;if(n.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),n.supportsMasking=!0,n.alphaInitializer=Gt(e.alphaInitializer||n.DEFAULT_ALPHA_INITIALIZER),n.alphaRegularizer=pr(e.alphaRegularizer),n.alphaConstraint=K(e.alphaConstraint),null==e.sharedAxes)n.sharedAxes=null;else if(Array.isArray(e.sharedAxes))n.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new w("Expected sharedAxes to be a number or an array of numbers, but got "+e.sharedAxes);n.sharedAxes=[e.sharedAxes]}return n}return a(e,t),e.prototype.build=function(t){var e=(t=Qt(t)).slice(1);if(null!=this.sharedAxes)for(var n=0,r=this.sharedAxes;n<r.length;n++)e[(a=r[n])-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);var i={};if(null!=this.sharedAxes)for(var a=1;a<t.length;++a)i[a]=t[a];this.inputSpec=[new ae({ndim:t.length,axes:i})],this.built=!0},e.prototype.call=function(t,e){return t=Zt(t),Object(r.Vc)(t,this.alpha.read())},e.prototype.getConfig=function(){var e={alphaInitializer:Kt(this.alphaInitializer),alphaRegularizer:fr(this.alphaRegularizer),alphaConstraint:$(this.alphaConstraint),sharedAxes:this.sharedAxes},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="PReLU",e}(le);r.td.registerClass(gr);var yr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;if(n.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==n.DEFAULT_ALPHA)throw new _("Non-default alpha value ("+e.alpha+") is not supported by the ELU layer yet.");return n.alpha=null==e.alpha?n.DEFAULT_ALPHA:e.alpha,n}return a(e,t),e.prototype.call=function(t,e){var n=Zt(t);return Object(r.ob)(n)},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={alpha:this.alpha},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ELU",e}(le);r.td.registerClass(yr);var vr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.DEFAULT_THETA=1,null==e&&(e={}),n.theta=null==e.theta?n.DEFAULT_THETA:e.theta,n.thetaTensor=y(n.theta),n}return a(e,t),e.prototype.call=function(t,e){var n=Zt(t);return n.mul(dt(n.greater(this.thetaTensor),"float32"))},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={theta:this.theta},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ThresholdedReLU",e}(le);r.td.registerClass(vr);var br=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.DEFAULT_AXIS=1,null==e&&(e={}),n.softmax=(new ir).apply,n.axis=null==e.axis?n.DEFAULT_AXIS:e.axis,n}return a(e,t),e.prototype.call=function(t,e){var n=Zt(t);return this.softmax(n,this.axis)},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={axis:this.axis},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Softmax",e}(le);function wr(t,e,n){if("number"==typeof t)return E(t,e);if(t.length!==e)throw new w("The "+n+" argument must be a tuple of "+e+" integers. Received: "+t.length+" elements.");for(var r=0;r<e;++r){var i=t[r];if(!ut(i))throw new w("The "+n+" argument must be a tuple of "+e+" integers. Received: "+JSON.stringify(t)+" including a non-integer number "+i)}return t}function _r(t,e,n,r,i){return void 0===i&&(i=1),null==t?t:(a="same"===n?t:t-(e+(e-1)*(i-1))+1,Math.floor((a+r-1)/r));var a}function xr(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+ht([n-e,0]);else{if("same"!==r)throw new w("Unsupport padding mode: "+r+".");t*=e}return t}function Er(t,e){return Object(r.ge)(function(){return J(e),"channelsFirst"===e?Object(r.me)(t,[0,2,3,1]):t})}r.td.registerClass(br);var Sr=function(t){function e(n,r){var i=t.call(this,r)||this;if(i.bias=null,i.DEFAULT_KERNEL_INITIALIZER="glorotNormal",i.DEFAULT_BIAS_INITIALIZER="zeros",e.verifyArgs(r),i.rank=n,1!==i.rank&&2!==i.rank)throw new _("Convolution layer for rank other than 1 or 2 ("+i.rank+") is not implemented yet.");if(i.kernelSize=wr(r.kernelSize,n,"kernelSize"),i.strides=wr(null==r.strides?1:r.strides,n,"strides"),i.padding=null==r.padding?"valid":r.padding,Q(i.padding),i.dataFormat=null==r.dataFormat?"channelsLast":r.dataFormat,J(i.dataFormat),i.activation=sr(r.activation),i.useBias=null==r.useBias||r.useBias,i.biasInitializer=Gt(r.biasInitializer||i.DEFAULT_BIAS_INITIALIZER),i.biasConstraint=K(r.biasConstraint),i.biasRegularizer=pr(r.biasRegularizer),i.activityRegularizer=pr(r.activityRegularizer),i.dilationRate=wr(null==r.dilationRate?1:r.dilationRate,n,"dilationRate"),1===i.rank&&Array.isArray(i.dilationRate)&&1!==i.dilationRate.length)throw new w("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(i.dilationRate));if(2===i.rank)if("number"==typeof i.dilationRate)i.dilationRate=[i.dilationRate,i.dilationRate];else if(2!==i.dilationRate.length)throw new w("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(i.dilationRate));return i}return a(e,t),e.verifyArgs=function(t){if(S("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!B(t.kernelSize,"number",1,2))throw new w("BaseConv expects config.kernelSize to be number or number[] with length 1 or 2, but received "+JSON.stringify(t.kernelSize)+".")},e.prototype.getConfig=function(){var e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:ar(this.activation),useBias:this.useBias,biasInitializer:Kt(this.biasInitializer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),biasConstraint:$(this.biasConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(le),Nr=function(t){function e(n,r){var i=t.call(this,n,r)||this;return i.kernel=null,e.verifyArgs(r),i.filters=r.filters,i.kernelInitializer=Gt(r.kernelInitializer||i.DEFAULT_KERNEL_INITIALIZER),i.kernelConstraint=K(r.kernelConstraint),i.kernelRegularizer=pr(r.kernelRegularizer),i}return a(e,t),e.prototype.build=function(t){t=Qt(t);var e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new w("The channel dimension of the input should be defined. Found "+t[e]);var n,r=t[e],i=this.kernelSize.concat([r,this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:(n={},n[e]=r,n)}],this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var e;t=Zt(t);var i=null==n.bias?null:n.bias.read();if(1===n.rank)e=function(t,e,n,i,a,o,s){return void 0===i&&(i=1),void 0===a&&(a="valid"),void 0===s&&(s=1),Object(r.ge)(function(){if(null==o&&(o="channelsLast"),J(o),3!==t.shape.length)throw new w("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new w("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new w("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===o&&(t=Object(r.me)(t,[0,2,1])),"causal"===a)throw new _("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");var u=Object(r.Y)(t,e,i,"same"===a?"same":"valid","NWC",s);return null!=n&&(u=It(u,n)),u})}(t,n.kernel.read(),i,n.strides[0],n.padding,n.dataFormat,n.dilationRate[0]);else if(2===n.rank)e=function(t,e,n,i,a,o,s){return void 0===i&&(i=[1,1]),void 0===a&&(a="valid"),Object(r.ge)(function(){if(null==o&&(o="channelsLast"),J(o),3!==t.rank&&4!==t.rank)throw new w("conv2dWithBias expects input to be of rank 3 or 4, but received "+t.rank+".");if(3!==e.rank&&4!==e.rank)throw new w("conv2dWithBias expects kernel to be of rank 3 or 4, but received "+t.rank+".");var u=Er(t,o);if("causal"===a)throw new _("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=Object(r.Z)(u,e,i,"same"===a?"same":"valid","NHWC",s),null!=n&&(u=It(u,n)),"channelsFirst"===o&&(u=Object(r.me)(u,[0,3,1,2])),u})}(t,n.kernel.read(),i,n.strides,n.padding,n.dataFormat,n.dilationRate);else if(3===n.rank)throw new _("3D convolution is not implemented yet.");return null!=n.activation&&(e=n.activation.apply(e)),e})},e.prototype.computeOutputShape=function(t){t=Qt(t);for(var e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2),r=0;r<n.length;++r){var i=_r(n[r],this.kernelSize[r],this.padding,this.strides[r],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[r]);e.push(i)}var a=[t[0]];return"channelsLast"===this.dataFormat?(a=a.concat(e)).push(this.filters):(a.push(this.filters),a=a.concat(e)),a},e.prototype.getConfig=function(){var e={filters:this.filters,kernelInitializer:Kt(this.kernelInitializer),kernelRegularizer:fr(this.kernelRegularizer),kernelConstraint:$(this.kernelConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.verifyArgs=function(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new w("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))},e}(Sr),Ir=function(t){function e(n){var r=t.call(this,2,n)||this;return e.verifyArgs(n),r}return a(e,t),e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,e},e.verifyArgs=function(t){if("number"!=typeof t.kernelSize&&!B(t.kernelSize,"number",1,2))throw new w("Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received "+JSON.stringify(t.kernelSize)+".")},e.className="Conv2D",e}(Nr);r.td.registerClass(Ir);var Or=function(t){function e(e){var n=t.call(this,e)||this;if(n.inputSpec=[new ae({ndim:4})],"same"!==n.padding&&"valid"!==n.padding)throw new w("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+n.padding);return n}return a(e,t),e.prototype.build=function(t){if(4!==(t=Qt(t)).length)throw new w("Input should have rank 4; Received input shape: "+JSON.stringify(t));var e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new w("The channel dimension of the inputs should be defined. Found `None`.");var n,r=t[e],i=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",i,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ae({ndim:4,axes:(n={},n[e]=r,n)})],this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var e=Zt(t);if(4!==e.shape.length)throw new w("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);var i,a,o=e.shape,s=o[0];"channelsFirst"===n.dataFormat?(i=2,a=3):(i=1,a=2);var u=o[i],c=o[a],l=n.kernelSize[0],f=n.kernelSize[1],h=n.strides[0],p=n.strides[1],d=[s,xr(u,h,l,n.padding),xr(c,p,f,n.padding),n.filters];"channelsLast"!==n.dataFormat&&(e=Object(r.me)(e,[0,2,3,1]));var m=Object(r.bb)(e,n.kernel.read(),d,n.strides,n.padding);return"channelsLast"!==n.dataFormat&&(m=Object(r.me)(m,[0,3,1,2])),null!=n.bias&&(m=It(m,n.bias.read(),n.dataFormat)),null!=n.activation&&(m=n.activation.apply(m)),m})},e.prototype.computeOutputShape=function(t){var e,n,r,i=(t=Qt(t)).slice();"channelsFirst"===this.dataFormat?(e=1,n=2,r=3):(e=3,n=1,r=2);var a=this.kernelSize[0],o=this.kernelSize[1],s=this.strides[0],u=this.strides[1];return i[e]=this.filters,i[n]=xr(i[n],s,a,this.padding),i[r]=xr(i[r],u,o,this.padding),i},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.dilationRate,e},e.className="Conv2DTranspose",e}(Ir);r.td.registerClass(Or);var kr=function(t){function e(e){return t.call(this,2,e)||this}return a(e,t),e.className="SeparableConv2D",e}(function(t){function e(e,n){var r=t.call(this,e,n)||this;if(r.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",r.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",r.depthwiseKernel=null,r.pointwiseKernel=null,null==n.filters)throw new w("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=n.kernelInitializer||null!=n.kernelRegularizer||null!=n.kernelConstraint)throw new w("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=n.padding&&"same"!==n.padding&&"valid"!==n.padding)throw new w("SeparableConv"+r.rank+"D supports only padding modes: 'same' and 'valid', but received "+JSON.stringify(n.padding));return r.depthMultiplier=null==n.depthMultiplier?1:n.depthMultiplier,r.depthwiseInitializer=Gt(n.depthwiseInitializer||r.DEFAULT_DEPTHWISE_INITIALIZER),r.depthwiseRegularizer=pr(n.depthwiseRegularizer),r.depthwiseConstraint=K(n.depthwiseConstraint),r.pointwiseInitializer=Gt(n.depthwiseInitializer||r.DEFAULT_POINTWISE_INITIALIZER),r.pointwiseRegularizer=pr(n.pointwiseRegularizer),r.pointwiseConstraint=K(n.pointwiseConstraint),r}return a(e,t),e.prototype.build=function(t){if((t=Qt(t)).length<this.rank+2)throw new w("Inputs to SeparableConv"+this.rank+"D should have rank "+(this.rank+2)+", but received input shape: "+JSON.stringify(t));var e,n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n]||t[n]<0)throw new w("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[n]));for(var r=t[n],i=this.kernelSize.concat([r,this.depthMultiplier]),a=[],o=0;o<this.rank;++o)a.push(1);a.push(r*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",i,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new ae({ndim:this.rank+2,axes:(e={},e[n]=r,e)})],this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var e;if(t=Zt(t),1===n.rank)throw new _("1D separable convolution is not implemented yet.");return 2===n.rank&&("channelsFirst"===n.dataFormat&&(t=Object(r.me)(t,[0,2,3,1])),e=Object(r.sd)(t,n.depthwiseKernel.read(),n.pointwiseKernel.read(),n.strides,n.padding,n.dilationRate,"NHWC")),n.useBias&&(e=It(e,n.bias.read(),n.dataFormat)),null!=n.activation&&(e=n.activation.apply(e)),"channelsFirst"===n.dataFormat&&(e=Object(r.me)(e,[0,3,1,2])),e})},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Kt(this.depthwiseInitializer),e.pointwiseInitializer=Kt(this.pointwiseInitializer),e.depthwiseRegularizer=fr(this.depthwiseRegularizer),e.pointwiseRegularizer=fr(this.pointwiseRegularizer),e.depthwiseConstraint=$(this.depthwiseConstraint),e.pointwiseConstraint=$(this.pointwiseConstraint),e},e.className="SeparableConv",e}(Nr));r.td.registerClass(kr);var Ar=function(t){function e(n){var r=t.call(this,1,n)||this;return e.verifyArgs(n),r.inputSpec=[{ndim:3}],r}return a(e,t),e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,delete e.dataFormat,e},e.verifyArgs=function(t){if("number"!=typeof t.kernelSize&&!B(t.kernelSize,"number",1,1))throw new w("Conv1D expects config.kernelSize to be number or number[] with length 1, but received "+JSON.stringify(t.kernelSize)+".")},e.className="Conv1D",e}(Nr);r.td.registerClass(Ar);var Cr=function(t){function e(e){var n=t.call(this,e)||this;return"number"==typeof e.cropping?n.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?n.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:n.cropping=e.cropping,n.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,n.inputSpec=[{ndim:4}],n}return a(e,t),e.prototype.computeOutputShape=function(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){return t=Zt(t),"channelsLast"===n.dataFormat?vt(vt(t,n.cropping[0][0],t.shape[1]-n.cropping[0][0]-n.cropping[0][1],2),n.cropping[1][0],t.shape[2]-n.cropping[1][1]-n.cropping[1][0],3):vt(vt(t,n.cropping[0][0],t.shape[2]-n.cropping[0][0]-n.cropping[0][1],3),n.cropping[1][0],t.shape[3]-n.cropping[1][1]-n.cropping[1][0],4)})},e.prototype.getConfig=function(){var e={cropping:this.cropping,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Cropping2D",e}(le);r.td.registerClass(Cr);var Pr=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_SIZE=[2,2],n.inputSpec=[{ndim:4}],n.size=null==e.size?n.DEFAULT_SIZE:e.size,n.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,n}return a(e,t),e.prototype.computeOutputShape=function(t){if("channelsFirst"===this.dataFormat){var e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}return e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2],[t[0],e,n,t[3]]},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var e=Zt(t),i=e.shape;if("channelsFirst"===n.dataFormat){e=Object(r.me)(e,[0,2,3,1]);var a=n.size[0]*i[2],o=n.size[1]*i[3],s=e.resizeNearestNeighbor([a,o]);return Object(r.me)(s,[0,3,1,2])}return a=n.size[0]*i[1],o=n.size[1]*i[2],e.resizeNearestNeighbor([a,o])})},e.prototype.getConfig=function(){var e={size:this.size,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="UpSampling2D",e}(le);r.td.registerClass(Pr);var Tr=function(t){function e(e){var n=t.call(this,2,e)||this;return n.depthwiseKernel=null,n.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,n.depthwiseInitializer=Gt(e.depthwiseInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.depthwiseConstraint=K(e.depthwiseConstraint),n.depthwiseRegularizer=pr(e.depthwiseRegularizer),n}return a(e,t),e.prototype.build=function(t){if((t=Qt(t)).length<4)throw new w("Inputs to DepthwiseConv2D should have rank 4. Received input shape: "+JSON.stringify(t)+".");var e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new w("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not ("+t[e]+").");var n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var e=function(t,e,n,i,a,o){return void 0===n&&(n=[1,1]),void 0===i&&(i="valid"),Object(r.ge)(function(){null==a&&(a="channelsLast"),J(a);var s=Er(t,a);if(4!==t.rank)throw new w("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new w("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return s=Object(r.ib)(s,e,n,"same"===i?"same":"valid","NHWC",o),"channelsFirst"===a&&(s=Object(r.me)(s,[0,3,1,2])),s})}(t=Zt(t),n.depthwiseKernel.read(),n.strides,n.padding,n.dataFormat,null);return n.useBias&&(e=It(e,n.bias.read(),n.dataFormat)),null!=n.activation&&(e=n.activation.apply(e)),e})},e.prototype.computeOutputShape=function(t){t=Qt(t);var e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,i=_r(e,this.kernelSize[0],this.padding,this.strides[0]),a=_r(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,i,a]:[t[0],i,a,r]},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Kt(this.depthwiseInitializer),e.depthwiseRegularizer=fr(this.depthwiseRegularizer),e.depthwiseConstraint=$(this.depthwiseRegularizer),e},e.className="DepthwiseConv2D",e}(Sr);r.td.registerClass(Tr);var Rr=function(t){function e(e){var n=t.call(this,e)||this;if(n.rate=Math.max(Math.min(e.rate,1),0),n.rateScalar=y(n.rate),n.noiseShape=e.noiseShape,n.seed=e.seed,null!=n.seed)throw new _("Non-default seed is not implemented in Dropout layer yet: "+n.seed);return n.supportsMasking=!0,n}return a(e,t),e.prototype.getNoiseShape=function(t){if(null==this.noiseShape)return this.noiseShape;for(var e=t.shape,n=[],r=0;r<this.noiseShape.length;++r)n.push(null==this.noiseShape[r]?e[r]:this.noiseShape[r]);return n},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){n.invokeCallHook(t,e);var i=Zt(t);if(null!=n.noiseShape&&!r.qe.arraysEqual(i.shape,n.noiseShape))throw new _("Non-default noise shape is not implemented in Dropout layer yet: "+JSON.stringify(n.noiseShape));if(0<n.rate&&n.rate<1){var a=null!=e.training&&e.training,o=n.getNoiseShape(i);return kt(function(){return Ot(i,n.rateScalar,o,n.seed)},function(){return i},a)}return t})},e.prototype.getConfig=function(){var e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Dropout",e}(le);r.td.registerClass(Rr);var Dr=function(t){function e(e){var n=t.call(this,e)||this;if(n.activation=null,n.useBias=!0,n.kernel=null,n.bias=null,n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){var r=null;null!=e.batchSize&&(r=e.batchSize),n.batchInputShape=[r,e.inputDim]}return n.units=e.units,n.activation=sr(e.activation),null!=e.useBias&&(n.useBias=e.useBias),n.kernelInitializer=Gt(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.biasInitializer=Gt(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelConstraint=K(e.kernelConstraint),n.biasConstraint=K(e.biasConstraint),n.kernelRegularizer=pr(e.kernelRegularizer),n.biasRegularizer=pr(e.biasRegularizer),n.activityRegularizer=pr(e.activityRegularizer),n.supportsMasking=!0,n.inputSpec=[{minNDim:2}],n}return a(e,t),e.prototype.build=function(t){var e,n=(t=Qt(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[n,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:(e={},e[-1]=n,e)}],this.built=!0},e.prototype.computeOutputShape=function(t){var e=(t=Qt(t)).slice();return e[e.length-1]=this.units,e},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){n.invokeCallHook(t,e);var r=Et(Zt(t),n.kernel.read());return null!=n.bias&&(r=It(r,n.bias.read())),null!=n.activation&&(r=n.activation.apply(r)),r})},e.prototype.getConfig=function(){var e={units:this.units,activation:ar(this.activation),useBias:this.useBias,kernelInitializer:Kt(this.kernelInitializer),biasInitializer:Kt(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:$(this.kernelConstraint),biasConstraint:$(this.biasConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Dense",e}(le);r.td.registerClass(Dr);var Mr=function(t){function e(e){var n=t.call(this,e||{})||this;return n.inputSpec=[{minNDim:3}],n}return a(e,t),e.prototype.computeOutputShape=function(t){for(var e=0,n=(t=Qt(t)).slice(1);e<n.length;e++)if(null==n[e])throw new w('The shape of the input to "Flatten" is not fully defined (got '+t.slice(1)+'). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.');return[t[0],ct(t,1)]},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){return n.invokeCallHook(t,e),function(t){if(t.rank<=1)throw new w("batchFlatten requires a minimum rank of 2. Got rank: "+t.rank+".");var e=[t.shape[0],ct(t.shape,1)];return t.reshape(e)}(Zt(t))})},e.className="Flatten",e}(le);r.td.registerClass(Mr);var jr=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n.activation=sr(e.activation),n}return a(e,t),e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){n.invokeCallHook(t,e);var r=Zt(t);return n.activation.apply(r)})},e.prototype.getConfig=function(){var e={activation:ar(this.activation)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Activation",e}(le);r.td.registerClass(jr);var Br=function(t){function e(e){var n=t.call(this,e)||this;return n.n=e.n,n.inputSpec=[{ndim:2}],n}return a(e,t),e.prototype.computeOutputShape=function(t){return[t[0],this.n,t[1]]},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){return function(t,e){return Object(r.ge)(function(){if(2!==t.shape.length)throw new w("repeat() expects a rank-2 tensor, but received a rank-"+t.shape.length+" tensor.");return _t(mt(t,1),[1,e,1])})}(t=Zt(t),n.n)})},e.prototype.getConfig=function(){var e={n:this.n},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="RepeatVector",e}(le);r.td.registerClass(Br);var Lr=function(t){function e(e){var n=t.call(this,e)||this;n.targetShape=e.targetShape;for(var r=0;r<n.targetShape.length;++r)n.isUnknown(n.targetShape[r])&&(n.targetShape[r]=null);return n}return a(e,t),e.prototype.isUnknown=function(t){return t<0||null==t},e.prototype.fixUnknownDimension=function(t,e){for(var n="Total size of new array must be unchanged.",r=e.slice(),i=1,a=null,o=0;o<r.length;++o){var s=r[o];if(this.isUnknown(s)){if(null!==a)throw new w("Can only specifiy one unknown dimension.");a=o}else i*=s}var u=ct(t);if(null!==a){if(0===i||u%i!=0)throw new w(n);r[a]=u/i}else if(u!==i)throw new w(n);return r},e.prototype.computeOutputShape=function(t){for(var e=!1,n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){n.invokeCallHook(t,e);var r=Zt(t),i=r.shape,a=i.slice(0,1).concat(n.fixUnknownDimension(i.slice(1),n.targetShape));return r.reshape(a)})},e.prototype.getConfig=function(){var e={targetShape:this.targetShape},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Reshape",e}(le);r.td.registerClass(Lr);var zr=function(t){function e(e){var n=t.call(this,e)||this;if(null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+e.dims+" instead.");var i=pt(1,e.dims.length+1);if(!r.qe.arraysEqual(e.dims.slice().sort(),i))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");return n.dims=e.dims,n.dimsIncludingBatch=[0].concat(n.dims),n.inputSpec=[new ae({ndim:n.dims.length+1})],n}return a(e,t),e.prototype.computeOutputShape=function(t){var e=(t=Qt(t)).slice();return this.dims.forEach(function(n,r){e[r+1]=t[n]}),e},e.prototype.call=function(t,e){return Object(r.me)(Zt(t),this.dimsIncludingBatch)},e.prototype.getConfig=function(){var e={dims:this.dims},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Permute",e}(le);r.td.registerClass(zr);var Fr=function(t){function e(e){var n=t.call(this,e)||this;if(n.embeddings=null,n.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){var r=null;null!=e.batchSize&&(r=e.batchSize),null==e.inputLength?n.batchInputShape=[r,null]:n.batchInputShape=[r].concat(O(e.inputLength))}return n.inputDim=e.inputDim,n.outputDim=e.outputDim,n.embeddingsInitializer=Gt(e.embeddingsInitializer||n.DEFAULT_EMBEDDINGS_INITIALIZER),n.embeddingsRegularizer=pr(e.embeddingsRegularizer),n.activityRegularizer=pr(e.activityRegularizer),n.embeddingsConstraint=K(e.embeddingsConstraint),n.maskZero=e.maskZero,n.supportsMasking=e.maskZero,n.inputLength=e.inputLength,n}return a(e,t),e.prototype.build=function(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0},e.prototype.warnOnIncompatibleInputShape=function(t){},e.prototype.computeMask=function(t,e){var n=this;return Object(r.ge)(function(){return n.maskZero?(t=Zt(t),Object(r.Gc)(t,Object(r.Ae)(t))):null})},e.prototype.computeOutputShape=function(t){if(t=Qt(t),null==this.inputLength)return t.concat([this.outputDim]);var e=O(this.inputLength);if(e.length!==t.length-1)throw new w('"inputLength" is '+this.inputLength+", but received input shape has shape "+t);for(var n=0,r=0;r<e.length;++r){var i=e[r],a=t[r+1];if(null!=i&&null!=a&&i!==a)throw new w('"inputLength" is '+this.inputLength+", but received input shape has shape "+t);null==i&&(e[n]=a),n++}return[t[0]].concat(e,[this.outputDim])},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){n.invokeCallHook(t,e);var r=Zt(t);return"int32"!==r.dtype&&(r=dt(r,"int32")),St(n.embeddings.read(),r.as1D()).reshape(Qt(n.computeOutputShape(r.shape)))})},e.prototype.getConfig=function(){var e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Kt(this.embeddingsInitializer),embeddingsRegularizer:fr(this.embeddingsRegularizer),activityRegularizer:fr(this.activityRegularizer),embeddingsConstraint:$(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Embedding",e}(le);r.td.registerClass(Fr);var Ur=function(t){function e(e){var n=t.call(this,e||{})||this;return n.supportsMasking=!0,n}return a(e,t),e.prototype.mergeFunction=function(t){throw new _},e.prototype.computeElementwiseOpOutputShape=function(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;for(var n=t.slice(0,t.length-e.length),r=0;r<e.length;++r){var i=t[t.length-e.length+r],a=e[r];if(null==i||null==a||i<0||a<0)n.push(null);else if(1===i)n.push(a);else if(1===a)n.push(i);else{if(i!==a)throw new w("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(i)}}return n},e.prototype.build=function(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Qt(t)]),(t=t).length<2)throw new w("A merge layer should be called on an Array of at least 2 inputs. Got "+t.length+" input(s).");for(var e=[],n=0,r=t;n<r.length;n++)null!=(o=r[n])&&null!==o[0]&&e.push(o[0]);if((e=D(e)).length>1)throw new w("Can not merge tensors with different batch sizes. Got tensors with shapes: "+JSON.stringify(t)+".");for(var i=null==t[0]?null:t[0].slice(1),a=1;a<t.length;++a){var o=null==t[a]?null:t[a].slice(1);i=this.computeElementwiseOpOutputShape(i,o)}var s=t.map(function(t){return t.length});-1===t.indexOf(null)&&1===D(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){if(t=t,n.reshapeRequired){var e=[],i=t.map(function(t){return t.rank});if(-1===i.indexOf(null)){for(var a=ht(i),o=0,s=t;o<s.length;o++){for(var u=(p=s[o]).rank,c=0;c<a-u;++c)p=mt(p,1);e.push(p)}return n.mergeFunction(e)}for(var l=!1,f=0,h=t;f<h.length;f++){var p;if(null==(u=(p=h[f]).rank)){var d=p.shape,m=d[0],g=d.slice(1).concat([m]),y=p.reshape([m].concat(ct(d.slice(1))));y=(y=Object(r.me)(y,[1,0])).reshape(g),e.push(y),l=!0}else if(u>1){var v=pt(1,u).concat([0]);e.push(Object(r.me)(p,v)),l=!0}else e.push(p)}var b=n.mergeFunction(e),w=b.rank;if(l)if(null==w){var _=b.shape;g=[m=_[_.length-1]].concat(_.slice(0,_.length-1)),b=Object(r.me)(b.reshape([-1,m]),[1,0]).reshape(g)}else w>1&&(v=[w-1].concat(pt(0,w-1)),b=Object(r.me)(b,v));return b}return n.mergeFunction(t)})},e.prototype.computeOutputShape=function(t){var e;e=null==(t=t)[0]?null:t[0].slice(1);for(var n=1;n<t.length;++n){var r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}for(var i=[],a=0,o=t;a<o.length;a++)null!=(r=o[a])&&null!==r[0]&&i.push(r[0]);return 1===(i=D(i)).length?i.concat(e):[null].concat(e)},e.prototype.computeMask=function(t,e){return Object(r.ge)(function(){if(null==e)return null;if(!Array.isArray(e))throw new w("`mask` should be an Array");if(!Array.isArray(t))throw new w("`inputs` should be an Array");if(e.length!==t.length)throw new w("The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths ("+t.length+" vs "+e.length+")");if(e.every(function(t){return null==t}))return null;for(var n=(e=e.map(function(t){return null==t?t:Object(r.vb)(t,0)}))[0],i=1;i<e.length-1;++i)n=Object(r.fc)(n,e[i]);return n})},e}(le),Vr=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.ge)(function(){for(var e=t[0].clone(),n=1;n<t.length;++n)e=Object(r.u)(e,t[n]);return e})},e.className="Add",e}(Ur);r.td.registerClass(Vr);var Wr=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.ge)(function(){for(var e=t[0].clone(),n=1;n<t.length;++n)e=Object(r.zc)(e,t[n]);return e})},e.className="Multiply",e}(Ur);r.td.registerClass(Wr);var qr=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.ge)(function(){for(var e=t[0].clone(),n=1;n<t.length;++n)e=Object(r.u)(e,t[n]);return Object(r.zc)(y(1/t.length),e)})},e.className="Average",e}(Ur);r.td.registerClass(qr);var $r=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.ge)(function(){for(var e=t[0],n=1;n<t.length;++n)e=Object(r.oc)(e,t[n]);return e})},e.className="Maximum",e}(Ur);r.td.registerClass($r);var Hr=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.ge)(function(){for(var e=t[0],n=1;n<t.length;++n)e=Object(r.tc)(e,t[n]);return e})},e.className="Minimum",e}(Ur);r.td.registerClass(Hr);var Kr=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_AXIS=-1,null==e&&(e={}),n.axis=null==e.axis?n.DEFAULT_AXIS:e.axis,n.supportsMasking=!0,n.reshapeRequired=!1,n}return a(e,t),e.prototype.build=function(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new w("A `Concatenate` layer should be called on a list of at least 2 inputs");for(var e=!0,n=0,i=t=t;n<i.length;n++)if(null!=(f=i[n])){e=!1;break}if(!e){for(var a=[],o=0;o<t.length;++o){var s=t[o].slice();s.splice(this.axis,1);for(var u=!1,c=0,l=a;c<l.length;c++){var f=l[c];if(r.qe.arraysEqual(f,s)){u=!0;break}}u||a.push(s)}if(a.length>1)throw new w("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}},e.prototype.mergeFunction=function(t){var e=this;return Object(r.ge)(function(){return bt(t,e.axis)})},e.prototype.computeOutputShape=function(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new w("A `Concatenate` layer should be called on a list of inputs.");for(var e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis,i=0,a=e.slice(1);i<a.length;i++){var o=a[i];if(null==n[r]||null==o[r]){n[r]=null;break}n[r]+=o[r]}return n},e.prototype.computeMask=function(t,e){var n=this;if(null==e)return null;if(!Array.isArray(e))throw new w("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new w("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new w("Mismatch in the length of mask ("+e.length+") and the legnth of inputs ("+t.length+")");return Object(r.ge)(function(){var i=!0;if(e.forEach(function(t){null==t||(i=!1)}),i)return null;for(var a=[],o=0;o<t.length;++o)null==e[o]?a.push(Object(r.Kc)(t[o]).asType("bool")):e[o].rank<t[o].rank?a.push(Object(r.vb)(e[o],-1)):a.push(e[o]);var s=Object(r.T)(a,n.axis);return Object(r.x)(s,-1,!1)})},e.prototype.getConfig=function(){var e={axis:this.axis},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Concatenate",e}(Ur);function Gr(t,e){for(;t<0;)t+=e;return t}r.td.registerClass(Kr);var Xr=function(t){function e(e){var n=t.call(this,e)||this;return n.axes=e.axes,n.normalize=null!=e.normalize&&e.normalize,n.supportsMasking=!0,n.reshapeRequired=!1,n}return a(e,t),e.prototype.build=function(t){r.qe.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),"A `Dot` layer should be called on a list of exactly 2 inputs.");var e=t[0],n=t[1];if(e.length>3||n.length>3)throw new _("Dot layer does not support tensors of 4D or higher rank yet.");var i=this.interpretAxes(e,n);if(e[i[0]]!==n[i[1]])throw new w("Dimension incompatibility: "+e[i[0]]+" !== "+n[i[1]])},e.prototype.mergeFunction=function(t){if(2!==t.length)throw new w("A `Dot` layer must be called on exactly 2 inputs, but received "+t.length+" input(s).");var e,n=t[0],i=t[1];return e=Array.isArray(this.axes)?this.axes.map(function(e,n){return Gr(e,t[n].shape.length)}):[Gr(this.axes,n.shape.length),Gr(this.axes,i.shape.length)],this.normalize&&(n=Ie(n,e[0]),i=Ie(i,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new _("batchDot is not implemented for tensors of 4D or higher rank yet");if(r.qe.assert(t.shape.length>=2,"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),r.qe.assert(t.shape.length>=2,"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new _("batchDot is not implemented for complex64-type Tensors yet.");var i=t.shape.length,a=e.shape.length;null==n&&(n=[i-1,a-2]);var o=n;return Object(r.ge)(function(){var n,r;if(i>a){n=i-a;for(var s=[],u=0;u<n;++u)s.push(1);e=e.reshape(e.shape.concat(s))}else if(a>i){for(n=a-i,s=[],u=0;u<n;++u)s.push(1);t=t.reshape(t.shape.concat(s))}else n=0;if(2===t.shape.length&&2===e.shape.length)r=o[0]===o[1]?t.mulStrict(e).sum(o[0]):t.transpose([1,0]).mulStrict(e).sum(o[1]);else{var c=o[0]!==t.shape.length-1||null,l=o[1]===e.shape.length-1||null;r=t.matMul(e,c,l)}if(n>0){var f,h=[];for(u=f=i>a?i+a-3:i-1;u<f+n;++u)h.push(u);r=r.squeeze(h)}return 1===r.shape.length&&(r=r.expandDims(1)),r})}(n,i,e)},e.prototype.interpretAxes=function(t,e){return Array.isArray(this.axes)?this.axes:[Gr(this.axes,t.length),Gr(this.axes,e.length)]},e.prototype.computeOutputShape=function(t){r.qe.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),"A `Dot` layer should be called on a list of exactly 2 inputs.");var e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new _("Dot layer does not support tensors of 4D or higher rank yet.");var i=this.interpretAxes(e,n);e.splice(i[0],1),n.splice(i[1],1),n.splice(0,1);var a=e.concat(n);return 1===a.length&&a.push(1),a},e.prototype.computeMask=function(t,e){return null},e.prototype.getConfig=function(){var e={axes:this.axes,normalize:this.normalize},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Dot",e}(Ur);function Yr(t,e,n,i,a,o){var s;if(void 0===o&&(o=.001),2===t.rank)s=Object(r.J)(t,e,n,o,a,i);else if(3===t.rank)s=Object(r.K)(t,e,n,o,a,i);else{if(4!==t.rank)throw new _("batchNormalization is not implemented for array of rank "+t.rank+" yet");s=Object(r.L)(t,e,n,o,a,i)}return s}function Jr(t,e,n,i,a){return void 0===a&&(a=.001),r.qe.arraysEqual(i.slice().sort(),pt(0,t.rank-1))?function(t,e,n,i,a){return void 0===a&&(a=.001),Object(r.ge)(function(){var o=Object(r.xc)(t,i),s=o.mean,u=o.variance;return[Yr(t,s,u,n,e,a),s,u]})}(t,e,n,i,a):function(t,e,n,i,a){return void 0===a&&(a=.001),Object(r.ge)(function(){for(var o=Object(r.xc)(t,i),s=o.mean,u=o.variance,c=[],l=0,f=pt(0,t.rank);l<f.length;l++){var h=f[l];-1!==i.indexOf(h)?c.push(1):c.push(t.shape[h])}var p=s.reshape(c),d=u.reshape(c),m=null==e?null:e.reshape(c),g=null==n?null:n.reshape(c);return[Yr(t,p,d,g,m,a),s,u]})}(t,e,n,i,a)}r.td.registerClass(Xr);var Zr=function(t){function e(e){var n=this;return null==e&&(e={}),(n=t.call(this,e)||this).supportsMasking=!0,n.axis=null==e.axis?-1:e.axis,n.momentum=null==e.momentum?.99:e.momentum,n.epsilon=null==e.epsilon?.001:e.epsilon,n.center=null==e.center||e.center,n.scale=null==e.scale||e.scale,n.betaInitializer=Gt(e.betaInitializer||"zeros"),n.gammaInitializer=Gt(e.gammaInitializer||"ones"),n.movingMeanInitializer=Gt(e.movingMeanInitializer||"zeros"),n.movingVarianceInitializer=Gt(e.movingVarianceInitializer||"ones"),n.betaConstraint=K(e.betaConstraint),n.gammaConstraint=K(e.gammaConstraint),n.betaRegularizer=pr(e.betaRegularizer),n.gammaRegularizer=pr(e.gammaRegularizer),n}return a(e,t),e.prototype.build=function(t){t=Qt(t);var e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new w("Axis "+e+" of input tensor should have a defined dimension but the layer received an input with shape "+JSON.stringify(t)+".");this.inputSpec=[new ae({ndim:t.length,axes:(r={},r[e]=n,r)})];var r,i=[n];this.scale&&(this.gamma=this.addWeight("gamma",i,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",i,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",i,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",i,null,this.movingVarianceInitializer,null,!1),this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var i=null!=e.training&&e.training,a=Zt(t),o=a.shape,s=o.length,u=pt(0,s),c=n.axis>=0?n.axis:n.axis+s;u.splice(c,1);var l=E(1,s);l[c]=o[c];var f=u.slice();f.sort();var h=!r.qe.arraysEqual(f,pt(0,s).slice(0,s-1));if(!i)return function(){if(h){var t=n.movingMean.read().reshape(l),e=n.movingVariance.read().reshape(l),r=n.center?n.beta.read().reshape(l):null,i=n.scale?n.gamma.read().reshape(l):null;return Yr(a,t,e,r,i,n.epsilon)}return Yr(a,n.movingMean.read(),n.movingVariance.read(),null==n.beta?null:n.beta.read(),null==n.gamma?null:n.gamma.read(),n.epsilon)}();var p=Jr(a,n.gamma.read(),n.beta.read(),u,n.epsilon),d=p[0],m=p[1],g=p[2],v=function(t,e,n){Object(r.ge)(function(){var r=y(1).sub(y(n)),i=t.read(),a=i.sub(e).mul(r);t.write(i.sub(a))})};return v(n.movingMean,m,n.momentum),v(n.movingVariance,g,n.momentum),d})},e.prototype.getConfig=function(){var e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Kt(this.betaInitializer),gammaInitializer:Kt(this.gammaInitializer),movingMeanInitializer:Kt(this.movingMeanInitializer),movingVarianceInitializer:Kt(this.movingVarianceInitializer),betaRegularizer:fr(this.betaRegularizer),gammaRegularizer:fr(this.gammaRegularizer),betaConstraint:$(this.betaConstraint),gammaConstraint:$(this.gammaConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="BatchNormalization",e}(le);r.td.registerClass(Zr);var Qr=function(t){function e(e){var n=this;if(null==e&&(e={}),(n=t.call(this,e)||this).dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)n.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)n.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new w("ZeroPadding2D expects padding to be a length-2 array, but received a length-"+e.padding.length+" array.");var r=void 0,i=void 0;if("number"==typeof e.padding[0])r=[e.padding[0],e.padding[0]],i=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new w("ZeroPadding2D expects height padding to be a length-2 array, but received a length-"+e.padding[0].length+" array.");if(r=e.padding[0],2!==e.padding[1].length)throw new w("ZeroPadding2D expects width padding to be a length-2 array, but received a length-"+e.padding[1].length+" array.");i=e.padding[1]}n.padding=[r,i]}return n.inputSpec=[new ae({ndim:4})],n}return a(e,t),e.prototype.computeOutputShape=function(t){var e,n;return t=Qt(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){return function(t,e,n){return Object(r.ge)(function(){if(4!==t.rank)throw new w("temporalPadding expects input tensor to be 4-D, but received a "+t.rank+"-D tensor.");if(null==e&&(e=[[1,1],[1,1]]),2!==e.length||2!==e[0].length||2!==e[1].length)throw new w("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==n&&(n="channelsLast"),"channelsLast"!==n&&"channelsFirst"!==n)throw new w("Unknown data format: "+n+". Supported data formats are 'channelsLast' and 'channelsFirst.");var i;return i="channelsFirst"===n?[[0,0],[0,0],e[0],e[1]]:[[0,0],e[0],e[1],[0,0]],Object(r.Nc)(t,i)})}(Zt(t),n.padding,n.dataFormat)})},e.prototype.getConfig=function(){var e={padding:this.padding,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ZeroPadding2D",e}(le);function ti(t,e,n,i,a,o){return Object(r.ge)(function(){var s;J(a),function(t){j(tt,"PoolMode",t)}(o),Q(i),null==n&&(n=[1,1]),null==i&&(i="valid"),null==a&&(a="channelsLast"),null==o&&(o="max"),t=Er(t,a);var u="same"===i?"same":"valid";return s="max"===o?Object(r.nc)(t,e,n,u):Object(r.G)(t,e,n,u),"channelsFirst"===a&&(s=Object(r.me)(s,[0,3,1,2])),s})}r.td.registerClass(Qr);var ei=function(t){function e(e){var n=this;if(null==e.poolSize&&(e.poolSize=2),n=t.call(this,e)||this,"number"==typeof e.poolSize)n.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new w("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.poolSize));n.poolSize=e.poolSize}if(null==e.strides)n.strides=n.poolSize;else if("number"==typeof e.strides)n.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new w("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.strides));n.strides=e.strides}return n.padding=null==e.padding?"valid":e.padding,Q(n.padding),n.inputSpec=[new ae({ndim:3})],n}return a(e,t),e.prototype.computeOutputShape=function(t){var e=_r((t=Qt(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){n.invokeCallHook(t,e),t=mt(Zt(t),2);var i=n.poolingFunction(Zt(t),[n.poolSize[0],1],[n.strides[0],1],n.padding,"channelsLast");return Object(r.Pd)(i,[2])})},e.prototype.getConfig=function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(le),ni=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return J(i),Q(r),ti(t,e,n,r,i,"max")},e.className="MaxPooling1D",e}(ei);r.td.registerClass(ni);var ri=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return J(i),Q(r),ti(t,e,n,r,i,"avg")},e.className="AveragePooling1D",e}(ei);r.td.registerClass(ri);var ii=function(t){function e(e){var n=this;if(null==e.poolSize&&(e.poolSize=[2,2]),(n=t.call(this,e)||this).poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)n.strides=n.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new w("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+e.strides.length+".");n.strides=e.strides}else n.strides=[e.strides,e.strides];return n.padding=null==e.padding?"valid":e.padding,n.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,J(n.dataFormat),Q(n.padding),n.inputSpec=[new ae({ndim:4})],n}return a(e,t),e.prototype.computeOutputShape=function(t){t=Qt(t);var e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=_r(e,this.poolSize[0],this.padding,this.strides[0]),n=_r(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){return n.invokeCallHook(t,e),n.poolingFunction(Zt(t),n.poolSize,n.strides,n.padding,n.dataFormat)})},e.prototype.getConfig=function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(le),ai=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return J(i),Q(r),ti(t,e,n,r,i,"max")},e.className="MaxPooling2D",e}(ii);r.td.registerClass(ai);var oi=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return J(i),Q(r),ti(t,e,n,r,i,"avg")},e.className="AveragePooling2D",e}(ii);r.td.registerClass(oi);var si=function(t){function e(e){var n=t.call(this,e)||this;return n.inputSpec=[new ae({ndim:3})],n}return a(e,t),e.prototype.computeOutputShape=function(t){return[t[0],t[2]]},e.prototype.call=function(t,e){throw new _},e}(le),ui=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.call=function(t,e){return Object(r.ge)(function(){var e=Zt(t);return Object(r.qc)(e,1)})},e.className="GlobalAveragePooling1D",e}(si);r.td.registerClass(ui);var ci=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.call=function(t,e){return Object(r.ge)(function(){var e=Zt(t);return Object(r.mc)(e,1)})},e.className="GlobalMaxPooling1D",e}(si);r.td.registerClass(ci);var li=function(t){function e(e){var n=t.call(this,e)||this;return n.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,J(n.dataFormat),n.inputSpec=[new ae({ndim:4})],n}return a(e,t),e.prototype.computeOutputShape=function(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]},e.prototype.call=function(t,e){throw new _},e.prototype.getConfig=function(){var e={dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(le),fi=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var e=Zt(t);return"channelsLast"===n.dataFormat?Object(r.qc)(e,[1,2]):Object(r.qc)(e,[2,3])})},e.className="GlobalAveragePooling2D",e}(li);r.td.registerClass(fi);var hi=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var e=Zt(t);return"channelsLast"===n.dataFormat?Object(r.mc)(e,[1,2]):Object(r.mc)(e,[2,3])})},e.className="GlobalMaxPooling2D",e}(li);function pi(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new w("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function i(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=i(e),constants:n=i(n)}}function di(t,e,n,i,a,o,s,u){return void 0===i&&(i=!1),void 0===s&&(s=!1),void 0===u&&(u=!1),Object(r.ge)(function(){var c=e.shape.length;if(c<3)throw new w("Input should be at least 3D, but is "+c+"D.");var l=[1,0].concat(pt(2,c));if(e=Object(r.me)(e,l),null!=o)throw new _("The rnn() functoin of the deeplearn.js backend does not support constants yet.");s&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=a.asType("bool").asType("float32")).rank===c-1&&(a=Object(r.vb)(a,-1)),a=Object(r.me)(a,l)),i&&(e=Object(r.hd)(e,0),null!=a&&(a=Object(r.hd)(a,0)));var f,h,p=[],d=n,m=e.shape[0],g=Object(r.pe)(e);null!=a&&(h=Object(r.pe)(a));for(var y,v=function(e){var n=g[e],i=Object(r.ge)(function(){return t(n,d)});if(null==a)f=i[0],d=i[1];else{var o=Object(r.ge)(function(){var t=h[e],n=Object(r.Kc)(t).sub(t);return{output:i[0].mul(t).addStrict(d[0].mul(n)),newStates:d.map(function(e,r){return i[1][r].mul(t).addStrict(e.mul(n))})}});f=o.output,d=o.newStates}u&&p.push(f)},b=0;b<m;++b)v(b);return u&&(y=Object(r.Qd)(p,1)),[f,y,d]})}r.td.registerClass(hi);var mi=function(t){function e(e){var n,r=t.call(this,e)||this;if(null==e.cell)throw new w("cell property is missing for the constructor of RNN.");if(null==(n=Array.isArray(e.cell)?new Ei({cells:e.cell}):e.cell).stateSize)throw new w("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");return r.cell=n,r.returnSequences=null!=e.returnSequences&&e.returnSequences,r.returnState=null!=e.returnState&&e.returnState,r.goBackwards=null!=e.goBackwards&&e.goBackwards,r._stateful=null!=e.stateful&&e.stateful,r.unroll=null!=e.unroll&&e.unroll,r.supportsMasking=!0,r.inputSpec=[new ae({ndim:3})],r.stateSpec=null,r.states_=null,r.numConstants=null,r.keptStates=[],r}return a(e,t),e.prototype.getStates=function(){return null==this.states_?pt(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(function(t){return null}):this.states_},e.prototype.setStates=function(t){this.states_=t},e.prototype.computeOutputShape=function(t){Yt(t)&&(t=t[0]),t=t;var e=this.cell.stateSize;Array.isArray(e)||(e=[e]);var n,r=e[0];if(n=this.returnSequences?[t[0],t[1],r]:[t[0],r],this.returnState){for(var i=[],a=0,o=e;a<o.length;a++){var s=o[a];i.push([t[0],s])}return[n].concat(i)}return n},e.prototype.computeMask=function(t,e){var n=this;return Object(r.ge)(function(){Array.isArray(e)&&(e=e[0]);var t=n.returnSequences?e:null;if(n.returnState){var r=n.states.map(function(t){return null});return[t].concat(r)}return t})},Object.defineProperty(e.prototype,"states",{get:function(){if(null==this.states_){for(var t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[],n=0;n<t;++n)e.push(null);return e}return this.states_},set:function(t){this.states_=t},enumerable:!0,configurable:!0}),e.prototype.build=function(t){if(null!=this.numConstants)throw new _("Constants support is not implemented in RNN yet.");Yt(t)&&(t=t[0]),t=t;var e=this.stateful?t[0]:null,n=t[t.length-1];this.inputSpec[0]=new ae({shape:[e,null,n]});var i,a=[t[0]].concat(t.slice(2));if(this.cell.build(a),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!r.qe.arraysEqual(this.stateSpec.map(function(t){return t.shape[t.shape.length-1]}),i))throw new w("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec="+this.stateSpec+"; However cell.stateSize is "+this.cell.stateSize)}else this.stateSpec=i.map(function(t){return new ae({shape:[null,t]})});this.stateful&&this.resetStates()},e.prototype.resetStates=function(t,e){var n=this;void 0===e&&(e=!1),Object(r.ge)(function(){if(!n.stateful)throw new v("Cannot call resetStates() on an RNN Layer that is not stateful.");var i=n.inputSpec[0].shape[0];if(null==i)throw new w("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==n.states_)Array.isArray(n.cell.stateSize)?n.states_=n.cell.stateSize.map(function(t){return Object(r.ze)([i,t])}):n.states_=[Object(r.ze)([i,n.cell.stateSize])];else if(null==t)Object(r.jb)(n.states_),null!=n.keptStates&&(Object(r.jb)(n.keptStates),n.keptStates=[]),Array.isArray(n.cell.stateSize)?n.states_=n.cell.stateSize.map(function(t){return Object(r.ze)([i,t])}):n.states_[0]=Object(r.ze)([i,n.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==n.states_.length)throw new w("Layer "+n.name+" expects "+n.states_.length+" state(s), but it received "+t.length+" state value(s). Input received: "+t);!0===e?n.keptStates.push(n.states_.slice()):Object(r.jb)(n.states_);for(var a=0;a<n.states_.length;++a){var o=t[a],s=Array.isArray(n.cell.stateSize)?n.cell.stateSize[a]:n.cell.stateSize,u=[i,s];if(!r.qe.arraysEqual(o.shape,u))throw new w("State "+a+" is incompatible with layer "+n.name+": expected shape="+u+", received shape="+o.shape);n.states_[a]=o}}n.states_.forEach(function(t){return Object(r.Rb)(t)})})},e.prototype.apply=function(e,n){var r=null==n?null:n.initialState,i=null==n?null:n.constants;null==n&&(n={});var a=pi(e,r,i,this.numConstants);e=a.inputs,r=a.initialState,i=a.constants;var o=[],s=[];if(null!=r){n.initialState=r,o=o.concat(r),this.stateSpec=[];for(var u=0,c=r;u<c.length;u++){var l=c[u];this.stateSpec.push(new ae({shape:l.shape}))}s=s.concat(this.stateSpec)}if(null!=i&&(n.constants=i,o=o.concat(i),this.numConstants=i.length),o[0]instanceof oe){var f=[e].concat(o),h=this.inputSpec.concat(s),p=this.inputSpec;this.inputSpec=h;var d=t.prototype.apply.call(this,f,n);return this.inputSpec=p,d}return t.prototype.apply.call(this,e,n)},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var r=null==e?null:e.mask,i=null==e?null:e.training,a=null==e?null:e.initialState;t=Zt(t),null==a&&(a=n.stateful?n.states_:n.getInitialState(t));var o=Array.isArray(n.cell.stateSize)?n.cell.stateSize.length:1;if(a.length!==o)throw new w("RNN Layer has "+o+" state(s) but was passed "+a.length+" initial state(s).");n.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");var s={training:i},u=di(function(t,e){var r=n.cell.call([t].concat(e),s);return[r[0],r.slice(1)]},t,a,n.goBackwards,r,null,n.unroll,n.returnSequences),c=u[0],l=u[1],f=u[2];n.stateful&&n.resetStates(f,i);var h=n.returnSequences?l:c;return n.returnState?[h].concat(f):h})},e.prototype.getInitialState=function(t){var e=this;return Object(r.ge)(function(){var n=Object(r.ze)(t.shape);return n=mt(n=Object(r.Vd)(n,[1,2])),Array.isArray(e.cell.stateSize)?e.cell.stateSize.map(function(t){return t>1?_t(n,[1,t]):n}):e.cell.stateSize>1?[_t(n,[1,e.cell.stateSize])]:[n]})},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.trainable?this.cell.trainableWeights:[]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights},enumerable:!0,configurable:!0}),e.prototype.setFastWeightInitDuringBuild=function(e){t.prototype.setFastWeightInitDuringBuild.call(this,e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)},e.prototype.getConfig=function(){var e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);var n=this.cell.getConfig();e.cell={className:this.cell.getClassName(),config:n};var r=t.prototype.getConfig.call(this);return Object.assign(e,r),e},e.className="RNN",e}(le);r.td.registerClass(mi);var gi=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e}(le),yi=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=e.units,n.activation=sr(null==e.activation?n.DEFAULT_ACTIVATION:e.activation),n.useBias=null==e.useBias||e.useBias,n.kernelInitializer=Gt(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=Gt(e.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=Gt(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelRegularizer=pr(e.kernelRegularizer),n.recurrentRegularizer=pr(e.recurrentRegularizer),n.biasRegularizer=pr(e.biasRegularizer),n.kernelConstraint=K(e.kernelConstraint),n.recurrentConstraint=K(e.recurrentConstraint),n.biasConstraint=K(e.biasConstraint),n.dropout=ft([1,ht([0,null==e.dropout?0:e.dropout])]),n.recurrentDropout=ft([1,ht([0,null==e.recurrentDropout?0:e.recurrentDropout])]),n.stateSize=n.units,n.dropoutMask=null,n.recurrentDropoutMask=null,n}return a(e,t),e.prototype.build=function(t){t=Qt(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){if(2!==(t=t).length)throw new w("SimpleRNNCell expects 2 input Tensors, got "+t.length+".");var i=t[1];t=t[0];var a,o=null!=e.training&&e.training;0<n.dropout&&n.dropout<1&&null==n.dropoutMask&&(n.dropoutMask=Si(function(){return Object(r.Kc)(t)},n.dropout,o)),0<n.recurrentDropout&&n.recurrentDropout<1&&null==n.recurrentDropoutMask&&(n.recurrentDropoutMask=Si(function(){return Object(r.Kc)(i)},n.recurrentDropout,o));var s=n.dropoutMask,u=n.recurrentDropoutMask;a=Et(null!=s?Object(r.zc)(t,s):t,n.kernel.read()),null!=n.bias&&(a=It(a,n.bias.read())),null!=u&&(i=Object(r.zc)(i,u));var c=Object(r.u)(a,Et(i,n.recurrentKernel.read()));return null!=n.activation&&(c=n.activation.apply(c)),[c,c]})},e.prototype.getConfig=function(){var e={units:this.units,activation:ar(this.activation),useBias:this.useBias,kernelInitializer:Kt(this.kernelInitializer),recurrentInitializer:Kt(this.recurrentInitializer),biasInitializer:Kt(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:$(this.kernelConstraint),recurrentConstraint:$(this.recurrentConstraint),biasConstraint:$(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="SimpleRNNCell",e}(gi);r.td.registerClass(yi);var vi=function(t){function e(e){return e.cell=new yi(e),t.call(this,e)||this}return a(e,t),e.prototype.call=function(e,n){var i=this;return Object(r.ge)(function(){null!=i.cell.dropoutMask&&(Object(r.jb)(i.cell.dropoutMask),i.cell.dropoutMask=null),null!=i.cell.recurrentDropoutMask&&(Object(r.jb)(i.cell.recurrentDropoutMask),i.cell.recurrentDropoutMask=null);var a=null==n?null:n.mask,o=null==n?null:n.training,s=null==n?null:n.initialState;return t.prototype.call.call(i,e,{mask:a,training:o,initialState:s})})},Object.defineProperty(e.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={units:this.units,activation:ar(this.activation),useBias:this.useBias,kernelInitializer:Kt(this.kernelInitializer),recurrentInitializer:Kt(this.recurrentInitializer),biasInitializer:Kt(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:$(this.kernelConstraint),recurrentConstraint:$(this.recurrentConstraint),biasConstraint:$(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},n=t.prototype.getConfig.call(this);return delete n.cell,Object.assign(e,n),e},e.className="SimpleRNN",e}(mi);r.td.registerClass(vi);var bi=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=e.units,n.activation=sr(void 0===e.activation?n.DEFAULT_ACTIVATION:e.activation),n.recurrentActivation=sr(void 0===e.recurrentActivation?n.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),n.useBias=null==e.useBias||e.useBias,n.kernelInitializer=Gt(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=Gt(e.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=Gt(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelRegularizer=pr(e.kernelRegularizer),n.recurrentRegularizer=pr(e.recurrentRegularizer),n.biasRegularizer=pr(e.biasRegularizer),n.kernelConstraint=K(e.kernelConstraint),n.recurrentConstraint=K(e.recurrentConstraint),n.biasConstraint=K(e.biasConstraint),n.dropout=ft([1,ht([0,null==e.dropout?0:e.dropout])]),n.recurrentDropout=ft([1,ht([0,null==e.recurrentDropout?0:e.recurrentDropout])]),n.implementation=e.implementation,n.stateSize=n.units,n.dropoutMask=null,n.recurrentDropoutMask=null,n}return a(e,t),e.prototype.build=function(t){var e=(t=Qt(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){if(2!==(t=t).length)throw new w("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");var i=null!=e.training&&e.training,a=t[1];t=t[0],0<n.dropout&&n.dropout<1&&null==n.dropoutMask&&(n.dropoutMask=Si(function(){return Object(r.Kc)(t)},n.dropout,i,3)),0<n.recurrentDropout&&n.recurrentDropout<1&&null==n.recurrentDropoutMask&&(n.recurrentDropoutMask=Si(function(){return Object(r.Kc)(a)},n.recurrentDropout,i,3));var o,s,u,c=n.dropoutMask,l=n.recurrentDropoutMask;0<n.dropout&&n.dropout<1&&(t=Object(r.zc)(t,c[0]));var f=Et(t,n.kernel.read());n.useBias&&(f=It(f,n.bias.read())),0<n.recurrentDropout&&n.recurrentDropout<1&&(a=Object(r.zc)(a,l[0]));var h=n.recurrentKernel.read(),p=Object(r.Kd)(h,[2*n.units,n.units],h.rank-1),d=p[0],m=p[1],g=Et(a,d),v=Object(r.Kd)(f,3,f.rank-1),b=v[0],_=v[1],x=v[2],E=Object(r.Kd)(g,2,g.rank-1),S=E[0],N=E[1];o=n.recurrentActivation.apply(Object(r.u)(b,S)),s=n.recurrentActivation.apply(Object(r.u)(_,N));var I=Et(Object(r.zc)(s,a),m);u=n.activation.apply(Object(r.u)(x,I));var O=Object(r.u)(Object(r.zc)(o,a),Object(r.zc)(Object(r.u)(y(1),Object(r.Dc)(o)),u));return[O,O]})},e.prototype.getConfig=function(){var e={units:this.units,activation:ar(this.activation),recurrentActivation:ar(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Kt(this.kernelInitializer),recurrentInitializer:Kt(this.recurrentInitializer),biasInitializer:Kt(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:$(this.kernelConstraint),recurrentConstraint:$(this.recurrentConstraint),biasConstraint:$(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="GRUCell",e}(gi);r.td.registerClass(bi);var wi=function(t){function e(e){return 0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new bi(e),t.call(this,e)||this}return a(e,t),e.prototype.call=function(e,n){var i=this;return Object(r.ge)(function(){null!=i.cell.dropoutMask&&(Object(r.jb)(i.cell.dropoutMask),i.cell.dropoutMask=null),null!=i.cell.recurrentDropoutMask&&(Object(r.jb)(i.cell.recurrentDropoutMask),i.cell.recurrentDropoutMask=null);var a=null==n?null:n.mask,o=null==n?null:n.training,s=null==n?null:n.initialState;return t.prototype.call.call(i,e,{mask:a,training:o,initialState:s})})},Object.defineProperty(e.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentActivation",{get:function(){return this.cell.recurrentActivation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"implementation",{get:function(){return this.cell.implementation},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={units:this.units,activation:ar(this.activation),recurrentActivation:ar(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Kt(this.kernelInitializer),recurrentInitializer:Kt(this.recurrentInitializer),biasInitializer:Kt(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:$(this.kernelConstraint),recurrentConstraint:$(this.recurrentConstraint),biasConstraint:$(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return delete n.cell,Object.assign(e,n),e},e.fromConfig=function(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)},e.className="GRU",e}(mi);r.td.registerClass(wi);var _i=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=e.units,n.activation=sr(void 0===e.activation?n.DEFAULT_ACTIVATION:e.activation),n.recurrentActivation=sr(void 0===e.recurrentActivation?n.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),n.useBias=null==e.useBias||e.useBias,n.kernelInitializer=Gt(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=Gt(e.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=Gt(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.unitForgetBias=e.unitForgetBias,n.kernelRegularizer=pr(e.kernelRegularizer),n.recurrentRegularizer=pr(e.recurrentRegularizer),n.biasRegularizer=pr(e.biasRegularizer),n.kernelConstraint=K(e.kernelConstraint),n.recurrentConstraint=K(e.recurrentConstraint),n.biasConstraint=K(e.biasConstraint),n.dropout=ft([1,ht([0,null==e.dropout?0:e.dropout])]),n.recurrentDropout=ft([1,ht([0,null==e.recurrentDropout?0:e.recurrentDropout])]),n.implementation=e.implementation,n.stateSize=[n.units,n.units],n.dropoutMask=null,n.recurrentDropoutMask=null,n}return a(e,t),e.prototype.build=function(t){var e,n,r=(t=Qt(t))[t.length-1];if(this.kernel=this.addWeight("kernel",[r,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){var i=this.biasInitializer,o=this.units;e=new((n=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){var n=i.apply([o]),r=(new Rt).apply([o]),a=i.apply([2*o]);return wt(wt(n,r),a)},e}(Pt)).className="CustomInit",n)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,e,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){var i=null!=e.training&&e.training;if(3!==(t=t).length)throw new w("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");var a=t[1],o=t[2];t=t[0],0<n.dropout&&n.dropout<1&&null==n.dropoutMask&&(n.dropoutMask=Si(function(){return Object(r.Kc)(t)},n.dropout,i,4)),0<n.recurrentDropout&&n.recurrentDropout<1&&null==n.recurrentDropoutMask&&(n.recurrentDropoutMask=Si(function(){return Object(r.Kc)(a)},n.recurrentDropout,i,4));var s,u,c,l,f=n.dropoutMask,h=n.recurrentDropoutMask;0<n.dropout&&n.dropout<1&&(t=Object(r.zc)(t,f[0]));var p=Et(t,n.kernel.read());0<n.recurrentDropout&&n.recurrentDropout<1&&(a=Object(r.zc)(a,h[0])),p=Object(r.u)(p,Et(a,n.recurrentKernel.read())),n.useBias&&(p=It(p,n.bias.read()));var d=Object(r.Kd)(p,4,p.rank-1),m=d[0],g=d[1],y=d[2],v=d[3];s=n.recurrentActivation.apply(m),u=n.recurrentActivation.apply(g),c=Object(r.u)(Object(r.zc)(u,o),Object(r.zc)(s,n.activation.apply(y))),l=n.recurrentActivation.apply(v);var b=Object(r.zc)(l,n.activation.apply(c));return[b,b,c]})},e.prototype.getConfig=function(){var e={units:this.units,activation:ar(this.activation),recurrentActivation:ar(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Kt(this.kernelInitializer),recurrentInitializer:Kt(this.recurrentInitializer),biasInitializer:Kt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:$(this.kernelConstraint),recurrentConstraint:$(this.recurrentConstraint),biasConstraint:$(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="LSTMCell",e}(gi);r.td.registerClass(_i);var xi=function(t){function e(e){return 0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new _i(e),t.call(this,e)||this}return a(e,t),e.prototype.call=function(e,n){var i=this;return Object(r.ge)(function(){null!=i.cell.dropoutMask&&(Object(r.jb)(i.cell.dropoutMask),i.cell.dropoutMask=null),null!=i.cell.recurrentDropoutMask&&(Object(r.jb)(i.cell.recurrentDropoutMask),i.cell.recurrentDropoutMask=null);var a=null==n?null:n.mask,o=null==n?null:n.training,s=null==n?null:n.initialState;return t.prototype.call.call(i,e,{mask:a,training:o,initialState:s})})},Object.defineProperty(e.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentActivation",{get:function(){return this.cell.recurrentActivation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"unitForgetBias",{get:function(){return this.cell.unitForgetBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"implementation",{get:function(){return this.cell.implementation},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={units:this.units,activation:ar(this.activation),recurrentActivation:ar(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Kt(this.kernelInitializer),recurrentInitializer:Kt(this.recurrentInitializer),biasInitializer:Kt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:$(this.kernelConstraint),recurrentConstraint:$(this.recurrentConstraint),biasConstraint:$(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return delete n.cell,Object.assign(e,n),e},e.fromConfig=function(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)},e.className="LSTM",e}(mi);r.td.registerClass(xi);var Ei=function(t){function e(e){var n=t.call(this,e)||this;return n.cells=e.cells,n}return a(e,t),Object.defineProperty(e.prototype,"stateSize",{get:function(){for(var t=[],e=0,n=this.cells.slice().reverse();e<n.length;e++){var r=n[e];Array.isArray(r.stateSize)?t.push.apply(t,r.stateSize):t.push(r.stateSize)}return t},enumerable:!0,configurable:!0}),e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){for(var r=(t=t).slice(1),i=[],a=0,o=n.cells.slice().reverse();a<o.length;a++){var s=o[a];Array.isArray(s.stateSize)?i.push(r.splice(0,s.stateSize.length)):i.push(r.splice(0,1))}i.reverse();for(var u,c=[],l=0;l<n.cells.length;++l)s=n.cells[l],r=i[l],u=0===l?[t[0]].concat(r):[u[0]].concat(r),u=s.call(u,e),c.push(u.slice(1));r=[];for(var f=0,h=c.slice().reverse();f<h.length;f++){var p=h[f];r.push.apply(r,p)}return[u[0]].concat(r)})},e.prototype.build=function(t){var e;Yt(t)&&(t=t[0]),t=t;for(var n=0,r=this.cells;n<r.length;n++){var i=r[n];i.build(t),e=Array.isArray(i.stateSize)?i.stateSize[0]:i.stateSize,t=[t[0],e]}this.built=!0},e.prototype.getConfig=function(){for(var e=[],n=0,r=this.cells;n<r.length;n++){var i=r[n];e.push({className:this.getClassName(),config:i.getConfig()})}var a={cells:e},o=t.prototype.getConfig.call(this);return Object.assign(a,o),a},e.fromConfig=function(t,e,n){void 0===n&&(n={});for(var r=[],i=0,a=e.cells;i<a.length;i++){var o=a[i];r.push(cn(o,n))}return new t({cells:r})},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){if(!this.trainable)return[];for(var t=[],e=0,n=this.cells;e<n.length;e++){var r=n[e];t.push.apply(t,r.trainableWeights)}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){for(var t=[],e=0,n=this.cells;e<n.length;e++){var r=n[e];t.push.apply(t,r.nonTrainableWeights)}if(!this.trainable){for(var i=[],a=0,o=this.cells;a<o.length;a++)r=o[a],i.push.apply(i,r.trainableWeights);return i.concat(t)}return t},enumerable:!0,configurable:!0}),e.prototype.getWeights=function(){for(var t=[],e=0,n=this.cells;e<n.length;e++){var r=n[e];t.push.apply(t,r.weights)}return re(t)},e.prototype.setWeights=function(t){for(var e=[],n=0,r=this.cells;n<r.length;n++)for(var i=r[n],a=i.weights.length,o=t.splice(a),s=0;s<i.weights.length;++s)e.push([i.weights[s],o[s]]);ie(e)},e.className="StackedRNNCells",e}(gi);function Si(t,e,n,i){function a(){return Ot(t(),y(e))}if(void 0===n&&(n=null),void 0===i&&(i=1),i>1){for(var o=[],s=0;s<i;s++)o.push(kt(a,t,n));return o.forEach(function(t){return Object(r.Rb)(t)}),o}return Object(r.Rb)(kt(a,t,n))}r.td.registerClass(Ei);var Ni=function(t){function e(e){var n=t.call(this,e)||this;return n.layer=e.layer,n}return a(e,t),e.prototype.build=function(t){this.built=!0},Object.defineProperty(e.prototype,"trainable",{get:function(){return null!=this.layer&&this.layer.trainable},set:function(t){null!=this.layer&&(this.layer.trainable=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.layer.trainableWeights},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.layer.nonTrainableWeights},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"updates",{get:function(){return this.layer._updates},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"losses",{get:function(){return this.layer.losses},enumerable:!0,configurable:!0}),e.prototype.getWeights=function(){return this.layer.getWeights()},e.prototype.setWeights=function(t){this.layer.setWeights(t)},e.prototype.getConfig=function(){var e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.prototype.setFastWeightInitDuringBuild=function(e){t.prototype.setFastWeightInitDuringBuild.call(this,e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)},e.fromConfig=function(t,e,n){void 0===n&&(n={});var r=cn(e.layer,n);delete e.layer;var i={layer:r};return Object.assign(i,e),new t(i)},e}(le),Ii=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n}return a(e,t),e.prototype.build=function(e){if((e=Qt(e)).length<3)throw new w("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(e));this.inputSpec=[{shape:e}];var n=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(n),this.layer.built=!0),t.prototype.build.call(this,e)},e.prototype.computeOutputShape=function(t){var e=[(t=Qt(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){return di(function(t,r){return[Zt(n.layer.call(t,e)),[]]},t=Zt(t),[],!1,null,null,!1,!0)[1]})},e.className="TimeDistributed",e}(Ni);r.td.registerClass(Ii);var Oi=["sum","mul","concat","ave"];var ki=function(t){function e(e){var n=t.call(this,e)||this,r=e.layer.getConfig();if(n.forwardLayer=cn({className:e.layer.getClassName(),config:r}),r.goBackwards=!0!==r.goBackwards,n.backwardLayer=cn({className:e.layer.getClassName(),config:r}),n.forwardLayer.name="forward_"+n.forwardLayer.name,n.backwardLayer.name="backward_"+n.backwardLayer.name,function(t){j(Oi,"BidirectionalMergeMode",t)}(e.mergeMode),n.mergeMode=e.mergeMode,e.weights)throw new _("weights support is not implemented for Bidirectional layer yet.");return n._stateful=e.layer.stateful,n.returnSequences=e.layer.returnSequences,n.returnState=e.layer.returnState,n.supportsMasking=!0,n._trainable=!0,n.inputSpec=e.layer.inputSpec,n.numConstants=null,n}return a(e,t),Object.defineProperty(e.prototype,"trainable",{get:function(){return this._trainable},set:function(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)},enumerable:!0,configurable:!0}),e.prototype.getWeights=function(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())},e.prototype.setWeights=function(t){var e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))},e.prototype.computeOutputShape=function(t){var e,n,r,i=this.forwardLayer.computeOutputShape(t);return Array.isArray(i)&&Array.isArray(i[0])||(i=[i]),i=i,this.returnState?(r=i.slice(1),e=i[0]):e=i[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):I(n)},e.prototype.apply=function(e,n){var r=null==n?null:n.initialState,i=null==n?null:n.constants;null==n&&(n={});var a=pi(e,r,i,this.numConstants);if(e=a.inputs,r=a.initialState,i=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==i)return t.prototype.apply.call(this,e,n);var o=[],s=[];if(null!=r){var u=r.length;if(u%2>0)throw new w("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");n.initialState=r,o.push.apply(o,r);var c=r.map(function(t){return new ae({shape:t.shape})});this.forwardLayer.stateSpec=c.slice(0,u/2),this.backwardLayer.stateSpec=c.slice(u/2),s.push.apply(s,c)}if(null!=i)throw new _("Support for constants in Bidirectional layers is not implemented yet.");for(var l=o[0]instanceof oe,f=0,h=o;f<h.length;f++)if(h[f]instanceof oe!==l)throw new w("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(l){var p=[e].concat(o),d=this.inputSpec.concat(s),m=this.inputSpec;this.inputSpec=d;var g=t.prototype.apply.call(this,p,n);return this.inputSpec=m,g}return t.prototype.apply.call(this,e,n)},e.prototype.call=function(t,e){var n=this;return Object(r.ge)(function(){if(null!=e.mask)throw new _("The support for masking is not implemented for Bidirectional layers yet.");var i,a,o,s,u=e.initialState;if(null==u)i=n.forwardLayer.call(t,e),a=n.backwardLayer.call(t,e);else{var c=u.slice(0,u.length/2),l=u.slice(u.length/2);i=n.forwardLayer.call(t,Object.assign(e,{initialState:c})),a=n.backwardLayer.call(t,Object.assign(e,{initialState:l}))}return n.returnState&&(Array.isArray(i)&&(o=i.slice(1).concat(a.slice(1))),i=i[0],a=a[0]),n.returnSequences&&(a=Object(r.hd)(a,1)),"concat"===n.mergeMode?s=bt([i,a]):"sum"===n.mergeMode?s=Object(r.u)(i,a):"ave"===n.mergeMode?s=Object(r.zc)(y(.5),Object(r.u)(i,a)):"mul"===n.mergeMode?s=Object(r.zc)(i,a):null==n.mergeMode&&(s=[i,a]),n.returnState?null==n.mergeMode?s.concat(o):[s].concat(o):s})},e.prototype.resetStates=function(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()},e.prototype.build=function(t){var e=this;rt(this.forwardLayer.name,function(){e.forwardLayer.build(t)}),rt(this.backwardLayer.name,function(){e.backwardLayer.build(t)}),this.built=!0},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)},enumerable:!0,configurable:!0}),e.prototype.setFastWeightInitDuringBuild=function(e){t.prototype.setFastWeightInitDuringBuild.call(this,e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)},e.prototype.getConfig=function(){var e={mergeMode:this.mergeMode},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.fromConfig=function(t,e){var n=cn(e.layer);if(delete e.layer,null!=e.numConstants)throw new _("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");var r=e;return r.layer=n,new t(r)},e.className="Bidirectional",e}(Ni);function Ai(t){return new ri(t)}function Ci(t){return new oi(t)}function Pi(t){return new ci(t)}function Ti(t){return new hi(t)}function Ri(t){return new ni(t)}function Di(t){return new ai(t)}r.td.registerClass(ki);var Mi=Pi,ji=Ti,Bi=Ri,Li=Di,zi=Object.freeze({inputLayer:function(t){return new pe(t)},elu:function(t){return new yr(t)},reLU:function(t){return new dr(t)},leakyReLU:function(t){return new mr(t)},prelu:function(t){return new gr(t)},softmax:function(t){return new br(t)},thresholdedReLU:function(t){return new vr(t)},conv1d:function(t){return new Ar(t)},conv2d:function(t){return new Ir(t)},conv2dTranspose:function(t){return new Or(t)},separableConv2d:function(t){return new kr(t)},cropping2D:function(t){return new Cr(t)},upSampling2d:function(t){return new Pr(t)},depthwiseConv2d:function(t){return new Tr(t)},activation:function(t){return new jr(t)},dense:function(t){return new Dr(t)},dropout:function(t){return new Rr(t)},flatten:function(t){return new Mr(t)},repeatVector:function(t){return new Br(t)},reshape:function(t){return new Lr(t)},permute:function(t){return new zr(t)},embedding:function(t){return new Fr(t)},add:function(t){return new Vr(t)},average:function(t){return new qr(t)},concatenate:function(t){return new Kr(t)},maximum:function(t){return new $r(t)},minimum:function(t){return new Hr(t)},multiply:function(t){return new Wr(t)},dot:function(t){return new Xr(t)},batchNormalization:function(t){return new Zr(t)},zeroPadding2d:function(t){return new Qr(t)},averagePooling1d:Ai,avgPool1d:function(t){return Ai(t)},avgPooling1d:function(t){return Ai(t)},averagePooling2d:Ci,avgPool2d:function(t){return Ci(t)},avgPooling2d:function(t){return Ci(t)},globalAveragePooling1d:function(t){return new ui(t)},globalAveragePooling2d:function(t){return new fi(t)},globalMaxPooling1d:Pi,globalMaxPooling2d:Ti,maxPooling1d:Ri,maxPooling2d:Di,gru:function(t){return new wi(t)},gruCell:function(t){return new bi(t)},lstm:function(t){return new xi(t)},lstmCell:function(t){return new _i(t)},simpleRNN:function(t){return new vi(t)},simpleRNNCell:function(t){return new yi(t)},rnn:function(t){return new mi(t)},stackedRNNCells:function(t){return new Ei(t)},bidirectional:function(t){return new ki(t)},timeDistributed:function(t){return new Ii(t)},globalMaxPool1d:Mi,globalMaxPool2d:ji,maxPool1d:Bi,maxPool2d:Li,Layer:le,RNN:mi,RNNCell:gi,input:$n});var Fi=Object.freeze({binaryAccuracy:function(t,e){return Ve(t,e)},binaryCrossentropy:function(t,e){return Ke(t,e)},sparseCategoricalAccuracy:function(t,e){return Ge(t,e)},categoricalAccuracy:function(t,e){return We(t,e)},categoricalCrossentropy:function(t,e){return en(t,e)},precision:function(t,e){return $e(t,e)},recall:function(t,e){return He(t,e)},cosineProximity:function(t,e){return Fe(t,e)},meanAbsoluteError:function(t,e){return ke(t,e)},meanAbsolutePercentageError:function(t,e){return Ae(t,e)},MAPE:function(t,e){return Ae(t,e)},mape:function(t,e){return Ae(t,e)},meanSquaredError:function(t,e){return Oe(t,e)},MSE:function(t,e){return Oe(t,e)},mse:function(t,e){return Oe(t,e)}}),Ui=Object.freeze({modelFromJSON:function(t,e){return u(this,void 0,void 0,function(){var n,i,a,o,s,u,l,f;return c(this,function(c){switch(c.label){case 0:return"modelTopology"in t||(t={modelTopology:t}),null!=(n=(t=t).modelTopology).model_config&&(n=n.model_config),i=fn(n),a=cn(i,e),null==t.weightsManifest?[3,2]:[4,r.Pb.loadWeights(t.weightsManifest,t.pathPrefix,a.weights.map(function(t){return t.originalName}))];case 1:for(o=c.sent(),s={},u=0,l=a.weights;u<l.length;u++)f=l[u],s[f.originalName]=o[f.originalName];a.loadWeights(s,null,!0),c.label=2;case 2:return[2,a]}})})}});var Vi=Object.freeze({l1l2:function(t){return new cr(t)},l1:function(t){return function(t){return new cr({l1:null!=t?t.l1:null,l2:0})}(t)},l2:function(t){return function(t){return new cr({l2:null!=t?t.l2:null,l1:0})}(t)}}),Wi=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.model=null,e}return a(e,t),e.prototype.setModel=function(t){if(!(t instanceof zn))throw new Error("model must be a Model, not some other Container");this.model=t},e}(ye),qi=n(52),$i=n(53);n.d(e,"version",function(){return Hi}),n.d(e,"setBackend",function(){return r.ud}),n.d(e,"getBackend",function(){return r.Fb}),n.d(e,"disposeVariables",function(){return r.kb}),n.d(e,"memory",function(){return r.rc}),n.d(e,"version_core",function(){return r.ve}),n.d(e,"nextFrame",function(){return r.Ec}),n.d(e,"environment",function(){return r.qb}),n.d(e,"io",function(){return r.Pb}),n.d(e,"math",function(){return r.lc}),n.d(e,"serialization",function(){return r.td}),n.d(e,"test_util",function(){return r.fe}),n.d(e,"util",function(){return r.qe}),n.d(e,"webgl",function(){return r.we}),n.d(e,"enableProdMode",function(){return r.pb}),n.d(e,"AdadeltaOptimizer",function(){return r.a}),n.d(e,"AdagradOptimizer",function(){return r.b}),n.d(e,"AdamOptimizer",function(){return r.c}),n.d(e,"AdamaxOptimizer",function(){return r.d}),n.d(e,"MomentumOptimizer",function(){return r.i}),n.d(e,"Optimizer",function(){return r.j}),n.d(e,"RMSPropOptimizer",function(){return r.k}),n.d(e,"SGDOptimizer",function(){return r.n}),n.d(e,"Tensor",function(){return r.o}),n.d(e,"TensorBuffer",function(){return r.p}),n.d(e,"variable",function(){return r.te}),n.d(e,"Variable",function(){return r.q}),n.d(e,"Rank",function(){return r.l}),n.d(e,"Reduction",function(){return r.m}),n.d(e,"ENV",function(){return r.f}),n.d(e,"Environment",function(){return r.g}),n.d(e,"KernelBackend",function(){return r.h}),n.d(e,"DataStorage",function(){return r.e}),n.d(e,"image",function(){return r.Ob}),n.d(e,"linalg",function(){return r.Xb}),n.d(e,"losses",function(){return r.jc}),n.d(e,"spectral",function(){return r.Jd}),n.d(e,"op",function(){return r.Lc}),n.d(e,"batchNormalization2d",function(){return r.J}),n.d(e,"batchNormalization3d",function(){return r.K}),n.d(e,"batchNormalization4d",function(){return r.L}),n.d(e,"batchNormalization",function(){return r.I}),n.d(e,"complex",function(){return r.S}),n.d(e,"real",function(){return r.dd}),n.d(e,"imag",function(){return r.Nb}),n.d(e,"concat",function(){return r.T}),n.d(e,"concat1d",function(){return r.U}),n.d(e,"concat2d",function(){return r.V}),n.d(e,"concat3d",function(){return r.W}),n.d(e,"concat4d",function(){return r.X}),n.d(e,"split",function(){return r.Kd}),n.d(e,"conv1d",function(){return r.Y}),n.d(e,"conv2d",function(){return r.Z}),n.d(e,"conv3d",function(){return r.cb}),n.d(e,"conv2dDerFilter",function(){return r.ab}),n.d(e,"depthwiseConv2d",function(){return r.ib}),n.d(e,"separableConv2d",function(){return r.sd}),n.d(e,"conv2dTranspose",function(){return r.bb}),n.d(e,"matMul",function(){return r.kc}),n.d(e,"dot",function(){return r.nb}),n.d(e,"outerProduct",function(){return r.Mc}),n.d(e,"reverse",function(){return r.hd}),n.d(e,"reverse1d",function(){return r.id}),n.d(e,"reverse2d",function(){return r.jd}),n.d(e,"reverse3d",function(){return r.kd}),n.d(e,"reverse4d",function(){return r.ld}),n.d(e,"maxPool",function(){return r.nc}),n.d(e,"avgPool",function(){return r.G}),n.d(e,"pool",function(){return r.Sc}),n.d(e,"slice",function(){return r.Ad}),n.d(e,"slice1d",function(){return r.Bd}),n.d(e,"slice2d",function(){return r.Cd}),n.d(e,"slice3d",function(){return r.Dd}),n.d(e,"slice4d",function(){return r.Ed}),n.d(e,"abs",function(){return r.r}),n.d(e,"acos",function(){return r.s}),n.d(e,"acosh",function(){return r.t}),n.d(e,"asin",function(){return r.B}),n.d(e,"asinh",function(){return r.C}),n.d(e,"atan",function(){return r.D}),n.d(e,"atanh",function(){return r.F}),n.d(e,"ceil",function(){return r.P}),n.d(e,"clipByValue",function(){return r.Q}),n.d(e,"cos",function(){return r.db}),n.d(e,"cosh",function(){return r.eb}),n.d(e,"erf",function(){return r.tb}),n.d(e,"exp",function(){return r.ub}),n.d(e,"expm1",function(){return r.wb}),n.d(e,"floor",function(){return r.Ab}),n.d(e,"log",function(){return r.ac}),n.d(e,"log1p",function(){return r.bc}),n.d(e,"logSigmoid",function(){return r.cc}),n.d(e,"neg",function(){return r.Dc}),n.d(e,"reciprocal",function(){return r.ed}),n.d(e,"round",function(){return r.nd}),n.d(e,"rsqrt",function(){return r.od}),n.d(e,"sigmoid",function(){return r.wd}),n.d(e,"sign",function(){return r.xd}),n.d(e,"sin",function(){return r.yd}),n.d(e,"sinh",function(){return r.zd}),n.d(e,"softplus",function(){return r.Gd}),n.d(e,"sqrt",function(){return r.Ld}),n.d(e,"square",function(){return r.Md}),n.d(e,"step",function(){return r.Rd}),n.d(e,"tan",function(){return r.Wd}),n.d(e,"tanh",function(){return r.Xd}),n.d(e,"all",function(){return r.x}),n.d(e,"any",function(){return r.y}),n.d(e,"argMax",function(){return r.z}),n.d(e,"argMin",function(){return r.A}),n.d(e,"logSumExp",function(){return r.ec}),n.d(e,"max",function(){return r.mc}),n.d(e,"mean",function(){return r.qc}),n.d(e,"min",function(){return r.sc}),n.d(e,"moments",function(){return r.xc}),n.d(e,"sum",function(){return r.Vd}),n.d(e,"prod",function(){return r.Xc}),n.d(e,"equal",function(){return r.rb}),n.d(e,"equalStrict",function(){return r.sb}),n.d(e,"greater",function(){return r.Ib}),n.d(e,"greaterEqual",function(){return r.Jb}),n.d(e,"greaterEqualStrict",function(){return r.Kb}),n.d(e,"greaterStrict",function(){return r.Lb}),n.d(e,"less",function(){return r.Tb}),n.d(e,"lessEqual",function(){return r.Ub}),n.d(e,"lessEqualStrict",function(){return r.Vb}),n.d(e,"lessStrict",function(){return r.Wb}),n.d(e,"notEqual",function(){return r.Gc}),n.d(e,"notEqualStrict",function(){return r.Hc}),n.d(e,"add",function(){return r.u}),n.d(e,"addN",function(){return r.v}),n.d(e,"addStrict",function(){return r.w}),n.d(e,"atan2",function(){return r.E}),n.d(e,"div",function(){return r.lb}),n.d(e,"divStrict",function(){return r.mb}),n.d(e,"floorDiv",function(){return r.Bb}),n.d(e,"maximum",function(){return r.oc}),n.d(e,"maximumStrict",function(){return r.pc}),n.d(e,"minimum",function(){return r.tc}),n.d(e,"minimumStrict",function(){return r.uc}),n.d(e,"mod",function(){return r.vc}),n.d(e,"modStrict",function(){return r.wc}),n.d(e,"mul",function(){return r.zc}),n.d(e,"mulStrict",function(){return r.Ac}),n.d(e,"pow",function(){return r.Tc}),n.d(e,"powStrict",function(){return r.Uc}),n.d(e,"squaredDifference",function(){return r.Nd}),n.d(e,"squaredDifferenceStrict",function(){return r.Od}),n.d(e,"sub",function(){return r.Td}),n.d(e,"subStrict",function(){return r.Ud}),n.d(e,"elu",function(){return r.ob}),n.d(e,"leakyRelu",function(){return r.Sb}),n.d(e,"prelu",function(){return r.Vc}),n.d(e,"relu",function(){return r.fd}),n.d(e,"selu",function(){return r.rd}),n.d(e,"logicalAnd",function(){return r.fc}),n.d(e,"logicalNot",function(){return r.gc}),n.d(e,"logicalOr",function(){return r.hc}),n.d(e,"logicalXor",function(){return r.ic}),n.d(e,"where",function(){return r.xe}),n.d(e,"whereAsync",function(){return r.ye}),n.d(e,"buffer",function(){return r.N}),n.d(e,"toPixels",function(){return r.je}),n.d(e,"print",function(){return r.Wc}),n.d(e,"batchToSpaceND",function(){return r.M}),n.d(e,"cast",function(){return r.O}),n.d(e,"clone",function(){return r.R}),n.d(e,"cumsum",function(){return r.fb}),n.d(e,"depthToSpace",function(){return r.hb}),n.d(e,"expandDims",function(){return r.vb}),n.d(e,"eye",function(){return r.xb}),n.d(e,"fromPixels",function(){return r.Cb}),n.d(e,"multinomial",function(){return r.Cc}),n.d(e,"oneHot",function(){return r.Ic}),n.d(e,"pad",function(){return r.Nc}),n.d(e,"pad1d",function(){return r.Oc}),n.d(e,"pad2d",function(){return r.Pc}),n.d(e,"pad3d",function(){return r.Qc}),n.d(e,"pad4d",function(){return r.Rc}),n.d(e,"rand",function(){return r.Zc}),n.d(e,"randomNormal",function(){return r.ad}),n.d(e,"randomUniform",function(){return r.bd}),n.d(e,"reshape",function(){return r.gd}),n.d(e,"spaceToBatchND",function(){return r.Hd}),n.d(e,"squeeze",function(){return r.Pd}),n.d(e,"stack",function(){return r.Qd}),n.d(e,"tile",function(){return r.he}),n.d(e,"truncatedNormal",function(){return r.ne}),n.d(e,"unstack",function(){return r.pe}),n.d(e,"setdiff1dAsync",function(){return r.vd}),n.d(e,"fill",function(){return r.zb}),n.d(e,"linspace",function(){return r.Yb}),n.d(e,"ones",function(){return r.Jc}),n.d(e,"range",function(){return r.cd}),n.d(e,"scalar",function(){return r.pd}),n.d(e,"tensor",function(){return r.Yd}),n.d(e,"tensor1d",function(){return r.Zd}),n.d(e,"tensor2d",function(){return r.ae}),n.d(e,"tensor3d",function(){return r.be}),n.d(e,"tensor4d",function(){return r.ce}),n.d(e,"tensor5d",function(){return r.de}),n.d(e,"tensor6d",function(){return r.ee}),n.d(e,"zeros",function(){return r.ze}),n.d(e,"onesLike",function(){return r.Kc}),n.d(e,"zerosLike",function(){return r.Ae}),n.d(e,"transpose",function(){return r.me}),n.d(e,"softmax",function(){return r.Fd}),n.d(e,"logSoftmax",function(){return r.dc}),n.d(e,"localResponseNormalization",function(){return r.Zb}),n.d(e,"norm",function(){return r.Fc}),n.d(e,"gather",function(){return r.Db}),n.d(e,"unsortedSegmentSum",function(){return r.oe}),n.d(e,"basicLSTMCell",function(){return r.H}),n.d(e,"multiRNNCell",function(){return r.Bc}),n.d(e,"movingAverage",function(){return r.yc}),n.d(e,"stridedSlice",function(){return r.Sd}),n.d(e,"topk",function(){return r.ke}),n.d(e,"scatterND",function(){return r.qd}),n.d(e,"fft",function(){return r.yb}),n.d(e,"ifft",function(){return r.Mb}),n.d(e,"rfft",function(){return r.md}),n.d(e,"irfft",function(){return r.Qb}),n.d(e,"sparseToDense",function(){return r.Id}),n.d(e,"gatherND",function(){return r.Eb}),n.d(e,"train",function(){return r.le}),n.d(e,"tidy",function(){return r.ge}),n.d(e,"keep",function(){return r.Rb}),n.d(e,"dispose",function(){return r.jb}),n.d(e,"time",function(){return r.ie}),n.d(e,"profile",function(){return r.Yc}),n.d(e,"customGrad",function(){return r.gb}),n.d(e,"grad",function(){return r.Gb}),n.d(e,"grads",function(){return r.Hb}),n.d(e,"valueAndGrad",function(){return r.re}),n.d(e,"valueAndGrads",function(){return r.se}),n.d(e,"variableGrads",function(){return r.ue}),n.d(e,"constraints",function(){return G}),n.d(e,"initializers",function(){return Xt}),n.d(e,"layers",function(){return zi}),n.d(e,"metrics",function(){return Fi}),n.d(e,"models",function(){return Ui}),n.d(e,"regularizers",function(){return Vi}),n.d(e,"CallbackList",function(){return ve}),n.d(e,"CustomCallback",function(){return xe}),n.d(e,"History",function(){return _e}),n.d(e,"Callback",function(){return Wi}),n.d(e,"InputSpec",function(){return ae}),n.d(e,"SymbolicTensor",function(){return oe}),n.d(e,"Model",function(){return zn}),n.d(e,"input",function(){return $n}),n.d(e,"loadModel",function(){return qn}),n.d(e,"model",function(){return Vn}),n.d(e,"registerCallbackConstructor",function(){return Hn}),n.d(e,"sequential",function(){return Wn}),n.d(e,"RNN",function(){return mi}),n.d(e,"Sequential",function(){return Un}),n.d(e,"LayerVariable",function(){return ne}),n.d(e,"version_layers",function(){return"0.9.2"}),n.d(e,"FrozenModel",function(){return qi.a}),n.d(e,"loadFrozenModel",function(){return qi.b}),n.d(e,"loadTfHubModule",function(){return qi.c}),n.d(e,"version_converter",function(){return qi.d}),n.d(e,"data",function(){return $i});var Hi={"tfjs-core":r.ve,"tfjs-data":$i.version_data,"tfjs-layers":"0.9.2","tfjs-converter":qi.d,tfjs:"0.14.2"}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){var r,i,a;i=[e,n(135),n(222)],void 0===(a="function"==typeof(r=function(t,e,r){"use strict";var i=n(284);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Tensor",{enumerable:!0,get:function(){return e.default}}),Object.defineProperty(t,"Function",{enumerable:!0,get:function(){return r.default}}),e=i(e),r=i(r)})?r.apply(e,i):r)||(t.exports=a)},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}}])});
//# sourceMappingURL=core.web.js.map

/***/ }),

/***/ "./src/baseMemCache.js":
/*!*****************************!*\
  !*** ./src/baseMemCache.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class BaseMemCache {
    constructor(zone = '') {
      this.zone = zone;
    }

    async getItem(key, asBuffer = false) {
      throw Error('need to implement');
    }

    async setItem(key, data) {
      throw Error('need to implement');
    }

  }

  _exports.default = BaseMemCache;
});

/***/ }),

/***/ "./src/function.js":
/*!*************************!*\
  !*** ./src/function.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! causal-net.core */ "../causality-core/dist/@causalNet/core.web.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _causalNet) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class Function extends _causalNet.Function {
    constructor() {
      super();
    }

  }

  _exports.default = Function;
});

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./memdownCache */ "./src/memdownCache.js"), __webpack_require__(/*! ./baseMemCache */ "./src/baseMemCache.js"), __webpack_require__(/*! ./function */ "./src/function.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _memdownCache, _baseMemCache, _function) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "MemDownCache", {
    enumerable: true,
    get: function () {
      return _memdownCache.default;
    }
  });
  Object.defineProperty(_exports, "BaseMemCache", {
    enumerable: true,
    get: function () {
      return _baseMemCache.default;
    }
  });
  Object.defineProperty(_exports, "Function", {
    enumerable: true,
    get: function () {
      return _function.default;
    }
  });
  _memdownCache = _interopRequireDefault(_memdownCache);
  _baseMemCache = _interopRequireDefault(_baseMemCache);
  _function = _interopRequireDefault(_function);
});

/***/ }),

/***/ "./src/memdownCache.js":
/*!*****************************!*\
  !*** ./src/memdownCache.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./baseMemCache */ "./src/baseMemCache.js"), __webpack_require__(/*! levelup */ "../../node_modules/levelup/lib/levelup.js"), __webpack_require__(/*! memdown */ "../../node_modules/memdown/memdown.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _baseMemCache, _levelup, _memdown) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _baseMemCache = _interopRequireDefault(_baseMemCache);
  _levelup = _interopRequireDefault(_levelup);
  _memdown = _interopRequireDefault(_memdown);

  class MemoryCache extends _baseMemCache.default {
    constructor(zone) {
      super(zone);
      this.cache = (0, _levelup.default)((0, _memdown.default)());
    }

    async getItem(key, asBuffer = false) {
      return new Promise((resolve, reject) => {
        this.cache.get(key, {
          asBuffer
        }, (err, data) => {
          if (err) {
            reject('error write');
          } else {
            resolve({
              [key]: data
            });
          }
        });
      });
    }

    async setItem(key, data) {
      return new Promise((resolve, reject) => {
        this.cache.put(key, data, err => {
          if (err) {
            reject('error write');
          } else {
            resolve({
              [key]: data
            });
          }
        });
      });
    }

  }

  const MemDownCache = new MemoryCache();
  var _default = MemDownCache;
  _exports.default = _default;
});

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,