{"version":3,"sources":["webpack://@causalNet/pipeline/webpack/universalModuleDefinition","webpack://@causalNet/pipeline/webpack/bootstrap","webpack://@causalNet/pipeline/external \"causal-net.core\"","webpack://@causalNet/pipeline/external \"causal-net.storage\"","webpack://@causalNet/pipeline/./node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack://@causalNet/pipeline/./src/causality.js","webpack://@causalNet/pipeline/./src/function.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","obj","default","Tensor","constructor","netConfig","netParams","storage","super","F","Function","R","CoreFunction","IndexDBStorage","HyperParameters","getHyperParameter","BasePipeline","getPipeline","setOrInitParams","flattenParams","params","MapValues","objOrArray","Array","isArray","values","Flatten","pv","isTensor","flatten","reduce","v","res","is","layer","layerConfigure","layerParameters","Name","Type","Parameters","Flow","console","log","OpsRuner","addIndex","__","result","trace","node","idx","Parameter","T","Op","Args","shape","[object Object]","pipeline","pipeParams","fromPairs","filter","k","undefined","map","SetOrInit","mainValue","subVal","keys","keyMainValSubVal","prop","propOr","mainVal","isParameter","paramShape","isNil","variable","randomNormal","tensor","reshape","makePredict","samples","numSamples","f","L","Datasize","Pipeline","parameterAcquisition","pipeValue","PipeInput","traces","tidy","layerOutput","Input","push","pipeOutput","logProb","sub","logSumExp","predict","argMax","loss","batchSamples","batchLabels","numSample","labelTensor","sampleTensor","asType","likelihood","neg","mul","mean","SampleGeneratorFn","batchSize","numEpochs","lr","start","Date","averageLoss","optimizer","train","adam","epochIdx","range","time","toISOString","elapse","sampleGenerator","minimize","dataSync","Promise","resolve","reject","TestSampleGeneratorFn","testBatchSize","numClasses","testSampleGenerator","testResult","zeros","onehotPredict","oneHot","print","sum","add","data","pass","accuracy","getParams","async","from","kVals","toPairs","val","fileName","writeFile","JSON","stringify","_params","readFile","parse","BaseFunction","len","all","Number","getTraverse","curry","item","pipe","apply","pipelineItem","hyperParameters","doReplaceIfMatch","String","startsWith","slice","Infinity","replaceHyperParameter","size","dtype"],"mappings":"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","file":"@causalNet/pipeline/pipeline.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"causal-net.core\"), require(\"causal-net.storage\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"causal-net.core\", \"causal-net.storage\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@causalNet/pipeline\"] = factory(require(\"causal-net.core\"), require(\"causal-net.storage\"));\n\telse\n\t\troot[\"@causalNet/pipeline\"] = factory(root[\"causal-net.core\"], root[\"causal-net.storage\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","import {Tensor} from 'causal-net.core';\nimport {IndexDBStorage} from 'causal-net.storage';\nimport {default as Function} from './function';\n\nexport default class CausalNet extends Tensor{\n    /**\n     * @param  {} netConfig\n     * @param  {} netParams\n     */\n    constructor( netConfig, netParams=null, storage=null ){\n        super();\n        this.F = new Function();\n        this.R = this.F.CoreFunction;\n        this.storage = storage || IndexDBStorage;\n        this.HyperParameters = this.F.getHyperParameter(netConfig);\n        this.BasePipeline = this.F.getPipeline(netConfig);\n        this.netParams = this.setOrInitParams(this.BasePipeline, netParams);\n        this.flattenParams = this.flattenParams(this.netParams);        \n    }\n\n    flattenParams(params){\n        const R = this.R, F = this.F;\n        const MapValues = (objOrArray)=>Array.isArray(objOrArray)?objOrArray:Object.values(objOrArray);\n        const Flatten = (pv)=>{\n            if(F.isTensor(pv)){\n                return pv;\n            }\n            else{\n                let values = MapValues(pv);\n                let flatten = values.reduce((flatten, v)=>{\n                    let res = Flatten(v);\n                    if(R.is(Array, res)){\n                        flatten = [...flatten, ...res];\n                    }\n                    else{\n                        flatten = [...flatten, res];\n                    }\n                    return flatten;\n                }, []);\n                return flatten;\n            }\n        };\n        let values = MapValues(params);\n        \n        return values.reduce((flatten,v)=>[...flatten, ...Flatten(v)],[]);\n    }\n\n    layer(value, layerConfigure, layerParameters){\n        const R = this.R;\n        const {Name, Type, Parameters, Flow} = layerConfigure;\n        console.log({Name, Type, Parameters, Flow});\n        const OpsRuner = R.addIndex(R.reduce)(R.__,{result: value, trace: {}}, Flow);\n        var {result, trace} = OpsRuner(({result, trace}, node, idx)=>{\n            if(node.Parameter){\n                result = this.T[node.Op](result, layerParameters[node.Parameter], ...node.Args);\n            }\n            else{\n                result = this.T[node.Op](result, ...node.Args);    \n            };\n            trace[idx] = result.shape;\n            return {result, trace};\n        });\n        return {[Name]: result, trace};\n    }\n\n    setOrInitParams(pipeline, netParams){\n        const R = this.R, T = this.T, F = this.F;\n        let pipeParams = R.fromPairs(R.filter(([k,v])=>v !== undefined,\n                                R.map(R.__, pipeline)(p=>[p.Name, p.Parameters])));\n        const SetOrInit = (mainValue, subVal)=>{\n            let keys = R.keys(mainValue);\n            let keyMainValSubVal = R.map((k)=> [k, R.prop(k, mainValue), R.propOr(null, k, subVal)], keys);\n            const ValMapping = ([key, mainVal, subVal])=>{\n                if(F.isParameter(mainVal)){\n                    const paramShape = mainVal;\n                    if(R.isNil(subVal)){\n                        return [key, T.variable(T.randomNormal(paramShape))];\n                    }\n                    else{\n                        return [key, T.variable(T.tensor(subVal).reshape(paramShape))];\n                    }\n                }\n                else{\n                    return [key, SetOrInit(mainVal, subVal)];\n                }\n            };\n            return R.fromPairs(R.map(ValMapping, keyMainValSubVal));\n        };\n        return SetOrInit(pipeParams, netParams);\n    }\n\n    /**\n     * @param  {} samples\n     * @param  {} numSamples=1\n     */\n    makePredict(samples, numSamples=1){\n        const T = this.T, f = this.F, l = this.L;\n        this.HyperParameters.Datasize = numSamples;\n        const Pipeline = f.parameterAcquisition(this.BasePipeline, this.HyperParameters);\n        console.log(({Pipeline}));\n        let pipeValue = {PipeInput: samples}, traces = [], netParams = this.netParams;\n        return T.tidy(()=>{\n            for(let layer of Pipeline){\n                let layerOutput = this.layer(pipeValue[layer.Input], layer, netParams[layer.Name]);\n                pipeValue[layer.Name] = layerOutput[layer.Name];\n                traces.push({[layer.Name]: layerOutput.trace});\n            }\n            console.log({traces});\n            let pipeOutput = pipeValue['PipeOutput'];\n            let logProb = pipeOutput.sub(T.logSumExp(pipeOutput, 1, true));\n            let predict = logProb.argMax(1);\n            return {logProb, predict};\n        });\n    }\n    /**\n     * @param  {} sampleBatch\n     * @param  {} labelBatch\n     * @param  {} numSample\n     */\n    loss(batchSamples, batchLabels, numSample){\n        const T = this.T;\n        let labelTensor  = T.tensor(batchLabels).reshape([numSample, -1]);\n        let sampleTensor = T.tensor(batchSamples).asType('float32'); \n        const {logProb} = this.makePredict(sampleTensor, numSample);\n        const likelihood = logProb.neg().mul(labelTensor);\n        const loss = likelihood.mean();\n        return loss;\n    };\n    /**\n     * @param  {} SampleGeneratorFn\n     * @param  {} batchSize\n     * @param  {} numEpochs=2\n     * @param  {} lr=0.01\n     */\n    async train(SampleGeneratorFn, batchSize, numEpochs = 2, lr=0.001){\n        const T = this.T, F = this.F, R = this.R;\n        const start = new Date();\n        let loss = [], averageLoss = [];\n        const optimizer = T.train.adam(lr);\n        for(let epochIdx of F.range(numEpochs)){\n            console.log({epochIdx, averageLoss, time: new Date().toISOString(), \n                         start: start.toISOString(), elapse: (new Date() - start)/1000});\n            const sampleGenerator = SampleGeneratorFn(batchSize);\n            for await (let [batchSamples, batchLabels] of sampleGenerator){\n                optimizer.minimize(()=>{\n                    let l = this.loss(batchSamples, batchLabels, batchSize);\n                    loss = [...loss, ...l.dataSync()];\n                    console.log({loss});\n                    return l.asType('float32');\n                });\n            }\n            averageLoss = [...averageLoss, R.mean(loss)];\n            loss = [];\n        }\n        return new Promise((resolve, reject)=>{\n            resolve({averageLoss});\n        });\n    };\n\n    async test(TestSampleGeneratorFn, testBatchSize, numClasses=10){\n        const T = this.T, F = this.F, R = this.R;\n        const testSampleGenerator = TestSampleGeneratorFn(testBatchSize);\n        let testResult = T.zeros([1]);\n        for await (let [batchSamples, batchLabels] of testSampleGenerator){\n            let labelTensor  = T.tensor(batchLabels).reshape([testBatchSize, numClasses]);\n            let sampleTensor = T.tensor(batchSamples).asType('float32'); \n            const {predict} = this.makePredict(sampleTensor, testBatchSize);\n            let onehotPredict = T.oneHot(predict, numClasses);\n            onehotPredict.print();\n            labelTensor.print();\n            onehotPredict.mul(labelTensor).sum().print();\n            testResult = testResult.add(onehotPredict.mul(labelTensor).sum());\n        }\n        let result = await testResult.data();\n        let pass = result[0];\n        let accuracy = pass/testBatchSize;\n        return {accuracy, pass};        \n    }\n\n    async getParams(){\n        const F = this.F, R = this.R;\n        const getParams = async (params)=>{\n            if(F.isTensor(params)){\n                return Array.from(await params.data());\n            }\n            else{\n                let kVals = R.toPairs(params);\n                let res = {};\n                for(let [k, val] of kVals){\n                    res[k] = await getParams(val); \n                }\n                return res;\n            }\n        };\n        return await getParams(this.netParams);\n    }\n    \n    async saveParams(fileName='./save.model'){\n        const params = await this.getParams();\n        console.log({params});\n        return await this.storage.writeFile(fileName, JSON.stringify(params));\n    }\n    async loadParams(fileName){\n        let _params = await this.storage.readFile(fileName);\n        console.log({_params});\n        let params = JSON.parse(_params);\n        this.setOrInitParams(this.BasePipeline, params);\n        return await this.getParams();\n    }\n}","import {Function as BaseFunction} from 'causal-net.core';\n\nexport default class Function extends BaseFunction{\n    constructor(){\n        super();\n    }\n\n    isTensor(val){\n        // return val instanceof this&& \n        return val.shape !== undefined;\n    }\n    range(len){\n        return this.R.range(0, len);\n    }\n\n    isParameter(val){\n        const R = this.R;\n        return R.is(Array)(val) && R.all(R.is(Number), val);\n    }\n\n    getPipeline(netConfig){\n        //TODO: make assertor\n        return this.R.prop('Pipeline', netConfig);\n    }\n    \n    getHyperParameter(netConfig){\n        //TODO: make assertor\n        return this.R.prop('HyperParameters', netConfig);\n    }\n    \n    getTraverse(){\n        return R.curry(function(keys, item){\n            R.pipe.apply(null, R.map(R.prop, keys))(item);\n        }); \n    }\n    \n    parameterAcquisition(pipelineItem, hyperParameters){\n        const R = this.R; \n        function replaceIfMatch(value, hyperParameters){\n            if(R.is(String, value) && R.startsWith('$', value)){\n                const key = R.slice(1, Infinity, value);\n                return R.prop(key, hyperParameters);\n            }\n            return value;\n        }\n        const doReplaceIfMatch = R.curry(replaceIfMatch)(R.__, hyperParameters);\n        function replaceHyperParameter(pipelineItem){\n            if(R.is(Array, pipelineItem) || R.is(Object, pipelineItem)){\n                return R.map(replaceHyperParameter, pipelineItem);\n            }\n            else{\n                return doReplaceIfMatch(pipelineItem);\n            }\n        }\n        return replaceHyperParameter(pipelineItem);\n    }\n\n    isTensor(object){\n        return object.size !== undefined && object.shape !== undefined && object.dtype !== undefined;\n    }\n}"],"sourceRoot":""}